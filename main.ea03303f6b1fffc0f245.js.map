{"version":3,"sources":["webpack:///./src/app/core/services/now-playlist.service.ts","webpack:///./src/app/core/services/version-checker.service.ts","webpack:///./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/concatAll.js","webpack:///./src/app/core/store/now-playlist/now-playlist.actions.ts","webpack:///./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js","webpack:///./src/app/core/store/app-player/app-player.reducer.ts","webpack:///./src/app/core/store/user-profile/user-profile.selectors.ts","webpack:///./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js","webpack:///./src/app/core/services/youtube-data-api/index.ts","webpack:///./node_modules/rxjs/_esm2015/internal/config.js","webpack:///./src/app/containers/playlist-view/index.ts","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/Action.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js","webpack:///./src/app/shared/directives/icon/icon.directive.ts.IconComponent.html","webpack:///./node_modules/ngx-tooltip/Tooltip.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js","webpack:///./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js","webpack:///./src/app/shared/components/button-group/button-group.component.ts","webpack:///./src/app/core/api/app-player.api.ts","webpack:///./node_modules/ngx-tooltip/index.js","webpack:///./node_modules/rxjs/_esm2015/internal/Subscriber.js","webpack:///./src/app/core/store/user-profile/index.ts","webpack:///./src/app/core/store/user-profile/user-profile.reducer.ts","webpack:///./node_modules/@angular/core/fesm2015/core.js","webpack:///./src/app/core/services/analytics.service.ts","webpack:///./src/app/core/services/youtube.search.ts","webpack:///./node_modules/@ngrx/store-devtools/fesm2015/store-devtools.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js","webpack:///./src/app/containers/app-navbar/app-navbar-user/app-navbar-user.component.ts","webpack:///./src/app/containers/app-navbar/app-navbar-user/app-navbar-user.component.ts.AppNavbarUserComponent.html","webpack:///./src/app/containers/app-navbar/app-navbar-menu/app-navbar-menu.component.ts","webpack:///./src/app/containers/app-navbar/app-navbar-menu/app-navbar-menu.component.ts.AppNavbarMenuComponent.html","webpack:///./src/app/containers/app-navbar/app-navbar.component.ts.AppNavbarComponent.html","webpack:///./src/app/core/store/now-playlist/index.ts","webpack:///./src/app/shared/utils/data.utils.ts","webpack:///./src/app/containers/app-navbar/index.ts","webpack:///./src/environments/environment.ts","webpack:///./node_modules/ngx-tooltip/TooltipContent.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js","webpack:///./src/app/shared/pipes/videoToThumb.pipe.ts","webpack:///./src/app/shared/utils/media.utils.ts","webpack:///./node_modules/rxjs/_esm2015/internal/observable/from.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromObservable.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromPromise.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isIterable.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromIterable.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/async.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isArray.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/pluck.js","webpack:///./node_modules/@ngrx/store/fesm2015/store.js","webpack:///./src/app/containers/playlist-view/playlist-view.component.ts","webpack:///./src/app/core/resolvers/playlist-videos.resolver.ts","webpack:///./node_modules/rxjs/_esm2015/internal/observable/empty.js","webpack:///./src/app/shared/components/playlist-viewer/playlist-cover.component.ts","webpack:///./src/app/shared/components/playlist-viewer/playlist-cover.component.ts.PlaylistCoverComponent.html","webpack:///./src/app/shared/components/playlist-viewer/playlist-viewer.component.ts","webpack:///./src/app/shared/components/playlist-viewer/playlist-viewer.component.ts.PlaylistViewerComponent.html","webpack:///./src/app/containers/playlist-view/playlist-view.component.ts.PlaylistViewComponent.html","webpack:///./src/app/core/resolvers/playlist.resolver.ts","webpack:///./node_modules/rxjs/_esm2015/internal/observable/concat.js","webpack:///./node_modules/rxjs/_esm2015/internal/Observable.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/canReportError.js","webpack:///./src/app/core/services/user-profile.service.ts","webpack:///./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js","webpack:///./node_modules/@angular/common/fesm2015/http.js","webpack:///./node_modules/rxjs/_esm2015/internal/Scheduler.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/take.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/catchError.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/scan.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/noop.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/of.js","webpack:///./node_modules/rxjs/_esm2015/internal/symbol/iterator.js","webpack:///./src/app/shared/index.ts","webpack:///./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js","webpack:///./node_modules/ngx-infinite-scroll/modules/ngx-infinite-scroll.js","webpack:///./src/app/app.themes.ts","webpack:///./src/app/core/store/app-core/app-core.reducer.ts","webpack:///./src/app/core/store/store.utils.ts","webpack:///./node_modules/rxjs/_esm2015/internal/util/hostReportError.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/defer.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isNumeric.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/timer.js","webpack:///./src/app/core/store/now-playlist/now-playlist.reducer.ts","webpack:///./node_modules/ngx-youtube-player/esm2015/ngx-youtube-player.js","webpack:///./src/app/core/api/app.api.ts","webpack:///./node_modules/@angular/common/fesm2015/common.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/identity.js","webpack:///./node_modules/ngrx-store-localstorage/dist/index.js","webpack:///./src/app/core/store/app-player/app-player.selectors.ts","webpack:///./src/app/core/store/app-player/index.ts","webpack:///./node_modules/rxjs/_esm2015/internal/observable/merge.js","webpack:///./src/app/containers/playlist-view/playlist-view.proxy.ts","webpack:///./src/app/core/store/app-core/app-core.actions.ts","webpack:///./node_modules/rxjs/_esm2015/internal/Notification.js","webpack:///./node_modules/rxjs/_esm2015/internal/Subject.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/scalar.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isObject.js","webpack:///./src/app/shared/components/youtube-list/youtube-list.ts","webpack:///./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/groupBy.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/materialize.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js","webpack:///./node_modules/@ngrx/effects/fesm2015/effects.js","webpack:///./src/app/core/store/app-core/app-core.selectors.ts","webpack:///./src/app/core/store/app-core/index.ts","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js","webpack:///./src/app/shared/components/youtube-media/youtube-media.ts","webpack:///./src/app/shared/components/youtube-media/youtube-media.html","webpack:///./src/app/shared/pipes/isInQueue.pipe.ts","webpack:///./src/app/shared/components/youtube-list/youtube-list.ts.YoutubeListComponent.html","webpack:///./src/app/core/services/youtube-api.service.ts","webpack:///./src/app/core/services/media-parser.service.ts","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/concatMap.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isPromise.js","webpack:///./node_modules/@angular/platform-browser/fesm2015/platform-browser.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/core/services/index.ts","webpack:///./node_modules/ngx-typeahead/esm2015/ngx-typeahead.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/concat.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/switchMap.js","webpack:///./src/app/containers/app-navbar/app-navbar.component.ts","webpack:///./src/app/core/services/youtube-videos-info.service.ts","webpack:///./node_modules/rxjs/_esm2015/internal/Observer.js","webpack:///./src/app/core/effects/now-playlist.effects.ts","webpack:///./src/app/core/services/gapi-loader.service.ts","webpack:///./src/app/shared/components/button-group/button-group.component.ts.ButtonGroupComponent.html","webpack:///./src/app/shared/directives/icon/icon.directive.ts","webpack:///./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/EmptyError.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/first.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/takeLast.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/every.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/finalize.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/last.js","webpack:///./node_modules/@angular/router/fesm2015/router.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/startWith.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/reduce.js","webpack:///./src/app/core/store/router-store/router-store.actions.ts","webpack:///./src/app/core/store/router-store/router-store.reducer.ts","webpack:///./src/app/core/store/router-store/index.ts","webpack:///./node_modules/rxjs/_esm2015/internal/ReplaySubject.js","webpack:///./node_modules/rxjs/_esm2015/internal/symbol/observable.js","webpack:///./src/app/core/store/now-playlist/now-playlist.selectors.ts","webpack:///./src/app/core/services/youtube-player.service.ts","webpack:///./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/map.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/pipe.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isFunction.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/multicast.js","webpack:///./node_modules/memo-decorator/index.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js","webpack:///./src/app/core/services/authorization.service.ts","webpack:///./node_modules/rxjs/_esm2015/internal/operators/filter.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js","webpack:///./node_modules/@angular/router/router.d.ts.ɵEmptyOutletComponent.html","webpack:///./node_modules/rxjs/_esm2015/internal/operators/observeOn.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/queue.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/_esm2015/internal/Subscription.js","webpack:///./src/app/shared/components/youtube-playlist/youtube-playlist.ts","webpack:///./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js","webpack:///./node_modules/@angular/forms/fesm2015/forms.js","webpack:///./node_modules/ngrx-action-creator-factory/ngrx-action-creator-factory.js","webpack:///./src/app/shared/pipes/toFriendlyDuration.pipe.ts","webpack:///./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isDate.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/timeout.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/retry.js","webpack:///./node_modules/lodash.memoize/index.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/tap.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/share.js","webpack:///./src/app/core/store/app-player/app-player.actions.ts","webpack:///./node_modules/rxjs/_esm2015/internal/operators/refCount.js","webpack:///./src/app/core/store/user-profile/user-profile.actions.ts","webpack:///./src/app/shared/components/youtube-playlist/youtube-playlist.html","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js","webpack:///./node_modules/rxjs/_esm2015/internal/observable/fromArray.js","webpack:///./node_modules/rxjs/_esm2015/internal/util/isScheduler.js","webpack:///./node_modules/ngx-tooltip/TooltipContent.d.ts.TooltipContent.html","webpack:///./node_modules/rxjs/_esm2015/internal/observable/throwError.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/skip.js","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.component.ts","webpack:///./node_modules/ngx-typeahead/ngx-typeahead.d.ts.ɵa.html","webpack:///./src/app/containers/app-search/player-search/player-search.component.ts","webpack:///./src/app/containers/app-search/player-search/player-search.component.ts.PlayerSearchComponent.html","webpack:///./src/app/core/store/player-search/player-search.actions.ts","webpack:///./src/app/core/store/player-search/player-search.interfaces.ts","webpack:///./src/app/core/store/player-search/player-search.reducer.ts","webpack:///./src/app/core/store/player-search/player-search.selectors.ts","webpack:///./src/app/containers/app-search/search-navigator/search-navigator.component.ts","webpack:///./src/app/containers/app-search/search-navigator/search-navigator.component.ts.SearchNavigatorComponent.html","webpack:///./src/app/containers/app-search/app-search.component.ts","webpack:///./src/app/containers/app-search/app-search.component.ts.AppSearchComponent.html","webpack:///./src/app/shared/components/loading-indicator/loading-indicator.component.ts","webpack:///./src/app/shared/components/loading-indicator/loading-indicator.component.ts.LoadingIndicatorComponent.html","webpack:///./src/app/containers/app-search/youtube-videos/youtube-videos.component.ts","webpack:///./src/app/containers/app-search/youtube-videos/youtube-videos.component.ts.YoutubeVideosComponent.html","webpack:///./src/app/containers/app-search/youtube-playlists/youtube-playlists.component.ts","webpack:///./src/app/containers/app-search/youtube-playlists/youtube-playlists.component.ts.YoutubePlaylistsComponent.html","webpack:///./src/app/core/components/app-player/image-blur/image-blur.component.ts","webpack:///./src/app/core/components/app-player/image-blur/image-blur.component.ts.ImageBlurComponent.html","webpack:///./src/app/core/components/app-player/player-resizer/player-resizer.component.ts","webpack:///./src/app/core/components/app-player/player-resizer/player-resizer.component.ts.PlayerResizerComponent.html","webpack:///./node_modules/ngx-youtube-player/ngx-youtube-player.d.ts.ɵa.html","webpack:///./src/app/shared/pipes/parseTracks.pipe.ts","webpack:///./src/app/core/components/app-player/media-info/media-info.component.ts","webpack:///./src/app/core/components/app-player/media-info/media-info.component.ts.MediaInfoComponent.html","webpack:///./src/app/core/components/app-player/player-controls/player-controls.component.ts","webpack:///./src/app/core/components/app-player/player-controls/player-controls.component.ts.PlayerControlsComponent.html","webpack:///./src/app/core/components/app-player/app-player.component.ts","webpack:///./src/app/core/components/app-player/app-player.component.ts.AppPlayerComponent.html","webpack:///./src/app/core/components/app-brand/app-brand.component.ts","webpack:///./src/app/core/components/app-brand/app-brand.component.ts.AppBrandComponent.html","webpack:///./src/app/core/components/app-navigator/app-navigator.component.ts","webpack:///./src/app/core/components/app-navigator/app-navigator.component.ts.AppNavigatorComponent.html","webpack:///./src/app/core/components/now-playing/now-playlist-filter/now-playlist-filter.component.ts","webpack:///./src/app/core/components/now-playing/now-playlist-filter/now-playlist-filter.component.ts.NowPlaylistFilterComponent.html","webpack:///./src/app/core/components/now-playing/now-playlist/now-playlist-track.component.ts","webpack:///./src/app/core/components/now-playing/now-playlist/now-playlist-track.component.ts.NowPlaylistTrackComponent.html","webpack:///./src/app/shared/pipes/search.pipe.ts","webpack:///./src/app/core/components/now-playing/now-playlist/now-playlist.component.ts","webpack:///./src/app/core/components/now-playing/now-playlist/now-playlist.component.ts.NowPlaylistComponent.html","webpack:///./src/app/core/components/now-playing/now-playing.component.ts","webpack:///./src/app/core/components/now-playing/now-playing.component.ts.NowPlayingComponent.html","webpack:///./src/app/core/components/app-sidebar/app-sidebar.proxy.ts","webpack:///./src/app/core/components/app-sidebar/app-sidebar.component.ts","webpack:///./src/app/core/components/app-sidebar/app-sidebar.component.ts.AppSidebarComponent.html","webpack:///./src/app/shared/components/button-icon/button-icon.component.ts","webpack:///./src/app/shared/components/button-icon/button-icon.component.ts.ButtonIconComponent.html","webpack:///./src/app/core/components/app-error-handler/app-error-handler.proxy.ts","webpack:///./src/app/core/components/app-error-handler/app-error-handler.component.ts","webpack:///./src/app/core/components/app-error-handler/app-error-handler.html","webpack:///./src/app/app.component.html","webpack:///./node_modules/@angular/animations/fesm2015/animations.js","webpack:///./node_modules/@angular/animations/fesm2015/browser.js","webpack:///./node_modules/@angular/platform-browser/fesm2015/animations.js","webpack:///./src/app/core/services/error-handler.ts","webpack:///./node_modules/rxjs/_esm2015/internal/observable/never.js","webpack:///./node_modules/@angular/service-worker/fesm2015/service-worker.js","webpack:///./node_modules/rxjs/_esm2015/internal/operators/publish.js","webpack:///./src/app/core/store/reducers.ts","webpack:///./src/app/core/store/index.ts","webpack:///./src/app/core/effects/app-player.effects.ts","webpack:///./src/app/core/effects/user-profile.effects.ts","webpack:///./src/app/core/effects/player-search.effects.ts","webpack:///./src/app/core/effects/app-core.effects.ts","webpack:///./src/app/core/effects/router.effects.ts","webpack:///./src/app/core/effects/analytics.effects.ts","webpack:///./src/app/core/index.ts","webpack:///./src/app/core/components/app-player/index.ts","webpack:///./src/app/core/components/app-brand/index.ts","webpack:///./src/app/core/components/app-navigator/index.ts","webpack:///./src/app/core/components/now-playing/index.ts","webpack:///./src/app/core/components/app-sidebar/index.ts","webpack:///./src/app/core/components/app-error-handler/index.ts","webpack:///./src/app/containers/app-search/index.ts","webpack:///./src/app/core/services/app-http-interceptor.ts","webpack:///./src/main.ts","webpack:///./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js"],"names":["__webpack_require__","d","__webpack_exports__","NowPlaylistService","_ngrx_store__WEBPACK_IMPORTED_MODULE_0__","_store_now_playlist__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","[object Object]","store","youtubeVideosInfo","this","playlist$","pipe","Object","mediaId","api","list","items","medias","dispatch","media","filter","subscribe","playlist","videos","find","video","id","selectedId","nowPlaylist","_nowPlaylist","currentVideoId","findIndex","length","trackEvent","VersionCheckerService","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","verifyPackage","packageJson","hasOwnProperty","http","zone","appApi","interval","protocol","prefix","repo","repoBranch","pathToFile","url","get","checkTimer","runOutsideAngular","check","response","recievedNewVersion","window","location","reload","notifyNewVersion","distinctUntilChanged","_Subscriber__WEBPACK_IMPORTED_MODULE_0__","compare","keySelector","source","lift","DistinctUntilChangedOperator","subscriber","DistinctUntilChangedSubscriber","destination","super","hasKey","x","y","value","key","err","error","result","next","concatAll","_mergeAll__WEBPACK_IMPORTED_MODULE_0__","ActionTypes","SeekTo","UpdateIndexByMedia","QueueVideo","QueueVideos","RemoveVideo","FilterChange","SelectVideo","LoadPlaylistAction","LoadPlaylistEndAction","MediaEnded","SelectNext","SelectPrevious","RemoveAll","ToggleRepeat","PlayerStateChange","payload","type","SELECT_AND_SEEK_TO_TIME","UPDATE_INDEX","QUEUE","QUEUE_VIDEOS","REMOVE","FILTER_CHANGE","SELECT","LOAD_PLAYLIST_START","LOAD_PLAYLIST_END","MEDIA_ENDED","SELECT_NEXT","SELECT_PREVIOUS","REMOVE_ALL","TOGGLE_REPEAT","PLAYER_STATE_CHANGE","takeUntil","_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__","_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__","notifier","TakeUntilOperator","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","seenValue","add","outerValue","innerValue","outerIndex","innerIndex","innerSub","complete","player","_app_player_actions__WEBPACK_IMPORTED_MODULE_0__","initialPlayerState","index","snippet","title","thumbnails","default","showPlayer","playerState","fullscreen","on","height","width","isFullscreen","state","action","PLAY","assign","playVideo","TOGGLE_PLAYER","toggleVisibility","UPDATE_STATE","changePlayerState","FULLSCREEN","innerHeight","innerWidth","RESET","RESET_FULLSCREEN","getUser","getUserPlaylists","getUserViewPlaylist","getIsUserSignedIn","user","playlists","viewedPlaylist","access_token","rxSubscriber","Symbol","Math","random","BehaviorSubject","_Subject__WEBPACK_IMPORTED_MODULE_0__","_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__","_value","getValue","subscription","_subscribe","closed","hasError","thrownError","DataApiProviders","YoutubeDataApi","_angular_common_http__WEBPACK_IMPORTED_MODULE_0__","_env_environment__WEBPACK_IMPORTED_MODULE_1__","SEARCH","PLAYLISTS","_defaultUrlParams","part","maxResults","youtube","API_KEY","auth","_apiPrefixUrl","_apiVersion","_apiUrl","options","_options","params","headers","createHeaders","getApi","_request","post","addAuth","accessToken","headersOptions","config","_enable_super_gross_mode_that_will_cause_bad_things","Promise","undefined","useDeprecatedSynchronousErrorHandling","Error","console","warn","stack","log","PlaylistViewModule","Action_Action","Subscription","scheduler","work","delay","AsyncAction_AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","bind","clearInterval","_execute","errored","errorValue","e","unsubscribe","actions","indexOf","splice","ArgumentOutOfRangeErrorImpl","call","message","name","ArgumentOutOfRangeError","prototype","create","_angular_core__WEBPACK_IMPORTED_MODULE_0__","__decorate","decorators","target","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","core_1","TooltipContent_1","Tooltip","viewContainerRef","resolver","tooltipAnimation","tooltipPlacement","show","tooltipDisabled","visible","content","factory","resolveComponentFactory","TooltipContent","tooltip","createComponent","instance","hostElement","element","nativeElement","placement","animation","hide","destroy","Input","Boolean","String","HostListener","Function","Directive","selector","ViewContainerRef","ComponentFactoryResolver","exports","mergeMap","_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__","_OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__","_InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__","_map__WEBPACK_IMPORTED_MODULE_3__","_observable_from__WEBPACK_IMPORTED_MODULE_4__","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","a","b","ii","MergeMapOperator","observer","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","push","_innerSub","ish","innerSubscriber","remove","_next","shift","InnerSubscriber","parent","notifyNext","notifyError","notifyComplete","ButtonGroupComponent","buttonClick","buttonValue","selectedButton","AppPlayerApi","_utils_data_utils__WEBPACK_IMPORTED_MODULE_0__","_store_app_player__WEBPACK_IMPORTED_MODULE_1__","_store_now_playlist__WEBPACK_IMPORTED_MODULE_2__","nowPlaylistEffects","playPlaylistFirstTrack$","queuePlaylist","event","data","__export","m","p","common_1","Tooltip_1","TooltipModule","NgModule","imports","CommonModule","declarations","entryComponents","Subscriber","_util_isFunction__WEBPACK_IMPORTED_MODULE_0__","_Observer__WEBPACK_IMPORTED_MODULE_1__","_Subscription__WEBPACK_IMPORTED_MODULE_2__","_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__","_config__WEBPACK_IMPORTED_MODULE_4__","_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","SafeSubscriber","_error","_complete","_parent","_parents","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","_user_profile_reducer__WEBPACK_IMPORTED_MODULE_0__","_user_profile_selectors__WEBPACK_IMPORTED_MODULE_2__","_user_profile_actions__WEBPACK_IMPORTED_MODULE_0__","initialUserState","nextPageToken","profile","ADD_PLAYLISTS","UPDATE_TOKEN","USER_SIGNOUT_SUCCESS","UPDATE","UPDATE_NEXT_PAGE_TOKEN","UPDATE_USER_PROFILE","VIEWED_PLAYLIST","APPLICATION_MODULE_PROVIDERS","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","_appIdRandomProviderFactory","DefaultIterableDifferFactory","DefaultKeyValueDifferFactory","DebugElement__PRE_R3__","DebugNode__PRE_R3__","NullInjector","injectInjectorOnly","ReflectiveInjector_","ReflectiveDependency","resolveReflectiveProviders","getModuleFactory__PRE_R3__","wtfEnabled","createScope","detectWTF","endTimeRange","leave","startTimeRange","injectAttributeImpl","NG_INJECTABLE_DEF","getLView","getPreviousOrParentTNode","nextContextImpl","BoundPlayerFactory","loadInternal","createElementRef","createTemplateRef","createViewRef","makeParamDecorator","makePropDecorator","getClosureSafeProperty","_def","DebugContext","createPlatform","assertPlatform","destroyPlatform","getPlatform","PlatformRef","ApplicationRef","createPlatformFactory","NgProbeToken","enableProdMode","isDevMode","APP_ID","PACKAGE_ROOT_URL","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","APP_INITIALIZER","ApplicationInitStatus","DebugElement","DebugNode","asNativeElements","getDebugNode","Testability","TestabilityRegistry","setTestabilityGetter","TRANSLATIONS","TRANSLATIONS_FORMAT","LOCALE_ID","MissingTranslationStrategy","ApplicationModule","wtfCreateScope","wtfLeave","wtfStartTimeRange","wtfEndTimeRange","Type","EventEmitter","ErrorHandler","Sanitizer","SecurityContext","ANALYZE_FOR_ENTRY_COMPONENTS","Attribute","ContentChild","ContentChildren","Query","ViewChild","ViewChildren","Component","HostBinding","Output","Pipe","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","ViewEncapsulation","Version","VERSION","defineInjectable","defineInjector","forwardRef","resolveForwardRef","Injectable","INJECTOR$1","Injector","inject","InjectFlags","ReflectiveInjector","createInjector","ResolvedReflectiveFactory","ReflectiveKey","InjectionToken","Inject","Optional","Self","SkipSelf","Host","NgZone","NoopNgZone","RenderComponentType","Renderer","Renderer2","RendererFactory2","RendererStyleFlags2","RootRenderer","COMPILER_OPTIONS","Compiler","CompilerFactory","ModuleWithComponentFactories","ComponentFactory","ComponentRef","ElementRef","NgModuleFactory","NgModuleRef","NgModuleFactoryLoader","getModuleFactory","QueryList$1","SystemJsNgModuleLoader","SystemJsNgModuleLoaderConfig","TemplateRef","EmbeddedViewRef","ViewRef$1","ChangeDetectionStrategy","ChangeDetectorRef","DefaultIterableDiffer","IterableDiffers","KeyValueDiffers","SimpleChange","WrappedValue","platformCore","ALLOW_MULTIPLE_PLATFORMS","APP_ID_RANDOM_PROVIDER","defaultIterableDiffers","defaultKeyValueDiffers","devModeEqual","isListLikeIterable","ChangeDetectorStatus","isDefaultChangeDetectionStrategy","Console","getInjectableDef","setCurrentInjector","APP_ROOT","ivyEnabled","CodegenComponentFactoryResolver","resolveComponentResources","ReflectionCapabilities","RenderDebugInfo","_sanitizeHtml","_sanitizeStyle","_sanitizeUrl","_global","looseIdentical","stringify","makeDecorator","isObservable","isPromise","clearOverrides","initServicesIfNeeded","overrideComponentView","overrideProvider","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1","defineBase","defineComponent","defineDirective","definePipe","defineNgModule","detectChanges","renderComponent","ComponentFactory$1","ComponentRef$1","directiveInject","injectAttribute","getFactoryOf","getInheritedFactory","templateRefExtractor","ProvidersFeature","InheritDefinitionFeature","NgOnChangesFeature","LifecycleHooksFeature","NgModuleRef$1","markDirty","NgModuleFactory$1","NO_CHANGE","container","nextContext","elementStart","namespaceHTML","namespaceMathML","namespaceSVG","listener","text","embeddedViewStart","query","registerContentQuery","projection","interpolation1","interpolation2","interpolation3","interpolation4","interpolation5","interpolation6","interpolation7","interpolation8","interpolationV","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","pureFunction0","pureFunction1","pureFunction2","pureFunction3","pureFunction4","pureFunction5","pureFunction6","pureFunction7","pureFunction8","pureFunctionV","getCurrentView","getHostElement","restoreView","containerRefreshStart","containerRefreshEnd","queryRefresh","loadQueryList","elementEnd","elementProperty","componentHostSyntheticProperty","projectionDef","reference","enableBindings","disableBindings","allocHostVars","elementAttribute","elementContainerStart","elementContainerEnd","elementStyling","elementHostAttrs","elementStylingMap","elementStyleProp","elementStylingApply","elementClassProp","textBinding","template","embeddedViewEnd","load","whenRendered","i18n","i18nAttributes","i18nExp","i18nStart","i18nEnd","i18nApply","i18nPostprocess","setClassMetadata","compileComponent","compileDirective","compileNgModule","compileNgModuleDefs","patchComponentDefWithScope","resetCompiledComponents","compilePipe","sanitizeHtml","sanitizeStyle","defaultStyleSanitizer","sanitizeScript","sanitizeUrl","sanitizeResourceUrl","bypassSanitizationTrustHtml","bypassSanitizationTrustStyle","bypassSanitizationTrustScript","bypassSanitizationTrustUrl","bypassSanitizationTrustResourceUrl","getLContext","bindPlayerFactory","addPlayer","getPlayers","compileNgModuleFactory__POST_R3__","SWITCH_COMPILE_COMPONENT__POST_R3__","SWITCH_COMPILE_DIRECTIVE__POST_R3__","SWITCH_COMPILE_PIPE__POST_R3__","SWITCH_COMPILE_NGMODULE__POST_R3__","getDebugNode__POST_R3__","SWITCH_COMPILE_INJECTABLE__POST_R3__","SWITCH_IVY_ENABLED__POST_R3__","SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","Compiler_compileModuleSync__POST_R3__","Compiler_compileModuleAsync__POST_R3__","Compiler_compileModuleAndAllComponentsSync__POST_R3__","Compiler_compileModuleAndAllComponentsAsync__POST_R3__","SWITCH_ELEMENT_REF_FACTORY__POST_R3__","SWITCH_TEMPLATE_REF_FACTORY__POST_R3__","SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","SWITCH_RENDERER2_FACTORY__POST_R3__","getModuleFactory__POST_R3__","publishGlobalUtil","publishDefaultGlobalUtils","SWITCH_INJECTOR_FACTORY__POST_R3__","registerModuleFactory","EMPTY_ARRAY$4","EMPTY_MAP","anchorDef","createComponentFactory","createNgModuleFactory","createRendererType2","directiveDef","elementDef","elementEventFullName","getComponentViewDefinitionFactory","inlineInterpolate","interpolate","moduleDef","moduleProvideDef","ngContentDef","nodeValue","pipeDef","providerDef","pureArrayDef","pureObjectDef","purePipeDef","queryDef","textDef","unwrapValue$1","viewDef","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","objWithPropertyToExtract","fillProperties","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","ngInjectableDef","NG_INJECTOR_DEF","ngInjectorDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_BASE_DEF","ngBaseDef","NG_ELEMENT_ID","__NG_ELEMENT_ID__","opts","providedIn","providers","getInjectorDef","_desc","ngMetadataName","ANNOTATIONS","PARAMETERS","PROP_METADATA","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","annotationInstance","cls","annotationCls","values","propName","ParamDecoratorFactory","apply","annotation","ParamDecorator","unusedKey","parameters","PropDecoratorFactory","decoratorInstance","constructor","meta","unshift","attributeName","first","isViewQuery","descendants","OnPush","Default","CheckOnce","Checked","CheckAlways","Detached","Errored","Destroyed","changeDetectionStrategy","__window","__self","self","WorkerGlobalScope","global","promise","resolve","_symbolIterator","getSymbolIterator","iterator","keys","getOwnPropertyNames","Map","scheduleMicroTask","Zone","then","current","isNaN","token","Array","map","join","overriddenName","res","toString","newLineIndex","substring","__forward_ref__","forwardRefFn","resourceResolver","urlFetches","urlMap","cachedResourceResolve","resp","set","unwrapResponse","componentResourceResolutionQueue","forEach","component","templateUrl","styleUrls","styles","styleOffset","styleUrl","style","clear","all","Set","componentNeedsResolution","Emulated","Native","None","ShadowDom","ngDevMode","newCounters","firstTemplatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","rendererMoveNode","rendererRemoveNode","rendererCreateComment","ngDevModeResetPerfCounters","EMPTY_OBJ","EMPTY_ARRAY","freeze","_renderCompCount","componentDefinition","typePrototype","declaredInputs","def","providersResolver","consts","vars","hostBindings","contentQueries","contentQueriesRefresh","attributes","inputs","outputs","exportAs","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onDestroy","ngOnDestroy","onPush","changeDetection","directiveDefs","pipeDefs","selectors","viewQuery","features","encapsulation","_","directiveTypes","feature","pipeTypes","invertObject","extractDirectiveDef","extractPipeDef","getComponentDef","getDirectiveDef","getPipeDef","bootstrap","transitiveCompileScopes","obj","secondary","newLookup","minifiedKey","publicName","declaredName","isArray","baseDefinition","pure","getNgModuleDef","throwNotFound","assertEqual","actual","expected","msg","throwError","assertNotEqual","assertLessThan","assertGreaterThan","assertDefined","assertComponentType","assertDomNode","node","Node","assertPreviousIsParent","isParent","assertHasParent","assertDataInRange","arr","TVIEW","FLAGS","PARENT","NEXT","QUERIES","HOST","HOST_NODE","BINDING_INDEX","CLEANUP","CONTEXT","INJECTOR","RENDERER_FACTORY","RENDERER","SANITIZER","TAIL","CONTAINER_INDEX","CONTENT_QUERIES","DECLARATION_VIEW","HEADER_OFFSET","ACTIVE_INDEX","VIEWS","NATIVE","RENDER_PARENT","LCONTAINER_LENGTH","MONKEY_PATCH_KEY_NAME","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","FactoryPrototype","stringify$1","view","readElementValue","getNativeByIndex","lView","getNativeByTNode","hostView","getTNode","getComponentViewByIndex","nodeIndex","slotValue","isContentQueryHost","flags","isComponent","isComponentDef","isLContainer","isRootView","getRootView","readPatchedLView","getRootContext","viewOrComponent","rootView","readPatchedData","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","startView","viewOffset","parentView","defaultScheduler","requestAnimationFrame","setTimeout","addAllToArray","findComponentView","rootTNode","getCompilerFacade","globalNg","ng","ɵcompilerFacade","_injectImplementation","elementDepthCount","_currentInjector","injector","former","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","injectableDef","injectArgs","types","arg","j","assertNodeType","typeName","assertNodeOfPossibleTypes","some","queueInitHooks","initHooks","checkHooks","queueLifecycleHooks","directiveStart","end","directiveEnd","queueContentHooks","queueViewHooks","queueDestroyHooks","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeInitHooks","currentView","checkNoChangesMode","executeHooks","allHooks","hooksToCall","callHooks","bindingsEnabled","previousOrParentTNode","currentDirectiveDef","setCurrentDirectiveDef","viewToRestore","contextLView","setPreviousOrParentTNode","setTNodeAndViewData","getIsParent","setIsParent","isCreationMode","getContextLView","getCheckNoChangesMode","setCheckNoChangesMode","mode","getFirstTemplatePass","setFirstTemplatePass","bindingRootIndex","getBindingRoot","setBindingRoot","enterView","newView","hostTNode","oldView","bindingStartIndex","level","nestingLevel","walkUpViews","leaveView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","injectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","diPublicInInjector","charCodeAt","bloomBit","mask","b7","b6","b5","tData","bloomAdd","attrNameToInject","attrs","attrName","getOrCreateInjectable","bloomHash","tokenId","bloomHashBitOrFactory","savePreviousOrParentTNode","saveLView","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","searchTokensOnInjector","NOT_FOUND","moduleInjector","currentTView","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","endIndex","providerTokenOrDef","dirDef","lData","getPrototypeOf","isFactory","previousIncludeViewProviders","previousInjectImplementation","injectorView","isFirstHostTNode","NodeInjector","_tNode","_lView","typeAny","t","mpValue","directives","isComponentInstance","findViaComponent","isDirectiveInstance","directiveInstance","firstChild","directiveIndexStart","directiveIndexEnd","traverseNextElement","findViaDirective","getDirectivesAtNodeIndex","findViaNativeElement","native","existingCtx","createLContext","attachPatchData","rElement","parentNode","parentContext","localRefs","getComponentViewByInstance","componentInstance","child","componentIndices","components","elementComponentIndex","includeComponents","directiveStartIndex","directiveEndIndex","slice","getComponent","loadLContextFromNode","getComponentAtNodeIndex","getContext","getViewComponent","loadLContext","getRootContext$1","componentOrView","getRootView$1","getRootComponents","getInjector","getDirectives","throwOnNotFound","getLocalRefs","localNames","localRefName","directiveIndex","discoverLocalRefs","directive","isBrowserEvents","useCapture","getListeners","lCleanup","tCleanup","cleanup","listeners","firstParam","secondParam","listenerElement","callback","useCaptureOrIndx","sort","sortListeners","isDirectiveDefHack","normalizeDebugBindingName","input","replace","CAMEL_CASE_REGEXP","toLowerCase","camelCaseToDashCase","normalizeDebugBindingValue","isListLikeIterableA","isListLikeIterableB","comparator","iterator1","iterator2","item1","item2","done","areIterablesEqual","wrapped","isWrapped","previousValue","currentValue","firstChange","isJsObject","o","throwMultipleComponentError","tagName","updateBinding","bindingIndex","getBinding","bindingUpdated","isDifferent","creationMode","currValue","throwErrorIfNoChangesMode","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","NG_PROJECT_AS_ATTR_NAME","RendererStyleFlags3","Important","DashCase","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","rendererType","document","getParentNative","getHostNative","getFirstParentNative","getLContainer","embeddedView","containerHostIndex","getContainerRenderParent","tViewNode","projectionNodeStack","walkTNodeTree","viewToWalk","renderParent","beforeNode","projectionNodeIndex","nextTNode","executeNodeAction","nodeOrContainer","lContainer","componentView","head","insertBefore","removeChild","createTextNode","createText","addRemoveViewFromContainer","insertMode","insertView","containerIndex","views","detachView","removeIndex","detached","viewToDetach","removeView","containerHost","destroyLView","getLViewChild","childIndex","destroyNode","cleanUpView","viewOrContainer","getParentState","destroyViewTree","executeOnDestroys","pipeDestroyHooks","executePipeOnDestroys","idx","useCaptureOrSubIdx","removeEventListener","cleanupFn","removeListeners","getRenderParent","canInsertNativeNode","nativeParentNode","tNodeParent","getHighestElementContainer","currentNode","viewTNode","canInsertNativeChildOfView","canInsertNativeChildOfElement","nativeInsertBefore","appendChild","childEl","childTNode","parentEl","parentTNode","getBeforeNodeForView","ngContainer","containerNative","parentNative","appendProjectedNode","projectedTNode","tProjectionNode","projectionView","ngContainerChildTNode","NG_TEMPLATE_SELECTOR","isCssClassMatching","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","hasTagAndTypeMatch","currentSelector","isProjectionMode","isNodeMatchingSelector","nodeAttrs","selectOnlyMarkerIdx","skipToNextSelector","isPositive","attrIndexInNode","findAttrIndexInNode","selectorAttrValue","nodeAttrValue","maybeAttrName","selectOnlyMode","isNodeMatchingSelectorList","matchingSelectorIndex","textSelectors","ngProjectAsAttrVal","ngProjectAsAttrIdx","getProjectAsAttrValue","factoryFn","CorePlayerHandler","_players","play","ANIMATION_PROP_PREFIX","createEmptyStylingContext","sanitizer","initialStyles","initialClasses","getStylingContext","viewData","storageIndex","wrapper","isStylingContext","stylingTemplate","templateStyleContext","allocStylingContext","isAnimationProp","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","addEventListener","nonFactoryPlayerIndex","playerHandler","queuePlayer","getPlayerContext","stylingContext","allocPlayerContext","throwInvalidRefError","hasClassInput","initializeStaticContext","attr","patchInitialStylingValue","initialStyling","prop","existingValue","renderInitialStylingValues","initialStylingValues","isEntryClassBased","setClass","setStyle","updateContextWithBindings","directiveRef","classBindingNames","styleBindingNames","styleSanitizer","onlyProcessSingleClasses","directiveRefs","nextOffsetInsertionIndex","detectedIndex","getDirectiveRegistryValuesIndexOf","singlePropStartPosition","singlePropPositionIndex","styleSanitizerIndex","findOrPatchDirectiveIntoRegistry","singlePropOffsetValues","totalCurrentClassBindings","totalCurrentStyleBindings","stylesOffset","singleClassesStartIndex","multiStylesStartIndex","multiClassesStartIndex","currentSinglePropsLength","insertionOffset","filteredStyleBindingNames","singlePropIndex","getMatchingBindingIndex","filteredClassBindingNames","totalStyles","totalClasses","start","totalNewEntries","isMultiBased","isClassBased","flag","getPointers","staticIndex","getInitialIndex","singleOrMultiIndex","getMultiOrSingleIndex","setFlag","pointers","entryIsClassBased","adjustedIndex","multiIndex","singleIndex","initialValuesToLookup","indexForInitial","getInitialStylingValuesIndexOf","initialFlag","prepareInitialFlag","setProp","setValue","setPlayerBuilderIndex","bindingName","getProp","_updateSingleStylingValue","offset","getDirectiveIndexFromRegistry","singlePropOffsetRegistryIndex","offsets","indexForOffset","getSinglePropIndexValue","currFlag","currDirective","getDirectiveIndexFromEntry","hasValueChanged","newValue","currentDirectiveOwner","newDirectiveOwner","allowValueChange","playerBuilder","ClassAndStylePlayerBuilder","currPlayerIndex","getPlayerBuilderIndex","playerBuildersAreDirty","playerBuilderIndex","hasPlayerBuilderChanged","newIndex","setPlayerBuilder","getStyleSanitizer","sanitizeYes","setSanitizeFlag","indexForMulti","valueForMulti","multiDirty","singleDirty","valueExists","setDirty","setDirectiveDirty","setContextDirty","setContextPlayersDirty","renderStyling","rootOrView","isFirstRender","classesStore","stylesStore","totalPlayersQueued","targetDirectiveIndex","isDirty","isContextDirty","isDirectiveDirty","flushPlayerBuilders","multiStartIndex","getMultiStartIndex","onlySingleClasses","limitToSingleClasses","stillDirty","getPlayerBuilder","readInitialValue","valueToApply","getInitialValue","playersStartIndex","builder","playerInsertionIndex","oldPlayer","buildPlayer","setProperty","removeStyle","removeProperty","className","addClass","removeClass","isDirtyYes","isClassBasedValue","isSanitizable","configFlag","dynamicIndex","insertionIndex","playerIndex","directiveOwnerPointers","findEntryPositionByProp","startIndex","swapMultiContextEntries","indexA","indexB","tmpValue","tmpProp","tmpFlag","tmpPlayerBuilderIndex","flagA","flagB","singleIndexA","_flag","singleIndexB","insertNewMultiProperty","classBased","doShift","indexStartPosition","initialIndexForSingle","updateSinglePointerValues","initialIndex","_element","_type","_values","_dirty","_factory","currentPlayer","keyValues","dirs","dirtyYes","getInitialClassNameValue","initialClassValues","_CLEAN_PROMISE","refreshDescendantViews","dynamicViewData","renderEmbeddedTemplate","refreshDynamicEmbeddedViews","directiveDefIdx","refreshContentQueries","expandoInstructions","expandoStartIndex","currentDirectiveIndex","currentElementIndex","instruction","providerCount","setHostBindings","componentRefresh","refreshChildComponents","createLView","rendererFactory","createNodeAtIndex","createTNode","createViewNode","allocExpando","viewToRender","_isParent","_previousOrParentTNode","tickRootContext","getRenderFlags","renderComponentOrTemplate","templateFn","normalExecutionPath","begin","_currentNamespace","createComment","createDirectivesAndLocals","currentQueries","addNode","elementCreate","hasStyling","setUpAttributes","inputData","initializeTNodeInputs","renderInitialStylesAndClasses","overriddenRenderer","rendererToUse","createElement","createElementNS","localRefExtractor","exportsMap","","initNodeFlags","generateExpandoInstructionBlock","baseResolveDirective","saveNameToExportMap","cacheMatchingLocalNames","resolveDirectives","registry","directiveRegistry","matches","findDirectiveMatches","addComponentLogic","postProcessDirective","instantiateAllDirectives","expando","previousExpandoLength","invokeDirectivesHostBindings","localIndex","saveResolvedLocalsInData","getOrCreateTView","pipes","ngPrivateData","createTView","viewIndex","initialViewLength","fill","createViewBlueprint","pipeRegistry","isProc","namespaceURI","attrVal","setAttribute","setAttributeNS","createError","locateHostElement","elementOrSelector","defaultRenderer","rNode","selectRootElement","querySelector","eventName","listenerFn","getCleanup","lCleanupIndex","listen","wrappedListener","preventDefault","returnValue","wrapListenerWithPreventDefault","generatePropertyAliases","propsLength","setInputsForProperty","removeAttribute","strValue","nativeOnly","elementPropertyInternal","loadComponentRenderer","loadRendererFn","dataValue","childComponentLView","markDirtyIfOnPush","debugValue","JSON","textContent","setNgReflectProperties","tViews","tParent","initialInputs","direction","propStore","isInput","defs","propertyAliasMap","internalName","patchContextWithStaticAttrs","scheduleTick","styleIndex","suffix","valueToAdd","updateStyleProp","classIndex","onOrOffClassValue","addOrRemove","updateClassProp","classes","hackImplementationOfElementStylingMap","classInputVal","classesInput","stylesInput","classesPlayerBuilder","stylesPlayerBuilder","classesValue","stylesValue","ignoreAllClassUpdates","ignoreAllStyleUpdates","classNames","applyAllClasses","classesPlayerBuilderIndex","stylesPlayerBuilderIndex","split","styleProps","classesStartIndex","dirty","ctxIndex","propIndex","propLimit","adjustedPropIndex","newProp","initialValue","indexOfEntry","valueToCompare","flagToCompare","newFlag","updateStylingMap","textNative","directiveCount","elementIndex","providerStartIndex","postProcessBaseDirective","initialInputData","minifiedInputName","attrValue","inputsToStore","generateInitialInputs","setInputsFromAttrs","queueComponentIndexForCheck","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","createLContainer","hostNative","isForViewContainerRef","containerInternal","comment","nextIndex","viewBlockId","containerTNode","tContainerNode","startIdx","viewAtPositionId","scanForView","containerTViews","getOrCreateEmbeddedTView","createView","viewHost","adjustedElementIndex","viewAttached","componentTView","syncViewWithBlueprint","checkView","componentNode","noOfNodeBuckets","pData","tails","componentChild","bucketIndex","nextNode","projectionNodeStack$1","selectorIndex","nodeToProject","projectedView","currentComponentView","firstProjectedNode","adjustedHostIndex","markViewDirty","nothingScheduled","clean","flushPlayers","rootComponent","detectChangesInternal","detectChangesInRootView","hostTView","createViewQuery","updateViewQuery","count","hostVars","queueHostBindingForCheck","totalHostVars","prefillHostVars","v0","i0","v1","i1","v2","i2","v3","i3","v4","i4","v5","i5","v6","i6","v7","queryListIdx","queryList","savedContentQueriesLength","tViewContentQueries","CLEAN_PROMISE","getTViewCleanup","element$$1","players","nonFactoryPlayersStart","getPlayersInternal","GLOBAL_PUBLISH_EXPANDO_KEY","_published","w","componentType","componentDef","componentTag","hostRNode","host","rootFlags","createRootContext","createRootComponent","createRootComponentView","hostFeatures","instantiateRootComponent","rootTView","dirIndex","getRootContext$2","isComponentDef$1","definition","superType","getSuperType","superDef","baseDef","writeableDef","maybeUnwrapEmpty","prevHostBindings","superHostBindings","rf","ctx","prevViewQuery","superViewQuery","prevContentQueries","superContentQueries","prevContentQueriesRefresh","superContentQueriesRefresh","queryIndex","ngInherit","superPrototype","PRIVATE_PREFIX","publicToDeclaredInputs","publicToMinifiedInputs","proto","declaredKey","privateMinKey","originalProperty","checkProto","getter","setter","simpleChanges","writable","isFirstChange","currentChange","configurable","onChangesWrapper","delegateHook","ngOnChanges","noop","SOURCE","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","StaticInjector","NULL","SWITCH_INJECTOR_FACTORY","injectInjector","IDENT","EMPTY","CIRCULAR","MULTI_PROVIDER_FN","USE_VALUE","provide","useValue","NG_TOKEN_PATH","NG_TEMP_TOKEN_PATH","NULL_INJECTOR$1","NEW_LINE","NO_NEW_LINE","records","_records","deps","useNew","recursivelyProcessProviders","provider","staticError","resolvedProvider","providerDeps","annotations","useExisting","computeDeps","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","record","tryResolveToken","tokenPath","formatError","tokens","depRecords","depRecord","childRecord","resolveToken","charAt","substr","parts","NOT_YET","CIRCULAR$1","EMPTY_ARRAY$1","NULL_INJECTOR$2","getNullInjector","defType","additionalProviders","R3Injector","injectorDefTypes","destroyed","dedupStack","deepForEach","injectorDef","processInjectorType","processProvider","makeRecord","isRootInjector","has","assertNotDestroyed","service","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","defOrWrappedDef","parents","ngModule","defName","isDuplicate","imported","pop","defProviders","injectorType","ngModuleType","isTypeProvider","providerToFactory","isValueProvider","providerToRecord","existing","multiRecord","hasOnDestroy","paramLength","isExistingProvider","isFactoryProvider","classRef","ngModuleDetail","hasDeps","resolveProvider$1","lInjectablesBlueprint","isComponent$$1","providerFactory","beginIndex","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","f","componentProviders","multiFactoryAdd","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","isComponentProvider","item","multiResolve","factories","componentCount","multiProviders","viewProviders","noComponentFactoryError","ERROR_COMPONENT","_ngModule","_factories","ComponentFactoryBoundToModule","ngContentSelectors","projectableNodes","rootSelectorOrNode","ViewRef","_componentIndex","_appRef","_viewContainerRef","_tViewNode","rootNodes","collectNativeNodes","tNodeChild","_lookUpContext","detach","storeCleanupFn","checkNoChanges","vcRef","appRef","RootViewRef","_view","checkNoChangesInRootView","R3ElementRef","R3TemplateRef","R3ViewContainerRef","ElementRefToken","TemplateRefToken","_declarationParentView","elementRef","_tView","_renderer","_queries","_injectorIndex","container$$1","declarationView","queries","createEmbeddedViewAndNode","viewRef","hostContainer","componentIndex","hostComponentView","SWITCH_ELEMENT_REF_FACTORY","slotCount","animations","SWITCH_RENDERER2_FACTORY","getOrCreateRenderer2","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","full","major","minor","patch","ComponentFactoryResolver$1","toRefArray","array","nonMinified","minified","templateName","ROOT_CONTEXT","SCHEDULER","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","isInternalRootView","rootViewInjector","createChainedInjector","rootLView","oldLView","tElementNode","projection$$1","nodeList","firstTNode","previousTNode","componentRef","_rootLView","destroyCbs","changeDetectorRef","_devMode","_runModeLocked","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","DOMParser","_a","isDOMParserAvailable","getInertBodyElement","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","childNode","nodeType","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","match","sanitizeSrcset","srcset","trim","tagSet","tags","merge$1","sets","s","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","HTML_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","traverseContent","startElement","TEXT_NODE","chars","endElement","checkClobberedElement","nodeName","elAttr","lower","encodeEntities","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","inertBodyHelper","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","sanitizeChildren","getTemplateContent","isTemplateElement","ELEMENT_MARKER","marker","COMMENT_MARKER","MARKER","ICU_BLOCK_REGEX","SUBTEMPLATE_REGEXP","PH_REGEXP","BINDING_REGEXP","ICU_REGEXP","PP_PLACEHOLDERS","PP_ICU_VARS","PP_ICUS","extractParts","pattern","prevPos","braceStack","results","braces","lastIndex","exec","pos","block","test","parseICUBlock","cases","icuType","mainBinding","str","binding","parseInt","blocks","removeInnerTemplateTranslation","tagMatched","inTemplate","generateBindingUpdateOpCodes","destinationNode","sanitizeFn","updateOpCodes","textParts","textValue","toMaskBit","getBindingMask","icuExpression","valueArr","i18nIndexStack","i18nIndexStackPointer","min","parentIndexStack","subTemplateIndex","parentIndexPointer","createOpCodes","icuExpressions","msgParts","search","RegExp","getTranslationForTemplate","phIndex","icuNodeIndex","icuStart","tIcuIndex","hasBinding","tI18n","update","icus","i18nStartFirstPass","appendI18nNode","replacements","_match","_idx","rootIndex","visitedPlaceholders","readCreateOpCodes","removeNode","i18nEndFirstPass","currentTNode","opCode","textRNode","destinationNodeIndex","destinationTNode","commentValue","commentRNode","activeCaseIndex","tagNameValue","elementRNode","removedPhTNode","previousElementIndex","i18nAttributesFirstPass","changeMask","shiftsCounter","expression","readUpdateOpCodes","bindingsStartIndex","bypassCheckBit","caseCreated","checkBit","skipCodes","tIcu","icuTNode","removeCodes","removeOpCode","activeIndex","caseIndex","getCaseIndex","Plural","Zero","One","Two","Few","Many","Other","getPluralCategory","locale","nLike","n","nDecimal","floor","abs","getPluralCase","bindingValue","resolvedCase","tIcus","createCodes","updateCodes","childIcus","nestedIcus","icuIndex","icuCase","parseIcuCase","worstCaseSize","max","opCodes","parseNodes","nestedIcusToCreate","lowerAttrName","COMMENT_NODE","NESTED_ICU","nestedIcuIndex","newLocal","nestedIcu","nestedIcuNodeIndex","nestTIcuIndex","COMPONENT_FACTORY_RESOLVER","_bootstrapComponents","_r3Injector","injectFlags","componentFactoryResolver","moduleType","parentInjector","ctorParameters","propDecorators","clazz","slotOffset","pureFn","thisArg","exp","exp5","exp6","exp7","exp8","exps","pipeName","getPipeDef$1","pipeInstance","unwrapValue","isPure","transform","unwrap","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","sink","SWITCH_TEMPLATE_REF_FACTORY","LQueries_","shallow","deep","predicate","descend","read","createQuery","shallowResults","copyQueriesToContainer","deepResults","copyQueriesToView","insertView$1","isRootNodeOfQuery","removeView$1","containerValues","viewValuesIdx","removed","getIdxOfMatchingSelector","queryByReadToken","matchingIdx","queryByTemplateRef","templateRefToken","templateRefResult","queryRead","queryByTNodeType","addMatch","matchingValue","createPredicate","_valuesTree","QueryList","changes","last","init","reduce","concat","flatten","emit","memoryIndex","QueryType","clone","getOrCreateCurrentQueries","track","storeCleanupWithContext","queryListImpl","reset","notifyOnChanges","BRAND","allowSanitizationBypass","trustedHtml","bypassSanitizationTrustString","trustedStyle","trustedScript","trustedUrl","trustedResourceUrl","trustedString","trusted","SAFE_STYLE_VALUE","URL_RE","urlMatch","outsideSingle","outsideDouble","hasBalancedQuotes","getSanitizer","sanitize","unsafeStyle","unsafeUrl","unsafeResourceUrl","unsafeScript","angularCoreEnv","ɵdefineBase","ɵdefineComponent","ɵdefineDirective","ɵdefineNgModule","ɵdefinePipe","ɵdirectiveInject","ɵgetFactoryOf","ɵgetInheritedFactory","ɵinjectAttribute","ɵtemplateRefExtractor","ɵNgOnChangesFeature","ɵProvidersFeature","ɵInheritDefinitionFeature","ɵelementAttribute","ɵbind","ɵcontainer","ɵnextContext","ɵcontainerRefreshStart","ɵcontainerRefreshEnd","ɵloadQueryList","ɵnamespaceHTML","ɵnamespaceMathML","ɵnamespaceSVG","ɵenableBindings","ɵdisableBindings","ɵallocHostVars","ɵelementStart","ɵelementEnd","ɵelement","ɵelementContainerStart","ɵelementContainerEnd","ɵpureFunction0","ɵpureFunction1","ɵpureFunction2","ɵpureFunction3","ɵpureFunction4","ɵpureFunction5","ɵpureFunction6","ɵpureFunction7","ɵpureFunction8","ɵpureFunctionV","ɵgetCurrentView","ɵrestoreView","ɵinterpolation1","ɵinterpolation2","ɵinterpolation3","ɵinterpolation4","ɵinterpolation5","ɵinterpolation6","ɵinterpolation7","ɵinterpolation8","ɵinterpolationV","ɵelementClassProp","ɵlistener","ɵload","ɵprojection","ɵelementProperty","ɵcomponentHostSyntheticProperty","ɵpipeBind1","ɵpipeBind2","ɵpipeBind3","ɵpipeBind4","ɵpipeBindV","ɵprojectionDef","ɵpipe","ɵquery","ɵqueryRefresh","ɵregisterContentQuery","ɵreference","ɵelementStyling","ɵelementHostAttrs","ɵelementStylingMap","ɵelementStyleProp","ɵelementStylingApply","ɵtemplate","ɵtext","ɵtextBinding","ɵembeddedViewStart","ɵembeddedViewEnd","ɵi18n","ɵi18nAttributes","ɵi18nExp","ɵi18nStart","ɵi18nEnd","ɵi18nApply","ɵi18nPostprocess","ɵsanitizeHtml","ɵsanitizeStyle","ɵdefaultStyleSanitizer","ɵsanitizeResourceUrl","ɵsanitizeScript","ɵsanitizeUrl","modules","assertNotExisting","noModuleError","isType","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","reflect","_reflect","paramTypes","paramAnnotations","parentCtor","typeStr","tsickleCtorParams","ctorParam","convertTsickleDecoratorIntoMetadata","_zipTypesAndAnnotations","getOwnMetadata","getParentCtor","_ownParameters","typeOrFunc","ownAnnotations","_ownAnnotations","propMetadata","parentPropMetadata","ownPropMetadata","_ownPropMetadata","lcProperty","functionBody","moduleUrl","members","runtime","enumIdentifier","decoratorInvocations","decoratorInvocation","ctor","parentProto","getReflect","reflectDependencies","convertDependencies","compiler","dep","optional","resolved","R3ResolvedDependencyType","Token","skipSelf","setTokenAndResolvedType","param","__proto__","reflectDependency","EMPTY_ARRAY$2","moduleQueue","flushingModuleQueue","isResolvedDeclaration","declaration","every","enqueueModuleForDelayedScoping","flatten$1","expandModuleWithProviders","emitInline","registerNgModuleType","verifySemanticsOfNgModuleDef","compileInjector","verifiedNgModule","errors","combinedDeclarations","computeCombinedExports","kind","lastIndexOf","existingModule","ownerNgModule","getAnnotation","verifyComponentIsPartOfNgModule","unwrapModuleWithProvidersImports","typeOrWithProviders","collect","__annotations__","readAnnotation","decorator","setScopeOnDeclaredComponents","transitiveScopes","transitiveScopesFor","ngSelectorScope","from","compilation","dir","isNgModule","scopes","exported","declared","importedTyped","importedScope","entry","exportedTyped","exportedScope","mapFn","out","isModuleWithProviders","maybeQueueResolutionOfComponentResources","directiveMetadata","preserveWhitespaces","viewQueries","extractQueriesMetadata","interpolation","flushModuleScopingQueueAsMuchAsPossible","hasSelectorScope","facade","typeArgumentCount","isContentQuery","lifecycle","usesOnChanges","typeSourceSpan","usesInheritance","extendsDirectlyFromObject","convertToR3QueryMetadata","propertyName","ann","piece","splitByComma","convertToR3QueryPredicate","isQueryAnn","queriesMeta","field","SWITCH_COMPILE_DIRECTIVE","SWITCH_COMPILE_COMPONENT","SWITCH_COMPILE_PIPE","updateBaseDefFromIOProp","inheritedBaseDef","initializeBaseDef","bindingPropertyName","hostPropertyName","USE_VALUE$1","EMPTY_ARRAY$3","convertInjectableProviderToFactory","valueProvider","existingProvider","factoryProvider","classProvider","reflectionCapabilities","SWITCH_COMPILE_NGMODULE","USE_VALUE$2","isUseClassProvider","isUseValueProvider","isUseFactoryProvider","isUseExistingProvider","SWITCH_COMPILE_INJECTABLE","srcMeta","hasAProvider","compilerMeta","ctorDeps","userDeps","compileInjectable","injectableType","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","getDebugContext","getOriginalError","defaultErrorLogger","_console","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","constructResolvingPath","findFirstClosedCycle","reverse","injectionError","constructResolvingMessage","errMsg","wrappedError","addKey","injectors","noAnnotationError","signature","parameter","mixingMultiProvidersWithRegularProvidersError","provider1","provider2","displayName","_globalKeyRegistry","numberOfKeys","_allKeys","newKey","size","reflector","caps","hasLifecycleHook","method","importUri","resourceUri","resolveIdentifier","identifier","resolveEnum","visibility","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","resolvedFactory","dependencies","resolveReflectiveFactory","resolvedDeps","_dependenciesFor","aliasInstance","fromKey","_extractToken","constructDependencies","resolveReflectiveProvider","resolvedProviderMap","normalizedProvidersMap","mergeResolvedReflectiveProviders","_normalizeProviders","invalidProviderError","_createDependency","paramMetadata","UNDEFINED","ResolvedReflectiveProviders","fromResolvedProviders","_providers","_constructionCounter","len","keyIds","objs","_getByKey","createChildFromResolved","inj","instantiateResolved","_instantiateProvider","outOfBoundsError","_getMaxNumberOfObjects","cyclicDependencyError","_instantiate","ResolvedReflectiveFactory$$1","_getByReflectiveDependency","originalException","originalStack","instantiationError","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","keyId","_new","noProviderError","_getObjByKeyId","_throwOrNull","inj_","getProviderAtIndex","_mapProviders","appInits","initialized","donePromise","rej","reject","asyncInitPromises","initResult","catch","_randomChar","fromCharCode","ngModuleFactory","componentFactories","_throwError","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","trace","events","wtf","scope","leaveScope","rangeType","beginTimeRange","range","arg0","arg1","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","properties","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","handleError","forkInnerZoneWithAngularBehavior","isInAngularZone","run","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","cancelTask","runGuarded","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","assertNotInAngularZone","_runCallbacksIfReady","cb","clearTimeout","timeoutId","doneCb","getPendingTasks","updateCb","macroTasks","creationLocation","timeout","addCallback","using","exactMatch","_applications","_testabilityGetter","addToWindow","testability","delete","elem","findInAncestors","findTestabilityInTree","_platform","compileNgModuleFactory","createCompiler","assertNgModuleType","inits","parentPlatformFactory","extraProviders","platform","injectedProviders","requiredToken","_injector","_modules","_destroyListeners","_destroyed","moduleFactory","ngZone","ngZoneOption","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","errorHandler","_callAndReportToErrorHandler","initStatus","runInitializers","_moduleDoBootstrap","compilerOptions","optionsReducer","bootstrapModuleFactory","ngDoBootstrap","module","dst","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","stableSub","unstableSub","assertInAngularZone","componentOrFactory","componentFactory","selectorOrNode","compRef","_unloadComponent","registerApplication","_loadComponent","_tickScope","attachToAppRef","detachFromAppRef","attachView","viewCount","_results","flatten$2","flat","flatItem","_SEPARATOR","FACTORY_CLASS_SUFFIX","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","_compiler","_config","path","loadFactory","loadAndCompile","exportName","checkNotEmpty","factoryClassSuffix","modulePath","SWITCH_VIEW_CONTAINER_REF_FACTORY","ViewContainerRefToken","_lContainer","_hostTNode","_hostView","_viewRefs","startTNode","getParentInjectorTNode","templateRef","adjustedIdx","_adjustIndex","createEmbeddedView","attachToViewContainerRef","ngModuleRef","contextInjector","insert","wasDetached","commentNode","parentOfHostNative","nativeNextSibling","createContainerRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","EventListener","nativeNode","_debugContext","addChild","references","providerTokens","childNodes","newChildren","siblingIndex","refChild","newChild","refIndex","queryAll","_queryElementChildren","_queryNodeChildren","children","eventObj","debugEls","DebugNode__POST_R3__","DebugElement__POST_R3__","getInjectionTokens","eAttrs","lContext","lNode","eClasses","classList","styleName","eStyles","getPropertyValue","_queryNodeChildrenR3","elementsOnly","_nativeNodeToDebugNode","indexDebugNode","trackByFn","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","nextIt","nextRemove","addRemoveOffset","moveOffsets","getPreviousIndex","adjPreviousIndex","currentIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","_nextPrevious","_nextAdded","_nextMoved","_nextIdentityChange","collection","_reset","itemTrackBy","mayBeDirty","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike","_truncate","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","isEmpty","moveOffset","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","KeyValueChangeRecord_","_addToAdditions","_addToChanges","copied","iterable","supports","getTypeNameForDebugging","kv","keyValDiff","iterableDiff","Warning","Ignore","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","nodes","asElementData","asProviderData","asPureExpressionData","asQueryList","Services","setCurrentNode","createRootView","createComponentView","createNgModuleRef","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","expressionChangedAfterItHasBeenCheckedError","isFirstCheck","_addDebugContext","viewDebugError","logError","viewDestroyedError","NOOP","_tokenKeyCache","tokenKey","nodeIdx","bindingIdx","globalBindingIdx","oldValues","UNDEFINED_RENDERER_TYPE_ID","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","checkAndUpdateBinding","checkBindingNoChanges","bindings","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","root","declaredViewContainer","viewParentEl","renderNode","renderElement","renderText","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","valueType","splitDepsDsl","sourceName","getParentRenderElement","renderHost","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","visitRootRenderNodes","visitSiblingRenderNodes","nodeDef","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","execRenderNodeAction","rn","bindingFlags","embeddedViews","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","valueCount","constAndInterp","_toStringWithNull","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","templateFactory","outputIndex","checkIndex","childFlags","directChildFlags","childMatchedQueries","ns","componentProvider","publicProviders","allProviders","ngContent","namespaceAndName","fixedAttrs","bindingDefs","suffixOrSecurityContext","securityContext","nonMinifiedName","outputDefs","isFilled","resolveRendererType2","elDef","preserveContent","listenToElementOutputs","output","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","checkAndUpdateElementValue","elData","renderNode$$1","renderValue","setElementAttribute","setElementClass","unit","setElementStyle","setElementProperty","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","providersByKey","isRoot","resolveNgModuleDep","depDef","tokenKey$$1","providerInstance","_createProviderInstance","moduleTransitivelyPresent","targetsModule","injectable","depValues","_createClass","_callFactory","attachEmbeddedView","elementData","addToArray","vcElementData","dvcElementData","projectedViews","_projectedViews","nodeFlags","parentNodeDef","markNodeAsProjectedTemplate","attachProjectedView","renderAttachEmbeddedView","detachEmbeddedView","removeFromArray","renderDetachView","prevView","prevRenderNode","EMPTY_CONTEXT","viewDefFactory","ComponentFactory_","_inputs","_outputs","inputsArr","outputsArr","componentNodeIndex","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","Injector_","createViewContainerData","ViewContainerRef_","_data","viewRef_","oldViewIndex","newViewIndex","moveEmbeddedView","createChangeDetectorRef","renderNodes","rootRenderNodes","fs","disposables","createTemplateData","TemplateRef_","_parentView","createInjector$1","allowPrivateServices","createRendererV1","RendererAdapter","parentElement","viewRootNodes","viewAllNodes","propertyValue","attributeValue","isAdd","styleValue","methodName","bootstrapComponents","NgModuleRef_","_moduleType","provDef","initNgModule","lifecycles","callNgModuleLifecycle","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","depDefs","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","outputObservable","eventHandlerClosure","callFactory","searchView","findCompView","viewContainer","providerData","updateProp","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","bindingType","filterId","queryIds","nodeMatchedQueries","tplDef","checkAndUpdateQuery","newValues","calcQueryValues","notify","boundValue","getQueryValue","dvc","queryValueType","appendNgContent","argCount","_pureExpressionDef","propToIndex","nbKeys","propertyNames","staticText","_addInterpolationPart","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","lastRenderRootNode","validateNode","isPrivateService","isNgContainer","newParent","rootNodeFlags","bindingCount","outputCount","nodeCount","parentEnd","anchorDef$$1","initView","createViewNodes","compRenderer","hostDef","nodeData","compViewDef","execComponentViewsAction","ViewAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","v8","v9","bindLen","changed","checkAndUpdateElementInline","checkAndUpdateTextInline","checkAndUpdateDirectiveInline","checkAndUpdatePureExpressionInline","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","checkAndUpdatePureExpressionDynamic","checkAndUpdateNodeDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","detachProjectedView","destroyViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","callViewAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","debugHandleEvent","debugUpdateDirectives","debugUpdateRenderer","createProdRootView","prodCheckAndUpdateNode","prodCheckNoChangesNode","elInjector","createRootData","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","viewDef$$1","viewDefOverrides","hasOverrides","hasDeprecatedOverrides","providerOverrides","override","deprecatedBehavior","providerOverridesWithScope","calcHasOverrides","moduleSet","applyProviderOverrides","applyProviderOverridesToNgModule","comp","compFactory","elementIndicesWithOverwrittenProviders","elIndicesWithOverwrittenProviders","lastElementDef","findElementIndicesWithOverwrittenProviders","applyProviderOverridesToElement","elIndex","_currentAction","_currentView","_currentNodeIndex","nextDirectiveWithBinding","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextRenderNodeWithBinding","givenValues","bindingValues","elView","elOrCompView","childDef","collectReferences","componentRenderElement","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","refName","oldAction","oldNodeIndex","isViewDebugError","viewWrappedDebugError","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","removeDebugNodeFromIndex","namespace","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","fullName","defFactory","NgModuleFactory_","_ngModuleDefFactory","cloneNgModuleDefinition","AnalyticsService","Events","Login","NAME","LABEL","Search","CustomEvents","VIDEO_PLAY","projectId","assignGtag","hasGtagLoaded","info","gtag","page","page_title","page_location","origin","page_path","hash","searchType","YoutubeSearch","_youtube_data_api__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","SearchTypes","VIDEO","PLAYLIST","CHANNEL","SearchParams","Types","youtubeDataApi","_api","_apiOptions","q","pageToken","preset","searchVideo","searchForPlaylist","pl","playlistId","StoreDevtoolsModule","_ngrx_store__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","rxjs_operators__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_12__","rxjs_operators__WEBPACK_IMPORTED_MODULE_13__","rxjs_operators__WEBPACK_IMPORTED_MODULE_14__","rxjs_operators__WEBPACK_IMPORTED_MODULE_15__","rxjs_operators__WEBPACK_IMPORTED_MODULE_16__","rxjs_operators__WEBPACK_IMPORTED_MODULE_17__","rxjs_operators__WEBPACK_IMPORTED_MODULE_18__","rxjs_operators__WEBPACK_IMPORTED_MODULE_19__","rxjs_operators__WEBPACK_IMPORTED_MODULE_20__","rxjs_operators__WEBPACK_IMPORTED_MODULE_21__","StoreDevtoolsConfig","STORE_DEVTOOLS_CONFIG","INITIAL_OPTIONS","noMonitor","DEFAULT_NAME","createConfig","DEFAULT_OPTIONS","maxAge","monitor","actionSanitizer","stateSanitizer","serialize","logOnly","pause","lock","persist","export","import","jump","skip","reorder","PERFORM_ACTION","REFRESH","ROLLBACK","COMMIT","SWEEP","TOGGLE_ACTION","SET_ACTIONS_ACTIVE","JUMP_TO_STATE","JUMP_TO_ACTION","IMPORT_STATE","LOCK_CHANGES","PAUSE_RECORDING","PerformAction","timestamp","Refresh","Reset","Rollback","Commit","Sweep","ToggleAction","JumpToState","JumpToAction","actionId","ImportState","nextLiftedState","LockChanges","status","PauseRecording","difference","second","unliftState","liftedState","computedStates","currentStateIndex","liftAction","Date","now","sanitizeActions","sanitizedActions","actionIdx","sanitizeAction","sanitizeStates","states","computedState","sanitizeState","stateIdx","shouldFilterActions","actionsWhitelist","actionsBlacklist","filterLiftedState","whitelist","blacklist","filteredStagedActionIds","filteredActionsById","filteredComputedStates","stagedActionIds","liftedAction","actionsById","isActionFiltered","predicateMatch","whitelistMatch","blacklistMatch","DevtoolsDispatcher","ExtensionActionTypes","START","DISPATCH","STOP","ACTION","REDUX_DEVTOOLS_EXTENSION","DevtoolsExtension","devtoolsExtension","dispatcher","createActionStreams","isLocked","isPaused","currentState","sanitizedState","sanitizedAction","nextActionId","sendToReduxDevtools","extensionConnection","sanitizedLiftedState","getExtensionConfig","connection","connect","changes$","createChangesObservable","start$","stop$","liftedActions$","unwrapAction","actionsUntilStop$","liftedUntilStop$","actions$","eval","extensionOptions","INIT_ACTION","RECOMPUTE","RECOMPUTE_ACTION","computeNextEntry","reducer","nextError","nextState","recomputeStates","minInvalidatedStateIndex","committedState","skippedActionIds","nextComputedStates","lastIncludedActionId","previousEntry","previousState","previousError","liftInitialState","initialCommittedState","monitorReducer","monitorState","0","liftReducerWith","initialLiftedState","commitExcessActions","excess","idsToDelete","commitChanges","Infinity","actionIds","lastState","cmp","StoreDevtools","reducers$","extension","scannedActions","initialState","liftedInitialState","liftReducer","liftedAction$","asObservable","liftedReducer$","liftedStateSubject","liftedStateSubscription","reducedLiftedState","unliftedAction","extensionStartSubscription","refresh","liftedState$","state$","stateSubscription","IS_EXTENSION_OR_MONITOR_PRESENT","createIsExtensionOrMonitorPresent","createReduxDevtoolsExtension","createStateObservable","devtools","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","app_navbar_user_component_AppNavbarUserComponent","userImageUrl","signedIn","signIn","core","_l","_v","en","$event","ad","_ck","_co","href","icon_directive_ngfactory","icon_directive","View_AppNavbarUserComponent_1","common","ngIf","ngIfElse","View_AppNavbarUserComponent_2","Key","app_navbar_menu_component_AppNavbarMenuComponent","appVersion","semver","isNewAvailable","checkingForVersion","theme","themes","selected","signOut","versionUpdate","versionCheck","themeChange","menuState","keyCode","Escape","hideMenu","toState","View_AppNavbarMenuComponent_1","View_AppNavbarMenuComponent_2","button_group_component_ngfactory","button_group_component","buttons","View_AppNavbarMenuComponent_3","mainIcon","headerIcon","View_AppNavbarComponent_2","View_AppNavbarComponent_3","header","View_AppNavbarComponent_1","View_AppNavbarUserComponent_0","RenderType_AppNavbarUserComponent","View_AppNavbarMenuComponent_0","RenderType_AppNavbarMenuComponent","user$","imageUrl","isSignIn","appVersion$","themes$","_now_playlist_reducer__WEBPACK_IMPORTED_MODULE_0__","_now_playlist_actions__WEBPACK_IMPORTED_MODULE_1__","_now_playlist_selectors__WEBPACK_IMPORTED_MODULE_2__","isNewChange","toPayload","AppNavbarModule","environment","production","CLIENT_ID","cdr","top","left","isIn","isFade","positionElements","hostEl","targetEl","positionStr","appendToBody","targetElPos","positionStrParts","pos0","pos1","hostElPos","position","targetElWidth","offsetWidth","targetElHeight","offsetHeight","shiftWidth","center","right","shiftHeight","bottom","nativeEl","offsetParentBCR","elBCR","offsetParentEl","parentOffsetEl","clientTop","scrollTop","clientLeft","scrollLeft","boundingClientRect","getBoundingClientRect","pageYOffset","documentElement","pageXOffset","getStyle","cssProp","currentStyle","getComputedStyle","isStaticPositioned","offsetParent","HTMLElement","subscribeToObservable","_symbol_observable__WEBPACK_IMPORTED_MODULE_0__","obs","TypeError","videoToThumb_pipe_VideoToThumbPipe","thumbUrl","thumbs","acc","extractThumbnail","getSnippet","extractThumbUrl","memo_decorator_default","Observable","subscribeTo","symbol_observable","isInteropObservable","sub","schedule","observable","fromObservable","subscribeToPromise","fromPromise","isArrayLike","fromArray","symbol_iterator","isIterable","return","subscribeToIterable","fromIterable","async","_AsyncAction__WEBPACK_IMPORTED_MODULE_0__","pluck","currentProp","plucker","store_Store","store_select","combineReducers","compose","createReducerFactory","store_ActionsSubject","INIT","store_ReducerManager","store_ReducerObservable","ReducerManagerDispatcher","store_ScannedActionsSubject","createSelector","store_State","store_StateObservable","INITIAL_STATE","_REDUCER_FACTORY","REDUCER_FACTORY","_INITIAL_REDUCERS","INITIAL_REDUCERS","_INITIAL_STATE","META_REDUCERS","_STORE_REDUCERS","StoreRootModule","StoreFeatureModule","_initialStateFactory","_createStoreReducers","ACTIONS_SUBJECT_PROVIDERS","STORE_FEATURES","_FEATURE_REDUCERS","_FEATURE_CONFIGS","_STORE_FEATURES","_FEATURE_REDUCERS_TOKEN","FEATURE_REDUCERS","reducers","reducerKeys","finalReducers","finalReducerKeys","hasChanged","previousStateForKey","nextStateForKey","functions","reduceRight","composed","reducerFactory","metaReducers","addFeatures","reducerDict","createFeatureReducerFactory","addReducers","removeFeatures","removeReducers","updateReducers","featureKey","featureKeys","object","keyToRemove","REDUCER_MANAGER_PROVIDERS","Subject","SCANNED_ACTIONS_SUBJECT_PROVIDERS","reducer$","seed","stateAndAction$","observeOn","queue","withLatestFrom","scan","reduceState","stateActionPair","STATE_PROVIDERS","actionsObserver","reducerManager","pathOrMapFn","paths","operator","addReducer","removeReducer","STORE_PROVIDERS","propsOrPath","source$","mapped$","pathSlices","isEqualCheck","defaultMemoize","projectionFn","isArgumentsEqual","isResultEqual","lastArguments","lastResult","memoized","isArgumentsChanged","newResult","memoize","stateFn","memoizedProjector","tail","projector","memoizedSelectors","release","memoizedState","createSelectorFactory","scannedActions$","featureReducers","feats","tokenReducers","_createFeatureStore","configs","featureStores","feat","conf","_createFeatureReducers","reducerCollection","tokenReducerCollection","featureName","PlaylistViewComponent","playlistProxy","route","fetchPlaylist","videos$","fetchPlaylistVideos","header$","fetchPlaylistHeader","nowPlaylistIds$","playPlaylist","queueVideo","unqueueVideo","goBack","PlaylistVideosResolver","userProfile","fetchAllPlaylistItems","empty","_Observable__WEBPACK_IMPORTED_MODULE_0__","emptyScheduled","playlist_cover_component_PlaylistCoverComponent","total","contentDetails","itemCount","ngStyle","background-image","playlist_viewer_component_PlaylistViewerComponent","queuedPlaylist","View_PlaylistCoverComponent_0","RenderType_PlaylistCoverComponent","youtube_list_ngfactory","youtube_list","queued","unqueue","app_navbar_component_ngfactory","app_navbar_component","authorization_service","app_api","headerMainIconClick","View_PlaylistViewerComponent_0","RenderType_PlaylistViewerComponent","PlaylistResolver","_of__WEBPACK_IMPORTED_MODULE_0__","_operators_concatAll__WEBPACK_IMPORTED_MODULE_1__","observables","Observable_Observable","_isScalar","nextOrObserver","Observer","toSubscriber","_trySubscribe","canReportError","promiseCtor","getPromiseCtor","operations","UserProfile","_youtube_api_service__WEBPACK_IMPORTED_MODULE_1__","authorization","isSearching","playlistInfo","idKey","mine","playlistApi","isNewPage","hasToken","resetPageToken","getList","setPageToken","deletePageToken","videoIds","resourceId","videoId","subscriptions","items$","fetchMetadata","fetchItems","_s","collectItems","_profile","getImageUrl","getName","JsonpCallbackContext","jsonpCallbackContext","BrowserXhr","HttpXsrfCookieExtractor","HttpXsrfInterceptor","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpBackend","HttpHandler","HttpClient","HttpHeaders","HTTP_INTERCEPTORS","JsonpClientBackend","JsonpInterceptor","HttpClientJsonpModule","HttpClientModule","HttpClientXsrfModule","HttpInterceptingHandler","HttpParams","HttpXhrBackend","XhrFactory","HttpXsrfTokenExtractor","_angular_common__WEBPACK_IMPORTED_MODULE_6__","normalizedNames","lazyUpdate","lazyInit","line","maybeSetNormalizedName","op","lcName","copyFrom","applyUpdate","other","base","toDelete","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","encodeURIComponent","updates","cloneFrom","encoder","fromString","fromObject","rawParams","codec","map$$1","eqIdx","val","decodeKey","decodeValue","paramParser","eKey","encodeKey","encodeValue","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","third","fourth","reportProgress","withCredentials","toUpperCase","mightHaveBody","urlWithParams","qIdx","sep","setHeaders","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","statusText","ok","HttpHeaderResponse","HttpResponse","HttpErrorResponse","addBody","observe","handler","req","events$","handle","res$","request","callbackParam","append","HttpInterceptorHandler","interceptor","intercept","NoopInterceptor","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","callbackMap","nextCallback","src","finished","cancelled","onLoad","jsonp","XSSI_PREFIX","xhrFactory","build","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","getResponseHeader","getResponseUrl","responseText","originalBody","parse","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","partialText","onUpProgress","progress","upload","abort","doc","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","tokenService","headerName","lcUrl","startsWith","getToken","backend","chain","interceptors","withOptions","Scheduler","SchedulerAction","AsyncScheduler_AsyncScheduler","scheduled","execute","take","_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__","_observable_empty__WEBPACK_IMPORTED_MODULE_2__","TakeOperator","TakeSubscriber","catchError","_InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__","_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__","CatchOperator","caught","CatchSubscriber","err2","_unsubscribeAndRecycle","debounceTime","_scheduler_async__WEBPACK_IMPORTED_MODULE_1__","dueTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","hasValue","clearDebounce","dispatchNext","debouncedNext","accumulator","hasSeed","ScanOperator","ScanSubscriber","_seed","of","_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__","_fromArray__WEBPACK_IMPORTED_MODULE_1__","_empty__WEBPACK_IMPORTED_MODULE_2__","_scalar__WEBPACK_IMPORTED_MODULE_3__","SharedModule","SampleTimeOperator","period","sampleTime_SampleTimeSubscriber","dispatchNotification","resolveContainerElement","scrollWindow","defaultElement","fromRoot","hasWindow","customRoot","findElement","inputPropChanged","ngx_infinite_scroll_InfiniteScrollDirective","InfiniteScrollModule","VerticalProps","clientHeight","scrollHeight","offsetTop","HorizontalProps","AxisResolver","vertical","propsMap","createResolver","windowElement","axis","isWindow","createResolverWithContainer","includes","isElementWindow","getDocumentElement","isContainerWindow","calculatePoints","offsetHeightKey","clientHeightKey","extractHeightPropKeys","getElementHeight","extractHeightForElement","scrolled","getElementPageYOffset","nativeElementHeight","totalToScroll","topKey","getElementOffsetTop","calculatePointsForWindow","scrollTopKey","scrollHeightKey","calculatePointsForElement","docElem","pageYOffsetKey","offsetTopKey","ownerDocument","defaultView","ScrollState","lastScrollPosition","lastTotalToScroll","triggered","down","up","scrolledUntilNow","updateScrollPosition","updateTotalToScroll","scroll","isScrollingDown","createScroller","scrollContainer","horizontal","scrollState","throttle","distance","upDistance","downDistance","fromEvent","scheduler_async","sampleTime","attachScrollEvent","positionStats","stats","scrollDown","fire","isScrollingDownwards","scrollingDown","remaining","containerBreakpoint","totalHiddenContentHeight","shouldFireScrollEvent","getScrollStats","toInfiniteScrollParams","tap","updateScroll","alwaysCallback","isTriggeredCurrentTotal","shouldTriggerEvents","isTriggeredScroll","updateTriggeredFlag","toInfiniteScrollAction","InfiniteScrollActions","DOWN","UP","currentScrollPosition","scrolledUp","infiniteScrollDistance","infiniteScrollUpDistance","infiniteScrollThrottle","infiniteScrollDisabled","infiniteScrollContainer","immediateCheck","setup","containerChanged","disabledChanged","distanceChanged","shouldSetup","destroyScroller","disposeScroller","disable","handleOnScroll","Themes","DEFAULT_THEME","ErrorActions","ErrorMessages","appCore","prevReducerKey","newReducerState","storage","prevReducerState","getItem","prevStateJson","removeItem","migrateReducerState","sidebarExpanded","requestInProcess","version","localStorage","app_core_actions","SIDEBAR_EXPAND","SIDEBAR_COLLAPSE","SIDEBAR_TOGGLE","APP_VERSION_RECIEVED","currentVersion","remoteVersion","isCurrentVersionEmpty","isCurrentDifferentFromRemote","getVersion","APP_CHECK_VERSION","APP_THEME_CHANGE","ERROR_ADD","RELOAD","ERROR_CLEAN","TOGGLE_ERROR","hostReportError","defer","_from__WEBPACK_IMPORTED_MODULE_1__","observableFactory","isNumeric","parseFloat","timer","periodOrScheduler","isScheduler","due","_now_playlist_actions__WEBPACK_IMPORTED_MODULE_0__","repeat","newMedias","addMedia","allVideoIds","newVideos","addMedias","_media","removeMedia","selectNextIndex","filteredVideos","getSelectedInFilteredVideos","selectPreviousIndex","nextId","currentId","getNextIdForPlaylist","selectNextOrPreviousTrack","sanitizedFilter","filterVideos","isRepeat","YoutubePlayerModule","YoutubePlayerComponent","YoutubePlayerService","_angular_common__WEBPACK_IMPORTED_MODULE_1__","win","YouTubeRef","YouTubePlayerRef","Player","defaultSizes","ytApiLoaded","createApi","playerApiScript","elementId","sizes","playerVars","createPlayer","pauseVideo","loadVideoById","isPlayerReady","getPlayerState","PlayerState","ENDED","PAUSED","playerSize","onReady","ev","ready","onStateChange","isFullScreen","setSize","playerService","getProtocol","htmlId","generateUniqueId","loadPlayerApi","setupPlayer","AppApi","_store_app_core__WEBPACK_IMPORTED_MODULE_0__","_store_router_store__WEBPACK_IMPORTED_MODULE_1__","_store_user_profile__WEBPACK_IMPORTED_MODULE_2__","select","COMMON_DIRECTIVES","findLocaleData","DEPRECATED_PLURAL_FN","COMMON_DEPRECATED_I18N_PIPES","COMMON_PIPES","registerLocaleData","formatDate","formatCurrency","formatNumber","formatPercent","NgLocaleLocalization","NgLocalization","NumberFormatStyle","FormStyle","TranslationWidth","FormatWidth","NumberSymbol","WeekDay","getNumberOfCurrencyDigits","getCurrencySymbol","getLocaleDayPeriods","getLocaleDayNames","getLocaleMonthNames","getLocaleId","getLocaleEraNames","getLocaleWeekEndRange","getLocaleFirstDayOfWeek","getLocaleDateFormat","getLocaleDateTimeFormat","getLocaleExtraDayPeriodRules","getLocaleExtraDayPeriods","getLocalePluralCase","getLocaleTimeFormat","getLocaleNumberSymbol","getLocaleNumberFormat","getLocaleCurrencyName","getLocaleCurrencySymbol","parseCookieValue","DeprecatedI18NPipesModule","NgClass","NgForOf","NgForOfContext","NgIf","NgIfContext","NgPlural","NgPluralCase","NgStyle","NgSwitch","NgSwitchCase","NgSwitchDefault","NgTemplateOutlet","NgComponentOutlet","DOCUMENT","AsyncPipe","DatePipe","I18nPluralPipe","I18nSelectPipe","JsonPipe","LowerCasePipe","CurrencyPipe","DecimalPipe","PercentPipe","SlicePipe","UpperCasePipe","TitleCasePipe","KeyValuePipe","DeprecatedDatePipe","DeprecatedCurrencyPipe","DeprecatedDecimalPipe","DeprecatedPercentPipe","PLATFORM_BROWSER_ID","PLATFORM_SERVER_ID","PLATFORM_WORKER_APP_ID","PLATFORM_WORKER_UI_ID","isPlatformBrowser","isPlatformServer","isPlatformWorkerApp","isPlatformWorkerUi","ViewportScroller","NullViewportScroller","PlatformLocation","LOCATION_INITIALIZED","LocationStrategy","APP_BASE_HREF","HashLocationStrategy","PathLocationStrategy","Location","platformStrategy","_subject","_platformStrategy","browserBaseHref","getBaseHref","_baseHref","stripTrailingSlash","_stripIndexHtml","onPopState","includeHash","normalize","normalizeQueryParams","baseHref","_stripBaseHref","prepareExternalUrl","pushState","replaceState","forward","back","onNext","onThrow","onReturn","slashes","endsWith","pathEndIdx","droppedSlashIdx","_platformLocation","onHashChange","internal","joinWithSlash","queryParams","pathname","getBaseHrefFromDOM","externalUrl","u","localeEn","LOCALE_DATA","localeId","extraData","CURRENCIES_EN","ADP","AFN","ALL","AMD","AOA","ARS","AUD","BAM","BBD","BDT","BHD","BIF","BMD","BND","BOB","BRL","BSD","BWP","BYN","BYR","BZD","CAD","CHF","CLF","CLP","CNY","COP","CRC","CUC","CUP","CZK","DJF","DKK","DOP","EGP","ESP","EUR","FJD","FKP","GBP","GEL","GIP","GNF","GTQ","GYD","HKD","HNL","HRK","HUF","IDR","ILS","INR","IQD","IRR","ISK","ITL","JMD","JOD","JPY","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LTL","LUF","LVL","LYD","MGA","MGF","MMK","MNT","MRO","MUR","MXN","MYR","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PHP","PKR","PLN","PYG","RON","RSD","RUB","RUR","RWF","SBD","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STD","STN","SYP","THB","TMM","TND","TOP","TRL","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYI","UYU","UZS","VEF","VND","VUV","XAF","XCD","XOF","XPF","YER","ZAR","ZMK","ZMW","ZWD","Decimal","Percent","Currency","Scientific","Format","Standalone","Narrow","Abbreviated","Wide","Short","Medium","Long","Full","Group","List","PercentSign","PlusSign","MinusSign","Exponential","SuperscriptingExponent","PerMille","NaN","TimeSeparator","CurrencyDecimal","CurrencyGroup","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","formStyle","getLastDefinedValue","symbol","checkFullData","rule","extractTime","time","h","hours","minutes","normalizedLocale","parentLocale","code","format","currency","getLocaleCurrencies","symbolNarrow","DEFAULT_NB_OF_CURRENCY_DIGITS","digits","ISO8601_DATE_REGEX","NAMED_FORMATS","DATE_FORMATS_SPLIT","ZoneWidth","ShortGMT","Extended","DateType","FullYear","Month","Hours","Minutes","Seconds","FractionalSeconds","Day","TranslationType","DayPeriods","Days","Months","Eras","timezone","date","isDate","parsedNb","isoStringToDate","toDate","getNamedFormat","formatValue","shortTime","shortDate","formatDateTime","mediumTime","mediumDate","longTime","longDate","fullTime","fullDate","dateTimezoneOffset","getTimezoneOffset","timezoneToOffset","reverseValue","timezoneOffset","getTime","setMinutes","getMinutes","addDateMinutes","convertTimezoneToLocal","dateFormatter","DATE_FORMATS","formatter","dateStrGetter","dateGetter","weekGetter","timeZoneGetter","getDateFormatter","opt_values","padNumber","num","minusSign","negWrap","neg","strNum","getFullYear","getMonth","getDate","getHours","getSeconds","getMilliseconds","getDay","getDatePart","milliseconds","formatFractionalSeconds","localeMinus","form","extended","currentHours","currentMinutes","rules","dayPeriods","hoursFrom","minutesFrom","hoursTo","minutesTo","unexpected","getDateTranslation","ceil","JANUARY","THURSDAY","monthBased","nbDaysBefore1stDayOfMonth","today","firstThurs","year","firstDayOfYear","getFirstThursdayOfYear","diff","datetime","getThursdayThisWeek","round","fallback","requestedTimezoneOffset","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","ms","valueOf","NUMBER_FORMAT_REGEXP","MAX_DIGITS","DECIMAL_SEP","ZERO_CHAR","PATTERN_SEP","GROUP_SEP","DIGIT_CHAR","CURRENCY_CHAR","PERCENT_CHAR","formatNumberToLocaleString","groupSymbol","decimalSymbol","digitsInfo","isPercent","formattedText","isZero","isFinite","parsedNumber","integerLen","zeros","numStr","exponent","parseNumber","fractionLen","toPercent","minInt","minFraction","minFrac","maxFraction","maxFrac","minIntPart","minFractionPart","maxFractionPart","parseIntAutoRadix","fractionSize","roundAt","digit","dropTrailingZeros","minLen","carry","roundNumber","decimals","groups","lgSize","gSize","negPre","negSuf","posPre","posSuf","currencyCode","parseNumberFormat","patternParts","positive","negative","positiveParts","integer","fraction","ch","trunkLen","ngLocalization","deprecatedPluralFn","cookieStr","eqIndex","cookieValue","_iterableDiffers","_keyValueDiffers","_ngEl","_initialClasses","klass","_removeClasses","_applyClasses","_rawClass","ngClass","_iterableDiffer","_keyValueDiffer","iterableChanges","_applyIterableChanges","keyValueChanges","_applyKeyValueChanges","forEachAddedItem","_toggleClass","forEachChangedItem","forEachRemovedItem","rawClassVal","enabled","_componentRef","_moduleRef","ngComponentOutlet","ngComponentOutletInjector","ngComponentOutletNgModuleFactory","parentModule","ngComponentOutletContent","$implicit","ngForOf","even","odd","_viewContainer","_template","_differs","_ngForOfDirty","_differ","_ngForOf","ngForTrackBy","ngForTemplate","_applyChanges","insertTuples","forEachOperation","adjustedPreviousIndex","tuple","RecordViewTuple","move","_perViewChange","ilen","forEachIdentityChange","_thenTemplateRef","_elseTemplateRef","_thenViewRef","_elseViewRef","condition","_updateView","ngIfThen","assertTemplate","expr","property","SwitchView","_templateRef","_created","created","_defaultUsed","_caseCount","_lastCaseCheckIndex","_lastCasesMatched","ngSwitch","_ngSwitch","_updateDefaultCases","_defaultViews","matched","useDefault","enforceState","_addCase","_matchCase","ngSwitchCase","_addDefault","_localization","_caseViews","ngPlural","_switchValue","switchView","_clearViews","_activateView","_activeView","isANumber","addCase","_ngStyle","_setStyle","nameAndUnit","_shouldRecreateView","ngTemplateOutlet","ngTemplateOutletContext","_updateExistingContext","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","invalidPipeArgumentError","NumberFormatter","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","currencyAsSymbol","currencyDisplay","Intl","NumberFormat","DATE_FORMATS_SPLIT$1","PATTERN_ALIASES","yMMMdjms","datePartGetterFactory","combine","digitCondition","nameCondition","yMdjm","yMMMMEEEEd","yMMMMd","yMMMd","yMd","jms","jm","DATE_FORMATS$1","yyyy","yy","MMMM","MMM","MM","M","LLLL","L","dd","HH","digitModifier","hourExtractor","hour12Modify","H","hh","jj","mm","ss","sss","EEEE","EEE","EE","E","inner","hourClockExtractor","Z","timeZoneGetter$1","z","ww","G","GG","GGG","GGGG","intlDateFormat","DateTimeFormat","hour","hour12","timeZoneName","merged","opt","ret","DATE_FORMATTER_CACHE","DateFormatter","cacheKey","_format","partToTime","_locale","isDate$1","_ALIASES","formatNumber$1","medium","short","symbolDisplay","_promiseStrategy","updateLatestValue","_observableStrategy","_ref","_latestValue","_latestReturnedValue","_subscription","_obj","_strategy","_dispose","wrap","_selectStrategy","createSubscription","_updateLatestValue","dispose","markForCheck","unicodeWordMatch","txt","_INTERPOLATION_REGEXP","pluralMap","mapping","differs","compareFn","keyValueA","keyValueB","aString","bString","differ","differChanges","forEachItem","makeKeyValuePair","strToNumber","display","ɵ0","platformId","supportScrollRestoration","scrollX","scrollY","scrollTo","anchor","elSelectedById","scrollToElement","elSelectedByName","scrollRestoration","history","rect","_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__","_subscribeToPromise__WEBPACK_IMPORTED_MODULE_2__","_subscribeToIterable__WEBPACK_IMPORTED_MODULE_3__","_subscribeToObservable__WEBPACK_IMPORTED_MODULE_4__","_isArrayLike__WEBPACK_IMPORTED_MODULE_5__","_isPromise__WEBPACK_IMPORTED_MODULE_6__","_isObject__WEBPACK_IMPORTED_MODULE_7__","_symbol_iterator__WEBPACK_IMPORTED_MODULE_8__","_symbol_observable__WEBPACK_IMPORTED_MODULE_9__","identity","_this","detectDate","dateReviver","dummyReviver","rehydrateApplicationState","storageKeySerializer","restoreDates","curr","reviver","deserialize","decrypt","encrypt","stateSlice","isObjectRegex","raw","syncStateUpdate","removeOnUndefined","syncCondition","replacer","space","name_1","memo","setItem","localStorageSync","stateKeys","validateStateKeys","rehydratedState","rehydrate","localStorageSyncAndClean","getPlayer","getCurrentMedia","getIsPlayerPlaying","getShowPlayer","getPlayerFullscreen","app_player_reducer","app_player_actions","merge","_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__","_operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__","_fromArray__WEBPACK_IMPORTED_MODULE_3__","PlaylistProxy","_core_store_now_playlist__WEBPACK_IMPORTED_MODULE_2__","userProfileActions","appPlayerApi","navigateBack","toRouteData","removeVideoFromPlaylist","RecievedAppVersion","UpdateAppVersion","CheckVersion","ToggleSidebar","ThemeChange","AddError","ToggleError","CleanError","APP_UPDATE_VERSION","Notification","NotificationKind","_observable_empty__WEBPACK_IMPORTED_MODULE_0__","_observable_of__WEBPACK_IMPORTED_MODULE_1__","_observable_throwError__WEBPACK_IMPORTED_MODULE_2__","do","undefinedValueNotification","completeNotification","SubjectSubscriber","_Subscriber__WEBPACK_IMPORTED_MODULE_1__","_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__","_SubjectSubscription__WEBPACK_IMPORTED_MODULE_4__","_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_5__","observers","subject","AnonymousSubject","copy","scalar","isObject","YoutubeListComponent","queuedMediaIdMap","SubjectSubscription","_Subscription__WEBPACK_IMPORTED_MODULE_0__","subscriberIndex","IgnoreElementsOperator","ignoreElements_IgnoreElementsSubscriber","unused","DeMaterializeOperator","dematerialize_DeMaterializeSubscriber","groupBy","elementSelector","durationSelector","subjectSelector","GroupByOperator","groupBy_GroupBySubscriber","attemptedToUnsubscribe","_group","group","groupedObservable","groupBy_GroupedObservable","duration","groupBy_GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","groupBy_InnerRefCountSubscription","MaterializeOperator","materialize_MaterializeSubscriber","createNext","createComplete","ExhaustMapOperator","exhaustMap_ExhaustMapSubscriber","OuterSubscriber","hasSubscription","tryNext","subscribeToResult","createSourceInstances","EffectsRootModule","EffectsRunner","ROOT_EFFECTS","Effect","effects_Actions","ofType","effects_EffectSources","METADATA_KEY","getEffectMetadataEntries","sourceProto","entries","setEffectMetadataEntries","getSourceForInstance","getSourceMetadata","mergeEffects","sourceInstance","notification","effect","allowedTypes","verifyOutput","reporter","reportErrorThrown","isInvalidAction","isAction","isMethod","getEffectName","reportInvalidActions","onIdentifyEffectsKey","onRunEffectsKey","onInitEffects","effectSourceInstance","effectsInstance","exhaustMap","resolveEffectSource","mergedEffects$","isOnRunEffects","ngrxOnRunEffects","FEATURE_EFFECTS","effectSources","effectsSubscription","toActions","ROOT_EFFECTS_INIT","sources","runner","rootEffects","storeRootModule","storeFeatureModule","addEffects","EffectsFeatureModule","effectSourceGroups","instances","featureEffects","getAppCore","getAppTheme","getAllAppThemes","getAppThemes","appLayout","_theme","label","getAppVersion","getSidebarCollapsed","selectError","selectErrorMessage","selectIsErrorShow","selectErrorAction","app_core_reducer","_InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__","_subscribeTo__WEBPACK_IMPORTED_MODULE_1__","outerSubscriber","youtube_media_YoutubeMediaComponent","showDesc","isPlaying","ICON_PREFIX_BRAND","description","View_YoutubeMediaComponent_1","View_YoutubeMediaComponent_2","View_YoutubeMediaComponent_3","View_YoutubeMediaComponent_4","statistics","likeCount","IsInQueuePipe","View_YoutubeMediaComponent_0","RenderType_YoutubeMediaComponent","View_YoutubeListComponent_1","YoutubeApiService","defaultParams","authService","authorize","resetConfig","setConfig","option","MediaParserService","LINE_WITH_TRACKre","HH_MM_SSre","hasTracksRegexp","tracks","toNumber","_tracks","verifyTracksCue","timeUnitRatio","3","2","1","_hostReportError__WEBPACK_IMPORTED_MODULE_0__","mergeAll","_mergeMap__WEBPACK_IMPORTED_MODULE_0__","_util_identity__WEBPACK_IMPORTED_MODULE_1__","concatMap","_createNgProbe","BrowserModule","platformBrowser","DOCUMENT$1","EVENT_MANAGER_PLUGINS","EventManager","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","DomSanitizer","getDOM","DomRendererFactory2","DomEventsPlugin","HammerGesturesPlugin","KeyEventsPlugin","DomSharedStylesHost","SharedStylesHost","DomSanitizerImpl","_angular_common__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_DOM","DomAdapter","resourceLoaderType","attrToPropMap","_attrToPropMap","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","domPrefixes","transEndEventNames","WebkitTransition","MozTransition","OTransition","transition","getDistributedNodes","baseUrl","createShadowRoot","class","innerHtml","readonly","tabindex","DOM_KEY_LOCATION_NUMPAD","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","F","I","J","K","N","O","`","","nodeContains","contains","BrowserDomAdapter","templateHtml","adapter","setRootDomAdapter","groupEnd","nodeA","nodeB","querySelectorAll","evt","eventType","getDefaultDocument","createEvent","initEvent","defaultPrevented","hasProperty","replaceChild","checked","css","shadowRoot","cloneNode","getElementsByClassName","getElementsByTagName","stylename","attrib","attribute","hasAttribute","hasAttributeNS","getAttribute","getAttributeNS","removeAttributeNS","newTitle","isElementNode","msMatchesSelector","webkitMatchesSelector","DocumentFragment","importNode","templateAwareRoot","adoptNode","keyIdentifier","baseElement","getBaseElementHref","urlParsingNode","relativePath","navigator","userAgent","performance","supportsState","BrowserPlatformLocation","_doc","_init","getLocation","_history","getHistory","getGlobalEventTarget","newPath","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","transitionId","dom","BrowserGetTestability","getAllTestabilities","getAllRootElements","testabilities","didWork","decrement","didWork_","whenStable","getTestability","isShadowRoot","getHost","exportNgVar","COMPILED","CORE_TOKENS","INSPECT_GLOBAL_NAME","CORE_TOKENS_GLOBAL_NAME","inspectNativeElement","coreTokens","_ngProbeTokensToMap","ELEMENT_PROBE_PROVIDERS","plugins","_eventNameToPlugin","manager","_plugins","_findPluginFor","addGlobalEventListener","plugin","EventManagerPlugin","_stylesSet","additions","onStylesAdded","_hostNodes","_styleNodes","styleEl","hostNode","_addStylesToHost","styleNode","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","decoratePreventDefault","eventHandler","eventManager","sharedStylesHost","rendererByCompId","DefaultDomRenderer2","EmulatedEncapsulationDomRenderer2","applyToHost","ShadowDomRenderer","addStyles","namespaceUri","checkNoSyntheticProp","AT_CHARCODE","nameKind","contentAttr","componentShortId","shimContentAttribute","hostAttr","shimHostAttribute","attachShadow","addHost","removeHost","nodeOrShadowRoot","__symbol__","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","FALSE","ANGULAR","NATIVE_ADD_LISTENER","NATIVE_REMOVE_LISTENER","stopSymbol","stopMethodSymbol","blackListedEvents","blackListedMap","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","copiedTasks","patchEvent","Event","stopImmediatePropagation","globalListenerRegistered","callbackRegistered","underlyingRemove","found","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","overrides","mc","enable","loader","isCustomEvent","Hammer","getZone","cancelRegistration","deregister","buildHammer","off","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","metaKey","shiftKey","parseEventName","parsedEvent","outsideHandler","eventCallback","onAndCancel","domEventName","_normalizeKey","fullKey","modifierName","getEventKey","modifierGetter","getEventFullKey","keyName","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","SafeStyleImpl","SafeScriptImpl","SafeResourceUrlImpl","SafeUrlImpl","expectedType","SafeValueImpl","getTypeName","INTERNAL_BROWSER_PLATFORM_PROVIDERS","makeCurrent","BROWSER_SANITIZATION_PROVIDERS","BROWSER_MODULE_PROVIDERS","appId","createMeta","Meta","_dom","tag","forceCreation","_getOrCreateElement","attrSelector","_parseSelector","getTag","_setMetaElementAttributes","removeTagElement","_containsAttributes","createTitle","Title","getTitle","setTitle","TransferState","onSerializeCallbacks","transferState","defaultValue","script","getElementById","unescapedText","&a;","&q;","&s;","&l;","&g;","unescapeHtml","app/containers/user/index.ngfactory","webpackAsyncContext","ids","_user_profile_service__WEBPACK_IMPORTED_MODULE_0__","_youtube_search__WEBPACK_IMPORTED_MODULE_1__","_youtube_player_service__WEBPACK_IMPORTED_MODULE_2__","_now_playlist_service__WEBPACK_IMPORTED_MODULE_3__","_youtube_videos_info_service__WEBPACK_IMPORTED_MODULE_4__","_gapi_loader_service__WEBPACK_IMPORTED_MODULE_5__","_authorization_service__WEBPACK_IMPORTED_MODULE_6__","_youtube_data_api__WEBPACK_IMPORTED_MODULE_7__","_version_checker_service__WEBPACK_IMPORTED_MODULE_8__","_media_parser_service__WEBPACK_IMPORTED_MODULE_9__","_analytics_service__WEBPACK_IMPORTED_MODULE_10__","NgxTypeaheadModule","ngx_typeahead_NgxTypeAheadComponent","Backspace","Tab","Enter","Shift","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","MacCommandLeft","MacCommandRight","MacCommandFirefox","isEnterKey","NO_INDEX","toJsonpSingleResult","toJsonpFinalResults","toFormControlValue","http$$1","showSuggestions","taUrl","taParams","taQueryParam","taApi","taApiMethod","taList","taListItemField","taListItemLabel","taDebounce","taAllowEmpty","taCaseSensitive","taDisplayOnFocus","taSelected","suggestionIndex","activeResult","searchQuery","selectedItem","resultsAsItems","keydown$","keyup$","isEscapeKey","hideSuggestions","stopPropagation","displaySuggestions","filterEnterEvent","listenAndSuggest","navigateWithArrows","renderTemplate","suggestionsTplRef","codeKey","validateNonCharKeyCode","concat_concat","hasCharacters","switchMap","suggest","assignResults","labelForDisplay","elementObs","handleSelectSuggestion","validateArrowKeys","updateIndex","stepUp","listLength","topLimit","currentResultIndex","resultIndex","resolveNextIndex","createListSource","queryParamKey","customParams","searchParams","createParamsForQuery","requestJsonp","taCallbackParamValue","requestHttp","apiMethod","resolveApiMethod","isActive","isIndexActive","suggestion","resolvedResult","taItemTpl","sanitizedQuery","fieldsToExtract","caseSensitive","newItem","cur","resolveItemValue","handleEsc","onkeyup","onClick","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","AppNavbarComponent","signinUser","signoutUser","updateVersion","checkVersion","changeTheme","YoutubeVideosInfo","_youtube_api_service__WEBPACK_IMPORTED_MODULE_0__","mediaIds","_config__WEBPACK_IMPORTED_MODULE_0__","_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__","NowPlaylistEffects","mediaParser","queueVideo$","_ngrx_effects__WEBPACK_IMPORTED_MODULE_1__","_utils_data_utils__WEBPACK_IMPORTED_MODULE_4__","playerStateChange$","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","YT","loadNextTrack$","rxjs_operators__WEBPACK_IMPORTED_MODULE_7__","selectBeforeSeekToTime$","seekToTime$","seekTo","loadPlaylist$","playlistItems","addPlaylistItems$","playPlaylist$","PLAY_PLAYLIST","GapiLoader","api$","_loadApi","loadGoogleApi","gapi","gapiAuthLoaded","auth2","getAuthInstance","currentUser","isSelectedButton","View_ButtonGroupComponent_1","IconComponent","ICON_PREFIX_STANDARD","ICON_LIB_PREFIX","icons","fa","createIconStyles","setClasses","names","CombineLatestOperator","combineLatest_CombineLatestSubscriber","toRespond","oldVal","_tryResultSelector","EmptyErrorImpl","EmptyError","defaultIfEmpty","DefaultIfEmptyOperator","defaultIfEmpty_DefaultIfEmptySubscriber","throwIfEmpty","errorFactory","hasDefaultValue","takeLast","takeLast_TakeLastOperator","takeLast_TakeLastSubscriber","ring","EveryOperator","every_EverySubscriber","everyValueMatch","FinallyOperator","finalize_FinallySubscriber","ROUTER_FORROOT_GUARD","router_RouterInitializer","createRouterScroller","getAppInitializer","getBootstrapListener","provideForRootGuard","provideLocationStrategy","rootRoute","routerNgProbeToken","setupRouter","RouterScroller","router_RouterLinkWithHref","RouterLinkActive","router_RouterOutlet","RouteReuseStrategy","router_Router","ROUTES","ROUTER_CONFIGURATION","ROUTER_INITIALIZER","router_RouterModule","ChildrenOutletContexts","router_NoPreloading","router_PreloadAllModules","PreloadingStrategy","router_RouterPreloader","router_ActivatedRoute","UrlHandlingStrategy","DefaultUrlSerializer","UrlSerializer","EmptyOutletComponent","RouterEvent","NavigationStart","navigationTrigger","restoredState","NavigationEnd","urlAfterRedirects","NavigationCancel","reason","NavigationError","RoutesRecognized","GuardsCheckStart","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","RouteConfigLoadStart","RouteConfigLoadEnd","ChildActivationStart","snapshot","routeConfig","ChildActivationEnd","ActivationStart","ActivationEnd","routerEvent","PRIMARY_OUTLET","ParamsAsMap","convertToParamMap","NAVIGATION_CANCELING_ERROR","navigationCancelingError","defaultUrlMatcher","segments","segmentGroup","pathMatch","hasChildren","posParams","segment","consumed","LoadedRouterConfig","routes","validateConfig","parentPath","getFullPath","fullPath","loadChildren","outlet","redirectTo","matcher","currentRoute","standardizeConfig","shallowEqual","k1","k2","last$1","wrapIntoObservable","containsTree","containee","exact","equalQueryParams","equalSegmentGroups","equalPath","numberOfChildren","containsQueryParams","containsSegmentGroup","containsSegmentGroupHelper","containeePaths","UrlTree","fragment","queryParamMap","_queryParamMap","DEFAULT_SERIALIZER","UrlSegmentGroup","serializePaths","UrlSegment","parameterMap","_parameterMap","serializePath","as","bs","mapChildrenIntoArray","childOutlet","UrlParser","parseRootSegment","parseQueryParams","parseFragment","tree","serializeSegment","primary","strParams","encodeUriQuery","serializeQueryParams","encodeUriFragment","encodeUriString","encodeUriSegment","decode","decodeQuery","serializeMatrixParams","SEGMENT_RE","matchSegments","QUERY_PARAM_RE","QUERY_PARAM_VALUE_RE","consumeOptional","peekStartsWith","parseChildren","parseQueryParam","parseSegment","capture","parseParens","parseMatrixParams","parseParam","valueMatch","matchQueryParams","matchUrlQueryParamValue","decodedKey","decodedVal","currentVal","allowPrimary","outletName","Tree","_root","pathFromRoot","findNode","findPath","cc","TreeNode","nodeChildrenAsMap","RouterState","setRouterState","createEmptyState","urlTree","activated","ActivatedRouteSnapshot","RouterStateSnapshot","createEmptyStateSnapshot","emptyUrl","emptyParams","emptyData","emptyQueryParams","futureSnapshot","_futureSnapshot","_routerState","paramMap","_paramMap","inheritedParamsDataResolve","paramsInheritanceStrategy","inheritingStartingFrom","_resolvedData","flattenInherited","urlSegment","lastPathIndex","_urlSegment","_lastPathIndex","_resolve","serializeNode","advanceActivatedRoute","currentSnapshot","nextSnapshot","shallowEqualArrays","equalParamsAndUrlSegments","equalUrlParams","equalSegments","parentsMismatch","createNode","routeReuseStrategy","prevState","shouldReuseRoute","createOrReuseChildren","detachedRouteHandle","retrieve","setFutureSnapshotsOfActivatedRoutes","createActivatedRoute","createUrlTree","commands","router_tree","nav","Navigation","numberOfDoubleDots","isAbsolute","cmd","cmdIdx","outlets","segmentPath","urlPart","partIndex","computeNavigation","toRoot","startingPosition","Position","modifier","isMatrixParams","g","ci","createPositionApplyingDoubleDots","findStartingPosition","processChildren","updateSegmentGroupChildren","updateSegmentGroup","command","oldSegmentGroup","newSegmentGroup","qp","replaceSegment","oldSegment","newSegment","cmdWithOutlet","getPath","currentCommandIndex","currentPathIndex","noMatch","pathIndex","commandIndex","prefixedWith","slicedCommands","createNewSegmentGroup","getOutlets","createNewSegmentChildren","activateRoutes","rootContexts","forwardEvent","futureState","currState","parentContexts","futureRoot","currRoot","deactivateChildRoutes","activateChildRoutes","futureNode","currNode","contexts","futureChild","childOutletName","deactivateRoutes","childName","deactivateRouteAndItsChildren","future","shouldDetach","detachAndStoreRouteSubtree","deactivateRouteAndOutlet","onOutletDeactivated","deactivate","getOrCreateContext","shouldAttach","stored","onOutletReAttached","attachRef","attach","advanceActivatedRouteNodeAndItsChildren","_loadedConfig","parentLoadedConfig","cmpFactoryResolver","activateWith","currentRouterState","activate","isFunction","isUrlTree","NoMatch","AbsoluteRedirect","absoluteRedirect","newTree","namedOutletsRedirect","router_ApplyRedirects","configLoader","urlSerializer","allowRedirects","expandSegmentGroup","rootSegmentGroup","noMatchError","rootCandidate","expandChildren","expandSegment","waitHead","waitTail","mapped","waitForMap","expandSegmentAgainstRoute","noLeftoversInUrl","getOutlet","matchSegmentAgainstRoute","expandSegmentAgainstRouteUsingRedirect","expandWildCardWithParamsAgainstRouteUsingRedirect","expandRegularSegmentAgainstRouteUsingRedirect","applyRedirectCommands","lineralizeSegments","newSegments","consumedSegments","lastChild","positionalParamSegments","rawSegmentGroup","cfg","rawSlicedSegments","getChildConfig","routerConfig","childModule","childConfig","slicedSegments","isEmptyPathRedirect","containsEmptyPathRedirectsWithNamedOutlets","primarySegmentGroup","createChildrenForEmptySegments","mergeTrivialChildren","containsEmptyPathRedirects","addEmptySegmentsToChildrenIfNeeded","cs","canLoad","injectionToken","guard","guardVal","isCanLoad","runCanLoadGuard","shouldLoad","canLoadFails","applyRedirectCreatreUrlTree","newRoot","createSegmentGroup","createQueryParams","redirectToParams","actualParams","updatedSegments","createSegments","redirectToSegments","actualSegments","findPosParam","findOrReturn","redirectToUrlSegment","applyRedirects$1","applyRedirects","extractedUrl","CanActivate","CanDeactivate","getClosestLoadedConfig","getChildRouteGuards","futurePath","checks","canDeactivateChecks","canActivateChecks","prevChildren","shouldRun","shouldRunGuardsAndResolvers","runGuardsAndResolvers","getRouteGuards","isActivated","INITIAL_VALUE","prioritizedGuardValue","combineLatest","startWith","isPending","innerAcc","checkGuards","targetSnapshot","guards","guardsResult","futureRSS","currRSS","currARS","canDeactivate","canDeactivateObservables","isCanDeactivate","runCanDeactivate","runCanDeactivateChecks","isBoolean","fireChildActivationStart","fireActivationStart","futureARS","canActivateChildGuardsMapped","canActivateChild","getCanActivateChild","guardsMapped","isCanActivateChild","runCanActivateChild","canActivate","canActivateObservables","isCanActivate","runCanActivate","runCanActivateChecks","NoMatch$1","router_Recognizer","rootComponentType","relativeLinkResolution","split$1","processSegmentGroup","rootNode","routeState","inheritParamsAndData","routeNode","processSegment","routeWithSameOutletName","checkOutletNameUniqueness","localeCompare","sortActivatedRouteSnapshots","processSegmentAgainstRoute","rawSegment","getData","getSourceSegmentGroup","getPathIndexShift","getResolve","match$1","_sourceSegment","_segmentIndexShift","emptyPathMatch","getOutlet$1","containsEmptyPathMatchesWithNamedOutlets","primarySegment","createChildrenForEmptyPaths","containsEmptyPathMatches","addEmptyPathsToChildrenIfNeeded","recognize$1","serializer","recognize","resolveData","getResolver","resolveNode","resolvedData","runResolve","__","switchTap","nextResult","DefaultRouteReuseStrategy","detachedTree","router_RouterConfigLoader","onLoadStartListener","onLoadEndListener","loadModuleFactory","DefaultUrlHandlingStrategy","newUrlPart","wholeUrl","defaultErrorHandler","defaultMalformedUriErrorHandler","defaultRouterHook","runExtras","lastSuccessfulNavigation","currentNavigation","navigationId","isNgZoneEnabled","malformedUriErrorHandler","navigated","lastSuccessfulId","hooks","beforePreactivation","afterPreactivation","urlHandlingStrategy","onSameUrlNavigation","urlUpdateStrategy","currentUrlTree","rawUrlTree","browserUrlTree","triggerEvent","routerState","transitions","currentRawUrl","extract","rawUrl","extras","targetRouterState","navigations","setupNavigations","processNavigations","eventsSubject","initialUrl","trigger","previousNavigation","completed","urlTransition","shouldProcessUrl","serializeUrl","finalUrl","skipLocationChange","setBrowserUrl","replaceUrl","routesRecognized","navStart","appliedUrlTree","guardsStart","getAllRouteGuards","guardsEnd","resetUrlToCurrentUrlTree","navCancel","resolveStart","resolveEnd","createRouterState","finalize","isNavigationCancelingError","redirecting","resetStateAndUrl","navigateByUrl","navError","ee","getTransition","setUpLocationChangeListener","locationSubscription","parseUrl","scheduleNavigation","navigationExtras","relativeTo","preserveQueryParams","queryParamsHandling","preserveFragment","removeEmptyProps","mergedTree","validateCommands","lastNavigation","setTransition","isCurrentPathEqualTo","go","storedState","storedUrl","router_RouterLink","router","tabIndex","routerLink","preserve","attrBoolValue","locationStrategy","updateTargetUrlAndHref","button","routerLinkActiveOptions","links","linksWithHrefs","routerLinkActive","hasActiveLinks","link","isLinkActive","OutletContext","changeDetector","_activatedRoute","activateEvents","deactivateEvents","onChildOutletCreated","onChildOutletDestroyed","activatedRoute","activatedRouteData","childContexts","OutletInjector","moduleLoader","preloadingStrategy","preload","processRoutes","preloadConfig","viewportScroller","lastId","lastSource","restoredId","scrollPositionRestoration","anchorScrolling","setHistoryScrollRestoration","routerEventsSubscription","createScrollEvents","scrollEventsSubscription","consumeScrollEvents","getScrollPosition","scheduleScrollEvent","scrollToPosition","scrollToAnchor","ROUTER_DIRECTIVES","ROUTER_PROVIDERS","enableTracing","provideRoutes","scrollOffset","setOffset","platformLocationStrategy","useHash","platform_browser","logGroup","logGroupEnd","initNavigation","resultOfPreactivationDone","isLegacyDisabled","isLegacyEnabled","initialNavigation","bootstrappedComponentRef","preloader","routerScroller","setUpPreloading","resetRootComponentType","appInitializer","bootstrapListener","GO","BACK","FORWARD","Go","Back","Forward","NavigationSerializer","ReplaySubject","_scheduler_queue__WEBPACK_IMPORTED_MODULE_1__","_operators_observeOn__WEBPACK_IMPORTED_MODULE_3__","_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__","_SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__","bufferSize","windowTime","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","getNowPlaylist","isPlayerInRepeat","getPlaylistMediaIds","getSelectedMedia","getPlaylistVideos","getSelectedMediaId","selectedMediaIndex","seconds","getVideoUrl","PLAYING","MapOperator","MapSubscriber","pipeFromArray","_noop__WEBPACK_IMPORTED_MODULE_0__","fns","subscribeToArray","connectableProto","subjectFactory","_refCount","_isComplete","getSubject","_connection","ConnectableObservable_ConnectableSubscriber","refCount","connectableObservableDescriptor","connectable","_unsubscribe","multicast","subjectOrSubjectFactory","MulticastOperator","descriptor","TimeInterval","authorization_service_Authorization","extractAccessToken","_googleAuth","getAuthResponse","gapiLoader","_scope","_accessToken","fromGoogle","fromApp","equal","googleAuth","saveGoogleAuth","listenToGoogleAuthSignIn","hasAccessToken","authOptions","client_id","isSignedIn","authState","signOptions","googleUser","disposeAutoSignIn","autoSignInTimer","startTimerToNextAuth","expireTime","timeInMs","timeInterval","retry","setAuthTimer","FilterOperator","FilterSubscriber","_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__","_angular_router__WEBPACK_IMPORTED_MODULE_1__","ObserveOnSubscriber","_Notification__WEBPACK_IMPORTED_MODULE_1__","ObserveOnOperator","ObserveOnMessage","scheduleMessage","AsyncScheduler","AsyncAction","UnsubscriptionErrorImpl","UnsubscriptionError","Subscription_Subscription","_subscriptions","hasErrors","flattenUnsubscriptionErrors","teardown","tmp","_addParent","subscriptionIndex","errs","YoutubePlaylistComponent","loading","forkJoin_ForkJoinSubscriber","haveValues","_hasValue","InternalFormsSharedModule","NgNoValidate","RadioControlRegistry","NG_MODEL_WITH_FORM_CONTROL_WARNING","ControlContainer","NG_VALUE_ACCESSOR","COMPOSITION_BUFFER_MODE","DefaultValueAccessor","NgControl","NgControlStatus","NgControlStatusGroup","forms_FormControlName","forms_FormGroupDirective","FormBuilder","FormsModule","ReactiveFormsModule","AbstractControlDirective","valid","invalid","disabled","pristine","touched","untouched","statusChanges","valueChanges","errorCode","getError","formDirective","isEmptyInputValue","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","forms_Validators","required","email","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","nullValidator","regex","regexStr","requiredPattern","actualValue","validators","presentValidators","isPresent","_mergeErrors","_executeValidators","forkJoin","_executeAsyncValidators","toObservable","arrayOfErrors","CHECKBOX_VALUE_ACCESSOR","CheckboxControlValueAccessor","_elementRef","onChange","onTouched","isDisabled","(change)","(blur)","DEFAULT_VALUE_ACCESSOR","_compositionMode","_composing","getUserAgent","_isAndroid","normalizedValue","normalizeValidator","validator","validate","normalizeAsyncValidator","(input)","(compositionstart)","(compositionend)","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","unimplemented","valueAccessor","_rawValidators","_rawAsyncValidators","asyncValidator","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","_accessors","accessor","_isSameGroup","fireUncheck","controlPair","_control","_registry","_checkName","_state","_fn","writeValue","formControlName","_throwNameError","RANGE_VALUE_ACCESSOR","RangeValueAccessor","FormErrorExamples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","ReactiveErrors","directiveName","SELECT_VALUE_ACCESSOR","forms_SelectControlValueAccessor","_buildValueString","_optionMap","_idCounter","_compareWith","compareWith","_getOptionId","valueString","_getOptionValue","_extractId","NgSelectOption","_select","_registerOption","ngValue","_setElementValue","SELECT_MULTIPLE_VALUE_ACCESSOR","forms_SelectMultipleControlValueAccessor","_buildValueString$1","optionSelectedStateSetter","_setSelected","selectedOptions","_extractId$1","NgSelectMultipleOption","controlPath","setUpControl","composeAsync","registerOnChange","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","setUpViewChangePipeline","emitModelEvent","viewToModelUpdate","setUpModelChangePipeline","registerOnTouched","_pendingTouched","markAsTouched","setUpBlurPipeline","setDisabledState","registerOnDisabledChange","registerOnValidatorChange","updateValueAndValidity","markAsDirty","emitModelToViewChange","setUpFormContainer","_noControlError","messageEnd","composeValidators","composeAsyncValidators","isPropertyUpdated","viewModel","BUILTIN_ACCESSORS","syncPendingControls","_syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","isBuiltInAccessor","removeDir","_ngModelWarning","warningConfig","_ngModelWarningSentOnce","_ngModelWarningSent","ngModelWarning","AbstractFormGroupDirective","_checkParentType","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","AbstractControlStatus","cd","_cd","ngClassUntouched","ngClassTouched","ngClassPristine","ngClassDirty","ngClassValid","ngClassInvalid","ngClassPending","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","VALID","INVALID","PENDING","DISABLED","coerceToValidator","validatorOrOpts","isOptionsObj","coerceToAsyncValidator","origAsyncValidator","asyncValidators","forms_AbstractControl","_onCollectionChange","_onDisabledChange","_updateOn","newValidator","onlySelf","_forEachChild","markAsUntouched","_updateTouched","markAsPristine","_updatePristine","emitEvent","markAsPending","_updateValue","_updateAncestors","changeFn","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","ctrl","_updateTreeValidity","_allControlsDisabled","_asyncValidationSubscription","setErrors","_updateControlsErrors","delimiter","FormGroup","controls","FormArray","at","_find","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","formState","FormControl","_onChange","_applyFormState","_setUpdateStrategy","_initObservables","emitViewToModelChange","_isBoxedValue","_setUpControls","setParent","_registerOnCollectionChange","registerControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","patchValue","_reduceChildren","getRawValue","subtreeUpdated","updated","_reduceValue","initValue","_registerControl","formDirectiveProvider","forms_NgForm","resolvedPromise","submitted","_directives","ngSubmit","_findContainer","removeControl","resetForm","(submit)","(reset)","TemplateDrivenErrors","NG_FORM_SELECTOR_WARNING","NgFormSelectorWarning","ngFormWarning","_ngFormWarning","modelGroupProvider","NgModelGroup","modelGroupParentException","formControlBinding","forms_NgModel","resolvedPromise$1","_registered","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","addControl","standalone","formGroupNameException","modelParentException","missingNameException","disabledValue","formControlBinding$1","forms_FormControlDirective","_ngModelWarningConfig","disabledAttrWarning","_isControlChanged","formDirectiveProvider$1","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","newCtrl","_clearChangeFns","cleanUpControl","_oldForm","sync","missingFormException","formGroupNameProvider","FormGroupName","_hasInvalidParent","groupParentException","formArrayNameProvider","FormArrayName","addFormArray","removeFormArray","getFormArray","arrayParentException","controlNameBinding","_added","updateModel","ngModelGroupException","controlParentException","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","requiredTrue","EMAIL_VALIDATOR","EmailValidator","_enabled","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","controlsConfig","_reduceControls","isAbstractControlOptions","_createControl","controlConfig","novalidate","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","warnOnDeprecatedNgFormSelector","warnOnNgModelWithFormControl","ActionCreator","ActionCreatorFactory","defaultPayloadValue","ToFriendlyDurationPipe","rest","new","_time","memo_decorator__WEBPACK_IMPORTED_MODULE_0___default","TimeoutErrorImpl","TimeoutError","timeoutWith","withObservable","absoluteTimeout","waitFor","TimeoutWithOperator","timeoutWith_TimeoutWithSubscriber","scheduleTimeout","dispatchTimeout","RetryOperator","RetrySubscriber","FUNC_ERROR_TEXT","HASH_UNDEFINED","funcTag","genTag","reIsHostCtor","freeGlobal","freeSelf","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","uid","IE_PROTO","funcToString","objectToString","reIsNative","getNative","nativeCreate","Hash","ListCache","MapCache","assocIndexOf","eq","baseIsNative","func","isMasked","isHostObject","toSource","getMapData","__data__","isKeyable","cache","Cache","string","_util_noop__WEBPACK_IMPORTED_MODULE_1__","_util_isFunction__WEBPACK_IMPORTED_MODULE_2__","DoOperator","TapSubscriber","_tapNext","_tapError","_tapComplete","share","_multicast__WEBPACK_IMPORTED_MODULE_0__","_refCount__WEBPACK_IMPORTED_MODULE_1__","_Subject__WEBPACK_IMPORTED_MODULE_2__","shareSubjectFactory","PlayVideo","PauseVideo","TogglePlayer","LoadAndPlay","PlayStarted","UpdateState","FullScreen","ResetFullScreen","SetupPlayer","PAUSE","SETUP_PLAYER","LOAD_AND_PLAY","PLAY_STARTED","LOAD_NEXT_TRACK","RefCountOperator","refCounter","RefCountSubscriber","sharedConnection","UserProfileActions","UserSignin","UserSigninStart","UserSigninSuccess","UserSignout","UserSignoutSuccess","CheckUserAuth","UserPlaylistsFetchError","ngrx_action_creator_factory__WEBPACK_IMPORTED_MODULE_0__","setViewPlaylist","updateData","updateToken","USER_PROFILE_COMPLETED","USER_PROFILE_RECIEVED","CHECK_USER_AUTH","USER_SIGNIN","USER_SIGNIN_START","USER_SIGNIN_SUCCESS","USER_SIGNOUT","USER_PLAYLISTS_FETCH_ERROR","View_YoutubePlaylistComponent_1","_util_isArray__WEBPACK_IMPORTED_MODULE_1__","_operators_map__WEBPACK_IMPORTED_MODULE_3__","setupSubscription","sourceObj","isEventTarget","isJQueryStyleEventEmitter","addListener","removeListener","isNodeStyleEventEmitter","_Subscription__WEBPACK_IMPORTED_MODULE_1__","_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_2__","SkipOperator","SkipSubscriber","AppModule","app_component_AppComponent","versionCheckerService","sidebarCollapsed$","fesm2015_store","app_core","theme$","checkUserAuth","View_ɵa_4","View_ɵa_5","markIsActive","View_ɵa_3","View_ɵa_2","View_ɵa_1","player_search_component_PlayerSearchComponent","fb","queryChange","hl","ds","client","searchForm","searchInput","onQueryChange","changedQuery","patchSearchInput","searchFormState","selectSuggestion","View_ɵa_0","RenderType_ɵa","fesm2015_forms","p0_0","ngx_typeahead","player_search_actions_PlayerSearchActions","getSuggestions","ngrx_action_creator_factory","GET_SUGGESTIONS","searchNewQuery","SEARCH_NEW_QUERY","searchMoreForQuery","SEARCH_MORE_FOR_QUERY","updateFilter","UPDATE_FILTER","updateQueryParam","UPDATE_QUERY_PARAM","RESET_PAGE_TOKEN","searchResultsReturned","SEARCH_RESULTS_RETURNED","searchStarted","SEARCH_STARTED","resetResults","RESET_RESULTS","errorInSearch","ERROR_RESULTS","UPDATE_QUERY","SEARCH_CURRENT_QUERY","SEARCH_TYPE_UPDATE","ADD_PLAYLISTS_TO_RESULTS","creator","ADD_METADATA_TO_VIDEOS","PLAYLISTS_SEARCH_START","ADD_RESULTS","UpdateQueryAction","UpdateSearchType","SearchCurrentQuery","AddResultsAction","CSearchTypes","CPresetTypes","FULL_ALBUMS","LIVE","presets","prevPageToken","statePageToken","getPlayerSearch","getPlayerSearchResults","getQuery","getQueryParams","getQueryParamPreset","getSearchType","getIsSearching","getPresets","search_navigator_component_SearchNavigatorComponent","searchTypes","fesm2015_router","View_SearchNavigatorComponent_1","app_search_component_AppSearchComponent","playerSearchActions","query$","currentPlaylist$","user_profile","queryParamPreset$","presets$","ngx_infinite_scroll","View_PlayerSearchComponent_0","RenderType_PlayerSearchComponent","View_SearchNavigatorComponent_0","RenderType_SearchNavigatorComponent","LoadingIndicatorComponent","youtube_videos_component_YoutubeVideosComponent","playlistIds$","now_playlist","loading$","View_LoadingIndicatorComponent_0","RenderType_LoadingIndicatorComponent","youtube_playlists_component_YoutubePlaylistsComponent","results$","isSearching$","youtube_playlist_ngfactory","youtube_playlist","View_YoutubePlaylistsComponent_1","ImageBlurComponent","hasMedia","backgroundImage","extractBestImage","quality","player_resizer_component_PlayerResizerComponent","toggle","fullScreen","ParseTracksPipe","parseTracks","media_info_component_MediaInfoComponent","thumbClick","seekTrack","displayInfo","extractTracks","handleThumbClick","_minimized","minimized","View_MediaInfoComponent_4","View_MediaInfoComponent_1","View_MediaInfoComponent_2","show-info","View_MediaInfoComponent_3","hasTracks","player_controls_component_PlayerControlsComponent","playing","icon","handlePrevious","handlePause","handlePlay","handleNext","handleRepeat","View_PlayerControlsComponent_1","app_player_component_AppPlayerComponent","nowPlaylistService","player$","app_player","media$","isPlayerPlaying$","isPlayerInRepeat$","now_playlist_selectors","isPlayerFullscreen$","isShowPlayer$","resetPlayer","togglePlayer","toggleFullScreen","getCurrent","toggleRepeat","seekToTrack","View_ImageBlurComponent_0","RenderType_ImageBlurComponent","View_PlayerResizerComponent_0","RenderType_PlayerResizerComponent","ngx_youtube_player_ngfactory_View_a_0","ngx_youtube_player_ngfactory_RenderType_a","ngx_youtube_player","View_AppPlayerComponent_1","View_MediaInfoComponent_0","RenderType_MediaInfoComponent","media_parser_service","View_PlayerControlsComponent_0","RenderType_PlayerControlsComponent","AppBrandComponent","toggleSidebar","app_navigator_component_AppNavigatorComponent","searchType$","navigate","View_AppNavigatorComponent_1","now_playlist_filter_component_NowPlaylistFilterComponent","headerClick","searchFilter","playlistLength","View_NowPlaylistFilterComponent_1","View_NowPlaylistFilterComponent_2","View_NowPlaylistFilterComponent_3","isPlaylistEmpty","isFilterEmpty","now_playlist_track_component_NowPlaylistTrackComponent","selectTrack","displayTracks","parsedTracks","toggleTracks","View_NowPlaylistTrackComponent_3","View_NowPlaylistTrackComponent_1","View_NowPlaylistTrackComponent_2","View_NowPlaylistTrackComponent_4","isPlaylistMedia","SearchPipe","term","matchString","now_playlist_component_NowPlaylistComponent","hasActiveChanged","activeTrackElement","scrollToActiveTrack","activeId","data_utils","scrollIntoView","trackElement","View_NowPlaylistTrackComponent_0","RenderType_NowPlaylistTrackComponent","isActiveMedia","View_NowPlaylistComponent_1","View_NowPlaylistComponent_2","now_playing_component_NowPlayingComponent","nowPlaylist$","updateIndexByMedia","clearPlaylist","removeVideo","nowPlaylistComponent","View_NowPlaylistFilterComponent_0","RenderType_NowPlaylistFilterComponent","View_NowPlaylistComponent_0","RenderType_NowPlaylistComponent","app_sidebar_proxy_AppSidebarProxy","AppSidebarComponent","appSidebarProxy","View_AppBrandComponent_0","RenderType_AppBrandComponent","View_AppNavigatorComponent_0","RenderType_AppNavigatorComponent","View_NowPlayingComponent_0","RenderType_NowPlayingComponent","now_playlist_service","ButtonIconComponent","app_error_handler_proxy_AppErrorHandlerProxy","errorMessage$","isShowError$","errorAction$","app_error_handler_component_AppErrorHandlerComponent","appErrorHandlerProxy","errorShow$","errorAction","toggleError","cleanError","handleAction","View_ButtonIconComponent_0","RenderType_ButtonIconComponent","View_AppErrorHandlerComponent_2","View_AppErrorHandlerComponent_1","View_AppPlayerComponent_0","RenderType_AppPlayerComponent","now_playlist_effects","app_player_api","View_AppSidebarComponent_0","RenderType_AppSidebarComponent","View_AppErrorHandlerComponent_0","RenderType_AppErrorHandlerComponent","AnimationBuilder","AnimationFactory","AUTO_STYLE","sequence","steps","NoopAnimationPlayer","_onDoneFns","_onStartFns","_onDestroyFns","_started","_finished","parentPlayer","totalTime","hasStarted","_onStart","triggerMicrotask","_onFinish","finish","phaseName","methods","AnimationGroupPlayer","doneCount","destroyCount","startCount","onDone","_onDestroy","onStart","restart","timeAtPosition","setPosition","getPosition","beforeDestroy","ɵPRE_STYLE","isNode","process","optimizeGroupPlayer","normalizeKeyframes","driver","normalizer","keyframes","preStyles","postStyles","normalizedKeyframes","previousOffset","previousKeyframe","kf","isSameOffset","normalizedKeyframe","normalizedProp","normalizePropertyName","normalizeStyleValue","LINE_START","listenOnPlayer","copyAnimationEvent","makeAnimationEvent","triggerName","fromState","getOrSetAsInMap","parseTimelineCommand","separatorPos","_contains","elm1","elm2","_matches","_query","_isNode","Element","matchesSelector","mozMatchesSelector","oMatchesSelector","elm","_CACHED_BODY","_IS_WEBKIT","validateStyleProperty","getBodyNode","containsVendorPrefix","matchesElement","containsElement","invokeQuery","hypenatePropsObject","newObj","browser_NoopAnimationDriver","easing","previousPlayers","scrubberAccessRequested","AnimationDriver","ONE_SECOND","SUBSTITUTION_EXPR_START","ENTER_CLASSNAME","LEAVE_CLASSNAME","NG_TRIGGER_CLASSNAME","NG_TRIGGER_SELECTOR","NG_ANIMATING_CLASSNAME","NG_ANIMATING_SELECTOR","resolveTimingValue","_convertTimeValueToMS","resolveTiming","timings","allowNegativeValues","delayMatch","easingVal","containsErrors","parseTimeExpression","copyObj","copyStyles","readPrototype","getStyleAttributeString","writeStyleAttribute","styleAttrValue","setStyles","camelProp","dashCaseToCamelCase","eraseStyles","normalizeAnimationEntry","PARAM_REGEX","extractStyleParams","interpolateParams","original","varName","localVal","iteratorToArray","DASH_CASE_REGEXP","allowPreviousPlayerStylesMerge","balancePreviousStylesIntoKeyframes","previousStyles","previousStyleProps","startingKeyframe","missingStyleProps","computeStyle","visitDslNode","visitor","visitTrigger","visitState","visitTransition","visitSequence","visitGroup","visitAnimate","visitKeyframes","visitStyle","visitReference","visitAnimateChild","visitAnimateRef","visitQuery","visitStagger","ANY_STATE","parseTransitionExpr","transitionValue","expressions","eventStr","alias","parseAnimationAlias","separator","makeLambdaFromStates","isFullAnyStateExpr","parseInnerTransitionStr","TRUE_BOOLEAN_VALUES","FALSE_BOOLEAN_VALUES","lhs","rhs","LHS_MATCH_BOOLEAN","RHS_MATCH_BOOLEAN","lhsMatch","rhsMatch","SELF_TOKEN","SELF_TOKEN_REGEX","buildAnimationAst","browser_AnimationAstBuilderVisitor","ROOT_SELECTOR","_driver","AnimationAstBuilderContext","_resetContextStyleTimingState","currentQuerySelector","collectedStyles","currentTime","queryCount","depCount","definitions","stateDef","styleAst","astParams","containsDynamicStyles","missingSubs","stylesObj","missingSubsArr","matchers","normalizeAnimationOptions","furthestTime","step","innerAst","timingAst","makeTimingAst","ast","dynamic","constructTimingAst","currentAnimateTimings","styleMetadata","newStyleData","_styleAst","isEmptyStep","_makeStyleAst","_validateStyleAst","styleTuple","collectedEasing","styleData","styleMap","endTime","startTime","collectedEntry","updateCollectedStyle","validateStyleParams","totalKeyframesWithOffsets","offsetsOutOfOrder","keyframesOutOfRange","style$$1","offsetVal","consumeOffset","generatedOffset","limit","animateDuration","durationUpToThisFrame","parentSelector","currentQuery","includeSelf","hasAmpersand","normalizeSelector","originalSelector","currentTransition","createTimelineInstruction","preStyleProps","postStyleProps","subTimeline","ElementInstructionMap","_map","instructions","existingInstructions","ONE_FRAME_IN_MILLISECONDS","ENTER_TOKEN_REGEX","LEAVE_TOKEN_REGEX","buildAnimationTimelines","rootElement","enterClassName","leaveClassName","startingStyles","finalStyles","subInstructions","AnimationTimelineBuilderVisitor","buildKeyframes","AnimationTimelineContext","currentTimeline","timelines","timeline","containsAnimation","tl","allowOnlyTimelineStyles","elementInstructions","consume","innerContext","createSubContext","_visitSubInstructions","transformIntoNewTimeline","previousNode","instructionTimings","appendInstructionToTimeline","updateOptions","subContextCount","snapshotCurrentStyles","DEFAULT_NOOP_PREVIOUS_NODE","delayNextStep","applyStylesToKeyframe","innerTimelines","mergeTimelineCollectedStyles","_visitTiming","incrementTime","getCurrentStyleProperties","forwardFrame","applyEmptyStep","innerTimeline","forwardTime","elms","currentQueryTotal","sameElementTimeline","currentQueryIndex","maxTime","currentStaggerTime","startingTime","_enterClassName","_leaveClassName","initialTimeline","browser_TimelineBuilder","skipIfExists","newOptions","optionsToUpdate","newParams","paramsToUpdate","oldParams","newTime","_copyOptions","updatedTimings","SubTimelineBuilder","stretchStartingKeyframe","elements","_elementTimelineStylesLookup","_previousKeyframe","_currentKeyframe","_keyframes","_styleSummary","_pendingStyles","_backFill","_currentEmptyStepKeyframe","_localTimelineStyles","_globalTimelineStyles","_loadKeyframe","hasPreStyleStep","allStyles","allProperties","_updateStyle","details0","details1","finalKeyframes","keyframe","finalKeyframe","preProps","postProps","kf0","kf1","_stretchStartingKeyframe","newKeyframes","startingGap","newFirstKeyframe","oldFirstKeyframe","roundOffset","timeAtKeyframe","decimalPoints","mult","pow","AnimationStyleNormalizer","WebAnimationsStyleNormalizer","userProvidedProperty","normalizedProperty","strVal","DIMENSIONAL_PROP_MAP","valAndSuffixMatch","makeBooleanMap","createTransitionInstruction","isRemovalTransition","fromStyles","toStyles","queriedElements","EMPTY_OBJECT","AnimationTransitionFactory","_triggerName","_stateStyles","matchFns","oneOrMoreTransitionsMatch","stateName","backupStateStyler","stateStyler","backupStyles","buildStyles","currentOptions","nextOptions","skipAstBuild","transitionAnimationParams","currentAnimationParams","currentStateStyles","nextAnimationParams","nextStateStyles","preStyleMap","postStyleMap","isRemoval","animationOptions","queriedElementsList","AnimationStateStyles","combinedParams","styleObj","AnimationTrigger","transitionFactories","balanceProperties","fallbackTransition","createFallbackTransition","containsQueries","key1","key2","EMPTY_INSTRUCTION_MAP","browser_TimelineAnimationEngine","bodyNode","_normalizer","_animations","_playersById","animate","autoStylesMap","inst","_buildPlayer","_getPlayer","baseEvent","register","QUEUED_CLASSNAME","QUEUED_SELECTOR","DISABLED_CLASSNAME","DISABLED_SELECTOR","STAR_CLASSNAME","STAR_SELECTOR","EMPTY_PLAYER_ARRAY","NULL_REMOVAL_STATE","namespaceId","setForRemoval","setForMove","hasAnimation","removedBeforeQueried","NULL_REMOVED_QUERIED_STATE","REMOVAL_FLAG","StateValue","isObj","normalizeTriggerValue","VOID_VALUE","DEFAULT_STATE_VALUE","AnimationTransitionNamespace","_engine","_triggers","_queue","_elementListeners","_hostClassName","phase","isTriggerEventValid","triggersWithStates","statesByElement","afterFlush","defaultToFallback","_getTrigger","browser_TransitionAnimationPlayer","absorbOptions","objEquals","matchStyles","reportError","playersOnElement","playersByElement","matchTransition","isFallbackTransition","totalQueuedPlayers","stateMap","elementPlayers","namespaces","fetchNamespacesByElement","triggerLeaveAnimation","clearElementCache","destroyAfterComplete","triggerStates","markElementAsRemoved","processLeaveNode","visitedTriggers","engine","childElementCount","_signalRemovalForInnerTriggers","containsPotentialParentTransition","totalAnimations","currentPlayers","playersByQueriedElement","prepareLeaveAnimationListeners","destroyInnerAnimations","_onRemovalComplete","microtaskId","markedForDestroy","d0","d1","containsData","browser_TransitionAnimationEngine","newHostElements","disabledNodes","_namespaceLookup","_namespaceList","_flushFns","_whenQuietFns","namespacesByHostElement","collectedEnterElements","collectedLeaveElements","onRemovalComplete","queuedPlayers","_balanceNamespaceList","collectEnterElement","nextNamespace","createNamespace","_fetchNamespace","afterFlushAnimationsDone","elementStates","nsId","details","insertNode","subTimelines","skipBuildAst","containerElement","destroyActiveAnimationsForElement","finishActiveQueriedAnimationOnElement","markElementAsDisabled","cleanupFns","_flushAnimations","quietFns","skippedPlayers","skippedPlayersMap","queuedInstructions","allPreStyleElements","allPostStyleElements","disabledElementsSet","nodesThatAreDisabled","allTriggerElements","enterNodeMap","buildRootMap","enterNodeMapIds","allLeaveNodes","mergedLeaveNodes","leaveNodesWithoutAnimations","leaveNodeMapIds","leaveNodeMap","allPlayers","erroneousTransitions","drainQueuedTransitions","nodeIsOrphaned","_buildInstruction","stringMap","setVal","allPreviousPlayersMap","animationElementMap","_beforeAnimationBuild","_getPreviousPlayers","prevPlayer","replaceNodes","replacePostStylesAsPre","postStylesMap","cloakAndComputeStyles","preStylesMap","pre","rootPlayers","subPlayers","NO_PARENT_ANIMATION_ELEMENT_DETECTED","overrideTotalTime","parentWithAnimation","parentsToAdd","detectedParent","innerPlayer","_buildAnimation","setRealPlayer","parentPlayers","playersForElement","syncPlayerEvents","queriedPlayerResults","queriedInnerElements","queriedPlayers","activePlayers","removeNodesAfterAnimationDone","elementContainsData","isQueriedElement","toStateValue","queriedElementPlayers","isRemovalAnimation","targetNameSpaceId","targetTriggerName","timelineInstruction","realPlayer","getRealPlayer","allQueriedPlayers","allConsumedElements","allSubElements","allNewPlayers","finalPlayers","_flattenGroupPlayersRecur","flattenGroupPlayers","pp","wrappedPlayer","currentValues","deleteOrUnsetInMap","_player","_containsRealPlayer","_queuedCallbacks","triggerCallback","_queueEvent","cloakElement","valuesMap","elementPropsMap","defaultStyle","cloakVals","failedElements","roots","rootMap","NULL_NODE","nodeSet","localRootMap","getRoot","CLASSES_CACHE_KEY","postEntry","preEntry","AnimationEngine","_triggerCache","_transitionEngine","_timelineEngine","componentId","buildTrigger","registerTrigger","eventPhase","ELAPSED_TIME_MAX_DECIMAL_PLACES","ANIMATION_PROP","ANIMATIONEND_EVENT","ONE_SECOND$1","ElementAnimationStyleHandler","_name","_duration","_delay","_easing","_fillMode","_onDoneFn","_startTime","_position","_eventFn","_handleCallback","anim","getAnimationStyle","char","countChars","setAnimationStyle","applyKeyframeAnimation","addRemoveAnimationEvent","playPauseAnimation","findIndexForAnimation","_ngTestManualTimestamp","elapsedTime","toFixed","animationName","findMatchingTokenIndex","removeKeyframeAnimation","searchToken","doRemove","DEFAULT_FILL_MODE","DEFAULT_EASING","CssKeyframesPlayer","_finalStyles","_buildStyler","_styler","_flushStartFns","_flushDoneFns","resume","browser_DirectStylePlayer","_startingStyles","__initialized","_styles","KEYFRAMES_NAME_PREFIX","TAB_SPACE","CssKeyframesDriver","_count","_warningIssued","keyframeStr","tab","kfElm","_notifyFaultyScrubber","previousCssKeyframePlayers","flatKeyframes","kfs","flattenKeyframesIntoStyles","buildKeyframeElement","removeElement","WebAnimationsPlayer","_initialized","_preparePlayerBeforeStart","domPlayer","_triggerWebAnimation","_finalKeyframe","_resetDomPlayerState","cancel","WebAnimationsDriver","_isNativeImpl","getElementAnimateFn","_cssKeyframesDriver","supported","playerOptions","previousWebAnimationPlayers","animations_BrowserAnimationBuilder","rootRenderer","_nextAnimationId","typeData","issueAnimationCommand","animations_BrowserAnimationFactory","_id","RendererAnimationPlayer","_command","_listen","ANIMATION_PREFIX","DISABLE_ANIMATIONS_FLAG","AnimationRendererFactory","_currentId","_microtaskId","_animationCallbacksBuffer","_rendererCache","_cdRecurDepth","BaseAnimationRenderer","AnimationRenderer","_scheduleCountTask","onInsert","onRemove","disableAnimations","resolveElementFromTarget","dotIndex","parseTriggerCallbackName","countId","scheduleListenerCallback","animations_InjectableAnimationEngine","instantiateSupportedAnimationDriver","instantiateDefaultStyleNormalizer","instantiateRendererFactory","ANIMATION_MODULE_TYPE","SHARED_ANIMATION_PROVIDERS","BROWSER_ANIMATIONS_PROVIDERS","BROWSER_NOOP_ANIMATIONS_PROVIDERS","BrowserAnimationsModule","error_handler_AppErrorHandler","NEVER","ERR_SW_NOT_SUPPORTED","service_worker_NgswCommChannel","serviceWorker","controllerChanges","controller","currentController","controllerWithChanges","worker","registration","getRegistration","publish","errorObservable","sw","postMessage","toPromise","nonce","waitForStatus","eventsOfType","isEnabled","service_worker_SwPush","subscriptionChanges","messages","notificationClicks","pushManager","workerDrivenSubscriptions","pm","getSubscription","pushOptions","userVisibleOnly","decodeBase64","serverPublicKey","applicationServerKey","Uint8Array","success","atob","service_worker_SwUpdate","available","statusNonce","generateNonce","postMessageWithStatus","RegistrationOptions","ngswAppInitializer","app","stable","ngswCommChannelFactory","service_worker_ServiceWorkerModule","EchoesReducers","localStorageSyncReducer","dist","optionalImports","store_devtools","instrument","CoreStoreModule","app_player_effects_AppPlayerEffects","youtubePlayerService","init$","playVideo$","effects","pauseVideo$","loadAndPlay$","fetchVideoData","toggleFullscreen$","setupPlayer$","app_player_effects_decorate","user_profile_effects_UserProfileEffects","checkUserAuth$","loadAuth","updateToken$","getPlaylists","addUserPlaylists$","addPlaylists","updateNextPageToken$","updatePageToken","userProfileCompleted","getMorePlaylists$","userProfileRecieved$","toUserJson","updateUserProfile","userSignin$","userSigninStart$","handleFailedLogin","userSigninSuccess$","updateTokenAfterSigninSuccess$","extractToken","updateProfileAfterSigninSuccess$","userProfileRecieved","getBasicProfile","userSignout$","userSignoutSuccess$","user_profile_effects_decorate","player_search_effects_PlayerSearchEffects","youtubeSearch","searchQuery$","latest","searchFor","youtubeResponse","resetVideos$","searchResultsReturned$","addPlaylistsToResults$","addMetadataToVideos$","fetchVideosData","searchMoreForQuery$","searchMore","searchMoreSearchStarted$","updatePreset$","resetVideosAfterParamUpdate$","resetPageToken$","searchCurrentQuery$","playlistsSearchStart$","player_search_effects_decorate","app_core_effects_AppCoreEffects","updateAppVersion$","checkForNewAppVersion$","checkForVersion","app_core_effects_decorate","router_effects_RouterEffects","navigate$","router_store","navigateBack$","navigateForward$","router_effects_decorate","analytics_effects_AnalyticsEffects","analytics","trackToken$","trackSignin","trackSearch$","trackSearch","trackPlay$","trackVideoPlay","analytics_effects_decorate","CoreModule","AppPlayerModule","AppBrandModule","AppNavigatorModule","NowPlayingModule","AppSidebarModule","AppErrorHandlerModule","AppSearchModule","onLine","RESPONSE_ERROR","OFFLINE","AppModuleNgFactory","WithLatestFromOperator","WithLatestFromSubscriber","_tryProject"],"mappings":"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AC,GAAA,GAIA,MAAAe,IACAC,KAAA,EACAC,IAAA,EACAC,IAAA,EACAC,IAAA,EACAC,KAAA,EACAC,MAAA,GA4YA,SAAAC,GAAAlrE,EAAAmrE,GAGA,OA7XA,SAAAA,EAAAC,GACA,iBAAAA,IACAA,EAAAnF,SAAA,EAAuC,KAGvC,MAAAoF,EAAA,EAEAC,EAAAD,EAAA38C,WAAAia,QAAA,gBAEAn9B,EAAAxF,KAAAulE,MAAAvlE,KAAAwlE,IAAAH,IAEAz/D,EAAA0/D,EAAAjuE,OAEA27D,EAAAiN,SAAAqF,EAAA,IAEA/mC,EAAA0hC,SAAAoF,EAAA38C,WAAAia,QAAA,4BAGA,OADAwiC,EAAAjjB,MAAA,QAAArf,eAEA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAAAwiC,EACAV,GAAAE,IACAF,GAAAM,MACA,SACA,SACA,SACA,SACA,SACA,OAAAI,IAAArlE,KAAAulE,MAAAF,OAAA,GAAAA,GAAA,EACAV,GAAAE,IACAF,GAAAM,MACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAAz/D,GAAA,IAAA6/D,EACAV,GAAAE,IACAF,GAAAM,MACA,SACA,WAAAI,EACAV,GAAAC,KACA,IAAAS,EACAV,GAAAE,IACA,IAAAQ,EACAV,GAAAG,IACAO,EAAA,MAAArlE,KAAAulE,MAAAF,EAAA,MAAAA,EAAA,QAAAA,EAAA,QACAV,GAAAI,IACAM,EAAA,MAAArlE,KAAAulE,MAAAF,EAAA,MAAAA,EAAA,SAAAA,EAAA,QACAV,GAAAK,KACAL,GAAAM,MACA,UACA,SACA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,SACA,SACA,SACA,SACA,UACA,UACA,SACA,UACA,SACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAAAwiC,EACAV,EAAAE,IACAF,EAAAM,MACA,SACA,SACA,SACA,SACA,SACA,OAAAI,IAAArlE,KAAAulE,MAAAF,OAAA,GAAAA,GAAA,EACAV,EAAAE,IACAF,EAAAM,MACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAAz/D,GAAA,IAAA6/D,EACAV,EAAAE,IACAF,EAAAM,MACA,SACA,WAAAI,EACAV,EAAAC,KACA,IAAAS,EACAV,EAAAE,IACA,IAAAQ,EACAV,EAAAG,IACAO,EAAA,MAAArlE,KAAAulE,MAAAF,EAAA,MAAAA,EAAA,QAAAA,EAAA,QACAV,EAAAI,IACAM,EAAA,MAAArlE,KAAAulE,MAAAF,EAAA,MAAAA,EAAA,SAAAA,EAAA,QACAV,EAAAK,KACAL,EAAAM,MACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,WAAAz/D,GAAA,IAAAI,EACA++D,EAAAE,IACAF,EAAAM,MACA,SACA,OAAAI,EAAA,OAAAA,EAAA,QACAV,EAAAE,IACAQ,EAAA,KAAArlE,KAAAulE,MAAAF,EAAA,KAAAA,EAAA,OAAAA,EAAA,SACAA,EAAA,SAAAA,EAAA,SACAV,EAAAI,IACAM,EAAA,OAAAA,EAAA,KAAArlE,KAAAulE,MAAAF,EAAA,KAAAA,EAAA,OAAAA,EAAA,OACAA,EAAA,MAAArlE,KAAAulE,MAAAF,EAAA,MAAAA,EAAA,SAAAA,EAAA,QACAV,EAAAK,KACAL,EAAAM,MACA,SACA,OAAAI,EAAA,OAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QACAV,EAAAE,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","file":"main.ea03303f6b1fffc0f245.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { EchoesState } from '@store/reducers';\r\nimport * as fromNowPlaylist from '@store/now-playlist';\r\nimport { YoutubeVideosInfo } from './youtube-videos-info.service';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class NowPlaylistService {\r\n  public playlist$: Observable<fromNowPlaylist.INowPlaylist>;\r\n\r\n  constructor(\r\n    public store: Store<EchoesState>,\r\n    private youtubeVideosInfo: YoutubeVideosInfo\r\n  ) {\r\n    this.playlist$ = this.store.pipe(select(fromNowPlaylist.getNowPlaylist));\r\n  }\r\n\r\n  queueVideo(mediaId: string) {\r\n    return this.youtubeVideosInfo.api\r\n      .list(mediaId)\r\n      .pipe(map(items => items[0]));\r\n  }\r\n\r\n  queueVideos(medias: GoogleApiYouTubeVideoResource[]) {\r\n    this.store.dispatch(new fromNowPlaylist.QueueVideos(medias));\r\n  }\r\n\r\n  removeVideo(media) {\r\n    this.store.dispatch(new fromNowPlaylist.RemoveVideo(media));\r\n  }\r\n\r\n  selectVideo(media) {\r\n    this.store.dispatch(new fromNowPlaylist.SelectVideo(media));\r\n  }\r\n\r\n  updateFilter(filter: string) {\r\n    this.store.dispatch(new fromNowPlaylist.FilterChange(filter));\r\n  }\r\n\r\n  clearPlaylist() {\r\n    this.store.dispatch(new fromNowPlaylist.RemoveAll());\r\n  }\r\n\r\n  selectNextIndex() {\r\n    this.store.dispatch(new fromNowPlaylist.SelectNext());\r\n  }\r\n\r\n  selectPreviousIndex() {\r\n    this.store.dispatch(new fromNowPlaylist.SelectPrevious());\r\n  }\r\n\r\n  trackEnded() {\r\n    this.store.dispatch(new fromNowPlaylist.MediaEnded());\r\n  }\r\n\r\n  getCurrent() {\r\n    let media;\r\n    this.playlist$.pipe(take(1)).subscribe(playlist => {\r\n      media = playlist.videos.find(video => video.id === playlist.selectedId);\r\n    });\r\n    return media;\r\n  }\r\n\r\n  updateIndexByMedia(mediaId: string) {\r\n    this.store.dispatch(new fromNowPlaylist.UpdateIndexByMedia(mediaId));\r\n  }\r\n\r\n  isInLastTrack(): boolean {\r\n    let nowPlaylist: fromNowPlaylist.INowPlaylist;\r\n    this.playlist$\r\n      .pipe(take(1))\r\n      .subscribe(_nowPlaylist => (nowPlaylist = _nowPlaylist));\r\n    const currentVideoId = nowPlaylist.selectedId;\r\n    const indexOfCurrentVideo = nowPlaylist.videos.findIndex(\r\n      video => video.id === currentVideoId\r\n    );\r\n    const isCurrentLast = indexOfCurrentVideo + 1 === nowPlaylist.videos.length;\r\n    return isCurrentLast;\r\n  }\r\n\r\n  seekToTrack(trackEvent) {\r\n    this.store.dispatch(new fromNowPlaylist.SeekTo(trackEvent));\r\n  }\r\n}\r\n","import { Subscription, Observable, of, timer } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { AppApi } from '@api/app.api';\r\nimport { switchMap, retry, filter, take } from 'rxjs/operators';\r\n\r\ninterface INpmPackageJson {\r\n  version: number;\r\n  [param: string]: any;\r\n}\r\n\r\nfunction verifyPackage(packageJson: INpmPackageJson) {\r\n  return packageJson.hasOwnProperty('version');\r\n}\r\n\r\n@Injectable()\r\nexport class VersionCheckerService {\r\n  private interval = 1000 * 60 * 60;\r\n  private protocol = 'https';\r\n  private prefix = 'raw.githubusercontent.com';\r\n  private repo = 'orizens/echoes-player';\r\n  private repoBranch = 'gh-pages';\r\n  private pathToFile = 'assets/package.json';\r\n  public url = `${this.protocol}://${this.prefix}/${this.repo}/${\r\n    this.repoBranch\r\n  }/${this.pathToFile}`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private zone: NgZone,\r\n    private appApi: AppApi\r\n  ) {}\r\n\r\n  check() {\r\n    return this.http.get(this.url);\r\n  }\r\n\r\n  start() {\r\n    let checkTimer: Subscription;\r\n    this.zone.runOutsideAngular(() => {\r\n      checkTimer = timer(0, this.interval)\r\n        .pipe(switchMap(() => this.check()), retry(), filter(verifyPackage))\r\n        .subscribe(response => this.appApi.recievedNewVersion(response));\r\n    });\r\n    return checkTimer;\r\n  }\r\n\r\n  updateVersion() {\r\n    if (window) {\r\n      window.location.reload(true);\r\n    }\r\n  }\r\n\r\n  checkForVersion() {\r\n    return this.check()\r\n      .pipe(retry(), filter(verifyPackage), take(1))\r\n      .subscribe(response => this.appApi.notifyNewVersion(response));\r\n  }\r\n}\r\n","import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n    return (source) => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nclass DistinctUntilChangedOperator {\n    constructor(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    }\n}\nclass DistinctUntilChangedSubscriber extends Subscriber {\n    constructor(destination, compare, keySelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    compare(x, y) {\n        return x === y;\n    }\n    _next(value) {\n        let key;\n        try {\n            const { keySelector } = this;\n            key = keySelector ? keySelector(value) : value;\n        }\n        catch (err) {\n            return this.destination.error(err);\n        }\n        let result = false;\n        if (this.hasKey) {\n            try {\n                const { compare } = this;\n                result = compare(this.key, key);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (!result) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=distinctUntilChanged.js.map","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map","import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { ActionCreatorFactory } from 'ngrx-action-creator-factory';\r\n\r\nexport enum ActionTypes {\r\n  QUEUE_LOAD_VIDEO = '[NowPlaylist] QUEUE_LOAD_VIDEO',\r\n  QUEUE = '[NowPlaylist] QUEUE',\r\n  QUEUE_LOAD_VIDEO_SUCCESS = '[NowPlaylist] QUEUE_LOAD_VIDEO_SUCCESS',\r\n  SELECT = '[NowPlaylist] SELECT',\r\n  REMOVE = '[NowPlaylist] REMOVE',\r\n  UPDATE_INDEX = '[NowPlaylist] UPDATE_INDEX',\r\n  QUEUE_FAILED = '[NowPlaylist] QUEUE_FAILED',\r\n  FILTER_CHANGE = '[NowPlaylist] FILTER_CHANGE',\r\n  REMOVE_ALL = '[NowPlaylist] REMOVE_ALL',\r\n  SELECT_NEXT = '[NowPlaylist] SELECT_NEXT',\r\n  SELECT_PREVIOUS = '[NowPlaylist] SELECT_PREVIOUS',\r\n  QUEUE_VIDEOS = '[NowPlaylist] QUEUE_VIDEOS',\r\n  MEDIA_ENDED = '[NowPlaylist] MEDIA_ENDED',\r\n  TOGGLE_REPEAT = '[NowPlaylist] TOGGLE_REPEAT',\r\n  SELECT_AND_SEEK_TO_TIME = '[NowPlaylist] SELECT_AND_SEEK_TO_TIME',\r\n  LOAD_PLAYLIST_START = '[NowPlaylist] LOAD_PLAYLIST_START',\r\n  LOAD_PLAYLIST_END = '[NowPlaylist] LOAD_PLAYLIST_END',\r\n  PLAY_PLAYLIST = '[NowPlaylist] PLAY_PLAYLIST',\r\n  PLAY_PLAYLIST_START = '[NowPlaylist] PLAY_PLAYLIST_START',\r\n  PLAYER_STATE_CHANGE = '[NowPlaylist] PLAYER_STATE_CHANGE'\r\n}\r\n\r\nexport class SeekTo implements Action {\r\n  public type = ActionTypes.SELECT_AND_SEEK_TO_TIME;\r\n  constructor(\r\n    public payload: { time: string; media: GoogleApiYouTubeVideoResource }\r\n  ) {}\r\n}\r\nexport class QueueLoadVideo implements Action {\r\n  public type = ActionTypes.QUEUE_LOAD_VIDEO;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\n\r\nexport class UpdateIndexByMedia implements Action {\r\n  public type = ActionTypes.UPDATE_INDEX;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class QueueFailed implements Action {\r\n  public type = ActionTypes.QUEUE_FAILED;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\nexport class QueueVideo implements Action {\r\n  public type = ActionTypes.QUEUE;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\nexport class QueueVideos implements Action {\r\n  public type = ActionTypes.QUEUE_VIDEOS;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource[]) {}\r\n}\r\nexport class RemoveVideo implements Action {\r\n  public type = ActionTypes.REMOVE;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\n\r\nexport class FilterChange implements Action {\r\n  public type = ActionTypes.FILTER_CHANGE;\r\n  constructor(public payload: string) {}\r\n}\r\nexport class SelectVideo implements Action {\r\n  public type = ActionTypes.SELECT;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\n\r\nexport class PlayPlaylistAction implements Action {\r\n  readonly type = ActionTypes.PLAY_PLAYLIST;\r\n  constructor(public payload: string) {}\r\n}\r\nexport class PlayPlaylistStartAction implements Action {\r\n  readonly type = ActionTypes.PLAY_PLAYLIST_START;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\n\r\nexport class LoadPlaylistAction implements Action {\r\n  readonly type = ActionTypes.LOAD_PLAYLIST_START;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class LoadPlaylistEndAction implements Action {\r\n  readonly type = ActionTypes.LOAD_PLAYLIST_END;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource[]) {}\r\n}\r\n\r\nexport class MediaEnded implements Action {\r\n  public type = ActionTypes.MEDIA_ENDED;\r\n  constructor(public payload?: any) {}\r\n}\r\n\r\nexport class SelectNext implements Action {\r\n  public type = ActionTypes.SELECT_NEXT;\r\n  constructor(public payload?: any) {}\r\n}\r\nexport class SelectPrevious implements Action {\r\n  public type = ActionTypes.SELECT_PREVIOUS;\r\n  constructor(public payload?: any) {}\r\n}\r\nexport class RemoveAll implements Action {\r\n  public type = ActionTypes.REMOVE_ALL;\r\n  constructor(public payload?: any) {}\r\n}\r\nexport class ToggleRepeat implements Action {\r\n  public type = ActionTypes.TOGGLE_REPEAT;\r\n  constructor(public payload = '') {}\r\n}\r\nexport class PlayerStateChange implements Action {\r\n  public type = ActionTypes.PLAYER_STATE_CHANGE;\r\n  constructor(public payload: YT.PlayerState) {}\r\n}\r\n\r\nexport type Actions =\r\n  | PlayPlaylistAction\r\n  | PlayPlaylistStartAction\r\n  | LoadPlaylistAction\r\n  | LoadPlaylistEndAction\r\n  | MediaEnded\r\n  | SelectNext\r\n  | SelectPrevious\r\n  | RemoveAll\r\n  | ToggleRepeat\r\n  | PlayerStateChange;\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\nclass TakeUntilSubscriber extends OuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.seenValue = true;\n        this.complete();\n    }\n    notifyComplete() {\n    }\n}\n//# sourceMappingURL=takeUntil.js.map","import { ActionTypes, Actions } from './app-player.actions';\r\n\r\ntype GoogleApiYoutubeVideo =\r\n  | GoogleApiYouTubeVideoResource\r\n  | GoogleApiYouTubeSearchResource\r\n  | any;\r\n\r\nexport * from './app-player.actions';\r\n\r\nexport interface IAppPlayer {\r\n  index: number;\r\n  media?: GoogleApiYoutubeVideo | any;\r\n  showPlayer: boolean;\r\n  playerState: number;\r\n  fullscreen: {\r\n    on: boolean;\r\n    height: number;\r\n    width: number;\r\n  };\r\n  isFullscreen: boolean;\r\n}\r\nconst initialPlayerState: IAppPlayer = {\r\n  index: 0,\r\n  media: {\r\n    snippet: { title: 'No Media Yet', thumbnails: { default: { url: '' } } }\r\n  },\r\n  showPlayer: true,\r\n  playerState: 0,\r\n  fullscreen: {\r\n    on: false,\r\n    height: 270,\r\n    width: 367\r\n  },\r\n  isFullscreen: false\r\n};\r\nexport function player(\r\n  state: IAppPlayer = initialPlayerState,\r\n  action: Actions\r\n): IAppPlayer {\r\n  switch (action.type) {\r\n    case ActionTypes.PLAY:\r\n      return playVideo(state, action.payload);\r\n\r\n    case ActionTypes.QUEUE:\r\n      return state;\r\n\r\n    case ActionTypes.TOGGLE_PLAYER:\r\n      return toggleVisibility(state);\r\n\r\n    case ActionTypes.UPDATE_STATE:\r\n      return changePlayerState(state, action.payload);\r\n\r\n    case ActionTypes.FULLSCREEN: {\r\n      const on = !state.fullscreen.on;\r\n      let { height, width } = initialPlayerState.fullscreen;\r\n      if (on) {\r\n        height = window.innerHeight;\r\n        width = window.innerWidth;\r\n      }\r\n      const fullscreen = { on, height, width };\r\n      return { ...state, fullscreen };\r\n    }\r\n\r\n    case ActionTypes.RESET:\r\n      return {\r\n        ...state,\r\n        isFullscreen: false,\r\n        playerState: 0\r\n      };\r\n\r\n    case ActionTypes.RESET_FULLSCREEN: {\r\n      const fullscreen = initialPlayerState.fullscreen;\r\n      return { ...initialPlayerState, ...state, fullscreen };\r\n    }\r\n\r\n    default:\r\n      return { ...initialPlayerState, ...state };\r\n  }\r\n}\r\n\r\nexport function playVideo(state: IAppPlayer, media: GoogleApiYoutubeVideo) {\r\n  return { ...state, mediaId: media.id || '', media };\r\n}\r\n\r\nexport function toggleVisibility(state: IAppPlayer) {\r\n  return { ...state, showPlayer: !state.showPlayer };\r\n}\r\n\r\nexport function changePlayerState(\r\n  state: IAppPlayer,\r\n  playerState: YT.PlayerState | any\r\n) {\r\n  return { ...state, playerState: playerState };\r\n}\r\n","import { Store, createSelector } from '@ngrx/store';\r\nimport { IUserProfile } from './user-profile.reducer';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\nexport const getUser = (state: EchoesState) => state.user;\r\nexport const getUserPlaylists = createSelector(getUser, (user: IUserProfile) => user.playlists);\r\nexport const getUserViewPlaylist = createSelector(getUser, (user: IUserProfile) => user.viewedPlaylist);\r\nexport const getIsUserSignedIn = createSelector(getUser, (user: IUserProfile) => user.access_token !== '');\r\n","export const rxSubscriber = typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\nexport const $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","import { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nexport class BehaviorSubject extends Subject {\n    constructor(_value) {\n        super();\n        this._value = _value;\n    }\n    get value() {\n        return this.getValue();\n    }\n    _subscribe(subscriber) {\n        const subscription = super._subscribe(subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    }\n    getValue() {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    }\n    next(value) {\n        super.next(this._value = value);\n    }\n}\n//# sourceMappingURL=BehaviorSubject.js.map","import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '@env/environment';\r\nimport { Authorization } from '../authorization.service';\r\n\r\nexport const DataApiProviders = {\r\n  SEARCH: 'search',\r\n  PLAYLISTS: 'playlists'\r\n};\r\n\r\nexport const _defaultUrlParams = {\r\n  part: 'snippet,id',\r\n  maxResults: '50',\r\n  key: environment.youtube.API_KEY\r\n};\r\n\r\n/**\r\n * Performs http requests using HttpClientModule to youtube-api v3.\r\n *\r\n * `YoutubeApi` is available as an injectable class, with methods to perform youtube api\r\n *  methods requests\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {YoutubeDataApi} from './services/YoutubeDataApi';\r\n * @Component({\r\n *   selector: 'yt-app',\r\n * })\r\n * class VideosComponent {\r\n *   options = {\r\n *    part: 'snippet,id',\r\n *    q: 'chillstep'\r\n *   };\r\n *   constructor(yt: YoutubeDataApi) {\r\n *     yt.list('search', options)\r\n *       // Subscribe to the observable to get the parsed videos\r\n *       .subscribe(response => this.videos = response.videos);\r\n *   }\r\n * }\r\n * ```\r\n */\r\n@Injectable()\r\nexport class YoutubeDataApi {\r\n  // public _config: HttpParams = new HttpParams();\r\n\r\n  private _apiPrefixUrl = 'https://www.googleapis.com/youtube';\r\n  private _apiVersion = 'v3';\r\n  private get _apiUrl() {\r\n    return `${this._apiPrefixUrl}/${this._apiVersion}`;\r\n  }\r\n\r\n  constructor(private http: HttpClient, private auth: Authorization) {\r\n  }\r\n\r\n  list(api: string, options) {\r\n    const params = { ..._defaultUrlParams, ...options };\r\n    const _options = {\r\n      params,\r\n      headers: this.createHeaders(false)\r\n    };\r\n    return this.http.get(this.getApi(api), _options);\r\n  }\r\n\r\n  delete(api: string, options) {\r\n    return this._request(api);\r\n  }\r\n\r\n  insert(api: string, options) {\r\n    return this.http.post(this.getApi(api), {});\r\n  }\r\n\r\n  update(api) {\r\n    return this._request(api);\r\n  }\r\n\r\n  private _request(api) {\r\n    // const options: RequestOptionsArgs = {\r\n    //   search: this.config,\r\n    //   headers: this.createHeaders()\r\n    // };\r\n    // this.http.\r\n  }\r\n\r\n  private createHeaders(addAuth: boolean) {\r\n    const accessToken = this.auth.accessToken;\r\n    const headersOptions = {};\r\n    if (accessToken && addAuth) {\r\n      headersOptions['authorization'] = `Bearer ${accessToken}`;\r\n    }\r\n    return new HttpHeaders(headersOptions);\r\n  }\r\n\r\n  private getApi(api: string): string {\r\n    return `${this._apiUrl}/${api}`;\r\n  }\r\n}\r\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport const config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            const error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { AppNavbarModule } from '../app-navbar';\r\nimport { PlaylistViewComponent } from './playlist-view.component';\r\nimport { PlaylistProxy } from './playlist-view.proxy';\r\n\r\nimport { routing } from './playlist-view.routing';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    AppNavbarModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    PlaylistViewComponent\r\n  ],\r\n  exports: [\r\n    PlaylistViewComponent\r\n  ],\r\n  providers: [\r\n    PlaylistProxy\r\n  ]\r\n})\r\nexport class PlaylistViewModule { }\r\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n//# sourceMappingURL=Action.js.map","import { Action } from './Action';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        clearInterval(id);\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, delay) {\n        let errored = false;\n        let errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    _unsubscribe() {\n        const id = this.id;\n        const scheduler = this.scheduler;\n        const actions = scheduler.actions;\n        const index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    }\n}\n//# sourceMappingURL=AsyncAction.js.map","function ArgumentOutOfRangeErrorImpl() {\n    Error.call(this);\n    this.message = 'argument out of range';\n    this.name = 'ArgumentOutOfRangeError';\n    return this;\n}\nArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\nexport const ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","<ng-content></ng-content>","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require(\"@angular/core\");\nvar TooltipContent_1 = require(\"./TooltipContent\");\nvar Tooltip = (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function Tooltip(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n        this.tooltipAnimation = true;\n        this.tooltipPlacement = \"bottom\";\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    Tooltip.prototype.show = function () {\n        if (this.tooltipDisabled || this.visible)\n            return;\n        this.visible = true;\n        if (typeof this.content === \"string\") {\n            var factory = this.resolver.resolveComponentFactory(TooltipContent_1.TooltipContent);\n            if (!this.visible)\n                return;\n            this.tooltip = this.viewContainerRef.createComponent(factory);\n            this.tooltip.instance.hostElement = this.viewContainerRef.element.nativeElement;\n            this.tooltip.instance.content = this.content;\n            this.tooltip.instance.placement = this.tooltipPlacement;\n            this.tooltip.instance.animation = this.tooltipAnimation;\n        }\n        else {\n            var tooltip = this.content;\n            tooltip.hostElement = this.viewContainerRef.element.nativeElement;\n            tooltip.placement = this.tooltipPlacement;\n            tooltip.animation = this.tooltipAnimation;\n            tooltip.show();\n        }\n    };\n    Tooltip.prototype.hide = function () {\n        if (!this.visible)\n            return;\n        this.visible = false;\n        if (this.tooltip)\n            this.tooltip.destroy();\n        if (this.content instanceof TooltipContent_1.TooltipContent)\n            this.content.hide();\n    };\n    return Tooltip;\n}());\n__decorate([\n    core_1.Input(\"tooltip\"),\n    __metadata(\"design:type\", Object)\n], Tooltip.prototype, \"content\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Boolean)\n], Tooltip.prototype, \"tooltipDisabled\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Boolean)\n], Tooltip.prototype, \"tooltipAnimation\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], Tooltip.prototype, \"tooltipPlacement\", void 0);\n__decorate([\n    core_1.HostListener(\"focusin\"),\n    core_1.HostListener(\"mouseenter\"),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], Tooltip.prototype, \"show\", null);\n__decorate([\n    core_1.HostListener(\"focusout\"),\n    core_1.HostListener(\"mouseleave\"),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], Tooltip.prototype, \"hide\", null);\nTooltip = __decorate([\n    core_1.Directive({\n        selector: \"[tooltip]\"\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ViewContainerRef,\n        core_1.ComponentFactoryResolver])\n], Tooltip);\nexports.Tooltip = Tooltip;\n//# sourceMappingURL=Tooltip.js.map","import { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    }\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, ish, value, index, innerSubscriber);\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeMap.js.map","import { Subscriber } from './Subscriber';\nexport class InnerSubscriber extends Subscriber {\n    constructor(parent, outerValue, outerIndex) {\n        super();\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    _next(value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    }\n    _error(error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=InnerSubscriber.js.map","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n// import './button-group.component.scss';\r\n\r\nexport interface ButtonGroupButton {\r\n  label: string;\r\n  value: any;\r\n}\r\n@Component({\r\n  selector: 'button-group',\r\n  styleUrls: [ './button-group.component.scss' ],\r\n  template: `\r\n    <div class=\"btn-group btn-group-sm navbar-btn\">\r\n      <button class=\"btn btn-default\"\r\n        *ngFor=\"let button of buttons\"\r\n        [class.active]=\"isSelectedButton(button.value)\"\r\n        (click)=\"buttonClick.next(button)\">\r\n        {{ button.label }}\r\n      </button>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class ButtonGroupComponent implements OnInit {\r\n  @Input() buttons: ButtonGroupButton[];\r\n  @Input() selectedButton: string;\r\n\r\n  @Output() buttonClick = new EventEmitter<ButtonGroupButton>();\r\n\r\n  ngOnInit() { }\r\n\r\n  isSelectedButton(buttonValue: string) {\r\n    return buttonValue === this.selectedButton;\r\n  }\r\n}\r\n","import { Store } from '@ngrx/store';\r\nimport { Actions, Effect } from '@ngrx/effects';\r\nimport { toPayload } from '@utils/data.utils';\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { EchoesState } from '@store/reducers';\r\nimport * as AppPlayer from '@store/app-player';\r\nimport * as fromNowPlaylist from '@store/now-playlist';\r\nimport { NowPlaylistEffects } from '@core/effects/now-playlist.effects';\r\nimport { take, map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AppPlayerApi {\r\n  constructor(\r\n    private store: Store<EchoesState>,\r\n    private nowPlaylistEffects: NowPlaylistEffects\r\n  ) {}\r\n\r\n  playPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.nowPlaylistEffects.playPlaylistFirstTrack$\r\n      .pipe(map(toPayload), take(1))\r\n      .subscribe((media: GoogleApiYouTubeVideoResource) =>\r\n        this.playVideo(media)\r\n      );\r\n    this.queuePlaylist(playlist);\r\n  }\r\n\r\n  queuePlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.store.dispatch(new fromNowPlaylist.LoadPlaylistAction(playlist.id));\r\n  }\r\n\r\n  playVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.store.dispatch(new AppPlayer.LoadAndPlay(media));\r\n    this.store.dispatch(new fromNowPlaylist.SelectVideo(media));\r\n  }\r\n\r\n  queueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.store.dispatch(new fromNowPlaylist.QueueVideo(media));\r\n  }\r\n\r\n  removeVideoFromPlaylist(media: GoogleApiYouTubeVideoResource) {\r\n    this.store.dispatch(new fromNowPlaylist.RemoveVideo(media));\r\n  }\r\n\r\n  pauseVideo() {\r\n    this.store.dispatch(new AppPlayer.PauseVideo());\r\n  }\r\n\r\n  togglePlayer() {\r\n    this.store.dispatch(new AppPlayer.TogglePlayer(true));\r\n  }\r\n\r\n  toggleFullScreen() {\r\n    this.store.dispatch(new AppPlayer.FullScreen());\r\n  }\r\n\r\n  toggleRepeat() {\r\n    this.store.dispatch(new fromNowPlaylist.ToggleRepeat());\r\n  }\r\n\r\n  resetPlayer() {\r\n    this.store.dispatch(new AppPlayer.Reset());\r\n  }\r\n\r\n  setupPlayer(player) {\r\n    this.store.dispatch(new AppPlayer.SetupPlayer(player));\r\n  }\r\n\r\n  changePlayerState(event: YT.OnStateChangeEvent) {\r\n    this.store.dispatch(new AppPlayer.PlayerStateChange(event.data));\r\n    this.store.dispatch(new fromNowPlaylist.PlayerStateChange(event.data));\r\n  }\r\n}\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar Tooltip_1 = require(\"./Tooltip\");\nvar TooltipContent_1 = require(\"./TooltipContent\");\n__export(require(\"./Tooltip\"));\n__export(require(\"./TooltipContent\"));\nvar TooltipModule = (function () {\n    function TooltipModule() {\n    }\n    return TooltipModule;\n}());\nTooltipModule = __decorate([\n    core_1.NgModule({\n        imports: [\n            common_1.CommonModule\n        ],\n        declarations: [\n            Tooltip_1.Tooltip,\n            TooltipContent_1.TooltipContent,\n        ],\n        exports: [\n            Tooltip_1.Tooltip,\n            TooltipContent_1.TooltipContent,\n        ],\n        entryComponents: [\n            TooltipContent_1.TooltipContent\n        ]\n    })\n], TooltipModule);\nexports.TooltipModule = TooltipModule;\n//# sourceMappingURL=index.js.map","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parent, _parents } = this;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map","export * from './user-profile.reducer';\r\nexport * from './user-profile.actions';\r\nexport * from './user-profile.selectors';\r\n","import { Observable } from 'rxjs';\r\nimport { EchoesState } from '../';\r\nimport { Action } from '@ngrx/store';\r\nimport { UserProfileActions } from './user-profile.actions';\r\n\r\nexport * from './user-profile.actions';\r\n\r\nexport interface IUserProfile {\r\n  access_token: string;\r\n  playlists: GoogleApiYouTubePlaylistResource[];\r\n  data?: {};\r\n  nextPageToken?: string;\r\n  profile: GoogleBasicProfile;\r\n  viewedPlaylist?: string;\r\n}\r\n\r\nexport interface GoogleBasicProfile {\r\n  name?: string;\r\n  imageUrl?: string;\r\n}\r\n\r\nconst initialUserState: IUserProfile = {\r\n  access_token: '',\r\n  playlists: [],\r\n  data: {},\r\n  nextPageToken: '',\r\n  profile: {},\r\n  viewedPlaylist: ''\r\n};\r\ninterface UnsafeAction {\r\n  payload?: any;\r\n  type: any;\r\n}\r\nexport function user(\r\n  state = initialUserState,\r\n  action: UnsafeAction\r\n): IUserProfile {\r\n  switch (action.type) {\r\n    case UserProfileActions.ADD_PLAYLISTS:\r\n      return { ...state, playlists: [...state.playlists, ...action.payload] };\r\n\r\n    case UserProfileActions.UPDATE_TOKEN:\r\n      return { ...state, access_token: action.payload, playlists: [] };\r\n\r\n    case UserProfileActions.USER_SIGNOUT_SUCCESS:\r\n      return { ...initialUserState };\r\n\r\n    case UserProfileActions.UPDATE:\r\n      return { ...state, data: action.payload };\r\n\r\n    case UserProfileActions.UPDATE_NEXT_PAGE_TOKEN:\r\n      return { ...state, nextPageToken: action.payload };\r\n\r\n    case UserProfileActions.UPDATE_USER_PROFILE:\r\n      return { ...state, profile: action.payload };\r\n\r\n    case UserProfileActions.VIEWED_PLAYLIST:\r\n      return { ...state, viewedPlaylist: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Subject, Subscription, Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === (/** @type {?} */ (getClosureSafeProperty))) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param {?} target The target to set properties on\n * @param {?} source The source of the property keys and values to set\n * @return {?}\n */\nfunction fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n * @type {?}\n */\nconst NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `\\@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * \\@publicApi\n * @template T\n * @param {?} opts\n * @return {?}\n */\nfunction defineInjectable(opts) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        providedIn: (/** @type {?} */ (opts.providedIn)) || null, factory: opts.factory, value: undefined,\n    })))));\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * \\@publicApi\n * @param {?} options\n * @return {?}\n */\nfunction defineInjector(options) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    })))));\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @template T\n * @param {?} type type which may have `ngInjectableDef`\n * @return {?}\n */\nfunction getInjectableDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? ((/** @type {?} */ (type)))[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @template T\n * @param {?} type type which may have `ngInjectorDef`\n * @return {?}\n */\nfunction getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? ((/** @type {?} */ (type)))[NG_INJECTOR_DEF] : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nclass InjectionToken {\n    /**\n     * @param {?} _desc\n     * @param {?=} options\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `InjectionToken ${this._desc}`; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANNOTATIONS = '__annotations__';\n/** @type {?} */\nconst PARAMETERS = '__parameters__';\n/** @type {?} */\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @template T\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @param {?=} typeFn\n * @return {?}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    /** @type {?} */\n    const metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory(...args) {\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call(this, ...args);\n            return this;\n        }\n        /** @type {?} */\n        const annotationInstance = new ((/** @type {?} */ (DecoratorFactory)))(...args);\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn(cls, ...args);\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            /** @type {?} */\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                ((/** @type {?} */ (cls)))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    ((/** @type {?} */ (DecoratorFactory))).annotationCls = DecoratorFactory;\n    return (/** @type {?} */ (DecoratorFactory));\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            /** @type {?} */\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nfunction makeParamDecorator(name, props, parentClass) {\n    /** @type {?} */\n    const metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory(...args) {\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        const annotationInstance = new ((/** @type {?} */ (ParamDecoratorFactory)))(...args);\n        ((/** @type {?} */ (ParamDecorator))).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            /** @type {?} */\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                ((/** @type {?} */ (cls)))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ((/** @type {?} */ (ParamDecoratorFactory))).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @return {?}\n */\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    /** @type {?} */\n    const metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory(...args) {\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        const decoratorInstance = new ((/** @type {?} */ (PropDecoratorFactory)))(...args);\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @return {?}\n         */\n        function PropDecorator(target, name) {\n            /** @type {?} */\n            const constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            /** @type {?} */\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                ((/** @type {?} */ (constructor)))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing(target, name, ...args);\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    ((/** @type {?} */ (PropDecoratorFactory))).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * \\@usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * \\@NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Attribute decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName }));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * \\@publicApi\n * @abstract\n */\nclass Query {\n}\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data)), Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * \\@Annotation\n *\n * \\@publicApi\n * @type {?}\n */\nconst ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data)), Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data)), Query);\n/**\n * ViewChild decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChild = makePropDecorator('ViewChild', (selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data)), Query);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ChangeDetectionStrategy = {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     */\n    OnPush: 0,\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    Default: 1,\n};\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nconst ChangeDetectorStatus = {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    CheckOnce: 0,\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    Checked: 1,\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    CheckAlways: 2,\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    Detached: 3,\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    Errored: 4,\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    Destroyed: 5,\n};\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus` / `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst __window = typeof window !== 'undefined' && window;\n/** @type {?} */\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\n/** @type {?} */\nconst __global = typeof global !== 'undefined' && global;\n// Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\n/** @type {?} */\nconst _global = __global || __window || __self;\n/** @type {?} */\nconst promise = Promise.resolve(0);\n/** @type {?} */\nlet _symbolIterator = null;\n/**\n * @return {?}\n */\nfunction getSymbolIterator() {\n    if (!_symbolIterator) {\n        /** @type {?} */\n        const Symbol = _global['Symbol'];\n        if (Symbol && Symbol.iterator) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            /** @type {?} */\n            const keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                /** @type {?} */\n                const key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    ((/** @type {?} */ (Map))).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(() => { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n// JS has NaN !== NaN\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    /** @type {?} */\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    /** @type {?} */\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n * @param {?} fn\n * @return {?}\n */\nfunction noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nfunction forwardRef(forwardRefFn) {\n    ((/** @type {?} */ (forwardRefFn))).__forward_ref__ = forwardRef;\n    ((/** @type {?} */ (forwardRefFn))).toString = function () { return stringify(this()); };\n    return ((/** @type {?} */ ((/** @type {?} */ (forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction resolveForwardRef(type) {\n    /** @type {?} */\n    const fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `\\@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `\\@Compenent.templateUrl` into\n * // `\\@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n * @return {?}\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    /** @type {?} */\n    const urlFetches = [];\n    // Cache so that we don't fetch the same resource more than once.\n    /** @type {?} */\n    const urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        let promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n            urlFetches.push(promise);\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((component) => {\n        if (component.templateUrl) {\n            cachedResourceResolve(component.templateUrl).then((template) => {\n                component.template = template;\n                component.templateUrl = undefined;\n            });\n        }\n        /** @type {?} */\n        const styleUrls = component.styleUrls;\n        /** @type {?} */\n        const styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            cachedResourceResolve(styleUrl).then((style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            });\n        });\n    });\n    componentResourceResolutionQueue.clear();\n    return Promise.all(urlFetches).then(() => null);\n}\n/** @type {?} */\nconst componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction maybeQueueResolutionOfComponentResources(metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.add(metadata);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction componentNeedsResolution(component) {\n    return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ViewEncapsulation = {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    Emulated: 0,\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    Native: 1,\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    None: 2,\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ShadowDom: 3,\n};\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction ngDevModeResetPerfCounters() {\n    /** @type {?} */\n    const newCounters = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n    };\n    // NOTE: Under Ivy we may have both window & global defined in the Node\n    //    environment since ensureDocument() in render3.ts sets global.window.\n    if (typeof window != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        ((/** @type {?} */ (window)))['ngDevMode'] = newCounters;\n    }\n    if (typeof global != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        ((/** @type {?} */ (global)))['ngDevMode'] = newCounters;\n    }\n    if (typeof self != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        ((/** @type {?} */ (self)))['ngDevMode'] = newCounters;\n    }\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n * @type {?}\n */\nconst EMPTY_OBJ = {};\n/** @type {?} */\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY_OBJ);\n    Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nfunction defineComponent(componentDefinition) {\n    /** @type {?} */\n    const type = componentDefinition.type;\n    /** @type {?} */\n    const typePrototype = type.prototype;\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    /** @type {?} */\n    const def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || (/** @type {?} */ (null)),\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n        attributes: componentDefinition.attributes || null,\n        declaredInputs: declaredInputs,\n        inputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        outputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        exportAs: componentDefinition.exportAs || null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        pipeDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY,\n        _: (/** @type {?} */ (null)),\n    };\n    def._ = (/** @type {?} */ (noSideEffects(() => {\n        /** @type {?} */\n        const directiveTypes = (/** @type {?} */ (componentDefinition.directives));\n        /** @type {?} */\n        const feature = componentDefinition.features;\n        /** @type {?} */\n        const pipeTypes = (/** @type {?} */ (componentDefinition.pipes));\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach((fn) => fn(def));\n        def.directiveDefs = directiveTypes ?\n            () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef) :\n            null;\n        def.pipeDefs = pipeTypes ?\n            () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n            null;\n    })));\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractDirectiveDef(type) {\n    /** @type {?} */\n    const def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractPipeDef(type) {\n    /** @type {?} */\n    const def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is not a 'PipeType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction defineNgModule(def) {\n    /** @type {?} */\n    const res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n    };\n    return (/** @type {?} */ (res));\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n * @param {?} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY_OBJ;\n    /** @type {?} */\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            let publicName = obj[minifiedKey];\n            /** @type {?} */\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = declaredName);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nfunction defineBase(baseDefinition) {\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n * @type {?}\n */\nconst defineDirective = (/** @type {?} */ ((/** @type {?} */ (defineComponent))));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nfunction definePipe(pipeDef) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })))));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getComponentDef(type) {\n    return ((/** @type {?} */ (type)))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getDirectiveDef(type) {\n    return ((/** @type {?} */ (type)))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getPipeDef(type) {\n    return ((/** @type {?} */ (type)))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?=} throwNotFound\n * @return {?}\n */\nfunction getNgModuleDef(type, throwNotFound) {\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = ((/** @type {?} */ (type)))[NG_MODULE_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ngModuleDef' property.`);\n    }\n    return ngModuleDef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.') {\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(`ASSERTION ERROR: ${msg}`);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction assertDomNode(node) {\n    assertEqual(node instanceof Node, true, 'The provided value must be an instance of a DOM Node');\n}\n/**\n * @param {?} isParent\n * @return {?}\n */\nfunction assertPreviousIsParent(isParent) {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction assertHasParent(tNode) {\n    assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction assertDataInRange(arr, index) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n/** @type {?} */\nconst TVIEW = 0;\n/** @type {?} */\nconst FLAGS = 1;\n/** @type {?} */\nconst PARENT = 2;\n/** @type {?} */\nconst NEXT = 3;\n/** @type {?} */\nconst QUERIES = 4;\n/** @type {?} */\nconst HOST = 5;\n/** @type {?} */\nconst HOST_NODE = 6;\n// Rename to `T_HOST`?\n/** @type {?} */\nconst BINDING_INDEX = 7;\n/** @type {?} */\nconst CLEANUP = 8;\n/** @type {?} */\nconst CONTEXT = 9;\n/** @type {?} */\nconst INJECTOR = 10;\n/** @type {?} */\nconst RENDERER_FACTORY = 11;\n/** @type {?} */\nconst RENDERER = 12;\n/** @type {?} */\nconst SANITIZER = 13;\n/** @type {?} */\nconst TAIL = 14;\n/** @type {?} */\nconst CONTAINER_INDEX = 15;\n/** @type {?} */\nconst CONTENT_QUERIES = 16;\n/** @type {?} */\nconst DECLARATION_VIEW = 17;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n * @type {?}\n */\nconst HEADER_OFFSET = 18;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n * @type {?}\n */\nconst ACTIVE_INDEX = 0;\n/** @type {?} */\nconst VIEWS = 1;\n// PARENT, NEXT, QUERIES, and HOST are indices 2, 3, 4, and 5.\n// As we already have these constants in LView, we don't need to re-create them.\n/** @type {?} */\nconst NATIVE = 6;\n/** @type {?} */\nconst RENDER_PARENT = 7;\n// Because interfaces in TS/JS cannot be instanceof-checked this means that we\n// need to rely on predictable characteristics of data-structures to check if they\n// are what we expect for them to be. The `LContainer` interface code below has a\n// fixed length and the constant value below references that. Using the length value\n// below we can predictably gaurantee that we are dealing with an `LContainer` array.\n// This value MUST be kept up to date with the length of the `LContainer` array\n// interface below so that runtime type checking can work.\n/** @type {?} */\nconst LCONTAINER_LENGTH = 8;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n * @type {?}\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst TNODE = 8;\n/** @type {?} */\nconst PARENT_INJECTOR = 8;\n/** @type {?} */\nconst INJECTOR_BLOOM_PARENT_SIZE = 9;\n/** @type {?} */\nconst NO_PARENT_INJECTOR = (/** @type {?} */ (-1));\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n    /**\n     * @param {?} factory\n     * @param {?} isViewProvider\n     * @param {?} injectImplementation\n     */\n    constructor(factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\n/** @type {?} */\nconst FactoryPrototype = NodeInjectorFactory.prototype;\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction stringify$1(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    if (typeof value == 'object' && typeof value.type == 'function')\n        return value.type.name || value.type;\n    return '' + value;\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    /** @type {?} */\n    const result = [];\n    /** @type {?} */\n    let i = 0;\n    while (i < list.length) {\n        /** @type {?} */\n        const item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n/**\n * Retrieves a value from any `LView` or `TData`.\n * @template T\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\n/**\n * Takes the value of a slot in `LView` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LView. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param {?} value The initial value in `LView`\n * @return {?}\n */\nfunction readElementValue(value) {\n    while (Array.isArray(value)) {\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return value;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeByIndex(index, lView) {\n    return readElementValue(lView[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getNativeByTNode(tNode, hostView) {\n    return readElementValue(hostView[tNode.index]);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction getTNode(index, view) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n    return (/** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]));\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nfunction getComponentViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    /** @type {?} */\n    const slotValue = hostView[nodeIndex];\n    return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isComponent(tNode) {\n    return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction isComponentDef(def) {\n    return ((/** @type {?} */ (def))).template !== null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isLContainer(value) {\n    // Styling contexts are also arrays, but their first index contains an element node\n    return Array.isArray(value) && value.length === LCONTAINER_LENGTH;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isRootView(target) {\n    return (target[FLAGS] & 128 /* IsRoot */) !== 0;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} target\n * @return {?}\n */\nfunction getRootView(target) {\n    ngDevMode && assertDefined(target, 'component');\n    /** @type {?} */\n    let lView = Array.isArray(target) ? ((/** @type {?} */ (target))) : (/** @type {?} */ (readPatchedLView(target)));\n    while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    return lView;\n}\n/**\n * @param {?} viewOrComponent\n * @return {?}\n */\nfunction getRootContext(viewOrComponent) {\n    /** @type {?} */\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return (/** @type {?} */ (rootView[CONTEXT]));\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedLView(target) {\n    /** @type {?} */\n    const value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : ((/** @type {?} */ (value))).lView;\n    }\n    return null;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorIndex(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) & 32767 /* InjectorIndexMask */;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorViewOffset(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @return {?} The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nfunction getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        // view offset is 0\n        /** @type {?} */\n        const injectorIndex = startTNode.parent.injectorIndex;\n        /** @type {?} */\n        let parentTNode = startTNode.parent;\n        while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n            parentTNode = parentTNode.parent;\n        }\n        return parentTNode;\n    }\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    // view offset is 1\n    /** @type {?} */\n    let parentView = startView;\n    /** @type {?} */\n    let parentTNode = (/** @type {?} */ (startView[HOST_NODE]));\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        parentTNode = (/** @type {?} */ (parentView[HOST_NODE]));\n        viewOffset--;\n    }\n    return parentTNode;\n}\n/** @type {?} */\nconst defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(_global);\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param {?} items The items to add\n * @param {?} arr The array to which you want to add the items\n * @return {?}\n */\nfunction addAllToArray(items, arr) {\n    for (let i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nfunction findComponentView(lView) {\n    /** @type {?} */\n    let rootTNode = lView[HOST_NODE];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n        lView = (/** @type {?} */ (lView[DECLARATION_VIEW]));\n        rootTNode = lView[HOST_NODE];\n    }\n    return lView;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction getCompilerFacade() {\n    /** @type {?} */\n    const globalNg = _global.ng;\n    if (!globalNg || !globalNg.ɵcompilerFacade) {\n        throw new Error(`Angular JIT compilation failed: '@angular/compiler' not loaded!\\n` +\n            `  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n` +\n            `  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n` +\n            `  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`);\n    }\n    return globalNg.ɵcompilerFacade;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Inject decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Inject = makeParamDecorator('Inject', (token) => ({ token }));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Optional decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Optional = makeParamDecorator('Optional');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Self decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Self = makeParamDecorator('Self');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * SkipSelf decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst SkipSelf = makeParamDecorator('SkipSelf');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Host decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Host = makeParamDecorator('Host');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst InjectFlags = {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    Default: 0,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional: 8,\n};\nInjectFlags[InjectFlags.Default] = 'Default';\nInjectFlags[InjectFlags.Host] = 'Host';\nInjectFlags[InjectFlags.Self] = 'Self';\nInjectFlags[InjectFlags.SkipSelf] = 'SkipSelf';\nInjectFlags[InjectFlags.Optional] = 'Optional';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n * @type {?}\n */\nlet _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction setCurrentInjector(injector) {\n    /** @type {?} */\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n * @type {?}\n */\nlet _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nfunction setInjectImplementation(impl) {\n    /** @type {?} */\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new Error(`inject() must be called from an injection context`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction inject(token, flags = InjectFlags.Default) {\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nfunction injectArgs(types) {\n    /** @type {?} */\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        /** @type {?} */\n        const arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            let type = undefined;\n            /** @type {?} */\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                const meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject((/** @type {?} */ (type)), flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nfunction assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, `should be a ${typeName(type)}`);\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nfunction assertNodeOfPossibleTypes(tNode, ...types) {\n    assertDefined(tNode, 'should be called with a TNode');\n    /** @type {?} */\n    const found = types.some(type => tNode.type === type);\n    assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')} but got ${typeName(tNode.type)}`);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LView\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nfunction queueInitHooks(index, onInit, doCheck, tView) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    if (onInit) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n    }\n    if (doCheck) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} tView\n * @param {?} tNode\n * @return {?}\n */\nfunction queueLifecycleHooks(tView, tNode) {\n    if (tView.firstTemplatePass) {\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (tView.data[i]));\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nfunction executeInitHooks(currentView, tView, checkNoChangesMode) {\n    if (!checkNoChangesMode && currentView[FLAGS] & 32 /* RunInit */) {\n        executeHooks(currentView, tView.initHooks, tView.checkHooks, checkNoChangesMode);\n        currentView[FLAGS] &= ~32 /* RunInit */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} currentView The current view\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nfunction executeHooks(currentView, allHooks, checkHooks, checkNoChangesMode) {\n    if (checkNoChangesMode)\n        return;\n    /** @type {?} */\n    const hooksToCall = currentView[FLAGS] & 2 /* FirstLViewPass */ ? allHooks : checkHooks;\n    if (hooksToCall) {\n        callHooks(currentView, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass.\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nfunction callHooks(currentView, arr) {\n    for (let i = 0; i < arr.length; i += 2) {\n        ((/** @type {?} */ (arr[i + 1]))).call(currentView[(/** @type {?} */ (arr[i]))]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n * @type {?}\n */\nlet elementDepthCount;\n/**\n * @return {?}\n */\nfunction getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\n/**\n * @return {?}\n */\nfunction increaseElementDepthCount() {\n    elementDepthCount++;\n}\n/**\n * @return {?}\n */\nfunction decreaseElementDepthCount() {\n    elementDepthCount--;\n}\n/** @type {?} */\nlet currentDirectiveDef = null;\n/**\n * @return {?}\n */\nfunction getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n * @type {?}\n */\nlet bindingsEnabled;\n/**\n * @return {?}\n */\nfunction getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nfunction enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nfunction disableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * @return {?}\n */\nfunction getLView() {\n    return lView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nfunction restoreView(viewToRestore) {\n    contextLView = (/** @type {?} */ ((/** @type {?} */ (viewToRestore))));\n}\n/**\n * Used to set the parent property when nodes are created and track query results.\n * @type {?}\n */\nlet previousOrParentTNode;\n/**\n * @return {?}\n */\nfunction getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction setTNodeAndViewData(tNode, view) {\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n * @type {?}\n */\nlet isParent;\n/**\n * @return {?}\n */\nfunction getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setIsParent(value) {\n    isParent = value;\n}\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n * @param {?} QueryType\n * @return {?}\n */\nfunction getOrCreateCurrentQueries(QueryType) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let currentQueries = lView[QUERIES];\n    // if this is the first content query on a node, any existing LQueries needs to be cloned\n    // in subsequent template passes, the cloning occurs before directive instantiation.\n    if (previousOrParentTNode && previousOrParentTNode !== lView[HOST_NODE] &&\n        !isContentQueryHost(previousOrParentTNode)) {\n        currentQueries && (currentQueries = lView[QUERIES] = currentQueries.clone());\n        previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n    }\n    return currentQueries || (lView[QUERIES] = new QueryType(null, null, null));\n}\n/**\n * Checks whether a given view is in creation mode\n * @param {?=} view\n * @return {?}\n */\nfunction isCreationMode(view = lView) {\n    return (view[FLAGS] & 1 /* CreationMode */) === 1 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n * @type {?}\n */\nlet lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n * @type {?}\n */\nlet contextLView = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nfunction getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n * @type {?}\n */\nlet checkNoChangesMode = false;\n/**\n * @return {?}\n */\nfunction getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/**\n * Whether or not this is the first time the current view has been processed.\n * @type {?}\n */\nlet firstTemplatePass = true;\n/**\n * @return {?}\n */\nfunction getFirstTemplatePass() {\n    return firstTemplatePass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setFirstTemplatePass(value) {\n    firstTemplatePass = value;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n * @type {?}\n */\nlet bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\n/**\n * @return {?}\n */\nfunction getBindingRoot() {\n    return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nfunction enterView(newView, hostTNode) {\n    /** @type {?} */\n    const oldView = lView;\n    if (newView) {\n        /** @type {?} */\n        const tView = newView[TVIEW];\n        firstTemplatePass = tView.firstTemplatePass;\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = (/** @type {?} */ (hostTNode));\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nfunction nextContextImpl(level = 1) {\n    contextLView = walkUpViews(level, (/** @type {?} */ (contextLView)));\n    return (/** @type {?} */ (contextLView[CONTEXT]));\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = (/** @type {?} */ (currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nfunction resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = (/** @type {?} */ (null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @return {?}\n */\nfunction leaveView(newView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (isCreationMode(lView)) {\n        lView[FLAGS] &= ~1 /* CreationMode */;\n    }\n    else {\n        executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode);\n        // Views are clean and in update mode after being checked, so these bits are cleared\n        lView[FLAGS] &= ~(8 /* Dirty */ | 2 /* FirstLViewPass */);\n        lView[FLAGS] |= 32 /* RunInit */;\n        lView[BINDING_INDEX] = tView.bindingStartIndex;\n    }\n    enterView(newView, null);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n * @type {?}\n */\nlet includeViewProviders = true;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n    /** @type {?} */\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n * @type {?}\n */\nconst BLOOM_SIZE = 256;\n/** @type {?} */\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * Counter used to generate unique IDs for directives.\n * @type {?}\n */\nlet nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    let id = typeof type !== 'string' ? ((/** @type {?} */ (type)))[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = ((/** @type {?} */ (type)))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    /** @type {?} */\n    const bloomBit = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    /** @type {?} */\n    const b7 = bloomBit & 0x80;\n    /** @type {?} */\n    const b6 = bloomBit & 0x40;\n    /** @type {?} */\n    const b5 = bloomBit & 0x20;\n    /** @type {?} */\n    const tData = (/** @type {?} */ (tView.data));\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    const existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    const tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    /** @type {?} */\n    const parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    /** @type {?} */\n    const parentLView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        /** @type {?} */\n        const parentData = (/** @type {?} */ (parentLView[TVIEW].data));\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return (/** @type {?} */ (tNode.parent.injectorIndex)); // ViewOffset is 0\n    }\n    // For most cases, the parent injector index can be found on the host node (e.g. for component\n    // or container), so this loop will be skipped, but we must keep the loop here to support\n    // the rarer case of deeply nested <ng-template> tags or inline views.\n    /** @type {?} */\n    let hostTNode = view[HOST_NODE];\n    /** @type {?} */\n    let viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = (/** @type {?} */ (view[DECLARATION_VIEW]));\n        hostTNode = view ? view[HOST_NODE] : null;\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n        (/** @type {?} */ (-1));\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nfunction diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    const attrs = tNode.attrs;\n    if (attrs) {\n        for (let i = 0; i < attrs.length; i = i + 2) {\n            /** @type {?} */\n            const attrName = attrs[i];\n            if (attrName === 3 /* SelectOnly */)\n                break;\n            if (attrName == attrNameToInject) {\n                return (/** @type {?} */ (attrs[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @template T\n * @param {?} tNode The Node where the search for the injector should start\n * @param {?} lView The `LView` that contains the `tNode`\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @return {?} the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode) {\n        /** @type {?} */\n        const bloomHash = bloomHashBitOrFactory(token);\n        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n        // so just call the factory function to create it.\n        if (typeof bloomHash === 'function') {\n            /** @type {?} */\n            const savePreviousOrParentTNode = getPreviousOrParentTNode();\n            /** @type {?} */\n            const saveLView = getLView();\n            setTNodeAndViewData(tNode, lView);\n            try {\n                /** @type {?} */\n                const value = bloomHash();\n                if (value == null && !(flags & InjectFlags.Optional)) {\n                    throw new Error(`No provider for ${stringify$1(token)}!`);\n                }\n                else {\n                    return value;\n                }\n            }\n            finally {\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        else if (typeof bloomHash == 'number') {\n            // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n            // A reference to the previous injector TView that was found while climbing the element\n            // injector tree. This is used to know if viewProviders can be accessed on the current\n            // injector.\n            /** @type {?} */\n            let previousTView = null;\n            /** @type {?} */\n            let injectorIndex = getInjectorIndex(tNode, lView);\n            /** @type {?} */\n            let parentLocation = NO_PARENT_INJECTOR;\n            /** @type {?} */\n            let hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[HOST_NODE] : null;\n            // If we should skip this injector, or if there is no injector on this node, start by\n            // searching\n            // the parent injector.\n            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                    lView[injectorIndex + PARENT_INJECTOR];\n                if (!shouldSearchParent(flags, false)) {\n                    injectorIndex = -1;\n                }\n                else {\n                    previousTView = lView[TVIEW];\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n            }\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match.\n            while (injectorIndex !== -1) {\n                parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                // Check the current injector. If it matches, see if it contains token.\n                /** @type {?} */\n                const tView = lView[TVIEW];\n                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                    // At this point, we have an injector which *may* contain the token, so we step through\n                    // the providers and directives associated with the injector's corresponding node to get\n                    // the instance.\n                    /** @type {?} */\n                    const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                    if (instance !== NOT_FOUND) {\n                        return instance;\n                    }\n                }\n                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                    bloomHasToken(bloomHash, injectorIndex, lView)) {\n                    // The def wasn't found anywhere on this node, so it was a false positive.\n                    // Traverse up the tree and continue searching.\n                    previousTView = tView;\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n                else {\n                    // If we should not search parent OR If the ancestor bloom filter value does not have the\n                    // bit corresponding to the directive we can give up on traversing up to find the specific\n                    // injector.\n                    injectorIndex = -1;\n                }\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        /** @type {?} */\n        const moduleInjector = lView[INJECTOR];\n        if (moduleInjector) {\n            return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n        }\n        else {\n            return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(`NodeInjector: NOT_FOUND [${stringify$1(token)}]`);\n    }\n}\n/** @type {?} */\nconst NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} lView\n * @param {?} token\n * @param {?} previousTView\n * @param {?} flags\n * @param {?} hostTElementNode\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    /** @type {?} */\n    const currentTView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (currentTView.data[injectorIndex + TNODE]));\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibities\n    /** @type {?} */\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponent(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && (tNode.type === 3 /* Element */));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    /** @type {?} */\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    /** @type {?} */\n    const injectableIdx = locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, lView, injectableIdx, (/** @type {?} */ (tNode)));\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @template T\n * @param {?} tNode TNode on which directives are present.\n * @param {?} lView The view we are currently processing\n * @param {?} token Provider token or type of a directive to look for.\n * @param {?} canAccessViewProviders Whether view providers should be considered.\n * @param {?} isHostSpecialCase Whether the host special case applies.\n * @return {?} Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const nodeProviderIndexes = tNode.providerIndexes;\n    /** @type {?} */\n    const tInjectables = tView.data;\n    /** @type {?} */\n    const injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const directivesStart = tNode.directiveStart;\n    /** @type {?} */\n    const directiveEnd = tNode.directiveEnd;\n    /** @type {?} */\n    const cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    /** @type {?} */\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    /** @type {?} */\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        /** @type {?} */\n        const providerTokenOrDef = (/** @type {?} */ (tInjectables[i]));\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && ((/** @type {?} */ (providerTokenOrDef))).type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        /** @type {?} */\n        const dirDef = (/** @type {?} */ (tInjectables[directivesStart]));\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nfunction getNodeInjectable(tData, lData, index, tNode) {\n    /** @type {?} */\n    let value = lData[index];\n    if (isFactory(value)) {\n        /** @type {?} */\n        const factory = value;\n        if (factory.resolving) {\n            throw new Error(`Circular dep for ${stringify$1(tData[index])}`);\n        }\n        /** @type {?} */\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        /** @type {?} */\n        let previousInjectImplementation;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        /** @type {?} */\n        const savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    /** @type {?} */\n    const tokenId = ((/** @type {?} */ (token)))[NG_ELEMENT_ID];\n    return typeof tokenId === 'number' ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomHash;\n    /** @type {?} */\n    const b7 = bloomHash & 0x80;\n    /** @type {?} */\n    const b6 = bloomHash & 0x40;\n    /** @type {?} */\n    const b5 = bloomHash & 0x20;\n    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n    /** @type {?} */\n    let value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} isFirstHostTNode\n * @return {?}\n */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n/**\n * @return {?}\n */\nfunction injectInjector() {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (getPreviousOrParentTNode()));\n    return new NodeInjector(tNode, getLView());\n}\nclass NodeInjector {\n    /**\n     * @param {?} _tNode\n     * @param {?} _lView\n     */\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n    }\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getFactoryOf(type) {\n    /** @type {?} */\n    const typeAny = (/** @type {?} */ (type));\n    /** @type {?} */\n    const def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getInheritedFactory(type) {\n    /** @type {?} */\n    const proto = (/** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor));\n    /** @type {?} */\n    const factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return (t) => new t();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param {?} target Component, Directive or DOM Node.\n * @return {?}\n */\nfunction getLContext(target) {\n    /** @type {?} */\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            const lView = (/** @type {?} */ (mpValue));\n            /** @type {?} */\n            let nodeIndex;\n            /** @type {?} */\n            let component = undefined;\n            /** @type {?} */\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, (/** @type {?} */ (target)));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            /** @type {?} */\n            const native = readElementValue(lView[nodeIndex]);\n            /** @type {?} */\n            const existingCtx = readPatchedData(native);\n            /** @type {?} */\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        const rElement = (/** @type {?} */ (target));\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        /** @type {?} */\n        let parent = (/** @type {?} */ (rElement));\n        while (parent = parent.parentNode) {\n            /** @type {?} */\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                /** @type {?} */\n                let lView;\n                if (Array.isArray(parentContext)) {\n                    lView = (/** @type {?} */ (parentContext));\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                /** @type {?} */\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    const native = readElementValue(lView[index]);\n                    /** @type {?} */\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return ((/** @type {?} */ (mpValue))) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView,\n        nodeIndex,\n        native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    let lView = readPatchedData(componentInstance);\n    /** @type {?} */\n    let view;\n    if (Array.isArray(lView)) {\n        /** @type {?} */\n        const nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        /** @type {?} */\n        const context = createLContext(lView, nodeIndex, (/** @type {?} */ (view[HOST])));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        const context = (/** @type {?} */ ((/** @type {?} */ (lView))));\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nfunction attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lView, target) {\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lView, componentInstance) {\n    /** @type {?} */\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            const elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            const componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        const rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        /** @type {?} */\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const directiveIndexStart = tNode.directiveStart;\n        /** @type {?} */\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lView The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY;\n    /** @type {?} */\n    const directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 1 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} lView\n * @return {?}\n */\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lView\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        const result = {};\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            /** @type {?} */\n            const localRefName = tNode.localNames[i];\n            /** @type {?} */\n            const directiveIndex = (/** @type {?} */ (tNode.localNames[i + 1]));\n            result[localRefName] =\n                directiveIndex === -1 ? (/** @type {?} */ (getNativeByTNode(tNode, lView))) : lView[directiveIndex];\n        }\n        return result;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getComponent(element) {\n    /** @type {?} */\n    const context = loadLContextFromNode(element);\n    if (context.component === undefined) {\n        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n    }\n    return (/** @type {?} */ (context.component));\n}\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getContext(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContextFromNode(element)));\n    return (/** @type {?} */ (context.lView[CONTEXT]));\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * \\@publicApi\n * @template T\n * @param {?} element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @return {?}\n */\nfunction getViewComponent(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(element)));\n    /** @type {?} */\n    let lView = context.lView;\n    while (lView[PARENT] && lView[HOST] === null) {\n        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    return lView[FLAGS] & 128 /* IsRoot */ ? null : (/** @type {?} */ (lView[CONTEXT]));\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n *\n * @param {?} target\n * @return {?}\n */\nfunction getRootContext$1(target) {\n    /** @type {?} */\n    const lViewData = Array.isArray(target) ? target : (/** @type {?} */ (loadLContext(target))).lView;\n    /** @type {?} */\n    const rootLView = getRootView$1(lViewData);\n    return (/** @type {?} */ (rootLView[CONTEXT]));\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getRootComponents(target) {\n    return [...getRootContext$1(target).components];\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getInjector(target) {\n    /** @type {?} */\n    const context = loadLContext(target);\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));\n    return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * \\@publicApi\n * @param {?} element Element for which the injection tokens should be retrieved.\n * @return {?}\n */\nfunction getInjectionTokens(element) {\n    /** @type {?} */\n    const context = loadLContext(element, false);\n    if (!context)\n        return [];\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (tView.data[context.nodeIndex]));\n    /** @type {?} */\n    const providerTokens = [];\n    /** @type {?} */\n    const startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const endIndex = tNode.directiveEnd;\n    for (let i = startIndex; i < endIndex; i++) {\n        /** @type {?} */\n        let value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getDirectives(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n    }\n    return context.directives || [];\n}\n/**\n * @param {?} target\n * @param {?=} throwOnNotFound\n * @return {?}\n */\nfunction loadLContext(target, throwOnNotFound = true) {\n    /** @type {?} */\n    const context = getLContext(target);\n    if (!context && throwOnNotFound) {\n        throw new Error(ngDevMode ? `Unable to find context associated with ${stringify$1(target)}` :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} componentOrView any component or view\n *\n * @return {?}\n */\nfunction getRootView$1(componentOrView) {\n    /** @type {?} */\n    let lView;\n    if (Array.isArray(componentOrView)) {\n        ngDevMode && assertDefined(componentOrView, 'lView');\n        lView = (/** @type {?} */ (componentOrView));\n    }\n    else {\n        ngDevMode && assertDefined(componentOrView, 'component');\n        lView = (/** @type {?} */ (readPatchedLView(componentOrView)));\n    }\n    while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    return lView;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getLocalRefs(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * \\@publicApi\n * @template T\n * @param {?} directive Component or Directive for which the host element should be retrieved.\n *\n * @return {?}\n */\nfunction getHostElement(directive) {\n    return (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (getLContext(directive))).native))));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction loadLContextFromNode(node) {\n    if (!(node instanceof Node))\n        throw new Error('Expecting instance of DOM Node');\n    return (/** @type {?} */ (loadLContext(node)));\n}\n/**\n * @param {?} listener\n * @return {?}\n */\nfunction isBrowserEvents(listener) {\n    // Browser events are those which don't have `useCapture` as boolean.\n    return typeof listener.useCapture === 'boolean';\n}\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * \\@publicApi\n * @param {?} element Element for which the DOM listeners should be retrieved.\n * @return {?}\n */\nfunction getListeners(element) {\n    /** @type {?} */\n    const lContext = loadLContextFromNode(element);\n    /** @type {?} */\n    const lView = lContext.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const lCleanup = lView[CLEANUP];\n    /** @type {?} */\n    const tCleanup = tView.cleanup;\n    /** @type {?} */\n    const listeners = [];\n    if (tCleanup && lCleanup) {\n        for (let i = 0; i < tCleanup.length;) {\n            /** @type {?} */\n            const firstParam = tCleanup[i++];\n            /** @type {?} */\n            const secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                /** @type {?} */\n                const name = firstParam;\n                /** @type {?} */\n                const listenerElement = (/** @type {?} */ ((/** @type {?} */ (readElementValue(lView[secondParam])))));\n                /** @type {?} */\n                const callback = lCleanup[tCleanup[i++]];\n                /** @type {?} */\n                const useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                /** @type {?} */\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                    useCaptureOrIndx :\n                    (useCaptureOrIndx >= 0 ? false : null);\n                if (element == listenerElement) {\n                    listeners.push({ element, name, callback, useCapture });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n * @param {?} obj\n * @return {?}\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return `ng-reflect-${name}`;\n}\n/** @type {?} */\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction devModeEqual(a, b) {\n    /** @type {?} */\n    const isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nclass WrappedValue {\n    /**\n     * @param {?} value\n     */\n    constructor(value) { this.wrapped = value; }\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static wrap(value) { return new WrappedValue(value); }\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    static unwrap(value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; }\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static isWrapped(value) { return value instanceof WrappedValue; }\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nclass SimpleChange {\n    /**\n     * @param {?} previousValue\n     * @param {?} currentValue\n     * @param {?} firstChange\n     */\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    isFirstChange() { return this.firstChange; }\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nfunction areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    const iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        const item1 = iterator1.next();\n        /** @type {?} */\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        const iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nfunction throwMultipleComponentError(tNode) {\n    throw new Error(`Multiple components match node with tagname ${tNode.tagName}`);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    // TODO: include debug context\n    throw new Error(msg);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * A special value which designates that a value has not changed.\n * @type {?}\n */\nconst NO_CHANGE = (/** @type {?} */ ({}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(misko): consider inlining\n/**\n * Updates binding and returns the value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/**\n * Gets the current binding value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertDataInRange(lView, lView[bindingIndex]);\n    ngDevMode &&\n        assertNotEqual(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    if (lView[bindingIndex] === NO_CHANGE) {\n        // initial pass\n        lView[bindingIndex] = value;\n    }\n    else if (isDifferent(lView[bindingIndex], value)) {\n        if (ngDevMode && getCheckNoChangesMode()) {\n            if (!devModeEqual(lView[bindingIndex], value)) {\n                throwErrorIfNoChangesMode(isCreationMode(lView), lView[bindingIndex], value);\n            }\n        }\n        lView[bindingIndex] = value;\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can than use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n/** @enum {number} */\nconst RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nfunction isProceduralRenderer(renderer) {\n    return !!(((/** @type {?} */ (renderer))).listen);\n}\n/** @type {?} */\nconst domRendererFactory3 = {\n    createRenderer: (hostElement, rendererType) => { return document; }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves the parent element of a given node.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getParentNative(tNode, currentView) {\n    if (tNode.parent == null) {\n        return getHostNative(currentView);\n    }\n    else {\n        /** @type {?} */\n        const parentTNode = getFirstParentNative(tNode);\n        return getNativeByTNode(parentTNode, currentView);\n    }\n}\n/**\n * Get the first parent of a node that isn't an IcuContainer TNode\n * @param {?} tNode\n * @return {?}\n */\nfunction getFirstParentNative(tNode) {\n    /** @type {?} */\n    let parent = tNode.parent;\n    while (parent && parent.type === 5 /* IcuContainer */) {\n        parent = parent.parent;\n    }\n    return (/** @type {?} */ (parent));\n}\n/**\n * Gets the host element given a view. Will return null if the current view is an embedded view,\n * which does not have a host element.\n * @param {?} currentView\n * @return {?}\n */\nfunction getHostNative(currentView) {\n    /** @type {?} */\n    const hostTNode = (/** @type {?} */ (currentView[HOST_NODE]));\n    return hostTNode && hostTNode.type !== 2 /* View */ ?\n        ((/** @type {?} */ (getNativeByTNode(hostTNode, (/** @type {?} */ (currentView[PARENT])))))) :\n        null;\n}\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nfunction getLContainer(tNode, embeddedView) {\n    if (tNode.index === -1) {\n        // This is a dynamically created view inside a dynamic container.\n        // If the host index is -1, the view has not yet been inserted, so it has no parent.\n        /** @type {?} */\n        const containerHostIndex = embeddedView[CONTAINER_INDEX];\n        return containerHostIndex > -1 ? (/** @type {?} */ (embeddedView[PARENT]))[containerHostIndex] : null;\n    }\n    else {\n        // This is a inline view node (e.g. embeddedViewStart)\n        return (/** @type {?} */ ((/** @type {?} */ (embeddedView[PARENT]))[(/** @type {?} */ (tNode.parent)).index]));\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nfunction getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    const container = getLContainer(tViewNode, view);\n    return container ? container[RENDER_PARENT] : null;\n}\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    /** @type {?} */\n    const rootTNode = (/** @type {?} */ (viewToWalk[TVIEW].node));\n    /** @type {?} */\n    let projectionNodeIndex = -1;\n    /** @type {?} */\n    let currentView = viewToWalk;\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (rootTNode.child));\n    while (tNode) {\n        /** @type {?} */\n        let nextTNode = null;\n        if (tNode.type === 3 /* Element */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), beforeNode);\n            /** @type {?} */\n            const nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], beforeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            /** @type {?} */\n            const lContainer = (/** @type {?} */ ((/** @type {?} */ (currentView))[tNode.index]));\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], beforeNode);\n            if (renderParent)\n                lContainer[RENDER_PARENT] = renderParent;\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            /** @type {?} */\n            const componentView = findComponentView((/** @type {?} */ (currentView)));\n            /** @type {?} */\n            const componentHost = (/** @type {?} */ (componentView[HOST_NODE]));\n            /** @type {?} */\n            const head = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];\n            // Must store both the TNode and the view because this projection node could be nested\n            // deeply inside embedded views, and we need to get back down to this particular nested view.\n            projectionNodeStack[++projectionNodeIndex] = tNode;\n            projectionNodeStack[++projectionNodeIndex] = (/** @type {?} */ (currentView));\n            if (head) {\n                currentView = (/** @type {?} */ (componentView[PARENT]));\n                nextTNode = (/** @type {?} */ (currentView[TVIEW].data[head.index]));\n            }\n        }\n        else {\n            // Otherwise, this is a View or an ElementContainer\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.next === null && (tNode.flags & 2 /* isProjected */)) {\n                currentView = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n                tNode = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n            }\n            nextTNode = tNode.next;\n            /**\n             * Find the next node in the TNode tree, taking into account the place where a node is\n             * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n             *\n             * If there is no sibling node, then it goes to the next sibling of the parent node...\n             * until it reaches rootNode (at which point null is returned).\n             */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[TVIEW].node;\n                if (tNode === null || tNode === rootTNode)\n                    return null;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = (/** @type {?} */ (currentView[PARENT]));\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */ && currentView[NEXT]) {\n                    currentView = (/** @type {?} */ (currentView[NEXT]));\n                    nextTNode = currentView[TVIEW].node;\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, beforeNode) {\n    if (action === 0 /* Insert */) {\n        isProceduralRenderer((/** @type {?} */ (renderer))) ?\n            ((/** @type {?} */ (renderer))).insertBefore((/** @type {?} */ (parent)), node, (/** @type {?} */ (beforeNode))) :\n            (/** @type {?} */ (parent)).insertBefore(node, (/** @type {?} */ (beforeNode)), true);\n    }\n    else if (action === 1 /* Detach */) {\n        isProceduralRenderer((/** @type {?} */ (renderer))) ?\n            ((/** @type {?} */ (renderer))).removeChild((/** @type {?} */ (parent)), node) :\n            (/** @type {?} */ (parent)).removeChild(node);\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++;\n        (/** @type {?} */ (((/** @type {?} */ (renderer))).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nfunction createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify$1(value)) :\n        renderer.createTextNode(stringify$1(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    /** @type {?} */\n    const renderParent = getContainerRenderParent((/** @type {?} */ (viewToWalk[TVIEW].node)), viewToWalk);\n    ngDevMode && assertNodeType((/** @type {?} */ (viewToWalk[TVIEW].node)), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        const renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    if (rootView[TVIEW].childIndex === -1) {\n        return cleanUpView(rootView);\n    }\n    /** @type {?} */\n    let viewOrContainer = getLViewChild(rootView);\n    while (viewOrContainer) {\n        /** @type {?} */\n        let next = null;\n        if (viewOrContainer.length >= HEADER_OFFSET) {\n            // If LView, traverse down to child.\n            /** @type {?} */\n            const view = (/** @type {?} */ (viewOrContainer));\n            if (view[TVIEW].childIndex > -1)\n                next = getLViewChild(view);\n        }\n        else {\n            // If container, traverse down to its first LView.\n            /** @type {?} */\n            const container = (/** @type {?} */ (viewOrContainer));\n            if (container[VIEWS].length)\n                next = container[VIEWS][0];\n        }\n        if (next == null) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (viewOrContainer && !(/** @type {?} */ (viewOrContainer))[NEXT] && viewOrContainer !== rootView) {\n                cleanUpView(viewOrContainer);\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(viewOrContainer || rootView);\n            next = viewOrContainer && (/** @type {?} */ (viewOrContainer))[NEXT];\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} parentView The new parent of the inserted view\n * @param {?} index The index at which to insert the view\n * @param {?} containerIndex The index of the container node, if dynamic\n * @return {?}\n */\nfunction insertView(lView, lContainer, parentView, index, containerIndex) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    // Dynamically inserted views need a reference to their parent container's host so it's\n    // possible to jump from a view to its container's next when walking the node tree.\n    if (containerIndex > -1) {\n        lView[CONTAINER_INDEX] = containerIndex;\n        lView[PARENT] = parentView;\n    }\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        (/** @type {?} */ (lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 16 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @param {?} detached Whether or not this view is already detached.\n * @return {?} Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex, detached) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    /** @type {?} */\n    const viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = (/** @type {?} */ (viewToDetach[NEXT]));\n    }\n    views.splice(removeIndex, 1);\n    if (!detached) {\n        addRemoveViewFromContainer(viewToDetach, false);\n    }\n    if (viewToDetach[QUERIES]) {\n        (/** @type {?} */ (viewToDetach[QUERIES])).removeView();\n    }\n    viewToDetach[CONTAINER_INDEX] = -1;\n    viewToDetach[PARENT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~16 /* Attached */;\n    return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} containerHost\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nfunction removeView(lContainer, containerHost, removeIndex) {\n    /** @type {?} */\n    const view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex, !!containerHost.detached);\n    destroyLView(view);\n}\n/**\n * Gets the child of the given LView\n * @param {?} lView\n * @return {?}\n */\nfunction getLViewChild(lView) {\n    /** @type {?} */\n    const childIndex = lView[TVIEW].childIndex;\n    return childIndex === -1 ? null : lView[childIndex];\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nfunction destroyLView(view) {\n    /** @type {?} */\n    const renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n        walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n    }\n    destroyViewTree(view);\n    // Sets the destroyed flag\n    view[FLAGS] |= 64 /* Destroyed */;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nfunction getParentState(state, rootView) {\n    /** @type {?} */\n    let tNode;\n    if (state.length >= HEADER_OFFSET && (tNode = (/** @type {?} */ (((/** @type {?} */ (state)))))[HOST_NODE]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return (/** @type {?} */ (getLContainer((/** @type {?} */ (tNode)), (/** @type {?} */ (state)))));\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state[PARENT] === rootView ? null : state[PARENT];\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to \\@Output listeners.\n *\n * @param {?} viewOrContainer\n * @return {?}\n */\nfunction cleanUpView(viewOrContainer) {\n    if (((/** @type {?} */ (viewOrContainer))).length >= HEADER_OFFSET) {\n        /** @type {?} */\n        const view = (/** @type {?} */ (viewOrContainer));\n        executeOnDestroys(view);\n        executePipeOnDestroys(view);\n        removeListeners(view);\n        /** @type {?} */\n        const hostTNode = view[HOST_NODE];\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            ((/** @type {?} */ (view[RENDERER]))).destroy();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} lView\n * @return {?}\n */\nfunction removeListeners(lView) {\n    /** @type {?} */\n    const tCleanup = (/** @type {?} */ (lView[TVIEW].cleanup));\n    if (tCleanup != null) {\n        /** @type {?} */\n        const lCleanup = (/** @type {?} */ (lView[CLEANUP]));\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a listener with the native renderer\n                /** @type {?} */\n                const idx = tCleanup[i + 1];\n                /** @type {?} */\n                const listener = lCleanup[tCleanup[i + 2]];\n                /** @type {?} */\n                const native = readElementValue(lView[idx]);\n                /** @type {?} */\n                const useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // DOM listener\n                    native.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else if (typeof tCleanup[i] === 'number') {\n                // This is a listener with renderer2 (cleanup fn can be found by index)\n                /** @type {?} */\n                const cleanupFn = lCleanup[tCleanup[i]];\n                cleanupFn();\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                /** @type {?} */\n                const context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    /** @type {?} */\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(view, destroyHooks);\n    }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} lView\n * @return {?}\n */\nfunction executePipeOnDestroys(lView) {\n    /** @type {?} */\n    const pipeDestroyHooks = lView[TVIEW] && lView[TVIEW].pipeDestroyHooks;\n    if (pipeDestroyHooks) {\n        callHooks((/** @type {?} */ (lView)), pipeDestroyHooks);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getRenderParent(tNode, currentView) {\n    if (canInsertNativeNode(tNode, currentView)) {\n        // If we are asked for a render parent of the root component we need to do low-level DOM\n        // operation as LTree doesn't exist above the topmost host node. We might need to find a render\n        // parent of the topmost host node if the root component injects ViewContainerRef.\n        if (isRootView(currentView)) {\n            return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n        }\n        /** @type {?} */\n        const hostTNode = currentView[HOST_NODE];\n        /** @type {?} */\n        const tNodeParent = tNode.parent;\n        if (tNodeParent != null && tNodeParent.type === 4 /* ElementContainer */) {\n            tNode = getHighestElementContainer(tNodeParent);\n        }\n        return tNode.parent == null && (/** @type {?} */ (hostTNode)).type === 2 /* View */ ?\n            getContainerRenderParent((/** @type {?} */ (hostTNode)), currentView) :\n            (/** @type {?} */ (getParentNative(tNode, currentView)));\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction canInsertNativeChildOfElement(tNode) {\n    // If the parent is null, then we are inserting across views. This happens when we\n    // insert a root element of the component view into the component host element and it\n    // should always be eager.\n    if (tNode.parent == null ||\n        // We should also eagerly insert if the parent is a regular, non-component element\n        // since we know that this relationship will never be broken.\n        tNode.parent.type === 3 /* Element */ && !(tNode.parent.flags & 1 /* isComponent */)) {\n        return true;\n    }\n    // Parent is a Component. Component's content nodes are not inserted immediately\n    // because they will be projected, and so doing insert at this point would be wasteful.\n    // Since the projection would than move it to its final destination.\n    return false;\n}\n/**\n * We might delay insertion of children for a given view if it is disconnected.\n * This might happen for 2 main reasons:\n * - view is not inserted into any container (view was created but not inserted yet)\n * - view is inserted into a container but the container itself is not inserted into the DOM\n * (container might be part of projection or child of a view that is not inserted yet).\n *\n * In other words we can insert children of a given view if this view was inserted into a container\n * and\n * the container itself has its render parent determined.\n * @param {?} viewTNode\n * @param {?} view\n * @return {?}\n */\nfunction canInsertNativeChildOfView(viewTNode, view) {\n    // Because we are inserting into a `View` the `View` may be disconnected.\n    /** @type {?} */\n    const container = (/** @type {?} */ (getLContainer(viewTNode, view)));\n    if (container == null || container[RENDER_PARENT] == null) {\n        // The `View` is not inserted into a `Container` or the parent `Container`\n        // itself is disconnected. So we have to delay.\n        return false;\n    }\n    // The parent `Container` is in inserted state, so we can eagerly insert into\n    // this location.\n    return true;\n}\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n *\n * @param {?} tNode The tNode of the node that we want to insert.\n * @param {?} currentView Current LView being processed.\n * @return {?} boolean Whether the node should be inserted now (or delayed until later).\n */\nfunction canInsertNativeNode(tNode, currentView) {\n    /** @type {?} */\n    let currentNode = tNode;\n    /** @type {?} */\n    let parent = tNode.parent;\n    if (tNode.parent) {\n        if (tNode.parent.type === 4 /* ElementContainer */) {\n            currentNode = getHighestElementContainer(tNode);\n            parent = currentNode.parent;\n        }\n        else if (tNode.parent.type === 5 /* IcuContainer */) {\n            currentNode = getFirstParentNative(currentNode);\n            parent = currentNode.parent;\n        }\n    }\n    if (parent === null)\n        parent = currentView[HOST_NODE];\n    if (parent && parent.type === 2 /* View */) {\n        return canInsertNativeChildOfView((/** @type {?} */ (parent)), currentView);\n    }\n    else {\n        // Parent is a regular element or a component\n        return canInsertNativeChildOfElement(currentNode);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeParentNode(renderer, node) {\n    return (/** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode)));\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?=} childEl The child that should be appended\n * @param {?=} childTNode The TNode of the child element\n * @param {?=} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nfunction appendChild(childEl = null, childTNode, currentView) {\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        const renderer = currentView[RENDERER];\n        /** @type {?} */\n        const parentEl = getParentNative(childTNode, currentView);\n        /** @type {?} */\n        const parentTNode = childTNode.parent || (/** @type {?} */ (currentView[HOST_NODE]));\n        if (parentTNode.type === 2 /* View */) {\n            /** @type {?} */\n            const lContainer = (/** @type {?} */ (getLContainer((/** @type {?} */ (parentTNode)), currentView)));\n            /** @type {?} */\n            const views = lContainer[VIEWS];\n            /** @type {?} */\n            const index = views.indexOf(currentView);\n            nativeInsertBefore(renderer, (/** @type {?} */ (lContainer[RENDER_PARENT])), childEl, getBeforeNodeForView(index, views, lContainer[NATIVE]));\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            const renderParent = (/** @type {?} */ (getRenderParent(childTNode, currentView)));\n            nativeInsertBefore(renderer, renderParent, childEl, parentEl);\n        }\n        else if (parentTNode.type === 5 /* IcuContainer */) {\n            /** @type {?} */\n            const icuAnchorNode = (/** @type {?} */ ((/** @type {?} */ (getNativeByTNode((/** @type {?} */ (childTNode.parent)), currentView)))));\n            nativeInsertBefore(renderer, (/** @type {?} */ (parentEl)), childEl, icuAnchorNode);\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.appendChild((/** @type {?} */ ((/** @type {?} */ (parentEl)))), childEl) :\n                (/** @type {?} */ (parentEl)).appendChild(childEl);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Gets the top-level ng-container if ng-containers are nested.\n *\n * @param {?} ngContainer The TNode of the starting ng-container\n * @return {?} tNode The TNode of the highest level ng-container\n */\nfunction getHighestElementContainer(ngContainer) {\n    while (ngContainer.parent != null && ngContainer.parent.type === 4 /* ElementContainer */) {\n        ngContainer = ngContainer.parent;\n    }\n    return ngContainer;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nfunction getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        /** @type {?} */\n        const view = (/** @type {?} */ (views[index + 1]));\n        /** @type {?} */\n        const viewTNode = (/** @type {?} */ (view[HOST_NODE]));\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param {?} childTNode The TNode of the child to remove\n * @param {?} childEl The child that should be removed\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was removed\n */\nfunction removeChild(childTNode, childEl, currentView) {\n    // We only remove the element if not in View or not projected.\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        const parentNative = (/** @type {?} */ ((/** @type {?} */ (getParentNative(childTNode, currentView)))));\n        /** @type {?} */\n        const renderer = currentView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.removeChild((/** @type {?} */ (parentNative)), childEl) :\n            (/** @type {?} */ (parentNative)).removeChild(childEl);\n        return true;\n    }\n    return false;\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    const native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    const renderParent = getRenderParent(tProjectionNode, currentView);\n    /** @type {?} */\n    const nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        nodeOrContainer[RENDER_PARENT] = renderParent;\n        /** @type {?} */\n        const views = nodeOrContainer[VIEWS];\n        for (let i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            let ngContainerChildTNode = (/** @type {?} */ (projectedTNode.child));\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            nodeOrContainer[RENDER_PARENT] = renderParent;\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    const nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    const matchIndex = (/** @type {?} */ (nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    const matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && (/** @type {?} */ (nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && (/** @type {?} */ (nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be perfomed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode. In \"projection\" mode, we do not need to check types, so if tag name\n * matches selector, we declare a match. In \"directive matching\" mode, we also check whether tNode\n * is of expected type:\n * - whether tNode has either Element or ElementContainer type\n * - or if we want to match \"ng-template\" tag, we check for Container type\n * @param {?} tNode\n * @param {?} currentSelector\n * @param {?} isProjectionMode\n * @return {?}\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    return currentSelector === tNode.tagName &&\n        (isProjectionMode ||\n            (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) ||\n            (tNode.type === 0 /* Container */ && currentSelector === NG_TEMPLATE_SELECTOR));\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @param {?} isProjectionMode\n * @return {?} true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    let mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    const nodeAttrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    const selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(3 /* SelectOnly */) : -1;\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    /** @type {?} */\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive((/** @type {?} */ (current)))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = ((/** @type {?} */ (current))) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            const attrName = mode & 8 /* CLASS */ ? 'class' : current;\n            /** @type {?} */\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            /** @type {?} */\n            const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                let nodeAttrValue;\n                /** @type {?} */\n                const maybeAttrName = nodeAttrs[attrIndexInNode];\n                if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = (/** @type {?} */ (nodeAttrs[attrIndexInNode + 1]));\n                }\n                if (mode & 8 /* CLASS */ &&\n                    !isCssClassMatching((/** @type {?} */ (nodeAttrValue)), (/** @type {?} */ (selectorAttrValue))) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    let selectOnlyMode = false;\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const maybeAttrName = attrs[i];\n        if (maybeAttrName === name) {\n            return i;\n        }\n        else if (maybeAttrName === 0 /* NamespaceURI */) {\n            // NOTE(benlesh): will not find namespaced attributes. This is by design.\n            i += 4;\n        }\n        else {\n            if (maybeAttrName === 3 /* SelectOnly */) {\n                selectOnlyMode = true;\n            }\n            i += selectOnlyMode ? 1 : 2;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @param {?=} isProjectionMode\n * @return {?}\n */\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return (/** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]));\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nfunction matchingSelectorIndex(tNode, selectors, textSelectors) {\n    /** @type {?} */\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null &&\n                isNodeMatchingSelectorList(tNode, selectors[i], /* isProjectionMode */ true)) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @template T\n * @param {?} factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param {?} value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n * @return {?}\n */\nfunction bindPlayerFactory(factoryFn, value) {\n    return (/** @type {?} */ (new BoundPlayerFactory(factoryFn, value)));\n}\n/**\n * @template T\n */\nclass BoundPlayerFactory {\n    /**\n     * @param {?} fn\n     * @param {?} value\n     */\n    constructor(fn, value) {\n        this.fn = fn;\n        this.value = value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CorePlayerHandler {\n    constructor() {\n        this._players = [];\n    }\n    /**\n     * @return {?}\n     */\n    flushPlayers() {\n        for (let i = 0; i < this._players.length; i++) {\n            /** @type {?} */\n            const player = this._players[i];\n            if (!player.parent && player.state === 0 /* Pending */) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    queuePlayer(player) { this._players.push(player); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANIMATION_PROP_PREFIX = '@';\n/**\n * @param {?=} element\n * @param {?=} sanitizer\n * @param {?=} initialStyles\n * @param {?=} initialClasses\n * @return {?}\n */\nfunction createEmptyStylingContext(element, sanitizer, initialStyles, initialClasses) {\n    return [\n        0,\n        [null, -1, false, sanitizer || null],\n        initialStyles || [null],\n        initialClasses || [null],\n        [0, 0],\n        element || null,\n        null,\n        null,\n        null,\n    ];\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nfunction allocStylingContext(element, templateStyleContext) {\n    // each instance gets a copy\n    /** @type {?} */\n    const context = (/** @type {?} */ ((/** @type {?} */ (templateStyleContext.slice()))));\n    context[5 /* ElementPosition */] = element;\n    // this will prevent any other directives from extending the context\n    context[0 /* MasterFlagPosition */] |= 32 /* BindingAllocationLocked */;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nfunction getStylingContext(index, viewData) {\n    /** @type {?} */\n    let storageIndex = index;\n    /** @type {?} */\n    let slotValue = viewData[storageIndex];\n    /** @type {?} */\n    let wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = (/** @type {?} */ (slotValue[HOST]));\n    }\n    if (isStylingContext(wrapper)) {\n        return (/** @type {?} */ (wrapper));\n    }\n    else {\n        // This is an LView or an LContainer\n        /** @type {?} */\n        const stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isStylingContext(value) {\n    // Not an LView or an LContainer\n    return Array.isArray(value) && typeof value[0 /* MasterFlagPosition */] === 'number' &&\n        Array.isArray(value[2 /* InitialStyleValuesPosition */]);\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction isAnimationProp(name) {\n    return name[0] === ANIMATION_PROP_PREFIX;\n}\n/**\n * @param {?} playerContext\n * @param {?} rootContext\n * @param {?} element\n * @param {?} player\n * @param {?} playerContextIndex\n * @param {?=} ref\n * @return {?}\n */\nfunction addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, () => {\n            /** @type {?} */\n            const index = playerContext.indexOf(player);\n            /** @type {?} */\n            const nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        });\n        /** @type {?} */\n        const playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} playerContext\n * @return {?}\n */\nfunction getPlayersInternal(playerContext) {\n    /** @type {?} */\n    const players = [];\n    /** @type {?} */\n    const nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (let i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        /** @type {?} */\n        const player = (/** @type {?} */ (playerContext[i]));\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (let i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push((/** @type {?} */ (playerContext[i])));\n    }\n    return players;\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nfunction getOrCreatePlayerContext(target, context) {\n    context = context || (/** @type {?} */ (getLContext(target)));\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    const { lView, nodeIndex } = context;\n    /** @type {?} */\n    const stylingContext = getStylingContext(nodeIndex, lView);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} stylingContext\n * @return {?}\n */\nfunction getPlayerContext(stylingContext) {\n    return stylingContext[8 /* PlayerContext */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction allocPlayerContext(data) {\n    return data[8 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\n/**\n * @return {?}\n */\nfunction throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n/**\n * @param {?} attrs\n * @return {?}\n */\nfunction hasStyling(attrs) {\n    for (let i = 0; i < attrs.length; i++) {\n        /** @type {?} */\n        const attr = attrs[i];\n        if (attr == 1 /* Classes */ || attr == 2 /* Styles */)\n            return true;\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction hasClassInput(tNode) {\n    return tNode.flags & 8 /* hasClassInput */ ? true : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * There are many different ways in which these functions below are called. Please see\n * `interfaces/styles.ts` to get a better idea of how the styling algorithm works.\n */\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n * @param {?} attrs\n * @return {?}\n */\nfunction initializeStaticContext(attrs) {\n    /** @type {?} */\n    const context = createEmptyStylingContext();\n    /** @type {?} */\n    const initialClasses = context[3 /* InitialClassValuesPosition */] =\n        [null];\n    /** @type {?} */\n    const initialStyles = context[2 /* InitialStyleValuesPosition */] =\n        [null];\n    // The attributes array has marker values (numbers) indicating what the subsequent\n    // values represent. When we encounter a number, we set the mode to that type of attribute.\n    /** @type {?} */\n    let mode = -1;\n    for (let i = 0; i < attrs.length; i++) {\n        /** @type {?} */\n        const attr = attrs[i];\n        if (typeof attr == 'number') {\n            mode = attr;\n        }\n        else if (mode === 2 /* Styles */) {\n            initialStyles.push((/** @type {?} */ (attr)), (/** @type {?} */ (attrs[++i])));\n        }\n        else if (mode === 1 /* Classes */) {\n            initialClasses.push((/** @type {?} */ (attr)), true);\n        }\n        else if (mode === 3 /* SelectOnly */) {\n            break;\n        }\n    }\n    return context;\n}\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param {?} context the existing styling context\n * @param {?} attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param {?} directive the directive instance with which static data is associated with.\n * @return {?}\n */\nfunction patchContextWithStaticAttrs(context, attrs, directive) {\n    // If the styling context has already been patched with the given directive's bindings,\n    // then there is no point in doing it again. The reason why this may happen (the directive\n    // styling being patched twice) is because the `stylingBinding` function is called each time\n    // an element is created (both within a template function and within directive host bindings).\n    /** @type {?} */\n    const directives = context[1 /* DirectiveRegistryPosition */];\n    if (getDirectiveRegistryValuesIndexOf(directives, directive) == -1) {\n        // this is a new directive which we have not seen yet.\n        directives.push(directive, -1, false, null);\n        /** @type {?} */\n        let initialClasses = null;\n        /** @type {?} */\n        let initialStyles = null;\n        /** @type {?} */\n        let mode = -1;\n        for (let i = 0; i < attrs.length; i++) {\n            /** @type {?} */\n            const attr = attrs[i];\n            if (typeof attr == 'number') {\n                mode = attr;\n            }\n            else if (mode == 1 /* Classes */) {\n                initialClasses = initialClasses || context[3 /* InitialClassValuesPosition */];\n                patchInitialStylingValue(initialClasses, attr, true);\n            }\n            else if (mode == 2 /* Styles */) {\n                initialStyles = initialStyles || context[2 /* InitialStyleValuesPosition */];\n                patchInitialStylingValue(initialStyles, attr, attrs[++i]);\n            }\n        }\n    }\n}\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is not\n * present (or if it's value is falsy) then it will be inserted/updated in the list\n * of initial styling values.\n * @param {?} initialStyling\n * @param {?} prop\n * @param {?} value\n * @return {?}\n */\nfunction patchInitialStylingValue(initialStyling, prop, value) {\n    // Even values are keys; Odd numbers are values; Search keys only\n    for (let i = 1 /* KeyValueStartPosition */; i < initialStyling.length;) {\n        /** @type {?} */\n        const key = initialStyling[i];\n        if (key === prop) {\n            /** @type {?} */\n            const existingValue = initialStyling[i + 1 /* ValueOffset */];\n            // If there is no previous style value (when `null`) or no previous class\n            // applied (when `false`) then we update the the newly given value.\n            if (existingValue == null || existingValue == false) {\n                initialStyling[i + 1 /* ValueOffset */] = value;\n            }\n            return;\n        }\n        i = i + 2 /* Size */;\n    }\n    // We did not find existing key, add a new one.\n    initialStyling.push(prop, value);\n}\n/**\n * Runs through the initial styling data present in the context and renders\n * them via the renderer on the element.\n * @param {?} element\n * @param {?} context\n * @param {?} renderer\n * @return {?}\n */\nfunction renderInitialStylesAndClasses(element, context, renderer) {\n    /** @type {?} */\n    const initialClasses = context[3 /* InitialClassValuesPosition */];\n    renderInitialStylingValues(element, renderer, initialClasses, true);\n    /** @type {?} */\n    const initialStyles = context[2 /* InitialStyleValuesPosition */];\n    renderInitialStylingValues(element, renderer, initialStyles, false);\n}\n/**\n * This is a helper function designed to render each entry present within the\n * provided list of initialStylingValues.\n * @param {?} element\n * @param {?} renderer\n * @param {?} initialStylingValues\n * @param {?} isEntryClassBased\n * @return {?}\n */\nfunction renderInitialStylingValues(element, renderer, initialStylingValues, isEntryClassBased) {\n    for (let i = 1 /* KeyValueStartPosition */; i < initialStylingValues.length; i += 2 /* Size */) {\n        /** @type {?} */\n        const value = initialStylingValues[i + 1 /* ValueOffset */];\n        if (value) {\n            if (isEntryClassBased) {\n                setClass(element, (/** @type {?} */ (initialStylingValues[i + 0 /* PropOffset */])), true, renderer, null);\n            }\n            else {\n                setStyle(element, (/** @type {?} */ (initialStylingValues[i + 0 /* PropOffset */])), (/** @type {?} */ (value)), renderer, null);\n            }\n        }\n    }\n}\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param {?} context the existing styling context\n * @param {?} directiveRef the directive that the new bindings will reference\n * @param {?=} classBindingNames an array of class binding names that will be added to the context\n * @param {?=} styleBindingNames an array of style binding names that will be added to the context\n * @param {?=} styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n * @param {?=} onlyProcessSingleClasses\n * @return {?}\n */\nfunction updateContextWithBindings(context, directiveRef, classBindingNames, styleBindingNames, styleSanitizer, onlyProcessSingleClasses) {\n    if (context[0 /* MasterFlagPosition */] & 32 /* BindingAllocationLocked */)\n        return;\n    // this means the context has already been patched with the directive's bindings\n    /** @type {?} */\n    const directiveIndex = findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer);\n    if (directiveIndex === -1) {\n        // this means the directive has already been patched in ... No point in doing anything\n        return;\n    }\n    // there are alot of variables being used below to track where in the context the new\n    // binding values will be placed. Because the context consists of multiple types of\n    // entries (single classes/styles and multi classes/styles) alot of the index positions\n    // need to be computed ahead of time and the context needs to be extended before the values\n    // are inserted in.\n    /** @type {?} */\n    const singlePropOffsetValues = context[4 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n    /** @type {?} */\n    const totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n    /** @type {?} */\n    const classesOffset = totalCurrentClassBindings * 4 /* Size */;\n    /** @type {?} */\n    const stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n    /** @type {?} */\n    const singleStylesStartIndex = 9 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    let singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n    /** @type {?} */\n    let multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n    /** @type {?} */\n    let multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n    // because we're inserting more bindings into the context, this means that the\n    // binding values need to be referenced the singlePropOffsetValues array so that\n    // the template/directive can easily find them inside of the `elementStyleProp`\n    // and the `elementClassProp` functions without iterating through the entire context.\n    // The first step to setting up these reference points is to mark how many bindings\n    // are being added. Even if these bindings already exist in the context, the directive\n    // or template code will still call them unknowingly. Therefore the total values need\n    // to be registered so that we know how many bindings are assigned to each directive.\n    /** @type {?} */\n    const currentSinglePropsLength = singlePropOffsetValues.length;\n    singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n    // the code below will check to see if a new style binding already exists in the context\n    // if so then there is no point in inserting it into the context again. Whether or not it\n    // exists the styling offset code will now know exactly where it is\n    /** @type {?} */\n    let insertionOffset = 0;\n    /** @type {?} */\n    const filteredStyleBindingNames = [];\n    if (styleBindingNames && styleBindingNames.length) {\n        for (let i = 0; i < styleBindingNames.length; i++) {\n            /** @type {?} */\n            const name = styleBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleStylesStartIndex, singleClassesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = singleClassesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredStyleBindingNames.push(name);\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // just like with the style binding loop above, the new class bindings get the same treatment...\n    /** @type {?} */\n    const filteredClassBindingNames = [];\n    if (classBindingNames && classBindingNames.length) {\n        for (let i = 0; i < classBindingNames.length; i++) {\n            /** @type {?} */\n            const name = classBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleClassesStartIndex, multiStylesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = multiStylesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredClassBindingNames.push(name);\n            }\n            else {\n                singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // because new styles are being inserted, this means the existing collection of style offset\n    // index values are incorrect (they point to the wrong values). The code below will run through\n    // the entire offset array and update the existing set of index values to point to their new\n    // locations while taking the new binding values into consideration.\n    /** @type {?} */\n    let i = 2 /* ValueStartPosition */;\n    if (filteredStyleBindingNames.length) {\n        while (i < currentSinglePropsLength) {\n            /** @type {?} */\n            const totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n            /** @type {?} */\n            const totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n            if (totalClasses) {\n                /** @type {?} */\n                const start = i + 2 /* ValueStartPosition */ + totalStyles;\n                for (let j = start; j < start + totalClasses; j++) {\n                    singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n            }\n            /** @type {?} */\n            const total = totalStyles + totalClasses;\n            i += 2 /* ValueStartPosition */ + total;\n        }\n    }\n    /** @type {?} */\n    const totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n    // in the event that there are new style values being inserted, all existing class and style\n    // bindings need to have their pointer values offsetted with the new amount of space that is\n    // used for the new style/class bindings.\n    for (let i = singleStylesStartIndex; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const isMultiBased = i >= multiStylesStartIndex;\n        /** @type {?} */\n        const isClassBased = i >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n        /** @type {?} */\n        const flag = getPointers(context, i);\n        /** @type {?} */\n        const staticIndex = getInitialIndex(flag);\n        /** @type {?} */\n        let singleOrMultiIndex = getMultiOrSingleIndex(flag);\n        if (isMultiBased) {\n            singleOrMultiIndex +=\n                isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n        }\n        else {\n            singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n        }\n        setFlag(context, i, pointers(flag, staticIndex, singleOrMultiIndex));\n    }\n    // this is where we make space in the context for the new style bindings\n    for (let i = 0; i < filteredStyleBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiClassesStartIndex, 0, null);\n        context.splice(singleClassesStartIndex, 0, null);\n        singleClassesStartIndex++;\n        multiStylesStartIndex++;\n        multiClassesStartIndex += 2; // both single + multi slots were inserted\n    }\n    // this is where we make space in the context for the new class bindings\n    for (let i = 0; i < filteredClassBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiStylesStartIndex, 0, null);\n        context.push(null);\n        multiStylesStartIndex++;\n        multiClassesStartIndex++;\n    }\n    /** @type {?} */\n    const initialClasses = context[3 /* InitialClassValuesPosition */];\n    /** @type {?} */\n    const initialStyles = context[2 /* InitialStyleValuesPosition */];\n    // the code below will insert each new entry into the context and assign the appropriate\n    // flags and index values to them. It's important this runs at the end of this function\n    // because the context, property offset and index values have all been computed just before.\n    for (let i = 0; i < totalNewEntries; i++) {\n        /** @type {?} */\n        const entryIsClassBased = i >= filteredStyleBindingNames.length;\n        /** @type {?} */\n        const adjustedIndex = entryIsClassBased ? (i - filteredStyleBindingNames.length) : i;\n        /** @type {?} */\n        const propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n            filteredStyleBindingNames[adjustedIndex];\n        /** @type {?} */\n        let multiIndex;\n        /** @type {?} */\n        let singleIndex;\n        if (entryIsClassBased) {\n            multiIndex = multiClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n        }\n        else {\n            multiIndex =\n                multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleStylesStartIndex +\n                ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n        }\n        // if a property is not found in the initial style values list then it\n        // is ALWAYS added incase a follow-up directive introduces the same initial\n        // style/class value later on.\n        /** @type {?} */\n        let initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n        /** @type {?} */\n        let indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n        if (indexForInitial === -1) {\n            indexForInitial = initialValuesToLookup.length + 1 /* ValueOffset */;\n            initialValuesToLookup.push(propName, entryIsClassBased ? false : null);\n        }\n        else {\n            indexForInitial += 1 /* ValueOffset */;\n        }\n        /** @type {?} */\n        const initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n        setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n        setProp(context, singleIndex, propName);\n        setValue(context, singleIndex, null);\n        setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n        setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n        setProp(context, multiIndex, propName);\n        setValue(context, multiIndex, null);\n        setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n    }\n    // the total classes/style values are updated so the next time the context is patched\n    // additional style/class bindings from another directive then it knows exactly where\n    // to insert them in the context\n    singlePropOffsetValues[1 /* ClassesCountPosition */] =\n        totalCurrentClassBindings + filteredClassBindingNames.length;\n    singlePropOffsetValues[0 /* StylesCountPosition */] =\n        totalCurrentStyleBindings + filteredStyleBindingNames.length;\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    /** @type {?} */\n    const masterFlag = pointers(0, 0, multiStylesStartIndex) |\n        (onlyProcessSingleClasses ? 16 /* OnlyProcessSingleClasses */ : 0);\n    setFlag(context, 0 /* MasterFlagPosition */, masterFlag);\n}\n/**\n * Searches through the existing registry of directives\n * @param {?} context\n * @param {?} directiveRef\n * @param {?=} styleSanitizer\n * @return {?}\n */\nfunction findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer) {\n    /** @type {?} */\n    const directiveRefs = context[1 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const nextOffsetInsertionIndex = context[4 /* SinglePropOffsetPositions */].length;\n    /** @type {?} */\n    let directiveIndex;\n    /** @type {?} */\n    const detectedIndex = getDirectiveRegistryValuesIndexOf(directiveRefs, directiveRef);\n    if (detectedIndex === -1) {\n        directiveIndex = directiveRefs.length / 4 /* Size */;\n        directiveRefs.push(directiveRef, nextOffsetInsertionIndex, false, styleSanitizer || null);\n    }\n    else {\n        /** @type {?} */\n        const singlePropStartPosition = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        if ((/** @type {?} */ (directiveRefs[singlePropStartPosition])) >= 0) {\n            // the directive has already been patched into the context\n            return -1;\n        }\n        directiveIndex = detectedIndex / 4 /* Size */;\n        // because the directive already existed this means that it was set during elementHostAttrs or\n        // elementStart which means that the binding values were not here. Therefore, the values below\n        // need to be applied so that single class and style properties can be assigned later.\n        /** @type {?} */\n        const singlePropPositionIndex = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        directiveRefs[singlePropPositionIndex] = nextOffsetInsertionIndex;\n        // the sanitizer is also apart of the binding process and will be used when bindings are\n        // applied.\n        /** @type {?} */\n        const styleSanitizerIndex = detectedIndex + 3 /* StyleSanitizerOffset */;\n        directiveRefs[styleSanitizerIndex] = styleSanitizer || null;\n    }\n    return directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} bindingName\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\nfunction getMatchingBindingIndex(context, bindingName, start, end) {\n    for (let j = start; j < end; j += 4 /* Size */) {\n        if (getProp(context, j) === bindingName)\n            return j;\n    }\n    return -1;\n}\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyling` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classesInput The key/value map of CSS class names that will be used for the update.\n * @param {?=} stylesInput The key/value map of CSS styles that will be used for the update.\n * @param {?=} directiveRef\n * @return {?}\n */\nfunction updateStylingMap(context, classesInput, stylesInput, directiveRef) {\n    stylesInput = stylesInput || null;\n    /** @type {?} */\n    const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    /** @type {?} */\n    const element = (/** @type {?} */ ((/** @type {?} */ (context[5 /* ElementPosition */]))));\n    /** @type {?} */\n    const classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (classesInput)), element, 1 /* Class */) :\n        null;\n    /** @type {?} */\n    const stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (stylesInput)), element, 2 /* Style */) :\n        null;\n    /** @type {?} */\n    const classesValue = classesPlayerBuilder ?\n        (/** @type {?} */ (((/** @type {?} */ (classesInput))))).value :\n        classesInput;\n    /** @type {?} */\n    const stylesValue = stylesPlayerBuilder ? (/** @type {?} */ (stylesInput)).value : stylesInput;\n    // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n    /** @type {?} */\n    const ignoreAllClassUpdates = limitToSingleClasses(context) || classesValue === NO_CHANGE ||\n        classesValue === context[6 /* CachedClassValueOrInitialClassString */];\n    /** @type {?} */\n    const ignoreAllStyleUpdates = stylesValue === NO_CHANGE || stylesValue === context[7 /* CachedStyleValue */];\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    context[6 /* CachedClassValueOrInitialClassString */] = classesValue;\n    context[7 /* CachedStyleValue */] = stylesValue;\n    /** @type {?} */\n    let classNames = EMPTY_ARRAY;\n    /** @type {?} */\n    let applyAllClasses = false;\n    /** @type {?} */\n    let playerBuildersAreDirty = false;\n    /** @type {?} */\n    const classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    /** @type {?} */\n    const stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY;\n        }\n    }\n    /** @type {?} */\n    const classes = (/** @type {?} */ ((classesValue || EMPTY_OBJ)));\n    /** @type {?} */\n    const styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY;\n    /** @type {?} */\n    const styles = stylesValue || EMPTY_OBJ;\n    /** @type {?} */\n    const classesStartIndex = styleProps.length;\n    /** @type {?} */\n    let multiStartIndex = getMultiStartIndex(context);\n    /** @type {?} */\n    let dirty = false;\n    /** @type {?} */\n    let ctxIndex = multiStartIndex;\n    /** @type {?} */\n    let propIndex = 0;\n    /** @type {?} */\n    const propLimit = styleProps.length + classNames.length;\n    // the main loop here will try and figure out how the shape of the provided\n    // styles differ with respect to the context. Later if the context/styles/classes\n    // are off-balance then they will be dealt in another loop after this one\n    while (ctxIndex < context.length && propIndex < propLimit) {\n        /** @type {?} */\n        const isClassBased = propIndex >= classesStartIndex;\n        /** @type {?} */\n        const processValue = (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n        // when there is a cache-hit for a string-based class then we should\n        // avoid doing any work diffing any of the changes\n        if (processValue) {\n            /** @type {?} */\n            const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            const newProp = isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            const newValue = isClassBased ? (applyAllClasses ? true : classes[newProp]) : styles[newProp];\n            /** @type {?} */\n            const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            /** @type {?} */\n            const prop = getProp(context, ctxIndex);\n            if (prop === newProp) {\n                /** @type {?} */\n                const value = getValue(context, ctxIndex);\n                /** @type {?} */\n                const flag = getPointers(context, ctxIndex);\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                if (hasValueChanged(flag, value, newValue)) {\n                    setValue(context, ctxIndex, newValue);\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    /** @type {?} */\n                    const initialValue = getInitialValue(context, flag);\n                    // SKIP IF INITIAL CHECK\n                    // If the former `value` is `null` then it means that an initial value\n                    // could be being rendered on screen. If that is the case then there is\n                    // no point in updating the value incase it matches. In other words if the\n                    // new value is the exact same as the previously rendered value (which\n                    // happens to be the initial value) then do nothing.\n                    if (value != null || hasValueChanged(flag, initialValue, newValue)) {\n                        setDirty(context, ctxIndex, true);\n                        dirty = true;\n                    }\n                }\n            }\n            else {\n                /** @type {?} */\n                const indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n                if (indexOfEntry > 0) {\n                    // it was found at a later point ... just swap the values\n                    /** @type {?} */\n                    const valueToCompare = getValue(context, indexOfEntry);\n                    /** @type {?} */\n                    const flagToCompare = getPointers(context, indexOfEntry);\n                    swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n                    if (hasValueChanged(flagToCompare, valueToCompare, newValue)) {\n                        /** @type {?} */\n                        const initialValue = getInitialValue(context, flagToCompare);\n                        setValue(context, ctxIndex, newValue);\n                        // same if statement logic as above (look for SKIP IF INITIAL CHECK).\n                        if (valueToCompare != null || hasValueChanged(flagToCompare, initialValue, newValue)) {\n                            setDirty(context, ctxIndex, true);\n                            playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                            dirty = true;\n                        }\n                    }\n                }\n                else {\n                    // we only care to do this if the insertion is in the middle\n                    /** @type {?} */\n                    const newFlag = prepareInitialFlag(context, newProp, isClassBased, getStyleSanitizer(context, directiveIndex));\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    insertNewMultiProperty(context, ctxIndex, isClassBased, newProp, newFlag, newValue, directiveIndex, playerBuilderIndex);\n                    dirty = true;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n        propIndex++;\n    }\n    // this means that there are left-over values in the context that\n    // were not included in the provided styles/classes and in this\n    // case the  goal is to \"remove\" them from the context (by nullifying)\n    while (ctxIndex < context.length) {\n        /** @type {?} */\n        const flag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        const isClassBased = (flag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        const processValue = (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            const value = getValue(context, ctxIndex);\n            /** @type {?} */\n            const doRemoveValue = valueExists(value, isClassBased);\n            if (doRemoveValue) {\n                setDirty(context, ctxIndex, true);\n                setValue(context, ctxIndex, null);\n                // we keep the player factory the same so that the `nulled` value can\n                // be instructed into the player because removing a style and/or a class\n                // is a valid animation player instruction.\n                /** @type {?} */\n                const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                dirty = true;\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // this means that there are left-over properties in the context that\n    // were not detected in the context during the loop above. In that\n    // case we want to add the new entries into the list\n    /** @type {?} */\n    const sanitizer = getStyleSanitizer(context, directiveIndex);\n    while (propIndex < propLimit) {\n        /** @type {?} */\n        const isClassBased = propIndex >= classesStartIndex;\n        /** @type {?} */\n        const processValue = (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            const prop = isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            const value = isClassBased ? (applyAllClasses ? true : classes[prop]) : styles[prop];\n            /** @type {?} */\n            const flag = prepareInitialFlag(context, prop, isClassBased, sanitizer) | 1 /* Dirty */;\n            /** @type {?} */\n            const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            /** @type {?} */\n            const ctxIndex = context.length;\n            context.push(flag, prop, value, 0);\n            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n            dirty = true;\n        }\n        propIndex++;\n    }\n    if (dirty) {\n        setContextDirty(context, true);\n        setDirectiveDirty(context, directiveIndex, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n}\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} offset The index of the CSS class which is being updated.\n * @param {?} addOrRemove Whether or not to add or remove the CSS class\n * @param {?=} directiveRef\n * @return {?}\n */\nfunction updateClassProp(context, offset, addOrRemove, directiveRef) {\n    _updateSingleStylingValue(context, offset, addOrRemove, true, directiveRef);\n}\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} offset The index of the property which is being updated.\n * @param {?} input\n * @param {?=} directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @return {?}\n */\nfunction updateStyleProp(context, offset, input, directiveRef) {\n    _updateSingleStylingValue(context, offset, input, false, directiveRef);\n}\n/**\n * @param {?} context\n * @param {?} offset\n * @param {?} input\n * @param {?} isClassBased\n * @param {?} directiveRef\n * @return {?}\n */\nfunction _updateSingleStylingValue(context, offset, input, isClassBased, directiveRef) {\n    /** @type {?} */\n    const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    /** @type {?} */\n    const singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n    /** @type {?} */\n    const currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    const currFlag = getPointers(context, singleIndex);\n    /** @type {?} */\n    const currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n    /** @type {?} */\n    const value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    if (hasValueChanged(currFlag, currValue, value) &&\n        allowValueChange(currValue, value, currDirective, directiveIndex)) {\n        /** @type {?} */\n        const isClassBased = (currFlag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (context[5 /* ElementPosition */]))));\n        /** @type {?} */\n        const playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder((/** @type {?} */ (input)), element, isClassBased ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        /** @type {?} */\n        const value = (/** @type {?} */ ((playerBuilder ? ((/** @type {?} */ (input))).value : input)));\n        /** @type {?} */\n        const currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        /** @type {?} */\n        let playerBuildersAreDirty = false;\n        /** @type {?} */\n        let playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            /** @type {?} */\n            const newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            playerBuildersAreDirty = true;\n        }\n        if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n        }\n        if (currDirective !== directiveIndex) {\n            /** @type {?} */\n            const prop = getProp(context, singleIndex);\n            /** @type {?} */\n            const sanitizer = getStyleSanitizer(context, directiveIndex);\n            setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop)) ? true : false);\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value);\n        /** @type {?} */\n        const indexForMulti = getMultiOrSingleIndex(currFlag);\n        // if the value is the same in the multi-area then there's no point in re-assembling\n        /** @type {?} */\n        const valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value)) {\n            /** @type {?} */\n            let multiDirty = false;\n            /** @type {?} */\n            let singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value, isClassBased) && valueExists(valueForMulti, isClassBased)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setDirectiveDirty(context, directiveIndex, true);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n    }\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?} rootOrView\n * @param {?} isFirstRender\n * @param {?=} classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} directiveRef an optional directive that will be used to target which\n *    styling values are rendered. If left empty, only the bindings that are\n *    registered on the template will be rendered.\n * @return {?} number the total amount of players that got queued for animation (if any)\n */\nfunction renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveRef) {\n    /** @type {?} */\n    let totalPlayersQueued = 0;\n    /** @type {?} */\n    const targetDirectiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    if (isContextDirty(context) && isDirectiveDirty(context, targetDirectiveIndex)) {\n        /** @type {?} */\n        const flushPlayerBuilders = context[0 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n        /** @type {?} */\n        const native = (/** @type {?} */ (context[5 /* ElementPosition */]));\n        /** @type {?} */\n        const multiStartIndex = getMultiStartIndex(context);\n        /** @type {?} */\n        const onlySingleClasses = limitToSingleClasses(context);\n        /** @type {?} */\n        let stillDirty = false;\n        for (let i = 9 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                /** @type {?} */\n                const flag = getPointers(context, i);\n                /** @type {?} */\n                const directiveIndex = getDirectiveIndexFromEntry(context, i);\n                if (targetDirectiveIndex !== directiveIndex) {\n                    stillDirty = true;\n                    continue;\n                }\n                /** @type {?} */\n                const prop = getProp(context, i);\n                /** @type {?} */\n                const value = getValue(context, i);\n                /** @type {?} */\n                const styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex) : null;\n                /** @type {?} */\n                const playerBuilder = getPlayerBuilder(context, i);\n                /** @type {?} */\n                const isClassBased = flag & 2 /* Class */ ? true : false;\n                /** @type {?} */\n                const isInSingleRegion = i < multiStartIndex;\n                /** @type {?} */\n                const readInitialValue = !isClassBased || !onlySingleClasses;\n                /** @type {?} */\n                let valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                    // single values ALWAYS have a reference to a multi index\n                    /** @type {?} */\n                    const multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it incase there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                // Note that we ignore class-based deferals because otherwise a class can never\n                // be removed in the case that it exists as true in the initial classes list...\n                if (!isClassBased && !valueExists(valueToApply, isClassBased) && readInitialValue) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                // if the first render is true then we do not want to start applying falsy\n                // values to the DOM element's styling. Otherwise then we know there has\n                // been a change and even if it's falsy then it's removing something that\n                // was truthy before.\n                /** @type {?} */\n                const doApplyValue = isFirstRender ? valueToApply : true;\n                if (doApplyValue) {\n                    if (isClassBased) {\n                        setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                    }\n                    else {\n                        setStyle(native, prop, (/** @type {?} */ (valueToApply)), renderer, styleSanitizer, stylesStore, playerBuilder);\n                    }\n                }\n                setDirty(context, i, false);\n            }\n        }\n        if (flushPlayerBuilders) {\n            /** @type {?} */\n            const rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : (/** @type {?} */ (rootOrView));\n            /** @type {?} */\n            const playerContext = (/** @type {?} */ (getPlayerContext(context)));\n            /** @type {?} */\n            const playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            for (let i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                /** @type {?} */\n                const builder = (/** @type {?} */ (playerContext[i]));\n                /** @type {?} */\n                const playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                /** @type {?} */\n                const oldPlayer = (/** @type {?} */ (playerContext[playerInsertionIndex]));\n                if (builder) {\n                    /** @type {?} */\n                    const player = builder.buildPlayer(oldPlayer, isFirstRender);\n                    if (player !== undefined) {\n                        if (player != null) {\n                            /** @type {?} */\n                            const wasQueued = addPlayerInternal(playerContext, rootContext, (/** @type {?} */ (native)), player, playerInsertionIndex);\n                            wasQueued && totalPlayersQueued++;\n                        }\n                        if (oldPlayer) {\n                            oldPlayer.destroy();\n                        }\n                    }\n                }\n                else if (oldPlayer) {\n                    // the player builder has been removed ... therefore we should delete the associated\n                    // player\n                    oldPlayer.destroy();\n                }\n            }\n            setContextPlayersDirty(context, false);\n        }\n        setDirectiveDirty(context, targetDirectiveIndex, false);\n        setContextDirty(context, stillDirty);\n    }\n    return totalPlayersQueued;\n}\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n        // assign as numbers\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native['style'].setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native['style'].removeProperty(prop);\n    }\n}\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n    }\n    else if (add) {\n        ngDevMode && ngDevMode.rendererAddClass++;\n        isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n            native['classList'].add(className);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveClass++;\n        isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n            native['classList'].remove(className);\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} sanitizeYes\n * @return {?}\n */\nfunction setSanitizeFlag(context, index, sanitizeYes) {\n    if (sanitizeYes) {\n        ((/** @type {?} */ (context[index]))) |= 4 /* Sanitize */;\n    }\n    else {\n        ((/** @type {?} */ (context[index]))) &= ~4 /* Sanitize */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[adjustedIndex]))) |= 1 /* Dirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[adjustedIndex]))) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBasedValue(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 63 /* BitMask */) | (staticIndex << 6 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 6 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    const index = getInitialIndex(flag);\n    /** @type {?} */\n    const entryIsClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const initialValues = entryIsClassBased ? context[3 /* InitialClassValuesPosition */] :\n        context[2 /* InitialStyleValuesPosition */];\n    return initialValues[index];\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 6 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    const index = (flag >> (14 /* BitCountSize */ + 6 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 9 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n    return (/** @type {?} */ (getMultiOrSingleIndex(context[0 /* MasterFlagPosition */])));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} index\n * @return {?}\n */\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    /** @type {?} */\n    const playerContext = (/** @type {?} */ (context[8 /* PlayerContext */]));\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} insertionIndex\n * @return {?}\n */\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    /** @type {?} */\n    let playerContext = context[8 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\n/**\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction directiveOwnerPointers(directiveIndex, playerIndex) {\n    return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} playerBuilderIndex\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n    /** @type {?} */\n    const value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n    context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilderIndex(context, index) {\n    /** @type {?} */\n    const flag = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    /** @type {?} */\n    const playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n        65535 /* BitMask */;\n    return playerBuilderIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilder(context, index) {\n    /** @type {?} */\n    const playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        /** @type {?} */\n        const playerContext = context[8 /* PlayerContext */];\n        if (playerContext) {\n            return (/** @type {?} */ (playerContext[playerBuilderIndex]));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    const adjustedIndex = index === 0 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index === 0 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return (/** @type {?} */ (context[adjustedIndex]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n    return (/** @type {?} */ (context[index + 2 /* ValueOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return (/** @type {?} */ (context[index + 1 /* PropertyOffset */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction isContextDirty(context) {\n    return isDirty(context, 0 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction limitToSingleClasses(context) {\n    return context[0 /* MasterFlagPosition */] & 16 /* OnlyProcessSingleClasses */;\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextDirty(context, isDirtyYes) {\n    setDirty(context, 0 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[0 /* MasterFlagPosition */]))) |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[0 /* MasterFlagPosition */]))) &= ~8 /* PlayerBuildersDirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?=} startIndex\n * @return {?}\n */\nfunction findEntryPositionByProp(context, prop, startIndex) {\n    for (let i = (startIndex || 0) + 1 /* PropertyOffset */; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const thisProp = context[i];\n        if (thisProp == prop) {\n            return i - 1 /* PropertyOffset */;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    /** @type {?} */\n    const tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    const tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    const tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    const tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    /** @type {?} */\n    let flagA = tmpFlag;\n    /** @type {?} */\n    let flagB = getPointers(context, indexB);\n    /** @type {?} */\n    const singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    const singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    /** @type {?} */\n    const playerIndexA = getPlayerBuilderIndex(context, indexB);\n    /** @type {?} */\n    const directiveIndexA = 0;\n    setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, directiveIndexA);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (let i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const multiFlag = getPointers(context, i);\n        /** @type {?} */\n        const singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            const singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            const initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            const flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            const updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n    /** @type {?} */\n    const doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n    setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    if (isClassBased) {\n        return value ? true : false;\n    }\n    return value !== null;\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?} entryIsClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n    /** @type {?} */\n    let flag = (sanitizer && sanitizer(prop)) ? 4 /* Sanitize */ : 0 /* None */;\n    /** @type {?} */\n    let initialIndex;\n    if (entryIsClassBased) {\n        flag |= 2 /* Class */;\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[3 /* InitialClassValuesPosition */], prop);\n    }\n    else {\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[2 /* InitialStyleValuesPosition */], prop);\n    }\n    initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n    return pointers(flag, initialIndex, 0);\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    const isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const hasValues = a && b;\n    /** @type {?} */\n    const usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return ((/** @type {?} */ (a))).toString() !== ((/** @type {?} */ (b))).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n/**\n * @template T\n */\nclass ClassAndStylePlayerBuilder {\n    /**\n     * @param {?} factory\n     * @param {?} _element\n     * @param {?} _type\n     */\n    constructor(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = (/** @type {?} */ (factory));\n    }\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    }\n    /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    buildPlayer(currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            /** @type {?} */\n            const player = this._factory.fn(this._element, this._type, (/** @type {?} */ (this._values)), isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getDirectiveIndexFromEntry(context, index) {\n    /** @type {?} */\n    const value = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    return value & 65535 /* BitMask */;\n}\n/**\n * @param {?} context\n * @param {?} directive\n * @return {?}\n */\nfunction getDirectiveIndexFromRegistry(context, directive) {\n    /** @type {?} */\n    const index = getDirectiveRegistryValuesIndexOf(context[1 /* DirectiveRegistryPosition */], directive);\n    ngDevMode &&\n        assertNotEqual(index, -1, `The provided directive ${directive} has not been allocated to the element\\'s style/class bindings`);\n    return index > 0 ? index / 4 /* Size */ : 0;\n    // return index / DirectiveRegistryValuesIndex.Size;\n}\n/**\n * @param {?} directives\n * @param {?} directive\n * @return {?}\n */\nfunction getDirectiveRegistryValuesIndexOf(directives, directive) {\n    for (let i = 0; i < directives.length; i += 4 /* Size */) {\n        if (directives[i] === directive) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} keyValues\n * @param {?} key\n * @return {?}\n */\nfunction getInitialStylingValuesIndexOf(keyValues, key) {\n    for (let i = 1 /* KeyValueStartPosition */; i < keyValues.length; i += 2 /* Size */) {\n        if (keyValues[i] === key)\n            return i;\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} offset\n * @param {?} isClassBased\n * @return {?}\n */\nfunction getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n    /** @type {?} */\n    const singlePropOffsetRegistryIndex = (/** @type {?} */ (context[1 /* DirectiveRegistryPosition */][(directiveIndex * 4 /* Size */) +\n        1 /* SinglePropValuesIndexOffset */]));\n    /** @type {?} */\n    const offsets = context[4 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const indexForOffset = singlePropOffsetRegistryIndex +\n        2 /* ValueStartPosition */ +\n        (isClassBased ?\n            offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n            0) +\n        offset;\n    return offsets[indexForOffset];\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction getStyleSanitizer(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[1 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const value = dirs[directiveIndex * 4 /* Size */ +\n        3 /* StyleSanitizerOffset */] ||\n        dirs[3 /* StyleSanitizerOffset */] || null;\n    return (/** @type {?} */ (value));\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction isDirectiveDirty(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[1 /* DirectiveRegistryPosition */];\n    return (/** @type {?} */ (dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} dirtyYes\n * @return {?}\n */\nfunction setDirectiveDirty(context, directiveIndex, dirtyYes) {\n    /** @type {?} */\n    const dirs = context[1 /* DirectiveRegistryPosition */];\n    dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */] = dirtyYes;\n}\n/**\n * @param {?} currentValue\n * @param {?} newValue\n * @param {?} currentDirectiveOwner\n * @param {?} newDirectiveOwner\n * @return {?}\n */\nfunction allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n    // the code below relies the importance of directive's being tied to their\n    // index value. The index values for each directive are derived from being\n    // registered into the styling context directive registry. The most important\n    // directive is the parent component directive (the template) and each directive\n    // that is added after is considered less important than the previous entry. This\n    // prioritization of directives enables the styling algorithm to decide if a style\n    // or class should be allowed to be updated/replaced incase an earlier directive\n    // already wrote to the exact same style-property or className value. In other words\n    // ... this decides what to do if and when there is a collision.\n    if (currentValue) {\n        if (newValue) {\n            // if a directive index is lower than it always has priority over the\n            // previous directive's value...\n            return newDirectiveOwner <= currentDirectiveOwner;\n        }\n        else {\n            // only write a null value incase it's the same owner writing it.\n            // this avoids having a higher-priority directive write to null\n            // only to have a lesser-priority directive change right to a\n            // non-null value immediately afterwards.\n            return currentDirectiveOwner === newDirectiveOwner;\n        }\n    }\n    return true;\n}\n/**\n * This function is only designed to be called for `[class]` bindings when\n * `[ngClass]` (or something that uses `class` as an input) is present. Once\n * directive host bindings fully work for `[class]` and `[style]` inputs\n * then this can be deleted.\n * @param {?} context\n * @return {?}\n */\nfunction getInitialClassNameValue(context) {\n    /** @type {?} */\n    let className = (/** @type {?} */ (context[6 /* CachedClassValueOrInitialClassString */]));\n    if (className == null) {\n        className = '';\n        /** @type {?} */\n        const initialClassValues = context[3 /* InitialClassValuesPosition */];\n        for (let i = 1 /* KeyValueStartPosition */; i < initialClassValues.length; i += 2 /* Size */) {\n            /** @type {?} */\n            const isPresent = initialClassValues[i + 1];\n            if (isPresent) {\n                className += (className.length ? ' ' : '') + initialClassValues[i];\n            }\n        }\n        context[6 /* CachedClassValueOrInitialClassString */] = className;\n    }\n    return className;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n * @type {?}\n */\nconst _CLEAN_PROMISE = Promise.resolve(null);\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDescendantViews(lView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    setFirstTemplatePass(false);\n    // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update pass.\n    if (!isCreationMode(lView)) {\n        /** @type {?} */\n        const checkNoChangesMode = getCheckNoChangesMode();\n        executeInitHooks(lView, tView, checkNoChangesMode);\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView);\n        executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode);\n        setHostBindings(tView, lView);\n    }\n    refreshChildComponents(tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nfunction setHostBindings(tView, viewData) {\n    if (tView.expandoInstructions) {\n        /** @type {?} */\n        let bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        setBindingRoot(bindingRootIndex);\n        /** @type {?} */\n        let currentDirectiveIndex = -1;\n        /** @type {?} */\n        let currentElementIndex = -1;\n        for (let i = 0; i < tView.expandoInstructions.length; i++) {\n            /** @type {?} */\n            const instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    // Injector block and providers are taken into account.\n                    /** @type {?} */\n                    const providerCount = ((/** @type {?} */ (tView.expandoInstructions[++i])));\n                    bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n                setBindingRoot(bindingRootIndex);\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                if (instruction !== null) {\n                    viewData[BINDING_INDEX] = bindingRootIndex;\n                    instruction(2 /* Update */, readElementValue(viewData[currentDirectiveIndex]), currentElementIndex);\n                }\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @return {?}\n */\nfunction refreshContentQueries(tView) {\n    if (tView.contentQueries != null) {\n        for (let i = 0; i < tView.contentQueries.length; i += 2) {\n            /** @type {?} */\n            const directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (tView.data[directiveDefIdx]));\n            (/** @type {?} */ (directiveDef.contentQueriesRefresh))(directiveDefIdx - HEADER_OFFSET, tView.contentQueries[i + 1]);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (let i = 0; i < components.length; i++) {\n            componentRefresh(components[i]);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} parentLView\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?=} rendererFactory\n * @param {?=} renderer\n * @param {?=} sanitizer\n * @param {?=} injector\n * @return {?}\n */\nfunction createLView(parentLView, tView, context, flags, rendererFactory, renderer, sanitizer, injector) {\n    /** @type {?} */\n    const lView = (/** @type {?} */ (tView.blueprint.slice()));\n    lView[FLAGS] = flags | 1 /* CreationMode */ | 16 /* Attached */ | 32 /* RunInit */ |\n        2 /* FirstLViewPass */;\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (/** @type {?} */ ((rendererFactory || parentLView && parentLView[RENDERER_FACTORY])));\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (/** @type {?} */ ((renderer || parentLView && parentLView[RENDERER])));\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || (/** @type {?} */ (null));\n    lView[(/** @type {?} */ (INJECTOR))] = injector || parentLView && parentLView[INJECTOR] || null;\n    return lView;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nfunction createNodeAtIndex(index, type, native, name, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, lView.length, `Slot should have been initialized with null`);\n    lView[adjustedIndex] = native;\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (tView.data[adjustedIndex]));\n    if (tNode == null) {\n        // TODO(misko): Refactor createTNode so that it does not depend on LView.\n        tNode = tView.data[adjustedIndex] = createTNode(lView, type, adjustedIndex, name, attrs, null);\n    }\n    // Now link ourselves into the tree.\n    // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n    // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const isParent = getIsParent();\n    if (previousOrParentTNode) {\n        if (isParent && previousOrParentTNode.child == null &&\n            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n            // We are in the same view, which means we are adding content node to the parent view.\n            previousOrParentTNode.child = tNode;\n        }\n        else if (!isParent) {\n            previousOrParentTNode.next = tNode;\n        }\n    }\n    if (tView.firstChild == null) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return (/** @type {?} */ (tNode));\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction createViewNode(index, view) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    if (view[TVIEW].node == null) {\n        view[TVIEW].node = (/** @type {?} */ (createTNode(view, 2 /* View */, index, null, null, null)));\n    }\n    return view[HOST_NODE] = (/** @type {?} */ (view[TVIEW].node));\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @return {?}\n */\nfunction allocExpando(view) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n        tView.blueprint.push(null);\n        tView.data.push(null);\n        view.push(null);\n    }\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} renderer\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nfunction createEmbeddedViewAndNode(tView, context, declarationView, renderer, queries, injectorIndex) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode((/** @type {?} */ (null)));\n    /** @type {?} */\n    const lView = createLView(declarationView, tView, context, 4 /* CheckAlways */);\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    createViewNode(-1, lView);\n    if (tView.firstTemplatePass) {\n        (/** @type {?} */ (tView.node)).injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @return {?}\n */\nfunction renderEmbeddedTemplate(viewToRender, tView, context) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode((/** @type {?} */ (null)));\n    /** @type {?} */\n    let oldView;\n    if (viewToRender[FLAGS] & 128 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode((/** @type {?} */ (null)));\n            oldView = enterView(viewToRender, viewToRender[HOST_NODE]);\n            namespaceHTML();\n            (/** @type {?} */ (tView.template))(getRenderFlags(viewToRender), context);\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstTemplatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            viewToRender[TVIEW].firstTemplatePass = false;\n            setFirstTemplatePass(false);\n            refreshDescendantViews(viewToRender);\n        }\n        finally {\n            leaveView((/** @type {?} */ (oldView)));\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nfunction nextContext(level = 1) {\n    return nextContextImpl(level);\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} context\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n    /** @type {?} */\n    const rendererFactory = hostView[RENDERER_FACTORY];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[HOST_NODE]);\n    /** @type {?} */\n    const normalExecutionPath = !getCheckNoChangesMode();\n    try {\n        if (normalExecutionPath && rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (isCreationMode(hostView)) {\n            // creation mode pass\n            if (templateFn) {\n                namespaceHTML();\n                templateFn(1 /* Create */, (/** @type {?} */ (context)));\n            }\n            refreshDescendantViews(hostView);\n            hostView[FLAGS] &= ~1 /* CreationMode */;\n        }\n        // update mode pass\n        templateFn && templateFn(2 /* Update */, (/** @type {?} */ (context)));\n        refreshDescendantViews(hostView);\n    }\n    finally {\n        if (normalExecutionPath && rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Namespace\n//////////////////////////\n/** @type {?} */\nlet _currentNamespace = null;\n/**\n * @return {?}\n */\nfunction namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * @return {?}\n */\nfunction namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nfunction namespaceHTML() {\n    _currentNamespace = null;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nfunction element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nfunction elementContainerStart(index, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const tagName = 'ng-container';\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const native = renderer.createComment(ngDevMode ? tagName : '');\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, tagName, attrs || null);\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    attachPatchData(native, lView);\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nfunction elementContainerEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode((/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(tView, previousOrParentTNode);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nfunction elementStart(index, name, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    const native = elementCreate(name);\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, (/** @type {?} */ (native)), name, attrs || null);\n    if (attrs) {\n        // it's important to only prepare styling-related datastructures once for a given\n        // tNode and not each time an element is created. Also, the styling code is designed\n        // to be patched and constructed at various points, but only up until the first element\n        // is created. Then the styling context is locked and can only be instantiated for each\n        // successive element that is created.\n        if (tView.firstTemplatePass && !tNode.stylingTemplate && hasStyling(attrs)) {\n            tNode.stylingTemplate = initializeStaticContext(attrs);\n        }\n        setUpAttributes(native, attrs);\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    // if a directive contains a host binding for \"class\" then all class-based data will\n    // flow through that (except for `[class.prop]` bindings). This also includes initial\n    // static class values as well. (Note that this will be fixed once map-based `[style]`\n    // and `[class]` bindings work for multiple directives.)\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const inputData = initializeTNodeInputs(tNode);\n        if (inputData && inputData.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* hasClassInput */;\n        }\n    }\n    // There is no point in rendering styles when a class directive is present since\n    // it will take that over for us (this will be removed once #FW-882 is in).\n    if (tNode.stylingTemplate && (tNode.flags & 8 /* hasClassInput */) === 0) {\n        renderInitialStylesAndClasses(native, tNode.stylingTemplate, lView[RENDERER]);\n    }\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nfunction elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    let native;\n    /** @type {?} */\n    const rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, _currentNamespace);\n    }\n    else {\n        if (_currentNamespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(_currentNamespace, name);\n        }\n    }\n    return native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} viewData\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, viewData, localRefs, localRefExtractor = getNativeByTNode) {\n    if (!getBindingsEnabled())\n        return;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    if (getFirstTemplatePass()) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, viewData, findDirectiveMatches(tView, viewData, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, viewData, previousOrParentTNode);\n    invokeDirectivesHostBindings(tView, viewData, previousOrParentTNode);\n    saveResolvedLocalsInData(viewData, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            const index = (/** @type {?} */ (localNames[i + 1]));\n            /** @type {?} */\n            const value = index === -1 ?\n                localRefExtractor((/** @type {?} */ (tNode)), viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery\n * @return {?} TView\n */\nfunction getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData =\n            (/** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery))));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery\n * @return {?}\n */\nfunction createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    const bindingStartIndex = HEADER_OFFSET + consts;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    /** @type {?} */\n    const initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[(/** @type {?} */ (TVIEW))] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: (/** @type {?} */ (null)),\n        data: blueprint.slice(),\n        // Fill in to match HEADER_OFFSET in LView\n        childIndex: -1,\n        // Children set in addToViewTree(), if any\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        pipeDestroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    const blueprint = (/** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex)));\n    blueprint[CONTAINER_INDEX] = -1;\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    const isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const attrName = attrs[i++];\n        if (typeof attrName == 'number') {\n            if (attrName === 0 /* NamespaceURI */) {\n                // Namespaced attributes\n                /** @type {?} */\n                const namespaceURI = (/** @type {?} */ (attrs[i++]));\n                /** @type {?} */\n                const attrName = (/** @type {?} */ (attrs[i++]));\n                /** @type {?} */\n                const attrVal = (/** @type {?} */ (attrs[i++]));\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProc ?\n                    ((/** @type {?} */ (renderer)))\n                        .setAttribute(native, attrName, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName, attrVal);\n            }\n            else {\n                // All other `AttributeMarker`s are ignored here.\n                break;\n            }\n        }\n        else {\n            /// attrName is string;\n            /** @type {?} */\n            const attrVal = attrs[i++];\n            if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n                // Standard attributes\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                if (isAnimationProp(attrName)) {\n                    if (isProc) {\n                        ((/** @type {?} */ (renderer))).setProperty(native, attrName, attrVal);\n                    }\n                }\n                else {\n                    isProc ?\n                        ((/** @type {?} */ (renderer)))\n                            .setAttribute(native, (/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal))) :\n                        native.setAttribute((/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal)));\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nfunction createError(text, token) {\n    return new Error(`Renderer: ${text} [${stringify$1(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nfunction locateHostElement(factory, elementOrSelector) {\n    /** @type {?} */\n    const defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    const rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nfunction listener(eventName, listenerFn, useCapture = false) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    /** @type {?} */\n    const tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const lCleanup = getCleanup(lView);\n        /** @type {?} */\n        const lCleanupIndex = lCleanup.length;\n        /** @type {?} */\n        let useCaptureOrSubIdx = useCapture;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            /** @type {?} */\n            const cleanupFn = renderer.listen(native, eventName, listenerFn);\n            lCleanup.push(listenerFn, cleanupFn);\n            useCaptureOrSubIdx = lCleanupIndex + 1;\n        }\n        else {\n            /** @type {?} */\n            const wrappedListener = wrapListenerWithPreventDefault(listenerFn);\n            native.addEventListener(eventName, wrappedListener, useCapture);\n            lCleanup.push(wrappedListener);\n        }\n        tCleanup && tCleanup.push(eventName, tNode.index, lCleanupIndex, useCaptureOrSubIdx);\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n    }\n    /** @type {?} */\n    const outputs = tNode.outputs;\n    /** @type {?} */\n    let props;\n    if (outputs && (props = outputs[eventName])) {\n        /** @type {?} */\n        const propsLength = props.length;\n        if (propsLength) {\n            /** @type {?} */\n            const lCleanup = getCleanup(lView);\n            for (let i = 0; i < propsLength; i += 2) {\n                ngDevMode && assertDataInRange(lView, (/** @type {?} */ (props[i])));\n                /** @type {?} */\n                const subscription = lView[(/** @type {?} */ (props[i]))][props[i + 1]].subscribe(listenerFn);\n                /** @type {?} */\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} lView\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupWithContext(lView, context, cleanupFn) {\n    /** @type {?} */\n    const lCleanup = getCleanup(lView);\n    lCleanup.push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push((/** @type {?} */ (view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nfunction elementEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode((/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(getLView()[TVIEW], previousOrParentTNode);\n    decreaseElementDepthCount();\n    // this is fired at the end of elementEnd because ALL of the stylingBindings code\n    // (for directives and the template) have now executed which means the styling\n    // context can be instantiated properly.\n    if (hasClassInput(previousOrParentTNode)) {\n        /** @type {?} */\n        const stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (previousOrParentTNode.inputs))['class'])), getInitialClassNameValue(stylingContext));\n    }\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nfunction elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const element = getNativeByIndex(index, lView);\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name) :\n                element.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            const strValue = sanitizer == null ? stringify$1(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element, name, strValue) :\n                element.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nfunction elementProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly);\n}\n/**\n * Updates a synthetic host binding (e.g. `[\\@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `\\@HostBinding('\\@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation \\@triggers, they need to be\n * evaluated with the sub components renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nfunction componentHostSyntheticProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadComponentRenderer);\n}\n/**\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction loadComponentRenderer(tNode, lView) {\n    /** @type {?} */\n    const componentLView = (/** @type {?} */ (lView[tNode.index]));\n    return componentLView[RENDERER];\n}\n/**\n * @template T\n * @param {?} index\n * @param {?} propName\n * @param {?} value\n * @param {?=} sanitizer\n * @param {?=} nativeOnly\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    let inputData;\n    /** @type {?} */\n    let dataValue;\n    if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n        (dataValue = inputData[propName])) {\n        setInputsForProperty(lView, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n        if (ngDevMode) {\n            if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n            }\n        }\n    }\n    else if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? ((/** @type {?} */ (sanitizer(value)))) : value;\n        ngDevMode && ngDevMode.rendererSetProperty++;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setProperty((/** @type {?} */ (element)), propName, value);\n        }\n        else if (!isAnimationProp(propName)) {\n            ((/** @type {?} */ (element))).setProperty ? ((/** @type {?} */ (element))).setProperty(propName, value) :\n                ((/** @type {?} */ (element)))[propName] = value;\n        }\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} lView\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @param {?} tViews Any TViews attached to this node\n * @return {?} the TNode object\n */\nfunction createTNode(lView, type, adjustedIndex, tagName, attrs, tViews) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    ngDevMode && ngDevMode.tNode++;\n    /** @type {?} */\n    const parent = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n    // Parents cannot cross component boundaries because components will be used in multiple places,\n    // so it's only set if the view is the same.\n    /** @type {?} */\n    const parentInSameView = parent && lView && parent !== lView[HOST_NODE];\n    /** @type {?} */\n    const tParent = parentInSameView ? (/** @type {?} */ (parent)) : null;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        directiveStart: -1,\n        directiveEnd: -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: tViews,\n        next: null,\n        child: null,\n        parent: tParent,\n        detached: null,\n        stylingTemplate: null,\n        projection: null\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} lView\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(lView, inputs, value) {\n    for (let i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(lView, (/** @type {?} */ (inputs[i])));\n        lView[(/** @type {?} */ (inputs[i]))][inputs[i + 1]] = value;\n    }\n}\n/**\n * @param {?} lView\n * @param {?} element\n * @param {?} type\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setNgReflectProperties(lView, element, type, inputs, value) {\n    for (let i = 0; i < inputs.length; i += 2) {\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const attrName = normalizeDebugBindingName((/** @type {?} */ (inputs[i + 1])));\n        /** @type {?} */\n        const debugValue = normalizeDebugBindingValue(value);\n        if (type === 3 /* Element */) {\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(((/** @type {?} */ (element))), attrName, debugValue) :\n                ((/** @type {?} */ (element))).setAttribute(attrName, debugValue);\n        }\n        else if (value !== undefined) {\n            /** @type {?} */\n            const value = `bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`;\n            if (isProceduralRenderer(renderer)) {\n                renderer.setValue(((/** @type {?} */ (element))), value);\n            }\n            else {\n                ((/** @type {?} */ (element))).textContent = value;\n            }\n        }\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNode\n * @param {?} direction whether to consider inputs or outputs\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode, direction) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let propStore = null;\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (end > start) {\n        /** @type {?} */\n        const isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        const defs = tView.data;\n        for (let i = start; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (defs[i]));\n            /** @type {?} */\n            const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (let publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    const internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    const hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class bindings on the element. Note for static values (no binding)\n * see `elementStart` and `elementHostAttrs`.\n *\n * \\@publicApi\n * @param {?=} classBindingNames An array containing bindable class names.\n *        The `elementClassProp` refers to the class name by index in this array.\n *        (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param {?=} styleBindingNames An array containing bindable style properties.\n *        The `elementStyleProp` refers to the class name by index in this array.\n *        (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        property values that are applied to the element (during rendering).\n *        Note that the sanitizer instance itself is tied to the `directive` (if  provided).\n * @param {?=} directive A directive instance the styling is associated with. If not provided\n *        current view's controller instance is assumed.\n *\n * @return {?}\n */\nfunction elementStyling(classBindingNames, styleBindingNames, styleSanitizer, directive) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = createEmptyStylingContext();\n    }\n    updateContextWithBindings((/** @type {?} */ (tNode.stylingTemplate)), directive || null, classBindingNames, styleBindingNames, styleSanitizer, hasClassInput(tNode));\n}\n/**\n * Assign static styling values to a host element.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * \\@publicApi\n * @param {?} directive A directive instance the styling is associated with.\n * @param {?} attrs An array containing class and styling information. The values must be marked with\n *              `AttributeMarker`.\n *\n *        ```\n *        var attrs = [AttributeMarker.Classes, 'foo', 'bar',\n *                     AttributeMarker.Styles, 'width', '100px', 'height, '200px']\n *        elementHostAttrs(directive, attrs);\n *        ```\n *\n * @return {?}\n */\nfunction elementHostAttrs(directive, attrs) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = initializeStaticContext(attrs);\n    }\n    patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, directive);\n}\n/**\n * Apply styling binding to the element.\n *\n * This instruction is meant to be run after `elementStyle` and/or `elementStyleProp`.\n * if any styling bindings have changed then the changes are flushed to the element.\n *\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementStylingApply(index, directive) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const isFirstRender = (lView[FLAGS] & 2 /* FirstLViewPass */) !== 0;\n    /** @type {?} */\n    const totalPlayersQueued = renderStyling(getStylingContext(index + HEADER_OFFSET, lView), lView[RENDERER], lView, isFirstRender, null, null, directive);\n    if (totalPlayersQueued > 0) {\n        /** @type {?} */\n        const rootContext = getRootContext(lView);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n}\n/**\n * Update a style bindings value on an element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling element is updated as part of `elementStylingApply`.)\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementStlyingBindings`.\n * @param {?} value New value to write (null to remove). Note that if a directive also\n *        attempts to write to the same binding value then it will only be able to\n *        do so if the template binding value is `null` (or doesn't exist at all).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementStyleProp(index, styleIndex, value, suffix, directive) {\n    /** @type {?} */\n    let valueToAdd = null;\n    if (value !== null) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = stringify$1(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = (/** @type {?} */ ((/** @type {?} */ (value))));\n        }\n    }\n    updateStyleProp(getStylingContext(index + HEADER_OFFSET, getLView()), styleIndex, valueToAdd, directive);\n}\n/**\n * Add or remove a class via a class binding on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case and, therefore,\n * the class itself must already be applied using `elementStyling` within\n * the creation block.\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementStlyingBindings` (which is meant to be called before this\n *        function is).\n * @param {?} value A true/false value which will turn the class on or off.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementClassProp(index, classIndex, value, directive) {\n    /** @type {?} */\n    const onOrOffClassValue = (value instanceof BoundPlayerFactory) ? ((/** @type {?} */ (value))) : (!!value);\n    updateClassProp(getStylingContext(index + HEADER_OFFSET, getLView()), classIndex, onOrOffClassValue, directive);\n}\n/**\n * Update style and/or class bindings using object literal.\n *\n * This instruction is meant apply styling via the `[style]=\"exp\"` and `[class]=\"exp\"` template\n * bindings. When styles are applied to the Element they will then be placed with respect to\n * any styles set with `elementStyleProp`. If any styles are set to `null` then they will be\n * removed from the element.\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * \\@publicApi\n * @template T\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n *\n * @return {?}\n */\nfunction elementStylingMap(index, classes, styles, directive) {\n    if (directive != undefined)\n        return hackImplementationOfElementStylingMap(index, classes, styles, directive); // supported in next PR\n    // supported in next PR\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    const stylingContext = getStylingContext(index + HEADER_OFFSET, lView);\n    if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n        /** @type {?} */\n        const initialClasses = getInitialClassNameValue(stylingContext);\n        /** @type {?} */\n        const classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + ((/** @type {?} */ (classes)));\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (tNode.inputs))['class'])), classInputVal);\n    }\n    else {\n        updateStylingMap(stylingContext, classes, styles);\n    }\n}\n/* START OF HACK BLOCK */\n/**\n * @template T\n * @param {?} index\n * @param {?} classes\n * @param {?=} styles\n * @param {?=} directive\n * @return {?}\n */\nfunction hackImplementationOfElementStylingMap(index, classes, styles, directive) {\n    throw new Error('unimplemented. Should not be needed by ViewEngine compatibility');\n}\n/* END OF HACK BLOCK */\n//////////////////////////\n//// Text\n//////////////////////////\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nfunction text(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    const textNative = createTextNode(value, lView[RENDERER]);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nfunction textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        const lView = getLView();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (getNativeByIndex(index, lView)))));\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, stringify$1(value)) :\n            element.textContent = stringify$1(value);\n    }\n}\n//////////////////////////\n//// Directive\n//////////////////////////\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nfunction instantiateRootComponent(tView, viewData, def) {\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    /** @type {?} */\n    const directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, (/** @type {?} */ (rootTNode)));\n    postProcessBaseDirective(viewData, rootTNode, directive, (/** @type {?} */ (def)));\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} directives\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    const exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            /** @type {?} */\n            const directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            saveNameToExportMap((/** @type {?} */ (tView.data)).length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            queueInitHooks(directiveDefIdx, def.onInit, def.doCheck, tView);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (!getFirstTemplatePass() && start < end) {\n        getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView);\n    }\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        if (isComponentDef(def)) {\n            addComponentLogic(lView, tNode, (/** @type {?} */ (def)));\n        }\n        /** @type {?} */\n        const directive = getNodeInjectable(tView.data, (/** @type {?} */ (lView)), i, (/** @type {?} */ (tNode)));\n        postProcessDirective(lView, directive, def, i);\n    }\n}\n/**\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const firstTemplatePass = getFirstTemplatePass();\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        /** @type {?} */\n        const directive = viewData[i];\n        if (def.hostBindings) {\n            /** @type {?} */\n            const previousExpandoLength = expando.length;\n            setCurrentDirectiveDef(def);\n            (/** @type {?} */ (def.hostBindings))(1 /* Create */, directive, tNode.index - HEADER_OFFSET);\n            setCurrentDirectiveDef(null);\n            // `hostBindings` function may or may not contain `allocHostVars` call\n            // (e.g. it may not if it only contains host listeners), so we need to check whether\n            // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n            // expando block, to make sure we execute it for DI cycle\n            if (previousExpandoLength === expando.length && firstTemplatePass) {\n                expando.push(def.hostBindings);\n            }\n        }\n        else if (firstTemplatePass) {\n            expando.push(null);\n        }\n    }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nfunction generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    /** @type {?} */\n    const elementIndex = -(tNode.index - HEADER_OFFSET);\n    /** @type {?} */\n    const providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} lView\n * @param {?} totalHostVars\n * @return {?}\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    for (let i = 0; i < totalHostVars; i++) {\n        lView.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive, def);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def.inputs, previousOrParentTNode);\n    }\n    if (def.contentQueries) {\n        def.contentQueries(directiveDefIdx);\n    }\n    if (isComponentDef(def)) {\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @param {?} def\n * @return {?}\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive, def) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n    // TODO(misko): setUpAttributes should be a feature for better treeshakability.\n    if (def.attributes != null && previousOrParentTNode.type == 3 /* Element */) {\n        setUpAttributes((/** @type {?} */ (native)), (/** @type {?} */ (def.attributes)));\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    const registry = tView.directiveRegistry;\n    /** @type {?} */\n    let matches = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (registry[i]));\n            if (isNodeMatchingSelectorList(tNode, (/** @type {?} */ (def.selectors)), /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (getPreviousOrParentTNode())), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 1 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction queueComponentIndexForCheck(previousOrParentTNode) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n * @param {?} tView\n * @param {?} def\n * @param {?} hostVars\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const length = expando.length;\n    // Check whether a given `hostBindings` function already exists in expandoInstructions,\n    // which can happen in case directive definition was extended from base definition (as a part of\n    // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n    // list, we just increase the number of host vars associated with that function, but do not add it\n    // into the list again.\n    if (length >= 2 && expando[length - 2] === def.hostBindings) {\n        expando[length - 1] = ((/** @type {?} */ (expando[length - 1]))) + hostVars;\n    }\n    else {\n        expando.push((/** @type {?} */ (def.hostBindings)), hostVars);\n    }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        const localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs)\n            exportsMap[def.exportAs] = index;\n        if (((/** @type {?} */ (def))).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nfunction initNodeFlags(tNode, index, numberOfDirectives) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    const flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = flags & 1 /* isComponent */;\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    /** @type {?} */\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    /** @type {?} */\n    const tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    /** @type {?} */\n    const rendererFactory = lView[RENDERER_FACTORY];\n    /** @type {?} */\n    const componentView = addToViewTree(lView, (/** @type {?} */ (previousOrParentTNode.index)), createLView(lView, tView, null, def.onPush ? 8 /* Dirty */ : 4 /* CheckAlways */, rendererFactory, lView[RENDERER_FACTORY].createRenderer((/** @type {?} */ (native)), def)));\n    componentView[HOST_NODE] = (/** @type {?} */ (previousOrParentTNode));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    componentView[HOST] = lView[previousOrParentTNode.index];\n    lView[previousOrParentTNode.index] = componentView;\n    if (getFirstTemplatePass()) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n    /** @type {?} */\n    let initialInputData = (/** @type {?} */ (tNode.initialInputs));\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    /** @type {?} */\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (let i = 0; i < initialInputs.length; i += 2) {\n            ((/** @type {?} */ (instance)))[initialInputs[i]] = initialInputs[i + 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    const initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const attrName = attrs[i];\n        if (attrName === 3 /* SelectOnly */)\n            break;\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        /** @type {?} */\n        const minifiedInputName = inputs[attrName];\n        /** @type {?} */\n        const attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            const inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, (/** @type {?} */ (attrValue)));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} hostTNode The host TNode for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nfunction createLContainer(hostNative, hostTNode, currentView, native, isForViewContainerRef) {\n    return [\n        isForViewContainerRef ? -1 : 0,\n        [],\n        currentView,\n        null,\n        null,\n        hostNative,\n        native,\n        getRenderParent(hostTNode, currentView) // renderParent\n    ];\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nfunction template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // TODO: consider a separate node type for templates\n    /** @type {?} */\n    const tNode = containerInternal(index, tagName || null, attrs || null);\n    if (getFirstTemplatePass()) {\n        tNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    attachPatchData(native, lView);\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode((/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(tView, tNode);\n    setIsParent(false);\n}\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nfunction container(index) {\n    /** @type {?} */\n    const tNode = containerInternal(index, null, null);\n    getFirstTemplatePass() && (tNode.tViews = []);\n    setIsParent(false);\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    /** @type {?} */\n    const lContainer = lView[adjustedIndex] =\n        createLContainer(lView[adjustedIndex], tNode, lView, comment);\n    appendChild(comment, tNode, lView);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(lView, index + HEADER_OFFSET, lContainer);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer[QUERIES] = currentQueries.container();\n    }\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nfunction containerRefreshStart(index) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    let previousOrParentTNode = (/** @type {?} */ (loadInternal(tView.data, index)));\n    setPreviousOrParentTNode(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setIsParent(true);\n    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    // We need to execute init hooks here so ngOnInit hooks are called in top level views\n    // before they are called in embedded views (for backwards compatibility).\n    executeInitHooks(lView, tView, getCheckNoChangesMode());\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n * @return {?}\n */\nfunction containerRefreshEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    const lContainer = getLView()[previousOrParentTNode.index];\n    /** @type {?} */\n    const nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, (/** @type {?} */ (previousOrParentTNode)), nextIndex);\n    }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (let current = getLViewChild(lView); current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            /** @type {?} */\n            const container = (/** @type {?} */ (current));\n            for (let i = 0; i < container[VIEWS].length; i++) {\n                /** @type {?} */\n                const dynamicViewData = container[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], (/** @type {?} */ (dynamicViewData[CONTEXT])));\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} tContainerNode to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, tContainerNode, startIdx, viewBlockId) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    for (let i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        const viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, tContainerNode, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nfunction embeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    // The previous node can be a view node if we are processing an inline for loop\n    /** @type {?} */\n    const containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n        (/** @type {?} */ (previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[containerTNode.index]));\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    let viewToRender = scanForView(lContainer, (/** @type {?} */ (containerTNode)), (/** @type {?} */ (lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        setIsParent(true);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, (/** @type {?} */ (containerTNode))), null, 4 /* CheckAlways */);\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = (/** @type {?} */ (lContainer[QUERIES])).createView();\n        }\n        createViewNode(viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (isCreationMode(viewToRender)) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, lView, (/** @type {?} */ (lContainer[ACTIVE_INDEX])), -1);\n        }\n        (/** @type {?} */ (lContainer[ACTIVE_INDEX]))++;\n    }\n    return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    const containerTViews = (/** @type {?} */ (parent.tViews));\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nfunction embeddedViewEnd() {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const viewHost = lView[HOST_NODE];\n    if (isCreationMode(lView)) {\n        refreshDescendantViews(lView); // creation mode pass\n        lView[FLAGS] &= ~1 /* CreationMode */;\n    }\n    refreshDescendantViews(lView); // update mode pass\n    leaveView((/** @type {?} */ (lView[PARENT])));\n    setPreviousOrParentTNode((/** @type {?} */ (viewHost)));\n    setIsParent(false);\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n * @return {?}\n */\nfunction componentRefresh(adjustedElementIndex) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n    /** @type {?} */\n    const hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n    ngDevMode && assertNodeType((/** @type {?} */ (lView[TVIEW].data[adjustedElementIndex])), 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttached(hostView) && hostView[FLAGS] & (4 /* CheckAlways */ | 8 /* Dirty */)) {\n        syncViewWithBlueprint(hostView);\n        checkView(hostView, hostView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    const componentTView = componentView[TVIEW];\n    for (let i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nfunction viewAttached(view) {\n    return (view[FLAGS] & 16 /* Attached */) === 16 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nfunction projectionDef(selectors, textSelectors) {\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (findComponentView(getLView())[HOST_NODE]));\n    if (!componentNode.projection) {\n        /** @type {?} */\n        const noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        const pData = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        const tails = pData.slice();\n        /** @type {?} */\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            const bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, (/** @type {?} */ (textSelectors))) : 0;\n            /** @type {?} */\n            const nextNode = componentChild.next;\n            if (tails[bucketIndex]) {\n                (/** @type {?} */ (tails[bucketIndex])).next = componentChild;\n            }\n            else {\n                pData[bucketIndex] = componentChild;\n                componentChild.next = null;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = nextNode;\n        }\n    }\n}\n/**\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack$1 = [];\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nfunction projection(nodeIndex, selectorIndex = 0, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsParent(false);\n    // re-distribution of projectable nodes is stored on a component's view level\n    /** @type {?} */\n    const componentView = findComponentView(lView);\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (componentView[HOST_NODE]));\n    /** @type {?} */\n    let nodeToProject = ((/** @type {?} */ (componentNode.projection)))[selectorIndex];\n    /** @type {?} */\n    let projectedView = (/** @type {?} */ (componentView[PARENT]));\n    /** @type {?} */\n    let projectionNodeIndex = -1;\n    while (nodeToProject) {\n        if (nodeToProject.type === 1 /* Projection */) {\n            // This node is re-projected, so we must go up the tree to get its projected nodes.\n            /** @type {?} */\n            const currentComponentView = findComponentView(projectedView);\n            /** @type {?} */\n            const currentComponentHost = (/** @type {?} */ (currentComponentView[HOST_NODE]));\n            /** @type {?} */\n            const firstProjectedNode = ((/** @type {?} */ (currentComponentHost.projection)))[(/** @type {?} */ (nodeToProject.projection))];\n            if (firstProjectedNode) {\n                projectionNodeStack$1[++projectionNodeIndex] = nodeToProject;\n                projectionNodeStack$1[++projectionNodeIndex] = projectedView;\n                nodeToProject = firstProjectedNode;\n                projectedView = (/** @type {?} */ (currentComponentView[PARENT]));\n                continue;\n            }\n        }\n        else {\n            // This flag must be set now or we won't know that this node is projected\n            // if the nodes are inserted into a container later.\n            nodeToProject.flags |= 2 /* isProjected */;\n            appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n        }\n        // If we are finished with a list of re-projected nodes, we need to get\n        // back to the root projection node that was re-projected.\n        if (nodeToProject.next === null && projectedView !== (/** @type {?} */ (componentView[PARENT]))) {\n            projectedView = (/** @type {?} */ (projectionNodeStack$1[projectionNodeIndex--]));\n            nodeToProject = (/** @type {?} */ (projectionNodeStack$1[projectionNodeIndex--]));\n        }\n        nodeToProject = nodeToProject.next;\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} lView The view where LView or LContainer should be added\n * @param {?} adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param {?} state The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nfunction addToViewTree(lView, adjustedHostIndex, state) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const firstTemplatePass = getFirstTemplatePass();\n    if (lView[TAIL]) {\n        (/** @type {?} */ (lView[TAIL]))[NEXT] = state;\n    }\n    else if (firstTemplatePass) {\n        tView.childIndex = adjustedHostIndex;\n    }\n    lView[TAIL] = state;\n    return state;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} lView\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    /** @type {?} */\n    const childComponentLView = getComponentViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 4 /* CheckAlways */)) {\n        childComponentLView[FLAGS] |= 8 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener with preventDefault behavior.\n * @param {?} listenerFn\n * @return {?}\n */\nfunction wrapListenerWithPreventDefault(listenerFn) {\n    return function wrapListenerIn_preventDefault(e) {\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} lView\n * @return {?}\n */\nfunction markViewDirty(lView) {\n    while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n        lView[FLAGS] |= 8 /* Dirty */;\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    lView[FLAGS] |= 8 /* Dirty */;\n    ngDevMode && assertDefined(lView[CONTEXT], 'rootContext should be defined');\n    /** @type {?} */\n    const rootContext = (/** @type {?} */ (lView[CONTEXT]));\n    scheduleTick(rootContext, 1 /* DetectChanges */);\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nfunction scheduleTick(rootContext, flags) {\n    /** @type {?} */\n    const nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        let res;\n        rootContext.clean = new Promise((r) => res = r);\n        rootContext.scheduler(() => {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                const playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE;\n            (/** @type {?} */ (res))(null);\n        });\n    }\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (let i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        const rootComponent = rootContext.components[i];\n        renderComponentOrTemplate((/** @type {?} */ (readPatchedLView(rootComponent))), rootComponent);\n    }\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChanges(component) {\n    /** @type {?} */\n    const view = (/** @type {?} */ (getComponentViewByInstance(component)));\n    detectChangesInternal(view, component);\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nfunction detectChangesInternal(view, context) {\n    /** @type {?} */\n    const rendererFactory = view[RENDERER_FACTORY];\n    if (rendererFactory.begin)\n        rendererFactory.begin();\n    if (isCreationMode(view)) {\n        checkView(view, context); // creation mode pass\n    }\n    checkView(view, context); // update mode pass\n    if (rendererFactory.end)\n        rendererFactory.end();\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lView The view which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChangesInRootView(lView) {\n    tickRootContext((/** @type {?} */ (lView[CONTEXT])));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction checkNoChanges(component) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChanges(component);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lView The view which the change detection should be checked on.\n * @return {?}\n */\nfunction checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @return {?}\n */\nfunction checkView(hostView, component) {\n    /** @type {?} */\n    const hostTView = hostView[TVIEW];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[HOST_NODE]);\n    /** @type {?} */\n    const templateFn = (/** @type {?} */ (hostTView.template));\n    /** @type {?} */\n    const viewQuery = hostTView.viewQuery;\n    try {\n        namespaceHTML();\n        createViewQuery(viewQuery, hostView, component);\n        templateFn(getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView);\n        updateViewQuery(viewQuery, hostView, component);\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} view\n * @param {?} component\n * @return {?}\n */\nfunction createViewQuery(viewQuery, view, component) {\n    if (viewQuery && isCreationMode(view)) {\n        viewQuery(1 /* Create */, component);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} view\n * @param {?} component\n * @return {?}\n */\nfunction updateViewQuery(viewQuery, view, component) {\n    if (viewQuery && !isCreationMode(view)) {\n        viewQuery(2 /* Update */, component);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * \\@publicApi\n * @template T\n * @param {?} component Component to mark as dirty.\n *\n * @return {?}\n */\nfunction markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    markViewDirty(getComponentViewByInstance(component));\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nfunction bind(value) {\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated(lView, lView[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * @param {?} count Amount of vars to be allocated\n * @return {?}\n */\nfunction allocHostVars(count) {\n    if (!getFirstTemplatePass())\n        return;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    queueHostBindingForCheck(tView, (/** @type {?} */ (getCurrentDirectiveDef())), count);\n    prefillHostVars(tView, lView, count);\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nfunction interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let bindingIndex = lView[BINDING_INDEX];\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n    }\n    lView[BINDING_INDEX] = bindingIndex;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    /** @type {?} */\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += stringify$1(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nfunction interpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated(lView, lView[BINDING_INDEX], v0);\n    lView[BINDING_INDEX] += 1;\n    return different ? prefix + stringify$1(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated2(lView, lView[BINDING_INDEX], v0, v1);\n    lView[BINDING_INDEX] += 2;\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated3(lView, lView[BINDING_INDEX], v0, v1, v2);\n    lView[BINDING_INDEX] += 3;\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, lView[BINDING_INDEX], v0, v1, v2, v3);\n    lView[BINDING_INDEX] += 4;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    lView[BINDING_INDEX] += 5;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    lView[BINDING_INDEX] += 6;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    lView[BINDING_INDEX] += 7;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    lView[BINDING_INDEX] += 8;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + i6 + stringify$1(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction store(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n    }\n    lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nfunction reference(index) {\n    /** @type {?} */\n    const contextLView = getContextLView();\n    return loadInternal(contextLView, index);\n}\n/**\n * @template T\n * @param {?} queryListIdx\n * @return {?}\n */\nfunction loadQueryList(queryListIdx) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode &&\n        assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    ngDevMode && assertDataInRange((/** @type {?} */ (lView[CONTENT_QUERIES])), queryListIdx);\n    return (/** @type {?} */ (lView[CONTENT_QUERIES]))[queryListIdx];\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nfunction load(index) {\n    return loadInternal(getLView(), index);\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction directiveInject(token, flags = InjectFlags.Default) {\n    token = resolveForwardRef(token);\n    return getOrCreateInjectable((/** @type {?} */ (getPreviousOrParentTNode())), getLView(), token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n * @template Q\n * @param {?} queryList\n * @param {?} currentDirectiveIndex\n * @return {?}\n */\nfunction registerContentQuery(queryList, currentDirectiveIndex) {\n    /** @type {?} */\n    const viewData = getLView();\n    /** @type {?} */\n    const tView = viewData[TVIEW];\n    /** @type {?} */\n    const savedContentQueriesLength = (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n    if (getFirstTemplatePass()) {\n        /** @type {?} */\n        const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        const lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n        if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n        }\n    }\n}\n/** @type {?} */\nconst CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nfunction getCurrentView() {\n    return (/** @type {?} */ ((/** @type {?} */ (getLView()))));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param {?} ref The element, directive or component that the player will be placed on.\n * @param {?} player The player that will be triggered to play once change detection has run.\n * @return {?}\n */\nfunction addPlayer(ref, player) {\n    /** @type {?} */\n    const context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return;\n    }\n    /** @type {?} */\n    const element$$1 = (/** @type {?} */ (context.native));\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const playerContext = (/** @type {?} */ (getOrCreatePlayerContext(element$$1, context)));\n    /** @type {?} */\n    const rootContext = getRootContext$1(lView);\n    addPlayerInternal(playerContext, rootContext, element$$1, player, 0, ref);\n    scheduleTick(rootContext, 2 /* FlushPlayers */);\n}\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * \\@publicApi\n * @param {?} ref\n * @return {?}\n */\nfunction getPlayers(ref) {\n    /** @type {?} */\n    const context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return [];\n    }\n    /** @type {?} */\n    const stylingContext = getStylingContext(context.nodeIndex, context.lView);\n    /** @type {?} */\n    const playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n    return playerContext ? getPlayersInternal(playerContext) : [];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n *\n * @type {?}\n */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n/*\n * Publishes a collection of default debug tools onto `window._ng_`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\n/** @type {?} */\nlet _published = false;\n/**\n * @return {?}\n */\nfunction publishDefaultGlobalUtils() {\n    if (!_published) {\n        _published = true;\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getContext', getContext);\n        publishGlobalUtil('getListeners', getListeners);\n        publishGlobalUtil('getViewComponent', getViewComponent);\n        publishGlobalUtil('getHostElement', getHostElement);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n        publishGlobalUtil('getPlayers', getPlayers);\n        publishGlobalUtil('markDirty', markDirty);\n    }\n}\n/**\n * Publishes the given function to `window.ngDevMode` so that it can be\n * used from the browser console when an application is not in production.\n * @param {?} name\n * @param {?} fn\n * @return {?}\n */\nfunction publishGlobalUtil(name, fn) {\n    /** @type {?} */\n    const w = (/** @type {?} */ ((/** @type {?} */ (_global))));\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n        /** @type {?} */\n        let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n        if (!container) {\n            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n        }\n        container[name] = fn;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    const rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    const sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    const componentDef = (/** @type {?} */ (getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    // The first index of the first selector is the tag name.\n    /** @type {?} */\n    const componentTag = (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (componentDef.selectors))[0]))[0]));\n    /** @type {?} */\n    const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    const rootFlags = componentDef.onPush ? 8 /* Dirty */ | 128 /* IsRoot */ :\n        4 /* CheckAlways */ | 128 /* IsRoot */;\n    /** @type {?} */\n    const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    const rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, undefined, opts.injector || null);\n    /** @type {?} */\n    const oldView = enterView(rootView, null);\n    /** @type {?} */\n    let component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        refreshDescendantViews(rootView); // creation mode pass\n        rootView[FLAGS] &= ~1 /* CreationMode */;\n        refreshDescendantViews(rootView); // update mode pass\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} rendererFactory\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    /** @type {?} */\n    const componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery), null, def.onPush ? 8 /* Dirty */ : 4 /* CheckAlways */, rendererFactory, renderer, sanitizer);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 1 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    componentView[HOST] = rootView[HEADER_OFFSET];\n    componentView[HOST_NODE] = (/** @type {?} */ (tNode));\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nfunction createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    /** @type {?} */\n    const component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        /** @type {?} */\n        const rootTNode = getPreviousOrParentTNode();\n        setCurrentDirectiveDef(componentDef);\n        componentDef.hostBindings(1 /* Create */, component, rootTNode.index - HEADER_OFFSET);\n        setCurrentDirectiveDef(null);\n    }\n    return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nfunction createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nfunction LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    const rootTView = (/** @type {?} */ (readPatchedLView(component)))[TVIEW];\n    /** @type {?} */\n    const dirIndex = rootTView.data.length - 1;\n    queueInitHooks(dirIndex, def.onInit, def.doCheck, rootTView);\n    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n    // LNode).\n    queueLifecycleHooks(rootTView, (/** @type {?} */ ({ directiveStart: dirIndex, directiveEnd: dirIndex + 1 })));\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext$2(component) {\n    /** @type {?} */\n    const rootContext = (/** @type {?} */ (getRootView(component)[CONTEXT]));\n    ngDevMode && assertDefined(rootContext, 'rootContext');\n    return rootContext;\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nfunction whenRendered(component) {\n    return getRootContext$2(component).clean;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Determines if a definition is a {\\@link ComponentDef} or a {\\@link DirectiveDef}\n * @template T\n * @param {?} definition The definition to examine\n * @return {?}\n */\nfunction isComponentDef$1(definition) {\n    /** @type {?} */\n    const def = (/** @type {?} */ (definition));\n    return typeof def.template === 'function';\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nfunction InheritDefinitionFeature(definition) {\n    /** @type {?} */\n    let superType = getSuperType(definition.type);\n    while (superType) {\n        /** @type {?} */\n        let superDef = undefined;\n        if (isComponentDef$1(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        const baseDef = ((/** @type {?} */ (superType))).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            const writeableDef = (/** @type {?} */ (definition));\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            // Merge hostBindings\n            /** @type {?} */\n            const prevHostBindings = definition.hostBindings;\n            /** @type {?} */\n            const superHostBindings = superDef.hostBindings;\n            if (superHostBindings) {\n                if (prevHostBindings) {\n                    definition.hostBindings = (rf, ctx, elementIndex) => {\n                        superHostBindings(rf, ctx, elementIndex);\n                        prevHostBindings(rf, ctx, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings;\n                }\n            }\n            // Merge View Queries\n            if (isComponentDef$1(definition) && isComponentDef$1(superDef)) {\n                /** @type {?} */\n                const prevViewQuery = definition.viewQuery;\n                /** @type {?} */\n                const superViewQuery = superDef.viewQuery;\n                if (superViewQuery) {\n                    if (prevViewQuery) {\n                        definition.viewQuery = (rf, ctx) => {\n                            superViewQuery(rf, ctx);\n                            prevViewQuery(rf, ctx);\n                        };\n                    }\n                    else {\n                        definition.viewQuery = superViewQuery;\n                    }\n                }\n            }\n            // Merge Content Queries\n            /** @type {?} */\n            const prevContentQueries = definition.contentQueries;\n            /** @type {?} */\n            const superContentQueries = superDef.contentQueries;\n            if (superContentQueries) {\n                if (prevContentQueries) {\n                    definition.contentQueries = (dirIndex) => {\n                        superContentQueries(dirIndex);\n                        prevContentQueries(dirIndex);\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries;\n                }\n            }\n            // Merge Content Queries Refresh\n            /** @type {?} */\n            const prevContentQueriesRefresh = definition.contentQueriesRefresh;\n            /** @type {?} */\n            const superContentQueriesRefresh = superDef.contentQueriesRefresh;\n            if (superContentQueriesRefresh) {\n                if (prevContentQueriesRefresh) {\n                    definition.contentQueriesRefresh = (directiveIndex, queryIndex) => {\n                        superContentQueriesRefresh(directiveIndex, queryIndex);\n                        prevContentQueriesRefresh(directiveIndex, queryIndex);\n                    };\n                }\n                else {\n                    definition.contentQueriesRefresh = superContentQueriesRefresh;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            // Run parent features\n            /** @type {?} */\n            const features = superDef.features;\n            if (features) {\n                for (const feature of features) {\n                    if (feature && feature.ngInherit) {\n                        ((/** @type {?} */ (feature)))(definition);\n                    }\n                }\n            }\n            break;\n        }\n        else {\n            // Even if we don't have a definition, check the type for the hooks and use those if need be\n            /** @type {?} */\n            const superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.afterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.afterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.doCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n                definition.onInit = definition.onInit || superPrototype.onInit;\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRIVATE_PREFIX = '__ngOnChanges_';\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n * @template T\n * @param {?} definition\n * @return {?}\n */\nfunction NgOnChangesFeature(definition) {\n    /** @type {?} */\n    const publicToDeclaredInputs = definition.declaredInputs;\n    /** @type {?} */\n    const publicToMinifiedInputs = definition.inputs;\n    /** @type {?} */\n    const proto = definition.type.prototype;\n    for (const publicName in publicToDeclaredInputs) {\n        if (publicToDeclaredInputs.hasOwnProperty(publicName)) {\n            /** @type {?} */\n            const minifiedKey = publicToMinifiedInputs[publicName];\n            /** @type {?} */\n            const declaredKey = publicToDeclaredInputs[publicName];\n            /** @type {?} */\n            const privateMinKey = PRIVATE_PREFIX + minifiedKey;\n            // Walk the prototype chain to see if we find a property descriptor\n            // That way we can honor setters and getters that were inherited.\n            /** @type {?} */\n            let originalProperty = undefined;\n            /** @type {?} */\n            let checkProto = proto;\n            while (!originalProperty && checkProto &&\n                Object.getPrototypeOf(checkProto) !== Object.getPrototypeOf(Object.prototype)) {\n                originalProperty = Object.getOwnPropertyDescriptor(checkProto, minifiedKey);\n                checkProto = Object.getPrototypeOf(checkProto);\n            }\n            /** @type {?} */\n            const getter = originalProperty && originalProperty.get;\n            /** @type {?} */\n            const setter = originalProperty && originalProperty.set;\n            // create a getter and setter for property\n            Object.defineProperty(proto, minifiedKey, {\n                get: getter ||\n                    (setter ? undefined : function () { return this[privateMinKey]; }),\n                /**\n                 * @template T\n                 * @this {?}\n                 * @param {?} value\n                 * @return {?}\n                 */\n                set(value) {\n                    /** @type {?} */\n                    let simpleChanges = this[PRIVATE_PREFIX];\n                    if (!simpleChanges) {\n                        simpleChanges = {};\n                        // Place where we will store SimpleChanges if there is a change\n                        Object.defineProperty(this, PRIVATE_PREFIX, { value: simpleChanges, writable: true });\n                    }\n                    /** @type {?} */\n                    const isFirstChange = !this.hasOwnProperty(privateMinKey);\n                    /** @type {?} */\n                    const currentChange = simpleChanges[declaredKey];\n                    if (currentChange) {\n                        currentChange.currentValue = value;\n                    }\n                    else {\n                        simpleChanges[declaredKey] =\n                            new SimpleChange(this[privateMinKey], value, isFirstChange);\n                    }\n                    if (isFirstChange) {\n                        // Create a place where the actual value will be stored and make it non-enumerable\n                        Object.defineProperty(this, privateMinKey, { value, writable: true });\n                    }\n                    else {\n                        this[privateMinKey] = value;\n                    }\n                    if (setter)\n                        setter.call(this, value);\n                },\n                // Make the property configurable in dev mode to allow overriding in tests\n                configurable: !!ngDevMode\n            });\n        }\n    }\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n        definition.onInit = onChangesWrapper(definition.onInit);\n    }\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n((/** @type {?} */ (NgOnChangesFeature))).ngInherit = true;\n/**\n * @param {?} delegateHook\n * @return {?}\n */\nfunction onChangesWrapper(delegateHook) {\n    return function () {\n        /** @type {?} */\n        const simpleChanges = this[PRIVATE_PREFIX];\n        if (simpleChanges != null) {\n            this.ngOnChanges(simpleChanges);\n            this[PRIVATE_PREFIX] = null;\n        }\n        if (delegateHook)\n            delegateHook.apply(this);\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {...?} args\n * @return {?}\n */\nfunction noop(...args) {\n    // Do nothing.\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SOURCE = '__source';\n/** @type {?} */\nconst _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n * @type {?}\n */\nconst INJECTOR$1 = new InjectionToken('INJECTOR');\nclass NullInjector {\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = _THROW_IF_NOT_FOUND) {\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            throw new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n        }\n        return notFoundValue;\n    }\n}\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nclass Injector {\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    }\n}\nInjector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nInjector.NULL = new NullInjector();\n/** @nocollapse */\n/** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n    providedIn: (/** @type {?} */ ('any')),\n    factory: () => inject(INJECTOR$1),\n});\n/**\n * \\@internal\n */\nInjector.__NG_ELEMENT_ID__ = () => SWITCH_INJECTOR_FACTORY();\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY__POST_R3__ = function () {\n    return injectInjector();\n};\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY = SWITCH_INJECTOR_FACTORY__PRE_R3__;\n/** @type {?} */\nconst IDENT = function (value) {\n    return value;\n};\n/** @type {?} */\nconst EMPTY = (/** @type {?} */ ([]));\n/** @type {?} */\nconst CIRCULAR = IDENT;\n/** @type {?} */\nconst MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\n/** @type {?} */\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n/** @type {?} */\nconst NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @type {?} */\nconst NULL_INJECTOR$1 = Injector.NULL;\n/** @type {?} */\nconst NEW_LINE = /\\n/gm;\n/** @type {?} */\nconst NO_NEW_LINE = 'ɵ';\nclass StaticInjector {\n    /**\n     * @param {?} providers\n     * @param {?=} parent\n     * @param {?=} source\n     */\n    constructor(providers, parent = NULL_INJECTOR$1, source = null) {\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        const records = this._records = new Map();\n        records.set(Injector, (/** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        records.set(INJECTOR$1, (/** @type {?} */ ({ token: INJECTOR$1, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue, flags = InjectFlags.Default) {\n        /** @type {?} */\n        const record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            /** @type {?} */\n            const tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const tokens = (/** @type {?} */ ([]));\n        /** @type {?} */\n        const records = this._records;\n        records.forEach((v, token) => tokens.push(stringify(token)));\n        return `StaticInjector[${tokens.join(', ')}]`;\n    }\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    const deps = computeDeps(provider);\n    /** @type {?} */\n    let fn = IDENT;\n    /** @type {?} */\n    let value = EMPTY;\n    /** @type {?} */\n    let useNew = false;\n    /** @type {?} */\n    let provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = ((/** @type {?} */ (provider))).useValue;\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        fn = ((/** @type {?} */ (provider))).useFactory;\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) ;\n    else if (((/** @type {?} */ (provider))).useClass) {\n        useNew = true;\n        fn = resolveForwardRef(((/** @type {?} */ (provider))).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps, fn, useNew, value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            /** @type {?} */\n            let token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                /** @type {?} */\n                let multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = (/** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    })));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            const record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    /** @type {?} */\n    let value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            let obj = undefined;\n            /** @type {?} */\n            let useNew = record.useNew;\n            /** @type {?} */\n            let fn = record.fn;\n            /** @type {?} */\n            let depRecords = record.deps;\n            /** @type {?} */\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    const depRecord = depRecords[i];\n                    /** @type {?} */\n                    const options = depRecord.options;\n                    /** @type {?} */\n                    const childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR$1 : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((/** @type {?} */ (fn)))(...deps) : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    let deps = EMPTY;\n    /** @type {?} */\n    const providerDeps = ((/** @type {?} */ (provider))).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            let options = 6 /* Default */;\n            /** @type {?} */\n            let token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = ((/** @type {?} */ (annotation))).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token, options });\n        }\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const token = resolveForwardRef(((/** @type {?} */ (provider))).useExisting);\n        deps = [{ token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    let context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        let parts = (/** @type {?} */ ([]));\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `StaticInjectorError${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n * @type {?}\n */\nconst APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n * @type {?}\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n * @type {?}\n */\nconst CIRCULAR$1 = {};\n/** @type {?} */\nconst EMPTY_ARRAY$1 = (/** @type {?} */ ([]));\n/**\n * A lazily initialized NullInjector.\n * @type {?}\n */\nlet NULL_INJECTOR$2 = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR$2 === undefined) {\n        NULL_INJECTOR$2 = new NullInjector();\n    }\n    return NULL_INJECTOR$2;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @return {?}\n */\nfunction createInjector(defType, parent = null, additionalProviders = null) {\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent);\n}\nclass R3Injector {\n    /**\n     * @param {?} def\n     * @param {?} additionalProviders\n     * @param {?} parent\n     */\n    constructor(def, additionalProviders, parent) {\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        this.destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        /** @type {?} */\n        const dedupStack = [];\n        deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));\n        additionalProviders && deepForEach(additionalProviders, provider => this.processProvider(provider, def, additionalProviders));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR$1, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(defType => this.get(defType));\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this.destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(service => service.ngOnDestroy());\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    }\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        // Set the injection context.\n        /** @type {?} */\n        const previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                /** @type {?} */\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                    // with a scope matching this injector.\n                    /** @type {?} */\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            /** @type {?} */\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, notFoundValue);\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    assertNotDestroyed() {\n        if (this.destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @private\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @param {?} dedupStack\n     * @return {?}\n     */\n    processInjectorType(defOrWrappedDef, parents, dedupStack) {\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return;\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n        // read, so care is taken to only do the read once.\n        // First attempt to read the ngInjectorDef.\n        /** @type {?} */\n        let def = getInjectorDef(defOrWrappedDef);\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n        /** @type {?} */\n        const ngModule = (def == null) && ((/** @type {?} */ (defOrWrappedDef))).ngModule || undefined;\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n        // is the `ngModule`.\n        /** @type {?} */\n        const defType = (ngModule === undefined) ? ((/** @type {?} */ (defOrWrappedDef))) : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            /** @type {?} */\n            const defName = stringify(defType);\n            throw new Error(`Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map(defType => stringify(defType)).join(' > ')} > ${defName}.`);\n        }\n        // Check for multiple imports of the same module\n        /** @type {?} */\n        const isDuplicate = dedupStack.indexOf(defType) !== -1;\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n        // extra providers.\n        /** @type {?} */\n        const providers = (ngModule !== undefined) && ((/** @type {?} */ (defOrWrappedDef))).providers ||\n            EMPTY_ARRAY$1;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory, NOT_YET));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            try {\n                deepForEach(def.imports, imported => this.processInjectorType(imported, parents, dedupStack));\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        /** @type {?} */\n        const defProviders = def.providers;\n        if (defProviders != null && !isDuplicate) {\n            /** @type {?} */\n            const injectorType = (/** @type {?} */ (defOrWrappedDef));\n            deepForEach(defProviders, provider => this.processProvider(provider, injectorType, defProviders));\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        /** @type {?} */\n        const ngModuleType = ((/** @type {?} */ (defOrWrappedDef))).ngModule;\n        deepForEach(providers, provider => this.processProvider(provider, ngModuleType, providers));\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     * @private\n     * @param {?} provider\n     * @param {?} ngModuleType\n     * @param {?} providers\n     * @return {?}\n     */\n    processProvider(provider, ngModuleType, providers) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        /** @type {?} */\n        const record = providerToRecord(provider, ngModuleType, providers);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            /** @type {?} */\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (multiRecord.multi === undefined) {\n                    throw new Error(`Mixed multi-provider for ${token}.`);\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = () => injectArgs((/** @type {?} */ ((/** @type {?} */ (multiRecord)).multi)));\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            (/** @type {?} */ (multiRecord.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            const existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(`Mixed multi-provider for ${stringify(token)}`);\n            }\n        }\n        this.records.set(token, record);\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    hydrate(token, record) {\n        if (record.value === CIRCULAR$1) {\n            throw new Error(`Cannot instantiate cyclic dependency! ${stringify(token)}`);\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR$1;\n            record.value = (/** @type {?} */ (record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return (/** @type {?} */ (record.value));\n    }\n    /**\n     * @private\n     * @param {?} def\n     * @return {?}\n     */\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    }\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefOrInjectorDefFactory(token) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef((/** @type {?} */ (token)));\n    if (injectableDef === null) {\n        /** @type {?} */\n        const injectorDef = getInjectorDef((/** @type {?} */ (token)));\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        else if (token instanceof InjectionToken) {\n            throw new Error(`Token ${stringify(token)} is missing an ngInjectableDef definition.`);\n        }\n        else if (token instanceof Function) {\n            /** @type {?} */\n            const paramLength = token.length;\n            if (paramLength > 0) {\n                /** @type {?} */\n                const args = new Array(paramLength).fill('?');\n                throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n            }\n            return () => new ((/** @type {?} */ (token)))();\n        }\n        throw new Error('unreachable');\n    }\n    return injectableDef.factory;\n}\n/**\n * @param {?} provider\n * @param {?} ngModuleType\n * @param {?} providers\n * @return {?}\n */\nfunction providerToRecord(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = providerToFactory(provider, ngModuleType, providers);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @param {?=} ngModuleType\n * @param {?=} providers\n * @return {?}\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = () => resolveForwardRef(provider.useValue);\n        }\n        else if (isExistingProvider(provider)) {\n            factory = () => inject(resolveForwardRef(provider.useExisting));\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n        }\n        else {\n            /** @type {?} */\n            const classRef = resolveForwardRef(provider &&\n                (((/** @type {?} */ (provider))).useClass || provider.provide));\n            if (!classRef) {\n                /** @type {?} */\n                let ngModuleDetail = '';\n                if (ngModuleType && providers) {\n                    /** @type {?} */\n                    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n                    ngModuleDetail =\n                        ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n                }\n                throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n            }\n            if (hasDeps(provider)) {\n                factory = () => new (classRef)(...injectArgs(provider.deps));\n            }\n            else {\n                return injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return value && typeof value == 'object' && USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useExisting);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useFactory);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!((/** @type {?} */ (value))).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return typeof value === 'object' && value != null && ((/** @type {?} */ (value))).ngOnDestroy &&\n        typeof ((/** @type {?} */ (value))).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nfunction providersResolver(def, providers, viewProviders) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const isComponent$$1 = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent$$1, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider$1(providers, tView.data, tView.blueprint, isComponent$$1, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent$$1, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent$$1, isViewProvider);\n        }\n    }\n    else {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        let providerFactory = providerToFactory(provider);\n        /** @type {?} */\n        const tNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        /** @type {?} */\n        const endIndex = tNode.directiveStart;\n        /** @type {?} */\n        const cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            /** @type {?} */\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, directiveInject);\n            /** @type {?} */\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            /** @type {?} */\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            /** @type {?} */\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            /** @type {?} */\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            /** @type {?} */\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                /** @type {?} */\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent$$1, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd((/** @type {?} */ (lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent$$1);\n            }\n            if (!isViewProvider && isComponent$$1 && doesViewProvidersFactoryExist) {\n                (/** @type {?} */ (lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    (/** @type {?} */ (multiFactory.multi)).push(factory);\n    if (isComponentProvider) {\n        (/** @type {?} */ (multiFactory.componentProviders))++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve((/** @type {?} */ (this.multi)), []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    /** @type {?} */\n    const factories = (/** @type {?} */ (this.multi));\n    /** @type {?} */\n    let result;\n    if (this.providerFactory) {\n        /** @type {?} */\n        const componentCount = (/** @type {?} */ (this.providerFactory.componentProviders));\n        /** @type {?} */\n        const multiProviders = getNodeInjectable(tData, lData, (/** @type {?} */ ((/** @type {?} */ (this.providerFactory)).index)), tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        /** @type {?} */\n        const factory = (/** @type {?} */ ((/** @type {?} */ (factories[i]))));\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent$$1, f) {\n    /** @type {?} */\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, directiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent$$1 && !isViewProvider);\n    return factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nfunction ProvidersFeature(providers, viewProviders = []) {\n    return (definition) => {\n        definition.providersResolver = (def) => providersResolver(def, providers, viewProviders);\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentRef {\n}\n/**\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} component\n * @return {?}\n */\nfunction noComponentFactoryError(component) {\n    /** @type {?} */\n    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n    ((/** @type {?} */ (error)))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nconst ERROR_COMPONENT = 'ngComponent';\nclass _NullComponentFactoryResolver {\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * \\@publicApi\n * @abstract\n */\nclass ComponentFactoryResolver {\n}\nComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\nclass CodegenComponentFactoryResolver {\n    /**\n     * @param {?} factories\n     * @param {?} _parent\n     * @param {?} _ngModule\n     */\n    constructor(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (let i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            const factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        /** @type {?} */\n        let factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    }\n}\n/**\n * @template C\n */\nclass ComponentFactoryBoundToModule extends ComponentFactory {\n    /**\n     * @param {?} factory\n     * @param {?} ngModule\n     */\n    constructor(factory, ngModule) {\n        super();\n        this.factory = factory;\n        this.ngModule = ngModule;\n        this.selector = factory.selector;\n        this.componentType = factory.componentType;\n        this.ngContentSelectors = factory.ngContentSelectors;\n        this.inputs = factory.inputs;\n        this.outputs = factory.outputs;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleRef {\n}\n/**\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ViewRef {\n    /**\n     * @param {?} _lView\n     * @param {?} _context\n     * @param {?} _componentIndex\n     */\n    constructor(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() {\n        if (this._lView[HOST] == null) {\n            /** @type {?} */\n            const tView = (/** @type {?} */ (this._lView[HOST_NODE]));\n            return collectNativeNodes(this._lView, tView, []);\n        }\n        return [];\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return this._context ? this._context : this._lookUpContext(); }\n    /**\n     * @return {?}\n     */\n    get destroyed() {\n        return (this._lView[FLAGS] & 64 /* Destroyed */) === 64 /* Destroyed */;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(this);\n            if (index > -1) {\n                this._viewContainerRef.detach(index);\n            }\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { storeCleanupFn(this._lView, callback); }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    markForCheck() { markViewDirty(this._lView); }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *  /\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    detach() { this._lView[FLAGS] &= ~16 /* Attached */; }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *  /\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    reattach() { this._lView[FLAGS] |= 16 /* Attached */; }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    detectChanges() { detectChangesInternal(this._lView, this.context); }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChanges(this.context); }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() { this._appRef = null; }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _lookUpContext() {\n        return this._context = (/** @type {?} */ ((/** @type {?} */ (this._lView[PARENT]))[this._componentIndex]));\n    }\n}\n/**\n * \\@internal\n * @template T\n */\nclass RootViewRef extends ViewRef {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        super(_view, null, -1);\n        this._view = _view;\n    }\n    /**\n     * @return {?}\n     */\n    detectChanges() { detectChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return (/** @type {?} */ (null)); }\n}\n/**\n * @param {?} lView\n * @param {?} parentTNode\n * @param {?} result\n * @return {?}\n */\nfunction collectNativeNodes(lView, parentTNode, result) {\n    /** @type {?} */\n    let tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        result.push(getNativeByTNode(tNodeChild, lView));\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nfunction injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/** @type {?} */\nlet R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nfunction createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = class ElementRef_ extends ElementRefToken {\n        };\n    }\n    return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n/** @type {?} */\nlet R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nfunction injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nfunction createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = class TemplateRef_ extends TemplateRefToken {\n            /**\n             * @param {?} _declarationParentView\n             * @param {?} elementRef\n             * @param {?} _tView\n             * @param {?} _renderer\n             * @param {?} _queries\n             * @param {?} _injectorIndex\n             */\n            constructor(_declarationParentView, elementRef, _tView, _renderer, _queries, _injectorIndex) {\n                super();\n                this._declarationParentView = _declarationParentView;\n                this.elementRef = elementRef;\n                this._tView = _tView;\n                this._renderer = _renderer;\n                this._queries = _queries;\n                this._injectorIndex = _injectorIndex;\n            }\n            /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(context, container$$1, hostTNode, hostView, index) {\n                /** @type {?} */\n                const lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._renderer, this._queries, this._injectorIndex);\n                if (container$$1) {\n                    insertView(lView, container$$1, (/** @type {?} */ (hostView)), (/** @type {?} */ (index)), (/** @type {?} */ (hostTNode)).index);\n                }\n                renderEmbeddedTemplate(lView, this._tView, context);\n                /** @type {?} */\n                const viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = (/** @type {?} */ (lView[HOST_NODE]));\n                return viewRef;\n            }\n        };\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        /** @type {?} */\n        const hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), (/** @type {?} */ (hostTNode.tViews)), getLView()[RENDERER], hostContainer[QUERIES], hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\n/** @type {?} */\nlet R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    const previousTNode = (/** @type {?} */ (getPreviousOrParentTNode()));\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nfunction createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n            /**\n             * @param {?} _lContainer\n             * @param {?} _hostTNode\n             * @param {?} _hostView\n             */\n            constructor(_lContainer, _hostTNode, _hostView) {\n                super();\n                this._lContainer = _lContainer;\n                this._hostTNode = _hostTNode;\n                this._hostView = _hostView;\n                this._viewRefs = [];\n            }\n            /**\n             * @return {?}\n             */\n            get element() {\n                return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n            }\n            /**\n             * @return {?}\n             */\n            get injector() { return new NodeInjector(this._hostTNode, this._hostView); }\n            /**\n             * @deprecated No replacement\n             * @return {?}\n             */\n            get parentInjector() {\n                /** @type {?} */\n                const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                /** @type {?} */\n                const parentView = getParentInjectorView(parentLocation, this._hostView);\n                /** @type {?} */\n                const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                return !hasParentInjector(parentLocation) || parentTNode == null ?\n                    new NodeInjector(null, this._hostView) :\n                    new NodeInjector(parentTNode, parentView);\n            }\n            /**\n             * @return {?}\n             */\n            clear() {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            }\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            get(index) { return this._viewRefs[index] || null; }\n            /**\n             * @return {?}\n             */\n            get length() { return this._lContainer[VIEWS].length; }\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(templateRef, context, index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                /** @type {?} */\n                const viewRef = ((/** @type {?} */ (templateRef)))\n                    .createEmbeddedView(context || (/** @type {?} */ ({})), this._lContainer, this._hostTNode, this._hostView, adjustedIdx);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                const contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && ((/** @type {?} */ (componentFactory))).ngModule == null && contextInjector) {\n                    ngModuleRef = contextInjector.get(NgModuleRef, null);\n                }\n                /** @type {?} */\n                const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            insert(viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const lView = (/** @type {?} */ (((/** @type {?} */ (viewRef)))._lView));\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n                /** @type {?} */\n                const beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            move(viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const index = this.indexOf(viewRef);\n                this.detach(index);\n                this.insert(viewRef, this._adjustIndex(newIndex));\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            indexOf(viewRef) { return this._viewRefs.indexOf(viewRef); }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            remove(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, this._hostTNode, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            detach(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                /** @type {?} */\n                const view = detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n                /** @type {?} */\n                const wasDetached = this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n                return wasDetached ? new ViewRef(view, view[CONTEXT], view[CONTAINER_INDEX]) : null;\n            }\n            /**\n             * @private\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            _adjustIndex(index, shift = 0) {\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            }\n        };\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    let lContainer;\n    /** @type {?} */\n    const slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        const commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            /** @type {?} */\n            const renderer = hostView[RENDERER];\n            /** @type {?} */\n            const hostNative = (/** @type {?} */ (getNativeByTNode(hostTNode, hostView)));\n            /** @type {?} */\n            const parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, (/** @type {?} */ (parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostTNode, hostView, commentNode, true);\n        addToViewTree(hostView, (/** @type {?} */ (hostTNode.index)), lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nfunction injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nfunction createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        /** @type {?} */\n        const componentIndex = hostTNode.directiveStart;\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return (/** @type {?} */ (null));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    const renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return (/** @type {?} */ (renderer));\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nfunction injectRenderer2() {\n    return getOrCreateRenderer2(getLView());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n    /**\n     * @param {?} nativeElement\n     */\n    constructor(nativeElement) { this.nativeElement = nativeElement; }\n}\n/**\n * \\@internal\n */\nElementRef.__NG_ELEMENT_ID__ = () => SWITCH_ELEMENT_REF_FACTORY(ElementRef);\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nclass RenderComponentType {\n    /**\n     * @param {?} id\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     */\n    constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nclass RenderDebugInfo {\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nclass Renderer {\n}\n/** @type {?} */\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nclass RootRenderer {\n}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nclass RendererFactory2 {\n}\n/** @enum {number} */\nconst RendererStyleFlags2 = {\n    /**\n     * Marks a style as important.\n     */\n    Important: 1,\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    DashCase: 2,\n};\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nclass Renderer2 {\n}\n/**\n * \\@internal\n */\nRenderer2.__NG_ELEMENT_ID__ = () => SWITCH_RENDERER2_FACTORY();\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nclass Sanitizer {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nclass Version {\n    /**\n     * @param {?} full\n     */\n    constructor(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.7');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ComponentFactoryResolver$1 extends ComponentFactoryResolver {\n    /**\n     * @param {?=} ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        const componentDef = (/** @type {?} */ (getComponentDef(component)));\n        return new ComponentFactory$1(componentDef, this.ngModule);\n    }\n}\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n * @type {?}\n */\nconst ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: () => createRootContext(inject(SCHEDULER)) });\n/**\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n * @type {?}\n */\nconst SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: () => defaultScheduler,\n});\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} rootViewInjector\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: (token, notFoundValue) => {\n            /** @type {?} */\n            const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue);\n        }\n    };\n}\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nclass ComponentFactory$1 extends ComponentFactory {\n    /**\n     * @param {?} componentDef The component definition.\n     * @param {?=} ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        this.selector = (/** @type {?} */ (componentDef.selectors[0][0]));\n        this.ngContentSelectors = [];\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        return toRefArray(this.componentDef.inputs);\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        const isInternalRootView = rootSelectorOrNode === undefined;\n        ngModule = ngModule || this.ngModule;\n        /** @type {?} */\n        const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        /** @type {?} */\n        const rendererFactory = (/** @type {?} */ (rootViewInjector.get(RendererFactory2, domRendererFactory3)));\n        /** @type {?} */\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        /** @type {?} */\n        const hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        const rootFlags = this.componentDef.onPush ? 8 /* Dirty */ | 128 /* IsRoot */ :\n            4 /* CheckAlways */ | 128 /* IsRoot */;\n        /** @type {?} */\n        const rootContext = !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n        /** @type {?} */\n        const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        /** @type {?} */\n        const rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        /** @type {?} */\n        const oldLView = enterView(rootLView, null);\n        /** @type {?} */\n        let component;\n        /** @type {?} */\n        let tElementNode;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            /** @type {?} */\n            const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = (/** @type {?} */ (getTNode(0, rootLView)));\n            // Transform the arrays of native nodes into a structure that can be consumed by the\n            // projection instruction. This is needed to support the reprojection of these nodes.\n            if (projectableNodes) {\n                /** @type {?} */\n                let index = 0;\n                /** @type {?} */\n                const tView = rootLView[TVIEW];\n                /** @type {?} */\n                const projection$$1 = tElementNode.projection = [];\n                for (let i = 0; i < projectableNodes.length; i++) {\n                    /** @type {?} */\n                    const nodeList = projectableNodes[i];\n                    /** @type {?} */\n                    let firstTNode = null;\n                    /** @type {?} */\n                    let previousTNode = null;\n                    for (let j = 0; j < nodeList.length; j++) {\n                        if (tView.firstTemplatePass) {\n                            // For dynamically created components such as ComponentRef, we create a new TView for\n                            // each insert. This is not ideal since we should be sharing the TViews.\n                            // Also the logic here should be shared with `component.ts`'s `renderComponent`\n                            // method.\n                            tView.expandoStartIndex++;\n                            tView.blueprint.splice(++index + HEADER_OFFSET, 0, null);\n                            tView.data.splice(index + HEADER_OFFSET, 0, null);\n                            rootLView.splice(index + HEADER_OFFSET, 0, null);\n                        }\n                        /** @type {?} */\n                        const tNode = createNodeAtIndex(index, 3 /* Element */, (/** @type {?} */ (nodeList[j])), null, null);\n                        previousTNode ? (previousTNode.next = tNode) : (firstTNode = tNode);\n                        previousTNode = tNode;\n                    }\n                    projection$$1.push((/** @type {?} */ (firstTNode)));\n                }\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, HEADER_OFFSET, componentView);\n            refreshDescendantViews(rootLView);\n        }\n        finally {\n            leaveView(oldLView);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        /** @type {?} */\n        const componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            // The host element of the internal root view is attached to the component's host view node\n            (/** @type {?} */ (componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    }\n}\n/** @type {?} */\nconst componentFactoryResolver = new ComponentFactoryResolver$1();\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nclass ComponentRef$1 extends ComponentRef {\n    /**\n     * @param {?} componentType\n     * @param {?} instance\n     * @param {?} location\n     * @param {?} _rootLView\n     * @param {?} _tNode\n     */\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.destroyCbs = [];\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n        this.hostView._tViewNode = createViewNode(-1, _rootLView);\n        this.componentType = componentType;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new NodeInjector(this._tNode, this._rootLView); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).forEach(fn => fn());\n        this.destroyCbs = null;\n        this.hostView.destroy();\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\n/** @type {?} */\nlet _devMode = true;\n/** @type {?} */\nlet _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * \\@publicApi\n * @return {?}\n */\nfunction enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nclass InertBodyHelper {\n    /**\n     * @param {?} defaultDoc\n     */\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            /** @type {?} */\n            const inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_XHR(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        const body = xhr.response.body;\n        body.removeChild((/** @type {?} */ (body.firstChild)));\n        return body;\n    }\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_DOMParser(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            const body = (/** @type {?} */ (new ((/** @type {?} */ (window)))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body));\n            body.removeChild((/** @type {?} */ (body.firstChild)));\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_InertDocument(html) {\n        // Prefer using <template> element if supported.\n        /** @type {?} */\n        const templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (((/** @type {?} */ (this.defaultDoc))).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    }\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    stripCustomNsAttrs(el) {\n        /** @type {?} */\n        const elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (let i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        let childNode = (/** @type {?} */ (el.firstChild));\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs((/** @type {?} */ (childNode)));\n            childNode = childNode.nextSibling;\n        }\n    }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!((/** @type {?} */ (window))).DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n * @type {?}\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n * @type {?}\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nfunction sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge$1(...sets) {\n    /** @type {?} */\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\n/** @type {?} */\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\n/** @type {?} */\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nconst OPTIONAL_END_TAG_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\n/** @type {?} */\nconst BLOCK_ELEMENTS = merge$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\n/** @type {?} */\nconst INLINE_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nconst VALID_ELEMENTS = merge$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\n/** @type {?} */\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\n/** @type {?} */\nconst SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n/** @type {?} */\nconst VALID_ATTRS = merge$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\n/** @type {?} */\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        /** @type {?} */\n        let current = (/** @type {?} */ (el.firstChild));\n        /** @type {?} */\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement((/** @type {?} */ (current)));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars((/** @type {?} */ (current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = (/** @type {?} */ (current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement((/** @type {?} */ (current)));\n                }\n                /** @type {?} */\n                let next = this.checkClobberedElement(current, (/** @type {?} */ (current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, (/** @type {?} */ (current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @private\n     * @param {?} element The element to sanitize.\n     * @return {?} True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        /** @type {?} */\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const elAttr = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (elAttr)).name;\n            /** @type {?} */\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            let value = (/** @type {?} */ (elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    /**\n     * @private\n     * @param {?} current\n     * @return {?}\n     */\n    endElement(current) {\n        /** @type {?} */\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    /**\n     * @private\n     * @param {?} chars\n     * @return {?}\n     */\n    chars(chars) { this.buf.push(encodeEntities(chars)); }\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${((/** @type {?} */ (node))).outerHTML}`);\n        }\n        return nextNode;\n    }\n}\n// Regular Expressions for parsing tags and attributes\n/** @type {?} */\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\n/** @type {?} */\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        /** @type {?} */\n        const hi = match.charCodeAt(0);\n        /** @type {?} */\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        /** @type {?} */\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        /** @type {?} */\n        let mXSSAttempts = 5;\n        /** @type {?} */\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = (/** @type {?} */ (inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        const sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        const safeHtml = sanitizer.sanitizeChildren((/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in ((/** @type {?} */ (el))) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst ELEMENT_MARKER = {\n    marker: 'element'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst COMMENT_MARKER = {\n    marker: 'comment'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MARKER = `�`;\n/** @type {?} */\nconst ICU_BLOCK_REGEX = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n/** @type {?} */\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n/** @type {?} */\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/** @type {?} */\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n/** @type {?} */\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n// i18nPostproocess regexps\n/** @type {?} */\nconst PP_PLACEHOLDERS = /\\[(�.+?�?)\\]/g;\n/** @type {?} */\nconst PP_ICU_VARS = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n/** @type {?} */\nconst PP_ICUS = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern (sub)Pattern to be broken.\n *\n * @return {?}\n */\nfunction extractParts(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    /** @type {?} */\n    let prevPos = 0;\n    /** @type {?} */\n    const braceStack = [];\n    /** @type {?} */\n    const results = [];\n    /** @type {?} */\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    /** @type {?} */\n    let match;\n    while (match = braces.exec(pattern)) {\n        /** @type {?} */\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                /** @type {?} */\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEX.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else if (block) { // Don't push empty strings\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                /** @type {?} */\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    /** @type {?} */\n    const substring = pattern.substring(prevPos);\n    if (substring != '') {\n        results.push(substring);\n    }\n    return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern Text containing an ICU expression that needs to be parsed.\n *\n * @return {?}\n */\nfunction parseICUBlock(pattern) {\n    /** @type {?} */\n    const cases = [];\n    /** @type {?} */\n    const values = [];\n    /** @type {?} */\n    let icuType = 1 /* plural */;\n    /** @type {?} */\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEX, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* select */;\n        }\n        else {\n            icuType = 1 /* plural */;\n        }\n        mainBinding = parseInt(binding.substr(1), 10);\n        return '';\n    });\n    /** @type {?} */\n    const parts = (/** @type {?} */ (extractParts(pattern)));\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        /** @type {?} */\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        /** @type {?} */\n        const blocks = (/** @type {?} */ (extractParts(parts[pos++])));\n        if (blocks.length) {\n            values.push(blocks);\n        }\n    }\n    assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n * @param {?} message\n * @return {?}\n */\nfunction removeInnerTemplateTranslation(message) {\n    /** @type {?} */\n    let match;\n    /** @type {?} */\n    let res = '';\n    /** @type {?} */\n    let index = 0;\n    /** @type {?} */\n    let inTemplate = false;\n    /** @type {?} */\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.substr(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param {?} message The message to crop\n * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n * @return {?}\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (typeof subTemplateIndex !== 'number') {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        /** @type {?} */\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        /** @type {?} */\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param {?} str The string containing the bindings.\n * @param {?} destinationNode Index of the destination node which will receive the binding.\n * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.\n * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @return {?}\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn = null) {\n    /** @type {?} */\n    const updateOpCodes = [null, null];\n    // Alloc space for mask and size\n    /** @type {?} */\n    const textParts = str.split(BINDING_REGEXP);\n    /** @type {?} */\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        /** @type {?} */\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            /** @type {?} */\n            const bindingIndex = parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n        (attrName ? 1 /* Attr */ : 0 /* Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[0] = mask;\n    updateOpCodes[1] = updateOpCodes.length - 2;\n    return updateOpCodes;\n}\n/**\n * @param {?} icuExpression\n * @param {?=} mask\n * @return {?}\n */\nfunction getBindingMask(icuExpression, mask = 0) {\n    mask = mask | toMaskBit(icuExpression.mainBinding);\n    /** @type {?} */\n    let match;\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value === 'string') {\n                while (match = BINDING_REGEXP.exec(value)) {\n                    mask = mask | toMaskBit(parseInt(match[1], 10));\n                }\n            }\n            else {\n                mask = getBindingMask((/** @type {?} */ (value)), mask);\n            }\n        }\n    }\n    return mask;\n}\n/** @type {?} */\nconst i18nIndexStack = [];\n/** @type {?} */\nlet i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\n/** @type {?} */\nconst parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nfunction i18nStart(index, message, subTemplateIndex) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nIndexStack[++i18nIndexStackPointer] = index;\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nStartFirstPass(tView, index, message, subTemplateIndex);\n    }\n}\n/**\n * See `i18nStart` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n    /** @type {?} */\n    const viewData = getLView();\n    /** @type {?} */\n    const expandoStartIndex = tView.blueprint.length - HEADER_OFFSET;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n        previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    let parentIndex = parentTNode && parentTNode !== viewData[HOST_NODE] ?\n        parentTNode.index - HEADER_OFFSET :\n        index;\n    /** @type {?} */\n    let parentIndexPointer = 0;\n    parentIndexStack[parentIndexPointer] = parentIndex;\n    /** @type {?} */\n    const createOpCodes = [];\n    // If the previous node wasn't the direct parent then we have a translation without top level\n    // element and we need to keep a reference of the previous element if there is one\n    if (index > 0 && previousOrParentTNode !== parentTNode) {\n        // Create an OpCode to select the previous TNode\n        createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n    }\n    /** @type {?} */\n    const updateOpCodes = [];\n    /** @type {?} */\n    const icuExpressions = [];\n    /** @type {?} */\n    const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n    /** @type {?} */\n    const msgParts = templateTranslation.split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        /** @type {?} */\n        let value = msgParts[i];\n        if (i & 1) {\n            // Odd indexes are placeholders (elements and sub-templates)\n            if (value.charAt(0) === '/') {\n                // It is a closing tag\n                if (value.charAt(1) === '#') {\n                    /** @type {?} */\n                    const phIndex = parseInt(value.substr(2), 10);\n                    parentIndex = parentIndexStack[--parentIndexPointer];\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                }\n            }\n            else {\n                /** @type {?} */\n                const phIndex = parseInt(value.substr(1), 10);\n                // The value represents a placeholder that we move to the designated index\n                createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                if (value.charAt(0) === '#') {\n                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                }\n            }\n        }\n        else {\n            // Even indexes are text (including bindings & ICU expressions)\n            /** @type {?} */\n            const parts = value.split(ICU_REGEXP);\n            for (let j = 0; j < parts.length; j++) {\n                value = parts[j];\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // Create the comment node that will anchor the ICU expression\n                    allocExpando(viewData);\n                    /** @type {?} */\n                    const icuNodeIndex = tView.blueprint.length - 1 - HEADER_OFFSET;\n                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '', parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    // Update codes for the ICU expression\n                    /** @type {?} */\n                    const icuExpression = parseICUBlock(value.substr(1, value.length - 2));\n                    /** @type {?} */\n                    const mask = getBindingMask(icuExpression);\n                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                    // Since this is recursive, the last TIcu that was pushed is the one we want\n                    /** @type {?} */\n                    const tIcuIndex = icuExpressions.length - 1;\n                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                    3, // skip 3 opCodes if not changed\n                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                    2, // skip 2 opCodes if not changed\n                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                }\n                else if (value !== '') {\n                    // Even indexes are text (including bindings)\n                    /** @type {?} */\n                    const hasBinding = value.match(BINDING_REGEXP);\n                    // Create text nodes\n                    allocExpando(viewData);\n                    createOpCodes.push(\n                    // If there is a binding, the value will be set during update\n                    hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, tView.blueprint.length - 1 - HEADER_OFFSET), updateOpCodes);\n                    }\n                }\n            }\n        }\n    }\n    // NOTE: local var needed to properly assert the type of `TI18n`.\n    /** @type {?} */\n    const tI18n = {\n        vars: tView.blueprint.length - HEADER_OFFSET - expandoStartIndex,\n        expandoStartIndex,\n        create: createOpCodes,\n        update: updateOpCodes,\n        icus: icuExpressions.length ? icuExpressions : null,\n    };\n    tView.data[index + HEADER_OFFSET] = tI18n;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    ngDevMode && ngDevMode.rendererMoveNode++;\n    /** @type {?} */\n    const viewData = getLView();\n    if (!previousTNode) {\n        previousTNode = parentTNode;\n    }\n    // re-organize node tree to put this node in the correct position.\n    if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n        tNode.next = parentTNode.child;\n        parentTNode.child = tNode;\n    }\n    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n        tNode.next = previousTNode.next;\n        previousTNode.next = tNode;\n    }\n    else {\n        tNode.next = null;\n    }\n    if (parentTNode !== viewData[HOST_NODE]) {\n        tNode.parent = (/** @type {?} */ (parentTNode));\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    const slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * \\@publicAPI\n * @param {?} message Raw translation string for post processing\n * @param {?} replacements Set of replacements that should be applied\n *\n * @return {?} Transformed string that can be consumed by i18nStart instruction\n *\n */\nfunction i18nPostprocess(message, replacements) {\n    //\n    // Step 1: resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n    //\n    /** @type {?} */\n    const matches = {};\n    /** @type {?} */\n    let result = message.replace(PP_PLACEHOLDERS, (_match, content) => {\n        if (!matches[content]) {\n            matches[content] = content.split('|');\n        }\n        if (!matches[content].length) {\n            throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n        }\n        return (/** @type {?} */ (matches[content].shift()));\n    });\n    // verify that we injected all values\n    /** @type {?} */\n    const hasUnmatchedValues = Object.keys(matches).some(key => !!matches[key].length);\n    if (hasUnmatchedValues) {\n        throw new Error(`i18n postprocess: unmatched values - ${JSON.stringify(matches)}`);\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    //\n    // Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n    //\n    result = result.replace(PP_ICU_VARS, (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    });\n    //\n    // Step 3: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n    // in case multiple ICUs have the same placeholder name\n    //\n    result = result.replace(PP_ICUS, (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            /** @type {?} */\n            const list = (/** @type {?} */ (replacements[key]));\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return (/** @type {?} */ (list.shift()));\n        }\n        return match;\n    });\n    return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n * @return {?}\n */\nfunction i18nEnd() {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nEndFirstPass(tView);\n}\n/**\n * See `i18nEnd` above.\n * @param {?} tView\n * @return {?}\n */\nfunction i18nEndFirstPass(tView) {\n    /** @type {?} */\n    const viewData = getLView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n    /** @type {?} */\n    const rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n    /** @type {?} */\n    const tI18n = (/** @type {?} */ (tView.data[rootIndex + HEADER_OFFSET]));\n    ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);\n    // The last placeholder that was added before `i18nEnd`\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const visitedPlaceholders = readCreateOpCodes(rootIndex, tI18n.create, tI18n.expandoStartIndex, viewData);\n    // Remove deleted placeholders\n    // The last placeholder that was added before `i18nEnd` is `previousOrParentTNode`\n    for (let i = rootIndex + 1; i <= previousOrParentTNode.index - HEADER_OFFSET; i++) {\n        if (visitedPlaceholders.indexOf(i) === -1) {\n            removeNode(i, viewData);\n        }\n    }\n}\n/**\n * @param {?} index\n * @param {?} createOpCodes\n * @param {?} expandoStartIndex\n * @param {?} viewData\n * @return {?}\n */\nfunction readCreateOpCodes(index, createOpCodes, expandoStartIndex, viewData) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    let currentTNode = null;\n    /** @type {?} */\n    let previousTNode = null;\n    /** @type {?} */\n    const visitedPlaceholders = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        /** @type {?} */\n        const opCode = createOpCodes[i];\n        if (typeof opCode == 'string') {\n            /** @type {?} */\n            const textRNode = createTextNode(opCode, renderer);\n            ngDevMode && ngDevMode.rendererCreateTextNode++;\n            previousTNode = currentTNode;\n            currentTNode =\n                createNodeAtIndex(expandoStartIndex++, 3 /* Element */, textRNode, null, null);\n            setIsParent(false);\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 7 /* MASK_OPCODE */) {\n                case 1 /* AppendChild */:\n                    /** @type {?} */\n                    const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                    /** @type {?} */\n                    let destinationTNode;\n                    if (destinationNodeIndex === index) {\n                        // If the destination node is `i18nStart`, we don't have a\n                        // top-level node and we should use the host node instead\n                        destinationTNode = (/** @type {?} */ (viewData[HOST_NODE]));\n                    }\n                    else {\n                        destinationTNode = getTNode(destinationNodeIndex, viewData);\n                    }\n                    ngDevMode &&\n                        assertDefined((/** @type {?} */ (currentTNode)), `You need to create or select a node before you can insert it into the DOM`);\n                    previousTNode = appendI18nNode((/** @type {?} */ (currentTNode)), destinationTNode, previousTNode);\n                    destinationTNode.next = null;\n                    break;\n                case 0 /* Select */:\n                    /** @type {?} */\n                    const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    visitedPlaceholders.push(nodeIndex);\n                    previousTNode = currentTNode;\n                    currentTNode = getTNode(nodeIndex, viewData);\n                    if (currentTNode) {\n                        setPreviousOrParentTNode(currentTNode);\n                        if (currentTNode.type === 3 /* Element */) {\n                            setIsParent(true);\n                        }\n                    }\n                    break;\n                case 5 /* ElementEnd */:\n                    /** @type {?} */\n                    const elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                    previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                    setPreviousOrParentTNode(currentTNode);\n                    setIsParent(false);\n                    break;\n                case 4 /* Attr */:\n                    /** @type {?} */\n                    const elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    /** @type {?} */\n                    const attrName = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const attrValue = (/** @type {?} */ (createOpCodes[++i]));\n                    elementAttribute(elementNodeIndex, attrName, attrValue);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n        else {\n            switch (opCode) {\n                case COMMENT_MARKER:\n                    /** @type {?} */\n                    const commentValue = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                    /** @type {?} */\n                    const commentRNode = renderer.createComment(commentValue);\n                    ngDevMode && ngDevMode.rendererCreateComment++;\n                    previousTNode = currentTNode;\n                    currentTNode = createNodeAtIndex(expandoStartIndex++, 5 /* IcuContainer */, commentRNode, null, null);\n                    attachPatchData(commentRNode, viewData);\n                    ((/** @type {?} */ (currentTNode))).activeCaseIndex = null;\n                    // We will add the case nodes later, during the update phase\n                    setIsParent(false);\n                    break;\n                case ELEMENT_MARKER:\n                    /** @type {?} */\n                    const tagNameValue = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof tagNameValue, 'string', `Expected \"${tagNameValue}\" to be an element node tag name`);\n                    /** @type {?} */\n                    const elementRNode = renderer.createElement(tagNameValue);\n                    ngDevMode && ngDevMode.rendererCreateElement++;\n                    previousTNode = currentTNode;\n                    currentTNode = createNodeAtIndex(expandoStartIndex++, 3 /* Element */, elementRNode, tagNameValue, null);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n    setIsParent(false);\n    return visitedPlaceholders;\n}\n/**\n * @param {?} updateOpCodes\n * @param {?} icus\n * @param {?} bindingsStartIndex\n * @param {?} changeMask\n * @param {?} viewData\n * @param {?=} bypassCheckBit\n * @return {?}\n */\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit = false) {\n    /** @type {?} */\n    let caseCreated = false;\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        /** @type {?} */\n        const checkBit = (/** @type {?} */ (updateOpCodes[i]));\n        // Number of opCodes to skip until next set of update codes\n        /** @type {?} */\n        const skipCodes = (/** @type {?} */ (updateOpCodes[++i]));\n        if (bypassCheckBit || (checkBit & changeMask)) {\n            // The value has been updated since last checked\n            /** @type {?} */\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        value += stringify$1(viewData[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        /** @type {?} */\n                        let tIcuIndex;\n                        /** @type {?} */\n                        let tIcu;\n                        /** @type {?} */\n                        let icuTNode;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                const attrName = (/** @type {?} */ (updateOpCodes[++j]));\n                                /** @type {?} */\n                                const sanitizeFn = (/** @type {?} */ (updateOpCodes[++j]));\n                                elementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                                break;\n                            case 0 /* Text */:\n                                textBinding(nodeIndex, value);\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                // If there is an active case, delete the old nodes\n                                if (icuTNode.activeCaseIndex !== null) {\n                                    /** @type {?} */\n                                    const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                    for (let k = 0; k < removeCodes.length; k++) {\n                                        /** @type {?} */\n                                        const removeOpCode = (/** @type {?} */ (removeCodes[k]));\n                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                            case 3 /* Remove */:\n                                                /** @type {?} */\n                                                const nodeIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                removeNode(nodeIndex, viewData);\n                                                break;\n                                            case 6 /* RemoveNestedIcu */:\n                                                /** @type {?} */\n                                                const nestedIcuNodeIndex = (/** @type {?} */ (removeCodes[k + 1])) >>> 3 /* SHIFT_REF */;\n                                                /** @type {?} */\n                                                const nestedIcuTNode = (/** @type {?} */ (getTNode(nestedIcuNodeIndex, viewData)));\n                                                /** @type {?} */\n                                                const activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                if (activeIndex !== null) {\n                                                    /** @type {?} */\n                                                    const nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    /** @type {?} */\n                                                    const nestedTIcu = (/** @type {?} */ (icus))[nestedIcuTIndex];\n                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                }\n                                                break;\n                                        }\n                                    }\n                                }\n                                // Update the active caseIndex\n                                /** @type {?} */\n                                const caseIndex = getCaseIndex(tIcu, value);\n                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                // Add the nodes for the new case\n                                readCreateOpCodes(-1, tIcu.create[caseIndex], tIcu.expandoStartIndex, viewData);\n                                caseCreated = true;\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                readUpdateOpCodes(tIcu.update[(/** @type {?} */ (icuTNode.activeCaseIndex))], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * @param {?} index\n * @param {?} viewData\n * @return {?}\n */\nfunction removeNode(index, viewData) {\n    /** @type {?} */\n    const removedPhTNode = getTNode(index, viewData);\n    /** @type {?} */\n    const removedPhRNode = getNativeByIndex(index, viewData);\n    removeChild(removedPhTNode, removedPhRNode || null, viewData);\n    removedPhTNode.detached = true;\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n    /** @type {?} */\n    const slotValue = (/** @type {?} */ (load(index)));\n    if (isLContainer(slotValue)) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (slotValue));\n        if (removedPhTNode.type !== 0 /* Container */) {\n            removeChild(removedPhTNode, lContainer[NATIVE] || null, viewData);\n        }\n        lContainer[RENDER_PARENT] = null;\n    }\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {\\@link i18nStart} and {\\@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nfunction i18n(index, message, subTemplateIndex) {\n    i18nStart(index, message, subTemplateIndex);\n    i18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param {?} index A unique index in the static block\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributes(index, values) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, `You should only call i18nEnd on first template pass`);\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nAttributesFirstPass(tView, index, values);\n    }\n}\n/**\n * See `i18nAttributes` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    /** @type {?} */\n    const previousElement = getPreviousOrParentTNode();\n    /** @type {?} */\n    const previousElementIndex = previousElement.index - HEADER_OFFSET;\n    /** @type {?} */\n    const updateOpCodes = [];\n    for (let i = 0; i < values.length; i += 2) {\n        /** @type {?} */\n        const attrName = values[i];\n        /** @type {?} */\n        const message = values[i + 1];\n        /** @type {?} */\n        const parts = message.split(ICU_REGEXP);\n        for (let j = 0; j < parts.length; j++) {\n            /** @type {?} */\n            const value = parts[j];\n            if (j & 1) ;\n            else if (value !== '') {\n                // Even indexes are text (including bindings)\n                /** @type {?} */\n                const hasBinding = !!value.match(BINDING_REGEXP);\n                if (hasBinding) {\n                    addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                }\n                else {\n                    elementAttribute(previousElementIndex, attrName, value);\n                }\n            }\n        }\n    }\n    tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\n/** @type {?} */\nlet changeMask = 0b0;\n/** @type {?} */\nlet shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @template T\n * @param {?} expression The binding's new value or NO_CHANGE\n * @return {?}\n */\nfunction i18nExp(expression) {\n    if (expression !== NO_CHANGE) {\n        changeMask = changeMask | (1 << shiftsCounter);\n    }\n    shiftsCounter++;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param {?} index Index of either {\\@link i18nStart} (translation block) or {\\@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n * @return {?}\n */\nfunction i18nApply(index) {\n    if (shiftsCounter) {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        /** @type {?} */\n        const tI18n = tView.data[index + HEADER_OFFSET];\n        /** @type {?} */\n        let updateOpCodes;\n        /** @type {?} */\n        let icus = null;\n        if (Array.isArray(tI18n)) {\n            updateOpCodes = (/** @type {?} */ (tI18n));\n        }\n        else {\n            updateOpCodes = ((/** @type {?} */ (tI18n))).update;\n            icus = ((/** @type {?} */ (tI18n))).icus;\n        }\n        /** @type {?} */\n        const bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n        // Reset changeMask & maskBit to default for the next update cycle\n        changeMask = 0b0;\n        shiftsCounter = 0;\n    }\n}\n/** @enum {number} */\nconst Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    if (typeof nLike === 'string') {\n        nLike = parseInt((/** @type {?} */ (nLike)), 10);\n    }\n    /** @type {?} */\n    const n = (/** @type {?} */ (nLike));\n    /** @type {?} */\n    const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    const i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    const v = nDecimal.length;\n    /** @type {?} */\n    const f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    const lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n/**\n * @param {?} value\n * @param {?} locale\n * @return {?}\n */\nfunction getPluralCategory(value, locale) {\n    /** @type {?} */\n    const plural = getPluralCase(locale, value);\n    switch (plural) {\n        case Plural.Zero:\n            return 'zero';\n        case Plural.One:\n            return 'one';\n        case Plural.Two:\n            return 'two';\n        case Plural.Few:\n            return 'few';\n        case Plural.Many:\n            return 'many';\n        default:\n            return 'other';\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param {?} icuExpression\n * @param {?} bindingValue The value of the main binding used by this ICU expression\n * @return {?}\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    /** @type {?} */\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* plural */: {\n                // TODO(ocombe): replace this hard-coded value by the real LOCALE_ID value\n                /** @type {?} */\n                const locale = 'en-US';\n                /** @type {?} */\n                const resolvedCase = getPluralCategory(bindingValue, locale);\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param {?} tIcus\n * @param {?} icuExpression\n * @param {?} startIndex\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n    /** @type {?} */\n    const createCodes = [];\n    /** @type {?} */\n    const removeCodes = [];\n    /** @type {?} */\n    const updateCodes = [];\n    /** @type {?} */\n    const vars = [];\n    /** @type {?} */\n    const childIcus = [];\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        /** @type {?} */\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                /** @type {?} */\n                const icuIndex = nestedIcus.push((/** @type {?} */ (value))) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--�${icuIndex}�-->`;\n            }\n        }\n        /** @type {?} */\n        const icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n        createCodes.push(icuCase.create);\n        removeCodes.push(icuCase.remove);\n        updateCodes.push(icuCase.update);\n        vars.push(icuCase.vars);\n        childIcus.push(icuCase.childIcus);\n    }\n    /** @type {?} */\n    const tIcu = {\n        type: icuExpression.type,\n        vars,\n        expandoStartIndex: expandoStartIndex + 1, childIcus,\n        cases: icuExpression.cases,\n        create: createCodes,\n        remove: removeCodes,\n        update: updateCodes\n    };\n    tIcus.push(tIcu);\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const worstCaseSize = Math.max(...vars);\n    for (let i = 0; i < worstCaseSize; i++) {\n        allocExpando(lView);\n    }\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param {?} unsafeHtml The string to parse\n * @param {?} parentIndex\n * @param {?} nestedIcus\n * @param {?} tIcus\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    /** @type {?} */\n    const inertBodyHelper = new InertBodyHelper(document);\n    /** @type {?} */\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    if (!inertBodyElement) {\n        throw new Error('Unable to generate inert body element');\n    }\n    /** @type {?} */\n    const wrapper = (/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement;\n    /** @type {?} */\n    const opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n    return opCodes;\n}\n/** @type {?} */\nconst NESTED_ICU = /�(\\d+)�/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param {?} currentNode The first node to parse\n * @param {?} icuCase The data for the ICU expression case that contains those nodes\n * @param {?} parentIndex Index of the current node's parent\n * @param {?} nestedIcus Data for the nested ICU expressions that this case contains\n * @param {?} tIcus Data for all ICU expressions of the current message\n * @param {?} expandoStartIndex Expando start index for the current ICU expression\n * @return {?}\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    if (currentNode) {\n        /** @type {?} */\n        const nestedIcusToCreate = [];\n        while (currentNode) {\n            /** @type {?} */\n            const nextNode = currentNode.nextSibling;\n            /** @type {?} */\n            const newIndex = expandoStartIndex + ++icuCase.vars;\n            switch (currentNode.nodeType) {\n                case Node.ELEMENT_NODE:\n                    /** @type {?} */\n                    const element$$1 = (/** @type {?} */ (currentNode));\n                    /** @type {?} */\n                    const tagName = element$$1.tagName.toLowerCase();\n                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                        // This isn't a valid element, we won't create an element for it\n                        icuCase.vars--;\n                    }\n                    else {\n                        icuCase.create.push(ELEMENT_MARKER, tagName, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const elAttrs = element$$1.attributes;\n                        for (let i = 0; i < elAttrs.length; i++) {\n                            /** @type {?} */\n                            const attr = (/** @type {?} */ (elAttrs.item(i)));\n                            /** @type {?} */\n                            const lowerAttrName = attr.name.toLowerCase();\n                            /** @type {?} */\n                            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                            // we assume the input string is safe, unless it's using a binding\n                            if (hasBinding) {\n                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                    if (URI_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                    }\n                                    else if (SRCSET_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                    }\n                                    else {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                    }\n                                }\n                                else {\n                                    ngDevMode &&\n                                        console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);\n                                }\n                            }\n                            else {\n                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                            }\n                        }\n                        // Parse the children of this node (if any)\n                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                        // Remove the parent node after the children\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    }\n                    break;\n                case Node.TEXT_NODE:\n                    /** @type {?} */\n                    const value = currentNode.textContent || '';\n                    /** @type {?} */\n                    const hasBinding = value.match(BINDING_REGEXP);\n                    icuCase.create.push(hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                    }\n                    break;\n                case Node.COMMENT_NODE:\n                    // Check if the comment node is a placeholder for a nested ICU\n                    /** @type {?} */\n                    const match = NESTED_ICU.exec(currentNode.textContent || '');\n                    if (match) {\n                        /** @type {?} */\n                        const nestedIcuIndex = parseInt(match[1], 10);\n                        /** @type {?} */\n                        const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';\n                        // Create the comment node that will anchor the ICU expression\n                        icuCase.create.push(COMMENT_MARKER, newLocal, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const nestedIcu = nestedIcus[nestedIcuIndex];\n                        nestedIcusToCreate.push([nestedIcu, newIndex]);\n                    }\n                    else {\n                        // We do not handle any other type of comment\n                        icuCase.vars--;\n                    }\n                    break;\n                default:\n                    // We do not handle any other type of element\n                    icuCase.vars--;\n            }\n            currentNode = (/** @type {?} */ (nextNode));\n        }\n        for (let i = 0; i < nestedIcusToCreate.length; i++) {\n            /** @type {?} */\n            const nestedIcu = nestedIcusToCreate[i][0];\n            /** @type {?} */\n            const nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n            // Since this is recursive, the last TIcu that was pushed is the one we want\n            /** @type {?} */\n            const nestTIcuIndex = tIcus.length - 1;\n            icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);\n            icuCase.childIcus.push(nestTIcuIndex);\n            /** @type {?} */\n            const mask = getBindingMask(nestedIcu);\n            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n            3, // skip 3 opCodes if not changed\n            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n            2, // skip 2 opCodes if not changed\n            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst COMPONENT_FACTORY_RESOLVER = {\n    provide: ComponentFactoryResolver,\n    useClass: ComponentFactoryResolver$1,\n    deps: [NgModuleRef],\n};\n/**\n * @template T\n */\nclass NgModuleRef$1 extends NgModuleRef {\n    /**\n     * @param {?} ngModuleType\n     * @param {?} _parent\n     */\n    constructor(ngModuleType, _parent) {\n        super();\n        this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        this._bootstrapComponents = [];\n        this.injector = this;\n        this.destroyCbs = [];\n        /** @type {?} */\n        /** @nocollapse */ const ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n        this._bootstrapComponents = (/** @type {?} */ (ngModuleDef)).bootstrap;\n        /** @type {?} */\n        const additionalProviders = [\n            {\n                provide: NgModuleRef,\n                useValue: this,\n            },\n            COMPONENT_FACTORY_RESOLVER\n        ];\n        this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders);\n        this.instance = this.get(ngModuleType);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        if (token === Injector || token === NgModuleRef || token === INJECTOR$1) {\n            return this;\n        }\n        return this._r3Injector.get(token, notFoundValue, injectFlags);\n    }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() {\n        return this.get(ComponentFactoryResolver);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).forEach(fn => fn());\n        this.destroyCbs = null;\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\n/**\n * @template T\n */\nclass NgModuleFactory$1 extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     */\n    constructor(moduleType) {\n        super();\n        this.moduleType = moduleType;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        return new NgModuleRef$1(this.moduleType, parentInjector);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n * @param {?} type\n * @param {?} decorators\n * @param {?} ctorParameters\n * @param {?} propDecorators\n * @return {?}\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    /** @type {?} */\n    const clazz = (/** @type {?} */ (type));\n    if (decorators !== null) {\n        if (clazz.decorators !== undefined) {\n            clazz.decorators.push(...decorators);\n        }\n        else {\n            clazz.decorators = decorators;\n        }\n    }\n    if (ctorParameters !== null) {\n        // Rather than merging, clobber the existing parameters. If other projects exist which use\n        // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n        // but that is vanishingly unlikely.\n        clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n        // The property decorator objects are merged as it is possible different fields have different\n        // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n        // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n        // decorator that's also been downleveled.\n        if (clazz.propDecorators !== undefined) {\n            clazz.propDecorators = Object.assign({}, clazz.propDecorators, propDecorators);\n        }\n        else {\n            clazz.propDecorators = propDecorators;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nfunction pureFunction0(slotOffset, pureFn, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return isCreationMode() ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    let bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(lView, bindingIndex);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nfunction pipe(index, pipeName) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let pipeDef;\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = (/** @type {?} */ (tView.data[adjustedIndex]));\n    }\n    /** @type {?} */\n    const pipeInstance = pipeDef.factory(null);\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef$1(name, registry) {\n    if (registry) {\n        for (let i = registry.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(`The pipe '${name}' could not be found!`);\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1));\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2));\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3));\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4));\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nfunction pipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values));\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return ((/** @type {?} */ (getLView()[TVIEW].data[index + HEADER_OFFSET]))).pure;\n}\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param {?} newValue the pipe transformation output.\n * @return {?}\n */\nfunction unwrapValue(newValue) {\n    if (WrappedValue.isWrapped(newValue)) {\n        newValue = WrappedValue.unwrap(newValue);\n        getLView()[getBindingRoot()] = NO_CHANGE;\n    }\n    return newValue;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nclass EventEmitter extends Subject {\n    // tslint:disable-line\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param {?=} isAsync When true, deliver events asynchronously.\n     *\n     */\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    emit(value) { super.next(value); }\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    subscribe(generatorOrNext, error, complete) {\n        /** @type {?} */\n        let schedulerFn;\n        /** @type {?} */\n        let errorFn = (err) => null;\n        /** @type {?} */\n        let completeFn = () => null;\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? (value) => {\n                setTimeout(() => generatorOrNext.next(value));\n            } : (value) => { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                    (err) => { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                    () => { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? (value) => { setTimeout(() => generatorOrNext(value)); } :\n                (value) => { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n            }\n        }\n        /** @type {?} */\n        const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass TemplateRef {\n}\n/**\n * \\@internal\n */\nTemplateRef.__NG_ELEMENT_ID__ = () => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef);\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LQueries_ {\n    /**\n     * @param {?} parent\n     * @param {?} shallow\n     * @param {?} deep\n     */\n    constructor(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    track(queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    clone() { return new LQueries_(this, null, this.deep); }\n    /**\n     * @return {?}\n     */\n    container() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @return {?}\n     */\n    createView() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    insertView(index) {\n        insertView$1(index, this.shallow);\n        insertView$1(index, this.deep);\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    addNode(tNode) {\n        add(this.deep, tNode);\n        if (isContentQueryHost(tNode)) {\n            add(this.shallow, tNode);\n            if (tNode.parent && isContentQueryHost(tNode.parent)) {\n                // if node has a content query and parent also has a content query\n                // both queries need to check this node for shallow matches\n                add((/** @type {?} */ (this.parent)).shallow, tNode);\n            }\n            return this.parent;\n        }\n        isRootNodeOfQuery(tNode) && add(this.shallow, tNode);\n        return this;\n    }\n    /**\n     * @return {?}\n     */\n    removeView() {\n        removeView$1(this.shallow);\n        removeView$1(this.deep);\n    }\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isRootNodeOfQuery(tNode) {\n    return tNode.parent === null || isContentQueryHost(tNode.parent);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const containerValues = [];\n        query.values.push(containerValues);\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView$1(index, query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        (/** @type {?} */ (query.containerValues)).splice(index, 0, query.values);\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView$1(query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        /** @type {?} */\n        const containerValues = (/** @type {?} */ (query.containerValues));\n        /** @type {?} */\n        const viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        const removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return (/** @type {?} */ (localNames[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n// TODO: \"read\" should be an AbstractType (FW-486)\n/**\n * @param {?} read\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByReadToken(read, tNode, currentView) {\n    /** @type {?} */\n    const factoryFn = ((/** @type {?} */ (read)))[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        /** @type {?} */\n        const matchingIdx = locateDirectiveOrProvider(tNode, currentView, (/** @type {?} */ (read)), false, false);\n        if (matchingIdx !== null) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} templateRefToken\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n    /** @type {?} */\n    const templateRefResult = ((/** @type {?} */ (templateRefToken)))[NG_ELEMENT_ID]();\n    if (read) {\n        return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n    }\n    return templateRefResult;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @param {?} matchingIdx\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read, matchingIdx) {\n    if (read) {\n        return queryByReadToken(read, tNode, currentView);\n    }\n    if (matchingIdx > -1) {\n        return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n    }\n    // if read token and / or strategy is not specified,\n    // detect it using appropriate tNode type\n    return queryByTNodeType(tNode, currentView);\n}\n/**\n * @param {?} query\n * @param {?} tNode\n * @return {?}\n */\nfunction add(query, tNode) {\n    /** @type {?} */\n    const currentView = getLView();\n    while (query) {\n        /** @type {?} */\n        const predicate = query.predicate;\n        /** @type {?} */\n        const type = (/** @type {?} */ (predicate.type));\n        if (type) {\n            /** @type {?} */\n            let result = null;\n            if (type === TemplateRef) {\n                result = queryByTemplateRef(type, tNode, currentView, predicate.read);\n            }\n            else {\n                /** @type {?} */\n                const matchingIdx = locateDirectiveOrProvider(tNode, currentView, type, false, false);\n                if (matchingIdx !== null) {\n                    result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                }\n            }\n            if (result !== null) {\n                addMatch(query, result);\n            }\n        }\n        else {\n            /** @type {?} */\n            const selector = (/** @type {?} */ (predicate.selector));\n            for (let i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                const matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (matchingIdx !== null) {\n                    /** @type {?} */\n                    const result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    const isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : (/** @type {?} */ (predicate)),\n        selector: isArray ? (/** @type {?} */ (predicate)) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: ((/** @type {?} */ ((/** @type {?} */ (queryList)))))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * @template T\n */\nclass QueryList_ {\n    constructor() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    /**\n     * @return {?}\n     */\n    get length() { return this._values.length; }\n    /**\n     * @return {?}\n     */\n    get first() {\n        /** @type {?} */\n        let values = this._values;\n        return values.length ? values[0] : null;\n    }\n    /**\n     * @return {?}\n     */\n    get last() {\n        /** @type {?} */\n        let values = this._values;\n        return values.length ? values[values.length - 1] : null;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    map(fn) { return this._values.map(fn); }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    filter(fn) {\n        return this._values.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        return this._values.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    reduce(fn, init) {\n        return this._values.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) { this._values.forEach(fn); }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        return this._values.some(fn);\n    }\n    /**\n     * @return {?}\n     */\n    toArray() { return this._values.slice(0); }\n    /**\n     * @return {?}\n     */\n    [getSymbolIterator()]() { return ((/** @type {?} */ (this._values)))[getSymbolIterator()](); }\n    /**\n     * @return {?}\n     */\n    toString() { return this._values.toString(); }\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    reset(res) {\n        this._values = flatten(res);\n        ((/** @type {?} */ (this))).dirty = false;\n    }\n    /**\n     * @return {?}\n     */\n    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }\n    /**\n     * @return {?}\n     */\n    setDirty() { ((/** @type {?} */ (this))).dirty = true; }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this.changes))).complete();\n        ((/** @type {?} */ (this.changes))).unsubscribe();\n    }\n}\n/** @type {?} */\nconst QueryList = (/** @type {?} */ (QueryList_));\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nfunction query(memoryIndex, predicate, descend, \n// TODO: \"read\" should be an AbstractType (FW-486)\nread) {\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    /** @type {?} */\n    const queryList = new QueryList();\n    /** @type {?} */\n    const queries = getOrCreateCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(getLView(), queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nfunction queryRefresh(queryList) {\n    /** @type {?} */\n    const queryListImpl = ((/** @type {?} */ ((/** @type {?} */ (queryList)))));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction templateRefExtractor(tNode, currentView) {\n    return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nfunction allowSanitizationBypass(value, type) {\n    return (value instanceof String && ((/** @type {?} */ (value)))[BRAND] === type);\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    const trusted = (/** @type {?} */ (new String(trustedString)));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n * @type {?}\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nconst COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nconst CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nconst SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` +\n    `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n    `${FN_ARGS})$`, 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n * @type {?}\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    let outsideSingle = true;\n    /** @type {?} */\n    let outsideDouble = true;\n    for (let i = 0; i < value.length; i++) {\n        /** @type {?} */\n        const c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nfunction _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    /** @type {?} */\n    const urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n    }\n    return 'unsafe';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nfunction sanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, stringify$1(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nfunction sanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(stringify$1(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nfunction sanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(stringify$1(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nfunction sanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link\n * bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n */\nfunction sanitizeScript(unsafeScript) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n * @type {?}\n */\nconst defaultStyleSanitizer = ((/** @type {?} */ (function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'list-style' || prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n})));\n/**\n * @return {?}\n */\nfunction getSanitizer() {\n    /** @type {?} */\n    const lView = getLView();\n    return lView && lView[SANITIZER];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nconst angularCoreEnv = {\n    'ɵdefineBase': defineBase,\n    'ɵdefineComponent': defineComponent,\n    'ɵdefineDirective': defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ɵdefineNgModule': defineNgModule,\n    'ɵdefinePipe': definePipe,\n    'ɵdirectiveInject': directiveInject,\n    'ɵgetFactoryOf': getFactoryOf,\n    'ɵgetInheritedFactory': getInheritedFactory,\n    'inject': inject,\n    'ɵinjectAttribute': injectAttribute,\n    'ɵtemplateRefExtractor': templateRefExtractor,\n    'ɵNgOnChangesFeature': NgOnChangesFeature,\n    'ɵProvidersFeature': ProvidersFeature,\n    'ɵInheritDefinitionFeature': InheritDefinitionFeature,\n    'ɵelementAttribute': elementAttribute,\n    'ɵbind': bind,\n    'ɵcontainer': container,\n    'ɵnextContext': nextContext,\n    'ɵcontainerRefreshStart': containerRefreshStart,\n    'ɵcontainerRefreshEnd': containerRefreshEnd,\n    'ɵloadQueryList': loadQueryList,\n    'ɵnamespaceHTML': namespaceHTML,\n    'ɵnamespaceMathML': namespaceMathML,\n    'ɵnamespaceSVG': namespaceSVG,\n    'ɵenableBindings': enableBindings,\n    'ɵdisableBindings': disableBindings,\n    'ɵallocHostVars': allocHostVars,\n    'ɵelementStart': elementStart,\n    'ɵelementEnd': elementEnd,\n    'ɵelement': element,\n    'ɵelementContainerStart': elementContainerStart,\n    'ɵelementContainerEnd': elementContainerEnd,\n    'ɵpureFunction0': pureFunction0,\n    'ɵpureFunction1': pureFunction1,\n    'ɵpureFunction2': pureFunction2,\n    'ɵpureFunction3': pureFunction3,\n    'ɵpureFunction4': pureFunction4,\n    'ɵpureFunction5': pureFunction5,\n    'ɵpureFunction6': pureFunction6,\n    'ɵpureFunction7': pureFunction7,\n    'ɵpureFunction8': pureFunction8,\n    'ɵpureFunctionV': pureFunctionV,\n    'ɵgetCurrentView': getCurrentView,\n    'ɵrestoreView': restoreView,\n    'ɵinterpolation1': interpolation1,\n    'ɵinterpolation2': interpolation2,\n    'ɵinterpolation3': interpolation3,\n    'ɵinterpolation4': interpolation4,\n    'ɵinterpolation5': interpolation5,\n    'ɵinterpolation6': interpolation6,\n    'ɵinterpolation7': interpolation7,\n    'ɵinterpolation8': interpolation8,\n    'ɵinterpolationV': interpolationV,\n    'ɵelementClassProp': elementClassProp,\n    'ɵlistener': listener,\n    'ɵload': load,\n    'ɵprojection': projection,\n    'ɵelementProperty': elementProperty,\n    'ɵcomponentHostSyntheticProperty': componentHostSyntheticProperty,\n    'ɵpipeBind1': pipeBind1,\n    'ɵpipeBind2': pipeBind2,\n    'ɵpipeBind3': pipeBind3,\n    'ɵpipeBind4': pipeBind4,\n    'ɵpipeBindV': pipeBindV,\n    'ɵprojectionDef': projectionDef,\n    'ɵpipe': pipe,\n    'ɵquery': query,\n    'ɵqueryRefresh': queryRefresh,\n    'ɵregisterContentQuery': registerContentQuery,\n    'ɵreference': reference,\n    'ɵelementStyling': elementStyling,\n    'ɵelementHostAttrs': elementHostAttrs,\n    'ɵelementStylingMap': elementStylingMap,\n    'ɵelementStyleProp': elementStyleProp,\n    'ɵelementStylingApply': elementStylingApply,\n    'ɵtemplate': template,\n    'ɵtext': text,\n    'ɵtextBinding': textBinding,\n    'ɵembeddedViewStart': embeddedViewStart,\n    'ɵembeddedViewEnd': embeddedViewEnd,\n    'ɵi18n': i18n,\n    'ɵi18nAttributes': i18nAttributes,\n    'ɵi18nExp': i18nExp,\n    'ɵi18nStart': i18nStart,\n    'ɵi18nEnd': i18nEnd,\n    'ɵi18nApply': i18nApply,\n    'ɵi18nPostprocess': i18nPostprocess,\n    'ɵsanitizeHtml': sanitizeHtml,\n    'ɵsanitizeStyle': sanitizeStyle,\n    'ɵdefaultStyleSanitizer': defaultStyleSanitizer,\n    'ɵsanitizeResourceUrl': sanitizeResourceUrl,\n    'ɵsanitizeScript': sanitizeScript,\n    'ɵsanitizeUrl': sanitizeUrl\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgModuleFactoryLoader {\n}\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n * @type {?}\n */\nconst modules = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nfunction registerModuleFactory(id, factory) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertNotExisting(id, existing && existing.moduleType);\n    modules.set(id, factory);\n}\n/**\n * @param {?} id\n * @param {?} type\n * @return {?}\n */\nfunction assertNotExisting(id, type) {\n    if (type) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * @param {?} id\n * @param {?} ngModuleType\n * @return {?}\n */\nfunction registerNgModuleType(id, ngModuleType) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertNotExisting(id, existing);\n    modules.set(id, ngModuleType);\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__PRE_R3__(id) {\n    /** @type {?} */\n    const factory = (/** @type {?} */ (modules.get(id)));\n    if (!factory)\n        throw noModuleError(id);\n    return factory;\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__POST_R3__(id) {\n    /** @type {?} */\n    const type = (/** @type {?} */ (modules.get(id)));\n    if (!type)\n        throw noModuleError(id);\n    return new NgModuleFactory$1(type);\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @type {?}\n */\nconst getModuleFactory = getModuleFactory__PRE_R3__;\n/**\n * @param {?} id\n * @return {?}\n */\nfunction noModuleError(id) {\n    return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isType(v) {\n    return typeof v === 'function';\n}\n// WARNING: interface has both a type and a value, skipping emit\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Attention: These regex has to hold even if the code is minified!\n * @type {?}\n */\nconst DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n/** @type {?} */\nconst INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/** @type {?} */\nconst INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nclass ReflectionCapabilities {\n    /**\n     * @param {?=} reflect\n     */\n    constructor(reflect) { this._reflect = reflect || _global['Reflect']; }\n    /**\n     * @return {?}\n     */\n    isReflectionEnabled() { return true; }\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    factory(t) { return (...args) => new t(...args); }\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        /** @type {?} */\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    /**\n     * @private\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    _ownParameters(type, parentCtor) {\n        /** @type {?} */\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (((/** @type {?} */ (type))).parameters && ((/** @type {?} */ (type))).parameters !== parentCtor.parameters) {\n            return ((/** @type {?} */ (type))).parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        /** @type {?} */\n        const tsickleCtorParams = ((/** @type {?} */ (type))).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            /** @type {?} */\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            /** @type {?} */\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            /** @type {?} */\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        /** @type {?} */\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && ((/** @type {?} */ (type)))[PARAMETERS];\n        /** @type {?} */\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array(((/** @type {?} */ (type.length)))).fill(undefined);\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        /** @type {?} */\n        const parentCtor = getParentCtor(type);\n        /** @type {?} */\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    /**\n     * @private\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (((/** @type {?} */ (typeOrFunc))).annotations && ((/** @type {?} */ (typeOrFunc))).annotations !== parentCtor.annotations) {\n            /** @type {?} */\n            let annotations = ((/** @type {?} */ (typeOrFunc))).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (((/** @type {?} */ (typeOrFunc))).decorators && ((/** @type {?} */ (typeOrFunc))).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(((/** @type {?} */ (typeOrFunc))).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return ((/** @type {?} */ (typeOrFunc)))[ANNOTATIONS];\n        }\n        return null;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        /** @type {?} */\n        const parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        /** @type {?} */\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    /**\n     * @private\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (((/** @type {?} */ (typeOrFunc))).propMetadata &&\n            ((/** @type {?} */ (typeOrFunc))).propMetadata !== parentCtor.propMetadata) {\n            /** @type {?} */\n            let propMetadata = ((/** @type {?} */ (typeOrFunc))).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (((/** @type {?} */ (typeOrFunc))).propDecorators &&\n            ((/** @type {?} */ (typeOrFunc))).propDecorators !== parentCtor.propDecorators) {\n            /** @type {?} */\n            const propDecorators = ((/** @type {?} */ (typeOrFunc))).propDecorators;\n            /** @type {?} */\n            const propMetadata = (/** @type {?} */ ({}));\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return ((/** @type {?} */ (typeOrFunc)))[PROP_METADATA];\n        }\n        return null;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        /** @type {?} */\n        const parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            /** @type {?} */\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        /** @type {?} */\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                /** @type {?} */\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    guards(type) { return {}; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getter(name) { return (/** @type {?} */ (new Function('o', 'return o.' + name + ';'))); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    setter(name) {\n        return (/** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;')));\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    method(name) {\n        /** @type {?} */\n        const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n        return (/** @type {?} */ (new Function('o', 'args', functionBody)));\n    }\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    importUri(type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return `./${stringify(type)}`;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    resourceUri(type) { return `./${stringify(type)}`; }\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return runtime;\n    }\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        /** @type {?} */\n        const decoratorType = decoratorInvocation.type;\n        /** @type {?} */\n        const annotationCls = decoratorType.annotationCls;\n        /** @type {?} */\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    /** @type {?} */\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    /** @type {?} */\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _reflect = null;\n/**\n * @return {?}\n */\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nfunction convertDependencies(deps) {\n    /** @type {?} */\n    const compiler = getCompilerFacade();\n    return deps.map(dep => reflectDependency(compiler, dep));\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n    /** @type {?} */\n    const meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (let j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(`Attribute name must be defined.`);\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_ARRAY$2 = [];\n/** @type {?} */\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\n/** @type {?} */\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n * @return {?}\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n * @param {?} declaration\n * @return {?}\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?=} ngModule\n * @return {?}\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n    compileNgModuleDefs((/** @type {?} */ (moduleType)), ngModule);\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction compileNgModuleDefs(moduleType, ngModule) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    /** @type {?} */\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$2);\n    /** @type {?} */\n    /** @nocollapse */ let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: () => {\n            if (ngModuleDef === null) {\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, `ng://${moduleType.name}/ngModuleDef.js`, {\n                    type: moduleType,\n                    bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY$2, resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten$1(ngModule.imports || EMPTY_ARRAY$2, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten$1(ngModule.exports || EMPTY_ARRAY$2, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    emitInline: true,\n                });\n            }\n            return ngModuleDef;\n        }\n    });\n    if (ngModule.id) {\n        registerNgModuleType(ngModule.id, moduleType);\n    }\n    /** @type {?} */\n    /** @nocollapse */ let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: () => {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (moduleType)))));\n                /** @type {?} */\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY$2,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY$2).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY$2).map(resolveForwardRef),\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, `ng://${moduleType.name}/ngInjectorDef.js`, meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} moduleType\n * @return {?}\n */\nfunction verifySemanticsOfNgModuleDef(moduleType) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(moduleType, true);\n    /** @type {?} */\n    const errors = [];\n    ngModuleDef.declarations.forEach(verifyDeclarationsHaveDefinitions);\n    /** @type {?} */\n    const combinedDeclarations = [\n        ...ngModuleDef.declarations.map(resolveForwardRef),\n        ...flatten$1(ngModuleDef.imports.map(computeCombinedExports), resolveForwardRef),\n    ];\n    ngModuleDef.exports.forEach(verifyExportsAreDeclaredOrReExported);\n    ngModuleDef.declarations.forEach(verifyDeclarationIsUnique);\n    ngModuleDef.declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    /** @type {?} */\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten$1(ngModule.imports, unwrapModuleWithProvidersImports)\n                .forEach(verifySemanticsOfNgModuleDef);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents && ngModule.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n        if (!def) {\n            errors.push(`Unexpected value '${stringify$1(type)}' declared by the module '${stringify$1(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${stringify$1(type)} from ${stringify$1(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationIsUnique(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            /** @type {?} */\n            const modules = [existingModule, moduleType].map(stringify$1).sort();\n            errors.push(`Type ${stringify$1(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                `Please consider moving ${stringify$1(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                `You can also create a new NgModule that exports and includes ${stringify$1(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule) {\n            errors.push(`Component ${stringify$1(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef(type)) {\n            // We know we are component\n            /** @type {?} */\n            const component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                component.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n}\n/**\n * @param {?} typeOrWithProviders\n * @return {?}\n */\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return ((/** @type {?} */ (typeOrWithProviders))).ngModule || typeOrWithProviders;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?} name\n * @return {?}\n */\nfunction getAnnotation(type, name) {\n    /** @type {?} */\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    /**\n     * @param {?} annotations\n     * @return {?}\n     */\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    /**\n     * @param {?} decorator\n     * @return {?}\n     */\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            /** @type {?} */\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = (/** @type {?} */ (decorator));\n            }\n            else if (decorator.type) {\n                /** @type {?} */\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n * @type {?}\n */\nlet ownerNgModule = new Map();\n/** @type {?} */\nlet verifiedNgModule = new Map();\n/**\n * @return {?}\n */\nfunction resetCompiledComponents() {\n    ownerNgModule = new Map();\n    verifiedNgModule = new Map();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited\n * by\n * traversing the exports of imported modules.\n * @param {?} type\n * @return {?}\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(type, true);\n    return [...flatten$1(ngModuleDef.exports.map((type) => {\n            /** @type {?} */\n            /** @nocollapse */ const ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (type)))));\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$2);\n    /** @type {?} */\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(declaration => {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            // An `ngComponentDef` field exists - go ahead and patch the component directly.\n            /** @type {?} */\n            const component = (/** @type {?} */ (declaration));\n            /** @type {?} */\n            const componentDef = (/** @type {?} */ (getComponentDef(component)));\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            ((/** @type {?} */ (declaration))).ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)\n        .map(dir => getDirectiveDef(dir) || (/** @type {?} */ (getComponentDef(dir))))\n        .filter(def => !!def);\n    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => (/** @type {?} */ (getPipeDef(pipe))));\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction transitiveScopesFor(moduleType) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n    }\n    /** @type {?} */\n    const def = (/** @type {?} */ (getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    const scopes = {\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    def.declarations.forEach(declared => {\n        /** @type {?} */\n        const declaredWithDefs = (/** @type {?} */ (declared));\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    def.imports.forEach((imported) => {\n        /** @type {?} */\n        const importedTyped = (/** @type {?} */ (imported));\n        if (!isNgModule(importedTyped)) {\n            throw new Error(`Importing ${importedTyped.name} which does not have an ngModuleDef`);\n        }\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        /** @type {?} */\n        const importedScope = transitiveScopesFor(importedTyped);\n        importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n        importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n    });\n    def.exports.forEach((exported) => {\n        /** @type {?} */\n        const exportedTyped = (/** @type {?} */ (exported));\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedTyped)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            /** @type {?} */\n            const exportedScope = transitiveScopesFor(exportedTyped);\n            exportedScope.exported.directives.forEach(entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getPipeDef(exportedTyped)) {\n            scopes.exported.pipes.add(exportedTyped);\n        }\n        else {\n            scopes.exported.directives.add(exportedTyped);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @param {?=} mapFn\n * @return {?}\n */\nfunction flatten$1(values, mapFn) {\n    /** @type {?} */\n    const out = [];\n    values.forEach(value => {\n        if (Array.isArray(value)) {\n            out.push(...flatten$1(value, mapFn));\n        }\n        else {\n            out.push(mapFn ? mapFn(value) : value);\n        }\n    });\n    return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return ((/** @type {?} */ (value))).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ let ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: () => {\n            /** @type {?} */\n            const compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    const error = [`Component '${stringify$1(type)}' is not resolved:`];\n                    if (metadata.templateUrl) {\n                        error.push(` - templateUrl: ${stringify$1(metadata.templateUrl)}`);\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n                    }\n                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                const meta = Object.assign({}, directiveMetadata(type, metadata), { template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, viewQueries: extractQueriesMetadata(type, getReflect().propMetadata(type), isViewQuery), directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, `ng://${stringify$1(type)}/template.html`, meta);\n                // When NgModule decorator executed, we enqueued the module definition such that\n                // it would only dequeue and add itself as module scope to all of its declarations,\n                // but only if  if all of its declarations had resolved. This call runs the check\n                // to see if any modules that are in the queue can be dequeued and add scope to\n                // their declarations.\n                flushModuleScopingQueueAsMuchAsPossible();\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    const scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return ((/** @type {?} */ (component))).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nfunction compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ let ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: () => {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                const facade = directiveMetadata((/** @type {?} */ (type)), directive);\n                ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, `ng://${type && type.name}/ngDirectiveDef.js`, facade);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    // Reflect inputs and outputs.\n    /** @type {?} */\n    const propMetadata = getReflect().propMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: (/** @type {?} */ (metadata.selector)),\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY,\n        outputs: metadata.outputs || EMPTY_ARRAY,\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n        lifecycle: {\n            usesOnChanges: type.prototype.ngOnChanges !== undefined,\n        },\n        typeSourceSpan: (/** @type {?} */ (null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: metadata.exportAs || null,\n        providers: metadata.providers || null,\n    };\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nfunction convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null\n    };\n}\n/**\n * @param {?} type\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n    /** @type {?} */\n    const queriesMeta = [];\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isQueryAnn(ann)) {\n                    if (!ann.selector) {\n                        throw new Error(`Can't construct a query for the property \"${field}\" of ` +\n                            `\"${stringify$1(type)}\" since the query selector wasn't defined.`);\n                    }\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            });\n        }\n    }\n    return queriesMeta;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n    return value.split(',').map(piece => piece.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nfunction compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ let ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: () => {\n            if (ngPipeDef === null) {\n                ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, `ng://${stringify$1(type)}/ngPipeDef.js`, {\n                    type: type,\n                    name: type.name,\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true\n                });\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Type of the Directive metadata.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => SWITCH_COMPILE_DIRECTIVE(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Component decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Component = makeDecorator('Component', (c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)), Directive, undefined, (type, meta) => SWITCH_COMPILE_COMPONENT(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Pipe = makeDecorator('Pipe', (p) => (Object.assign({ pure: true }, p)), undefined, undefined, (type, meta) => SWITCH_COMPILE_PIPE(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/** @type {?} */\nconst initializeBaseDef = (target) => {\n    /** @type {?} */\n    const constructor = target.constructor;\n    /** @nocollapse @type {?} */\n    const inheritedBaseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    const baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\n/**\n * Does the work of creating the `ngBaseDef` property for the \\@Input and \\@Output decorators.\n * \\@param key \"inputs\" or \"outputs\"\n * @type {?}\n */\nconst updateBaseDefFromIOProp = (getProp) => (target, name, ...args) => {\n    /** @type {?} */\n    const constructor = target.constructor;\n    if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n        initializeBaseDef(target);\n    }\n    /** @nocollapse @type {?} */\n    const baseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    const defProp = getProp(baseDef);\n    defProp[name] = args[0];\n};\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Input = makePropDecorator('Input', (bindingPropertyName) => ({ bindingPropertyName }), undefined, updateBaseDefFromIOProp(baseDef => baseDef.inputs || {}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Output = makePropDecorator('Output', (bindingPropertyName) => ({ bindingPropertyName }), undefined, updateBaseDefFromIOProp(baseDef => baseDef.outputs || {}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostBinding = makePropDecorator('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({ eventName, args }));\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$2 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: ɵ0$2 });\n/** @type {?} */\nconst EMPTY_ARRAY$3 = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nfunction convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        const reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        const deps = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return () => new type(...injectArgs((/** @type {?} */ (deps))));\n    }\n    if (USE_VALUE$1 in provider) {\n        /** @type {?} */\n        const valueProvider = ((/** @type {?} */ (provider)));\n        return () => valueProvider.useValue;\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const existingProvider = ((/** @type {?} */ (provider)));\n        return () => inject(existingProvider.useExisting);\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        /** @type {?} */\n        const factoryProvider = ((/** @type {?} */ (provider)));\n        return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY$3));\n    }\n    else if (((/** @type {?} */ (provider))).useClass) {\n        /** @type {?} */\n        const classProvider = ((/** @type {?} */ (provider)));\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return () => new classProvider.useClass(...injectArgs(deps));\n    }\n    else {\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return () => new type(...injectArgs((/** @type {?} */ (deps))));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * \\@publicApi\n * @type {?}\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst NgModule = makeDecorator('NgModule', (ngModule) => ngModule, undefined, undefined, \n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n(type, meta) => SWITCH_COMPILE_NGMODULE(type, meta));\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    let imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = [...imports, metadata.exports];\n    }\n    /** @nocollapse */ moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nfunction compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    let def = null;\n    // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n    if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n        return;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: () => {\n            if (def === null) {\n                // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n                /** @type {?} */\n                const meta = srcMeta || { providedIn: null };\n                /** @type {?} */\n                const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                    isUseValueProvider(meta) || isUseExistingProvider(meta);\n                /** @type {?} */\n                const compilerMeta = {\n                    name: type.name,\n                    type: type,\n                    typeArgumentCount: 0,\n                    providedIn: meta.providedIn,\n                    ctorDeps: reflectDependencies(type),\n                    userDeps: undefined\n                };\n                if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                    compilerMeta.userDeps = convertDependencies(meta.deps);\n                }\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    compilerMeta.useClass = type;\n                }\n                else if (isUseClassProvider(meta)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    compilerMeta.useClass = meta.useClass;\n                }\n                else if (isUseValueProvider(meta)) {\n                    // The user explicitly specified useValue.\n                    compilerMeta.useValue = meta.useValue;\n                }\n                else if (isUseFactoryProvider(meta)) {\n                    // The user explicitly specified useFactory.\n                    compilerMeta.useFactory = meta.useFactory;\n                }\n                else if (isUseExistingProvider(meta)) {\n                    // The user explicitly specified useExisting.\n                    compilerMeta.useExisting = meta.useExisting;\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(`Unreachable state.`);\n                }\n                def = getCompilerFacade().compileInjectable(angularCoreEnv, `ng://${type.name}/ngInjectableDef.js`, compilerMeta);\n            }\n            return def;\n        },\n    });\n}\nconst ɵ0$3 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: ɵ0$3 });\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return ((/** @type {?} */ (meta))).useClass !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE$2 in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return ((/** @type {?} */ (meta))).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return ((/** @type {?} */ (meta))).useExisting !== undefined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Injectable decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => SWITCH_COMPILE_INJECTABLE((/** @type {?} */ (type)), meta));\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction render2CompileInjectable(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n/** @type {?} */\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n/** @type {?} */\nconst ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getDebugContext(error) {\n    return ((/** @type {?} */ (error)))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getOriginalError(error) {\n    return ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getErrorLogger(error) {\n    return ((/** @type {?} */ (error)))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console, ...values) {\n    ((/** @type {?} */ (console.error)))(...values);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nclass ErrorHandler {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    handleError(error) {\n        /** @type {?} */\n        const originalError = this._findOriginalError(error);\n        /** @type {?} */\n        const context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        /** @type {?} */\n        const errorLogger = getErrorLogger(error);\n        errorLogger(this._console, `ERROR`, error);\n        if (originalError) {\n            errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findContext(error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findOriginalError(error) {\n        /** @type {?} */\n        let e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    }\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nfunction wrappedError(message, originalError) {\n    /** @type {?} */\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    /** @type {?} */\n    const error = Error(msg);\n    ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    const res = [];\n    for (let i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        const reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        const tokenStrs = reversed.map(k => stringify(k.token));\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    const keys = [key];\n    /** @type {?} */\n    const errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    const error = (/** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg))));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nfunction invalidProviderError(provider) {\n    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nfunction noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    const signature = [];\n    for (let i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        const parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nfunction outOfBoundsError(index) {\n    return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nclass ReflectiveKey {\n    /**\n     * Private\n     * @param {?} token\n     * @param {?} id\n     */\n    constructor(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    static get(token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    }\n    /**\n     * @return {?} the number of keys registered in the system.\n     */\n    static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }\n}\nclass KeyRegistry {\n    constructor() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    get(token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return (/** @type {?} */ (this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    }\n    /**\n     * @return {?}\n     */\n    get numberOfKeys() { return this._allKeys.size; }\n}\n/** @type {?} */\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nclass Reflector {\n    /**\n     * @param {?} reflectionCapabilities\n     */\n    constructor(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    updateCapabilities(caps) { this.reflectionCapabilities = caps; }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    factory(type) { return this.reflectionCapabilities.factory(type); }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    parameters(typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    annotations(typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    propMetadata(typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    }\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    hasLifecycleHook(type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getter(name) { return this.reflectionCapabilities.getter(name); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    setter(name) { return this.reflectionCapabilities.setter(name); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    method(name) { return this.reflectionCapabilities.method(name); }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    importUri(type) { return this.reflectionCapabilities.importUri(type); }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    resourceUri(type) { return this.reflectionCapabilities.resourceUri(type); }\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    }\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    resolveEnum(identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The {\\@link Reflector} used internally in Angular to access metadata\n * about symbols.\n * @type {?}\n */\nconst reflector = new Reflector(new ReflectionCapabilities());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n    /**\n     * @param {?} key\n     * @param {?} optional\n     * @param {?} visibility\n     */\n    constructor(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    static fromKey(key) {\n        return new ReflectiveDependency(key, false, null);\n    }\n}\n/** @type {?} */\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n    /**\n     * @param {?} key\n     * @param {?} resolvedFactories\n     * @param {?} multiProvider\n     */\n    constructor(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nclass ResolvedReflectiveFactory {\n    /**\n     * @param {?} factory\n     * @param {?} dependencies\n     */\n    constructor(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    let factoryFn;\n    /** @type {?} */\n    let resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        const useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = (aliasInstance) => aliasInstance;\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = () => provider.useValue;\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nfunction resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    const normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    const resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        /** @type {?} */\n        const existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (let j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            let resolvedProvider;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(b => {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && ((/** @type {?} */ (b))).provide !== undefined) {\n            res.push((/** @type {?} */ (b)));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nfunction constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        const params = dependencies.map(t => [t]);\n        return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    const params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(p => p == null)) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    let token = null;\n    /** @type {?} */\n    let optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    let visibility = null;\n    for (let i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        const paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Threshold for the dynamic version\n/** @type {?} */\nconst UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nclass ReflectiveInjector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    static resolve(providers) {\n        return resolveReflectiveProviders(providers);\n    }\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static resolveAndCreate(providers, parent) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    }\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static fromResolvedProviders(providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    }\n}\nclass ReflectiveInjector_ {\n    /**\n     * Private\n     * @param {?} _providers\n     * @param {?=} _parent\n     */\n    constructor(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        const len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    resolveAndCreateChild(providers) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    createChildFromResolved(providers) {\n        /** @type {?} */\n        const inj = new ReflectiveInjector_(providers);\n        ((/** @type {?} */ (inj))).parent = this;\n        return inj;\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    resolveAndInstantiate(provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    instantiateResolved(provider) {\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    getProviderAtIndex(index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    }\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    _new(provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getMaxNumberOfObjects() { return this.objs.length; }\n    /**\n     * @private\n     * @param {?} provider\n     * @return {?}\n     */\n    _instantiateProvider(provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            const res = new Array(provider.resolvedFactories.length);\n            for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    }\n    /**\n     * @private\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    _instantiate(provider, ResolvedReflectiveFactory$$1) {\n        /** @type {?} */\n        const factory = ResolvedReflectiveFactory$$1.factory;\n        /** @type {?} */\n        let deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory$$1.dependencies.map(dep => this._getByReflectiveDependency(dep));\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        let obj;\n        try {\n            obj = factory(...deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    }\n    /**\n     * @private\n     * @param {?} dep\n     * @return {?}\n     */\n    _getByReflectiveDependency(dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKey(key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    }\n    /**\n     * @private\n     * @param {?} keyId\n     * @return {?}\n     */\n    _getObjByKeyId(keyId) {\n        for (let i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _throwOrNull(key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKeySelf(key, notFoundValue) {\n        /** @type {?} */\n        const obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    _getByKeyDefault(key, notFoundValue, visibility) {\n        /** @type {?} */\n        let inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            const inj_ = (/** @type {?} */ (inj));\n            /** @type {?} */\n            const obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get displayName() {\n        /** @type {?} */\n        const providers = _mapProviders(this, (b) => ' \"' + b.key.displayName + '\" ')\n            .join(', ');\n        return `ReflectiveInjector(providers: [${providers}])`;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return this.displayName; }\n}\nReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    const res = new Array(injector._providers.length);\n    for (let i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n * @param {?} obj\n * @return {?}\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n * @param {?} obj\n * @return {?}\n */\nfunction isObservable(obj) {\n    // TODO: use isObservable once we update pass rxjs 6.1\n    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n    return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A function that will be executed when an application is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@publicApi\n */\nclass ApplicationInitStatus {\n    /**\n     * @param {?} appInits\n     */\n    constructor(appInits) {\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise((res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    runInitializers() {\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        const asyncInitPromises = [];\n        /** @type {?} */\n        const complete = () => {\n            ((/** @type {?} */ (this))).done = true;\n            this.resolve();\n        };\n        if (this.appInits) {\n            for (let i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                const initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    }\n}\nApplicationInitStatus.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nApplicationInitStatus.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nfunction _appIdRandomProviderFactory() {\n    return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: (/** @type {?} */ ([])),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@publicApi\n * @type {?}\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Console {\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    log(message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    }\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    warn(message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    }\n}\nConsole.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nclass ModuleWithComponentFactories {\n    /**\n     * @param {?} ngModuleFactory\n     * @param {?} componentFactories\n     */\n    constructor(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(`Runtime compiler is not loaded`);\n}\n/** @type {?} */\nconst Compiler_compileModuleSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n    return new NgModuleFactory$1(moduleType);\n};\n/** @type {?} */\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n    return new ModuleWithComponentFactories(Compiler_compileModuleSync__POST_R3__(moduleType), []);\n};\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * \\@publicApi\n */\nclass Compiler {\n    constructor() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    clearCache() { }\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    clearCacheFor(type) { }\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    getModuleId(moduleType) { return undefined; }\n}\nCompiler.decorators = [\n    { type: Injectable }\n];\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@publicApi\n * @type {?}\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nclass CompilerFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet trace;\n/** @type {?} */\nlet events;\n/**\n * @return {?}\n */\nfunction detectWTF() {\n    /** @type {?} */\n    const wtf = ((/** @type {?} */ (_global)))['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nfunction createScope(signature, flags = null) {\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nfunction leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nfunction startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nfunction endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * True if WTF is enabled.\n * @type {?}\n */\nconst wtfEnabled = detectWTF();\n/**\n * @param {?=} arg0\n * @param {?=} arg1\n * @return {?}\n */\nfunction noopScope(arg0, arg1) {\n    return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * \\@publicApi\n * @type {?}\n */\nconst wtfCreateScope = wtfEnabled ? createScope : (signature, flags) => noopScope;\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * \\@publicApi\n * @type {?}\n */\nconst wtfLeave = wtfEnabled ? leave : (s, r) => r;\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * \\@publicApi\n * @type {?}\n */\nconst wtfStartTimeRange = wtfEnabled ? startTimeRange : (rangeType, action) => null;\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * \\@publicApi\n * @type {?}\n */\nconst wtfEndTimeRange = wtfEnabled ? endTimeRange : (r) => null;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass NgZone {\n    /**\n     * @param {?} __0\n     */\n    constructor({ enableLongStackTrace = false }) {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(`In this configuration Angular requires Zone.js`);\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        const self = (/** @type {?} */ ((/** @type {?} */ (this))));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if (((/** @type {?} */ (Zone)))['wtfZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['wtfZoneSpec']);\n        }\n        if (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new ((/** @type {?} */ (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']))));\n        }\n        if (enableLongStackTrace && ((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    static isInAngularZone() { return Zone.current.get('isAngularZone') === true; }\n    /**\n     * @return {?}\n     */\n    static assertInAngularZone() {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    static assertNotInAngularZone() {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    run(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.run(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    runTask(fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        const zone = ((/** @type {?} */ ((/** @type {?} */ (this)))))._inner;\n        /** @type {?} */\n        const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);\n        try {\n            return (/** @type {?} */ (zone.runTask(task, applyThis, applyArgs)));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    }\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    runGuarded(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.runGuarded(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._outer.run(fn)));\n    }\n}\n/**\n * @return {?}\n */\nfunction noop$1() { }\n/** @type {?} */\nconst EMPTY_PAYLOAD = {};\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(() => zone.onStable.emit(null));\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: (/** @type {?} */ ({ 'isAngularZone': true })),\n        onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: (delegate, current, target, hasTaskState) => {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: (delegate, current, target, error) => {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(() => zone.onError.emit(error));\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n    constructor() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    run(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runGuarded(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) { return fn(); }\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runTask(fn) { return fn(); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@publicApi\n */\nclass Testability {\n    /**\n     * @param {?} _ngZone\n     */\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run(() => {\n            this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _watchAngularEvents() {\n        this._ngZone.onUnstable.subscribe({\n            next: () => {\n                this._didWork = true;\n                this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.subscribe({\n                next: () => {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(() => {\n                        this._isZoneStable = true;\n                        this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    increasePendingRequestCount() {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    }\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    decreasePendingRequestCount() {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    }\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    isStable() {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runCallbacksIfReady() {\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(() => {\n                while (this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    let cb = (/** @type {?} */ (this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(this._didWork);\n                }\n                this._didWork = false;\n            });\n        }\n        else {\n            // Still not stable, send updates.\n            /** @type {?} */\n            let pending = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter((cb) => {\n                if (cb.updateCb && cb.updateCb(pending)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getPendingTasks() {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map((t) => {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: (/** @type {?} */ (((/** @type {?} */ (t))).creationLocation)),\n                data: t.data\n            };\n        });\n    }\n    /**\n     * @private\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    addCallback(cb, timeout, updateCb) {\n        /** @type {?} */\n        let timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(() => {\n                this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n                cb(this._didWork, this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push((/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb })));\n    }\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    whenStable(doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback((/** @type {?} */ (doneCb)), timeout, (/** @type {?} */ (updateCb)));\n        this._runCallbacksIfReady();\n    }\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    getPendingRequestCount() { return this._pendingCount; }\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    findProviders(using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    }\n}\nTestability.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTestability.ctorParameters = () => [\n    { type: NgZone }\n];\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@publicApi\n */\nclass TestabilityRegistry {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    registerApplication(token, testability) {\n        this._applications.set(token, testability);\n    }\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    unregisterApplication(token) { this._applications.delete(token); }\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    unregisterAllApplications() { this._applications.clear(); }\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    getTestability(elem) { return this._applications.get(elem) || null; }\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    getAllTestabilities() { return Array.from(this._applications.values()); }\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    getAllRootElements() { return Array.from(this._applications.keys()); }\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    findTestabilityInTree(elem, findInAncestors = true) {\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    }\n}\nTestabilityRegistry.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTestabilityRegistry.ctorParameters = () => [];\nclass _NoopGetTestability {\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    addToWindow(registry) { }\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        return null;\n    }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@publicApi\n * @param {?} getter\n * @return {?}\n */\nfunction setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nlet _testabilityGetter = new _NoopGetTestability();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _platform;\n/** @type {?} */\nlet compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    /** @type {?} */\n    const compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    const compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    return Promise.resolve(new NgModuleFactory$1(moduleType));\n}\n/** @type {?} */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nclass NgProbeToken {\n    /**\n     * @param {?} name\n     * @param {?} token\n     */\n    constructor(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@publicApi\n * @param {?} injector\n * @return {?}\n */\nfunction createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    const inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach((init) => init());\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@publicApi\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n    /** @type {?} */\n    const desc = `Platform: ${name}`;\n    /** @type {?} */\n    const marker = new InjectionToken(desc);\n    return (extraProviders = []) => {\n        /** @type {?} */\n        let platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                const injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@publicApi\n * @param {?} requiredToken\n * @return {?}\n */\nfunction assertPlatform(requiredToken) {\n    /** @type {?} */\n    const platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@publicApi\n */\nclass PlatformRef {\n    /**\n     * \\@internal\n     * @param {?} _injector\n     */\n    constructor(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    bootstrapModuleFactory(moduleFactory, options) {\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        /** @type {?} */\n        const ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        const ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        const providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(() => {\n            /** @type {?} */\n            const ngZoneInjector = Injector.create({ providers: providers, parent: this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            const moduleRef = (/** @type {?} */ (moduleFactory.create(ngZoneInjector)));\n            /** @type {?} */\n            const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(() => remove(this._modules, moduleRef));\n            (/** @type {?} */ (ngZone)).runOutsideAngular(() => (/** @type {?} */ (ngZone)).onError.subscribe({ next: (error) => { exceptionHandler.handleError(error); } }));\n            return _callAndReportToErrorHandler(exceptionHandler, (/** @type {?} */ (ngZone)), () => {\n                /** @type {?} */\n                const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(() => {\n                    this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    bootstrapModule(moduleType, compilerOptions = []) {\n        /** @type {?} */\n        const options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n    }\n    /**\n     * @private\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    _moduleDoBootstrap(moduleRef) {\n        /** @type {?} */\n        const appRef = (/** @type {?} */ (moduleRef.injector.get(ApplicationRef)));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n                `Please define one of these.`);\n        }\n        this._modules.push(moduleRef);\n    }\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n    /**\n     * Retrieve the platform {\\@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     * @return {?}\n     */\n    get injector() { return this._injector; }\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(module => module.destroy());\n        this._destroyListeners.forEach(listener => listener());\n        this._destroyed = true;\n    }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return this._destroyed; }\n}\nPlatformRef.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nPlatformRef.ctorParameters = () => [\n    { type: Injector }\n];\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    let ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        const result = callback();\n        if (isPromise(result)) {\n            return result.catch((e) => {\n                ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = Object.assign({}, dst, ((/** @type {?} */ (objs))));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@usageNotes\n *\n * {\\@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ApplicationRef {\n    /**\n     * \\@internal\n     * @param {?} _zone\n     * @param {?} _console\n     * @param {?} _injector\n     * @param {?} _exceptionHandler\n     * @param {?} _componentFactoryResolver\n     * @param {?} _initStatus\n     */\n    constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: () => { this._zone.run(() => { this.tick(); }); } });\n        /** @type {?} */\n        const isCurrentlyStable = new Observable((observer) => {\n            this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks;\n            this._zone.runOutsideAngular(() => {\n                observer.next(this._stable);\n                observer.complete();\n            });\n        });\n        /** @type {?} */\n        const isStable = new Observable((observer) => {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            /** @type {?} */\n            let stableSub;\n            this._zone.runOutsideAngular(() => {\n                stableSub = this._zone.onStable.subscribe(() => {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(() => {\n                        if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                            !this._zone.hasPendingMicrotasks) {\n                            this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            /** @type {?} */\n            const unstableSub = this._zone.onUnstable.subscribe(() => {\n                NgZone.assertInAngularZone();\n                if (this._stable) {\n                    this._stable = false;\n                    this._zone.runOutsideAngular(() => { observer.next(false); });\n                }\n            });\n            return () => {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        ((/** @type {?} */ (this))).isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        let componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                (/** @type {?} */ (this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        /** @type {?} */\n        const ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        /** @type {?} */\n        const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(() => { this._unloadComponent(compRef); });\n        /** @type {?} */\n        const testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n        }\n        return compRef;\n    }\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    tick() {\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        const scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach((view) => view.detectChanges());\n            if (this._enforceNoNewChanges) {\n                this._views.forEach((view) => view.checkNoChanges());\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    }\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    attachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    }\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    detachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _loadComponent(componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        /** @type {?} */\n        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach((listener) => listener(componentRef));\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _unloadComponent(componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach((view) => view.destroy());\n    }\n    /**\n     * Returns the number of attached views.\n     * @return {?}\n     */\n    get viewCount() { return this._views.length; }\n}\n/**\n * \\@internal\n */\nApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\nApplicationRef.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nApplicationRef.ctorParameters = () => [\n    { type: NgZone },\n    { type: Console },\n    { type: Injector },\n    { type: ErrorHandler },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationInitStatus }\n];\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nclass QueryList$1 {\n    constructor() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    map(fn) { return this._results.map(fn); }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) { this._results.forEach(fn); }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * @return {?}\n     */\n    toArray() { return this._results.slice(); }\n    /**\n     * @return {?}\n     */\n    [getSymbolIterator()]() { return ((/** @type {?} */ (this._results)))[getSymbolIterator()](); }\n    /**\n     * @return {?}\n     */\n    toString() { return this._results.toString(); }\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    reset(res) {\n        this._results = flatten$2(res);\n        ((/** @type {?} */ (this))).dirty = false;\n        ((/** @type {?} */ (this))).length = this._results.length;\n        ((/** @type {?} */ (this))).last = this._results[this.length - 1];\n        ((/** @type {?} */ (this))).first = this._results[0];\n    }\n    /**\n     * @return {?}\n     */\n    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }\n    /**\n     * internal\n     * @return {?}\n     */\n    setDirty() { ((/** @type {?} */ (this))).dirty = true; }\n    /**\n     * internal\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this.changes))).complete();\n        ((/** @type {?} */ (this.changes))).unsubscribe();\n    }\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten$2(list) {\n    return list.reduce((flat, item) => {\n        /** @type {?} */\n        const flatItem = Array.isArray(item) ? flatten$2(item) : item;\n        return ((/** @type {?} */ (flat))).concat(flatItem);\n    }, []);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _SEPARATOR = '#';\n/** @type {?} */\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nclass SystemJsNgModuleLoaderConfig {\n}\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@publicApi\n */\nclass SystemJsNgModuleLoader {\n    /**\n     * @param {?} _compiler\n     * @param {?=} config\n     */\n    constructor(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    load(path) {\n        /** @type {?} */\n        const offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadAndCompile(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then((module) => module[exportName])\n            .then((type) => checkNotEmpty(type, module, exportName))\n            .then((type) => this._compiler.compileModuleAsync(type));\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadFactory(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        /** @type {?} */\n        let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then((module) => module[exportName + factoryClassSuffix])\n            .then((factory) => checkNotEmpty(factory, module, exportName));\n    }\n}\nSystemJsNgModuleLoader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSystemJsNgModuleLoader.ctorParameters = () => [\n    { type: Compiler },\n    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n];\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewContainerRef {\n}\n/**\n * \\@internal\n */\nViewContainerRef.__NG_ELEMENT_ID__ = () => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef);\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nclass ChangeDetectorRef {\n}\n/**\n * \\@internal\n */\nChangeDetectorRef.__NG_ELEMENT_ID__ = () => SWITCH_CHANGE_DETECTOR_REF_FACTORY();\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (...args) => { };\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewRef$1 extends ChangeDetectorRef {\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass EmbeddedViewRef extends ViewRef$1 {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass EventListener {\n    /**\n     * @param {?} name\n     * @param {?} callback\n     */\n    constructor(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return this._debugContext.injector; }\n    /**\n     * @return {?}\n     */\n    get componentInstance() { return this._debugContext.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this._debugContext.context; }\n    /**\n     * @return {?}\n     */\n    get references() { return this._debugContext.references; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return this._debugContext.providerTokens; }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        super(nativeNode, parent, _debugContext);\n        this.properties = {};\n        this.attributes = {};\n        this.classes = {};\n        this.styles = {};\n        this.childNodes = [];\n        this.nativeElement = nativeNode;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    addChild(child) {\n        if (child) {\n            this.childNodes.push(child);\n            ((/** @type {?} */ (child))).parent = this;\n        }\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    removeChild(child) {\n        /** @type {?} */\n        const childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            ((/** @type {?} */ (child))).parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    }\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    insertChildrenAfter(child, newChildren) {\n        /** @type {?} */\n        const siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n            newChildren.forEach(c => {\n                if (c.parent) {\n                    ((/** @type {?} */ (c.parent))).removeChild(c);\n                }\n                ((/** @type {?} */ (child))).parent = this;\n            });\n        }\n    }\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    insertBefore(refChild, newChild) {\n        /** @type {?} */\n        const refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                ((/** @type {?} */ (newChild.parent))).removeChild(newChild);\n            }\n            ((/** @type {?} */ (newChild))).parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        return (/** @type {?} */ (this\n            .childNodes //\n            .filter((node) => node instanceof DebugElement__PRE_R3__)));\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((listener) => {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    }\n}\n/**\n * \\@publicApi\n * @param {?} debugEls\n * @return {?}\n */\nfunction asNativeElements(debugEls) {\n    return debugEls.map((el) => el.nativeElement);\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(node => {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach(node => {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\nclass DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) { this.nativeNode = nativeNode; }\n    /**\n     * @return {?}\n     */\n    get parent() {\n        /** @type {?} */\n        const parent = (/** @type {?} */ (this.nativeNode.parentNode));\n        return parent ? new DebugElement__POST_R3__(parent) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return getInjector(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get componentInstance() {\n        /** @type {?} */\n        const nativeElement = this.nativeNode;\n        return nativeElement && getComponent((/** @type {?} */ (nativeElement)));\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return getContext((/** @type {?} */ (this.nativeNode))); }\n    /**\n     * @return {?}\n     */\n    get listeners() {\n        return getListeners((/** @type {?} */ (this.nativeNode))).filter(isBrowserEvents);\n    }\n    /**\n     * @return {?}\n     */\n    get references() { return getLocalRefs(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return getInjectionTokens((/** @type {?} */ (this.nativeNode))); }\n}\nclass DebugElement__POST_R3__ extends DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) {\n        ngDevMode && assertDomNode(nativeNode);\n        super(nativeNode);\n    }\n    /**\n     * @return {?}\n     */\n    get nativeElement() {\n        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? (/** @type {?} */ (this.nativeNode)) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get name() { return (/** @type {?} */ (this.nativeElement)).nodeName; }\n    /**\n     * @return {?}\n     */\n    get properties() {\n        /** @type {?} */\n        const context = (/** @type {?} */ (loadLContext(this.nativeNode)));\n        /** @type {?} */\n        const lView = context.lView;\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        /** @type {?} */\n        const tNode = (/** @type {?} */ (tView.data[context.nodeIndex]));\n        /** @type {?} */\n        const properties = {};\n        // TODO: https://angular-team.atlassian.net/browse/FW-681\n        // Missing implementation here...\n        return properties;\n    }\n    /**\n     * @return {?}\n     */\n    get attributes() {\n        /** @type {?} */\n        const attributes = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const eAttrs = element.attributes;\n            for (let i = 0; i < eAttrs.length; i++) {\n                /** @type {?} */\n                const attr = eAttrs[i];\n                attributes[attr.name] = attr.value;\n            }\n        }\n        return attributes;\n    }\n    /**\n     * @return {?}\n     */\n    get classes() {\n        /** @type {?} */\n        const classes = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const lContext = loadLContextFromNode(element);\n            /** @type {?} */\n            const lNode = lContext.lView[lContext.nodeIndex];\n            /** @type {?} */\n            const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n            if (stylingContext) {\n                for (let i = 9 /* SingleStylesStartPosition */; i < lNode.length; i += 4 /* Size */) {\n                    if (isClassBasedValue(lNode, i)) {\n                        /** @type {?} */\n                        const className = getProp(lNode, i);\n                        /** @type {?} */\n                        const value = getValue(lNode, i);\n                        if (typeof value == 'boolean') {\n                            // we want to ignore `null` since those don't overwrite the values.\n                            classes[className] = value;\n                        }\n                    }\n                }\n            }\n            else {\n                // Fallback, just read DOM.\n                /** @type {?} */\n                const eClasses = element.classList;\n                for (let i = 0; i < eClasses.length; i++) {\n                    classes[eClasses[i]] = true;\n                }\n            }\n        }\n        return classes;\n    }\n    /**\n     * @return {?}\n     */\n    get styles() {\n        /** @type {?} */\n        const styles = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const lContext = loadLContextFromNode(element);\n            /** @type {?} */\n            const lNode = lContext.lView[lContext.nodeIndex];\n            /** @type {?} */\n            const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n            if (stylingContext) {\n                for (let i = 9 /* SingleStylesStartPosition */; i < lNode.length; i += 4 /* Size */) {\n                    if (!isClassBasedValue(lNode, i)) {\n                        /** @type {?} */\n                        const styleName = getProp(lNode, i);\n                        /** @type {?} */\n                        const value = (/** @type {?} */ (getValue(lNode, i)));\n                        if (value !== null) {\n                            // we want to ignore `null` since those don't overwrite the values.\n                            styles[styleName] = value;\n                        }\n                    }\n                }\n            }\n            else {\n                // Fallback, just read DOM.\n                /** @type {?} */\n                const eStyles = ((/** @type {?} */ (element))).style;\n                for (let i = 0; i < eStyles.length; i++) {\n                    /** @type {?} */\n                    const name = eStyles.item(i);\n                    styles[name] = eStyles.getPropertyValue(name);\n                }\n            }\n        }\n        return styles;\n    }\n    /**\n     * @return {?}\n     */\n    get childNodes() {\n        /** @type {?} */\n        const childNodes = this.nativeNode.childNodes;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        /** @type {?} */\n        const nativeElement = this.nativeElement;\n        if (!nativeElement)\n            return [];\n        /** @type {?} */\n        const childNodes = nativeElement.children;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildrenR3(this, predicate, matches, true);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildrenR3(this, predicate, matches, false);\n        return matches;\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((listener) => {\n            if (listener.name === eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    }\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @param {?} elementsOnly\n * @return {?}\n */\nfunction _queryNodeChildrenR3(parentNode, predicate, matches, elementsOnly) {\n    if (parentNode instanceof DebugElement__POST_R3__) {\n        parentNode.childNodes.forEach(node => {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__POST_R3__) {\n                if (elementsOnly ? node.nativeElement : true) {\n                    _queryNodeChildrenR3(node, predicate, matches, elementsOnly);\n                }\n            }\n        });\n    }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\n/** @type {?} */\nconst _nativeNodeToDebugNode = new Map();\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        return nativeNode.nodeType == Node.ELEMENT_NODE ?\n            new DebugElement__POST_R3__((/** @type {?} */ (nativeNode))) :\n            new DebugNode__POST_R3__(nativeNode);\n    }\n    return null;\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst getDebugNode = getDebugNode__PRE_R3__;\n/**\n * @param {?} node\n * @return {?}\n */\nfunction indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugNode = (/** @type {?} */ (DebugNode__PRE_R3__));\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugElement = (/** @type {?} */ (DebugElement__PRE_R3__));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DefaultIterableDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return isListLikeIterable(obj); }\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    create(trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    }\n}\n/** @type {?} */\nconst trackByIdentity = (index, item) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nclass DefaultIterableDiffer {\n    /**\n     * @param {?=} trackByFn\n     */\n    constructor(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachOperation(fn) {\n        /** @type {?} */\n        let nextIt = this._itHead;\n        /** @type {?} */\n        let nextRemove = this._removalsHead;\n        /** @type {?} */\n        let addRemoveOffset = 0;\n        /** @type {?} */\n        let moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            /** @type {?} */\n            const record = !nextRemove ||\n                nextIt &&\n                    (/** @type {?} */ (nextIt.currentIndex)) <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                (/** @type {?} */ (nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            const currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = (/** @type {?} */ (nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    const localCurrentIndex = (/** @type {?} */ (currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (let i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            const index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        const previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachMovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachIdentityChange(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    diff(collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(`Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    check(collection) {\n        this._reset();\n        /** @type {?} */\n        let record = this._itHead;\n        /** @type {?} */\n        let mayBeDirty = false;\n        /** @type {?} */\n        let index;\n        /** @type {?} */\n        let item;\n        /** @type {?} */\n        let itemTrackBy;\n        if (Array.isArray(collection)) {\n            ((/** @type {?} */ (this))).length = collection.length;\n            for (let index = 0; index < this.length; index++) {\n                item = collection[index];\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, (item) => {\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            ((/** @type {?} */ (this))).length = index;\n        }\n        this._truncate(record);\n        ((/** @type {?} */ (this))).collection = collection;\n        return this.isDirty;\n    }\n    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n       * changes.\n       */\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._movesHead !== null ||\n            this._removalsHead !== null || this._identityChangesHead !== null;\n    }\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            /** @type {?} */\n            let nextRecord;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    }\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _mismatch(record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        /** @type {?} */\n        let previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    }\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _verifyReinsertion(record, item, itemTrackBy, index) {\n        /** @type {?} */\n        let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, (/** @type {?} */ (record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    }\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _truncate(record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            const nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _reinsertAfter(record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prevRemoved;\n        /** @type {?} */\n        const next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _moveAfter(record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _addAfter(record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _insertAfter(record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        /** @type {?} */\n        const next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _remove(record) {\n        return this._addToRemovals(this._unlink(record));\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _unlink(record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prev;\n        /** @type {?} */\n        const next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    _addToMoves(record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToRemovals(record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    _addIdentityChange(record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    }\n}\n/**\n * @template V\n */\nclass IterableChangeRecord_ {\n    /**\n     * @param {?} item\n     * @param {?} trackById\n     */\n    constructor(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n}\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n/**\n * @template V\n */\nclass _DuplicateItemRecordList {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    add(record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            (/** @type {?} */ (this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    }\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        let record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= (/** @type {?} */ (record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    }\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        /** @type {?} */\n        const prev = record._prevDup;\n        /** @type {?} */\n        const next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    }\n}\n/**\n * @template V\n */\nclass _DuplicateMap {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    put(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        let duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    }\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        const key = trackById;\n        /** @type {?} */\n        const recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    }\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        const recordList = (/** @type {?} */ (this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    }\n    /**\n     * @return {?}\n     */\n    get isEmpty() { return this.map.size === 0; }\n    /**\n     * @return {?}\n     */\n    clear() { this.map.clear(); }\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    const previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    let moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n */\nclass DefaultKeyValueDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return obj instanceof Map || isJsObject(obj); }\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    create() { return new DefaultKeyValueDiffer(); }\n}\n/**\n * @template K, V\n */\nclass DefaultKeyValueDiffer {\n    constructor() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._changesHead !== null ||\n            this._removalsHead !== null;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachChangedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    diff(map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(`Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n        }\n        return this.check(map) ? this : null;\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    check(map) {\n        this._reset();\n        /** @type {?} */\n        let insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, (value, key) => {\n            if (insertBefore && insertBefore.key === key) {\n                this._maybeAddToChanges(insertBefore, value);\n                this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                const record = this._getOrCreateRecordForKey(key, value);\n                insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    }\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @private\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    _insertBeforeOrAppend(before, record) {\n        if (before) {\n            /** @type {?} */\n            const prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    _getOrCreateRecordForKey(key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            const record = (/** @type {?} */ (this._records.get(key)));\n            this._maybeAddToChanges(record, value);\n            /** @type {?} */\n            const prev = record._prev;\n            /** @type {?} */\n            const next = record._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record._next = null;\n            record._prev = null;\n            return record;\n        }\n        /** @type {?} */\n        const record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    }\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    /**\n     * @private\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    _maybeAddToChanges(record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToAdditions(record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToChanges(record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    }\n    /**\n     * \\@internal\n     * @private\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    _forEach(obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(k => fn(obj[k], k));\n        }\n    }\n}\n/**\n * @template K, V\n */\nclass KeyValueChangeRecord_ {\n    /**\n     * @param {?} key\n     */\n    constructor(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * \\@publicApi\n */\nclass IterableDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    find(iterable) {\n        /** @type {?} */\n        const factory = this.factories.find(f => f.supports(iterable));\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n        }\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ IterableDiffers.ngInjectableDef = defineInjectable({\n    providedIn: 'root',\n    factory: () => new IterableDiffers([new DefaultIterableDifferFactory()])\n});\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nclass KeyValueDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    find(kv) {\n        /** @type {?} */\n        const factory = this.factories.find(f => f.supports(kv));\n        if (factory) {\n            return factory;\n        }\n        throw new Error(`Cannot find a differ supporting object '${kv}'`);\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ KeyValueDiffers.ngInjectableDef = defineInjectable({\n    providedIn: 'root',\n    factory: () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()])\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Structural diffing for `Object`s and `Map`s.\n * @type {?}\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n * @type {?}\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\n/** @type {?} */\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\n/** @type {?} */\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' },\n    { provide: PlatformRef, deps: [Injector] },\n    { provide: TestabilityRegistry, deps: [] },\n    { provide: Console, deps: [] },\n];\n/**\n * This platform has to be included in any other platform\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nconst MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nfunction _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nfunction _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n * @type {?}\n */\nconst APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@publicApi\n */\nclass ApplicationModule {\n    // Inject ApplicationRef to make it eager...\n    /**\n     * @param {?} appRef\n     */\n    constructor(appRef) { }\n}\nApplicationModule.decorators = [\n    { type: NgModule, args: [{ providers: APPLICATION_MODULE_PROVIDERS },] }\n];\n/** @nocollapse */\nApplicationModule.ctorParameters = () => [\n    { type: ApplicationRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__POST_R3__ = true;\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__PRE_R3__ = false;\n/** @type {?} */\nconst ivyEnabled = SWITCH_IVY_ENABLED__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Called before each cycle of a view's check to detect whether this is in the\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n// lifecycle methods. Returns true if this check cycle should call lifecycle\n// methods.\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nfunction shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    /** @type {?} */\n    const state = view.state;\n    /** @type {?} */\n    const initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n// Returns true if the lifecycle init method should be called for the node with\n// the given init index.\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nfunction shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asTextData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asElementData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asProviderData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asPureExpressionData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asQueryList(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * @abstract\n */\nclass DebugContext {\n}\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n * @type {?}\n */\nconst Services = {\n    setCurrentNode: (/** @type {?} */ (undefined)),\n    createRootView: (/** @type {?} */ (undefined)),\n    createEmbeddedView: (/** @type {?} */ (undefined)),\n    createComponentView: (/** @type {?} */ (undefined)),\n    createNgModuleRef: (/** @type {?} */ (undefined)),\n    overrideProvider: (/** @type {?} */ (undefined)),\n    overrideComponentView: (/** @type {?} */ (undefined)),\n    clearOverrides: (/** @type {?} */ (undefined)),\n    checkAndUpdateView: (/** @type {?} */ (undefined)),\n    checkNoChangesView: (/** @type {?} */ (undefined)),\n    destroyView: (/** @type {?} */ (undefined)),\n    resolveDep: (/** @type {?} */ (undefined)),\n    createDebugContext: (/** @type {?} */ (undefined)),\n    handleEvent: (/** @type {?} */ (undefined)),\n    updateDirectives: (/** @type {?} */ (undefined)),\n    updateRenderer: (/** @type {?} */ (undefined)),\n    dirtyParentQueries: (/** @type {?} */ (undefined)),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (isFirstCheck) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nfunction viewDebugError(msg, context) {\n    /** @type {?} */\n    const err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    ((/** @type {?} */ (err)))[ERROR_DEBUG_CONTEXT] = context;\n    ((/** @type {?} */ (err)))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nfunction isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction viewDestroyedError(action) {\n    return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NOOP = () => { };\n/** @type {?} */\nconst _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nfunction tokenKey(token) {\n    /** @type {?} */\n    let key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction unwrapValue$1(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        const globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nconst UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nconst EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} values\n * @return {?}\n */\nfunction createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nlet _renderCompCount$1 = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nfunction resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        /** @type {?} */\n        const isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = `c${_renderCompCount$1++}`;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        const bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), `${bindingName}: ${oldValue}`, `${bindingName}: ${value}`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markParentViewsForCheck(view) {\n    /** @type {?} */\n    let currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nfunction markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    let currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        const startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        const parentView = view.parent;\n        return asElementData(parentView, (/** @type {?} */ (view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nfunction viewParentEl(view) {\n    /** @type {?} */\n    const parentView = view.parent;\n    if (parentView) {\n        return (/** @type {?} */ (view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nfunction elementEventFullName(target, name) {\n    return target ? `${target}:${name}` : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isComponentView(view) {\n    return !!view.parent && !!((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isEmbeddedView(view) {\n    return !!view.parent && !((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nfunction filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    const matchedQueries = {};\n    /** @type {?} */\n    let matchedQueryIds = 0;\n    /** @type {?} */\n    const references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(([queryId, valueType]) => {\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries, references, matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nfunction splitDepsDsl(deps, sourceName) {\n    return deps.map(value => {\n        /** @type {?} */\n        let token;\n        /** @type {?} */\n        let flags;\n        if (Array.isArray(value)) {\n            [flags, token] = value;\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags, token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    let renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            ((/** @type {?} */ (renderParent.element)).componentRendererType &&\n                (/** @type {?} */ ((/** @type {?} */ (renderParent.element)).componentRendererType)).encapsulation ===\n                    ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, (/** @type {?} */ (def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nconst DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nfunction resolveDefinition(factory) {\n    /** @type {?} */\n    let value = (/** @type {?} */ ((/** @type {?} */ (DEFINITION_CACHE.get(factory)))));\n    if (!value) {\n        value = factory(() => NOOP);\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction rootRenderNodes(view) {\n    /** @type {?} */\n    const renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, (/** @type {?} */ (view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    let compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    const hostView = (/** @type {?} */ (compView)).parent;\n    /** @type {?} */\n    const hostElDef = viewParentEl((/** @type {?} */ (compView)));\n    /** @type {?} */\n    const startIndex = (/** @type {?} */ (hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    const endIndex = (/** @type {?} */ (hostElDef)).nodeIndex + (/** @type {?} */ (hostElDef)).childCount;\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = (/** @type {?} */ (hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode((/** @type {?} */ (hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!(/** @type {?} */ (hostView)).parent) {\n        // a root view\n        /** @type {?} */\n        const projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (let i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, (/** @type {?} */ (nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        const rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                const compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !(/** @type {?} */ (nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            (/** @type {?} */ (target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nconst NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nfunction splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        const match = (/** @type {?} */ (name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nfunction calcBindingFlags(bindings) {\n    /** @type {?} */\n    let flags = 0;\n    for (let i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nfunction interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    let result = '';\n    for (let i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(`Does not support more than 9 expressions`);\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nconst EMPTY_ARRAY$4 = [];\n/** @type {?} */\nconst EMPTY_MAP = {};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    const template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    let ns = (/** @type {?} */ (null));\n    /** @type {?} */\n    let name = (/** @type {?} */ (null));\n    if (namespaceAndName) {\n        [ns, name] = splitNamespace(namespaceAndName);\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    const bindingDefs = new Array(bindings.length);\n    for (let i = 0; i < bindings.length; i++) {\n        const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        let securityContext = (/** @type {?} */ (undefined));\n        /** @type {?} */\n        let suffix = (/** @type {?} */ (undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns, name, nonMinifiedName: name, securityContext, suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    const outputDefs = new Array(outputs.length);\n    for (let i = 0; i < outputs.length; i++) {\n        const [target, eventName] = outputs[i];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: (/** @type {?} */ (target)), eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (fixedAttrs.map(([namespaceAndName, value]) => {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        return [ns, name, value];\n    })));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns,\n            name,\n            attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createElement(view, renderHost, def) {\n    /** @type {?} */\n    const elDef = (/** @type {?} */ (def.element));\n    /** @type {?} */\n    const rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    const renderer = view.renderer;\n    /** @type {?} */\n    let el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        const parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n        /** @type {?} */\n        const preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (let i = 0; i < elDef.attrs.length; i++) {\n            const [ns, name, value] = elDef.attrs[i];\n            renderer.setAttribute(el, name, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nfunction listenToElementOutputs(view, compView, def, el) {\n    for (let i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        const output = def.outputs[i];\n        /** @type {?} */\n        const handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        let listenTarget = output.target;\n        /** @type {?} */\n        let listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        const disposable = (/** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)));\n        (/** @type {?} */ (view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return (event) => dispatchEvent(view, index, eventName, event);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    /** @type {?} */\n    let changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    const renderNode$$1 = elData.renderElement;\n    /** @type {?} */\n    const name = (/** @type {?} */ (binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode$$1, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode$$1, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            const bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode$$1, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode$$1, ns, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode$$1, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode$$1, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode$$1, name, value) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode$$1, name);\n    }\n    else {\n        renderer.removeClass(renderNode$$1, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode$$1, name, value) {\n    /** @type {?} */\n    let renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, (/** @type {?} */ (value)));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        const unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode$$1, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode$$1, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode$$1, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode$$1, name, renderValue);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UNDEFINED_VALUE = new Object();\n/** @type {?} */\nconst InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey = tokenKey(INJECTOR$1);\n/** @type {?} */\nconst NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags, token, value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nfunction moduleDef(providers) {\n    /** @type {?} */\n    const providersByKey = {};\n    /** @type {?} */\n    const modules = [];\n    /** @type {?} */\n    let isRoot = false;\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey,\n        providers,\n        modules,\n        isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction initNgModule(data) {\n    /** @type {?} */\n    const def = data._def;\n    /** @type {?} */\n    const providers = data._providers = new Array(def.providers.length);\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    /** @type {?} */\n    const former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        const tokenKey$$1 = depDef.tokenKey;\n        switch (tokenKey$$1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        const providerDef = data._def.providersByKey[tokenKey$$1];\n        /** @type {?} */\n        let injectableDef;\n        if (providerDef) {\n            /** @type {?} */\n            let providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            const index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    let injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    const def = ngModule._def;\n    /** @type {?} */\n    const destroyed = new Set();\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            const instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                const onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    let embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, (/** @type {?} */ (viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    const prevView = (/** @type {?} */ (viewIndex)) > 0 ? embeddedViews[(/** @type {?} */ (viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    let projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate((/** @type {?} */ (view.parent)).def, (/** @type {?} */ (view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    let parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nfunction detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    const view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        const projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    const view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    /** @type {?} */\n    const prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    const prevRenderNode = prevView ? renderNode(prevView, (/** @type {?} */ (prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    const parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    const nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_CONTEXT = new Object();\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nfunction getComponentViewDefinitionFactory(componentFactory) {\n    return ((/** @type {?} */ (componentFactory))).viewDefFactory;\n}\nclass ComponentFactory_ extends ComponentFactory {\n    /**\n     * @param {?} selector\n     * @param {?} componentType\n     * @param {?} viewDefFactory\n     * @param {?} _inputs\n     * @param {?} _outputs\n     * @param {?} ngContentSelectors\n     */\n    constructor(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.selector = selector;\n        this.componentType = componentType;\n        this._inputs = _inputs;\n        this._outputs = _outputs;\n        this.ngContentSelectors = ngContentSelectors;\n        this.viewDefFactory = viewDefFactory;\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        /** @type {?} */\n        const inputsArr = [];\n        /** @type {?} */\n        const inputs = (/** @type {?} */ (this._inputs));\n        for (let propName in inputs) {\n            /** @type {?} */\n            const templateName = inputs[propName];\n            inputsArr.push({ propName, templateName });\n        }\n        return inputsArr;\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        /** @type {?} */\n        const outputsArr = [];\n        for (let propName in this._outputs) {\n            /** @type {?} */\n            const templateName = this._outputs[propName];\n            outputsArr.push({ propName, templateName });\n        }\n        return outputsArr;\n    }\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        const viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        const componentNodeIndex = (/** @type {?} */ ((/** @type {?} */ (viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        const view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        const component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    }\n}\nclass ComponentRef_ extends ComponentRef {\n    /**\n     * @param {?} _view\n     * @param {?} _viewRef\n     * @param {?} _component\n     */\n    constructor(_view, _viewRef, _component) {\n        super();\n        this._view = _view;\n        this._viewRef = _viewRef;\n        this._component = _component;\n        this._elDef = this._view.def.nodes[0];\n        this.hostView = _viewRef;\n        this.changeDetectorRef = _viewRef;\n        this.instance = _component;\n    }\n    /**\n     * @return {?}\n     */\n    get location() {\n        return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @return {?}\n     */\n    get componentType() { return (/** @type {?} */ (this._component.constructor)); }\n    /**\n     * @return {?}\n     */\n    destroy() { this._viewRef.destroy(); }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._viewRef.onDestroy(callback); }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nfunction createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nclass ViewContainerRef_ {\n    /**\n     * @param {?} _view\n     * @param {?} _elDef\n     * @param {?} _data\n     */\n    constructor(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    /**\n     * @return {?}\n     */\n    get element() { return new ElementRef(this._data.renderElement); }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @deprecated No replacement\n     * @return {?}\n     */\n    get parentInjector() {\n        /** @type {?} */\n        let view = this._view;\n        /** @type {?} */\n        let elDef = this._elDef.parent;\n        while (!elDef && view) {\n            elDef = viewParentEl(view);\n            view = (/** @type {?} */ (view.parent));\n        }\n        return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n    }\n    /**\n     * @return {?}\n     */\n    clear() {\n        /** @type {?} */\n        const len = this._embeddedViews.length;\n        for (let i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    get(index) {\n        /** @type {?} */\n        const view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            const ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    get length() { return this._embeddedViews.length; }\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    createEmbeddedView(templateRef, context, index) {\n        /** @type {?} */\n        const viewRef = templateRef.createEmbeddedView(context || (/** @type {?} */ ({})));\n        this.insert(viewRef, index);\n        return viewRef;\n    }\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        const contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    insert(viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const viewRef_ = (/** @type {?} */ (viewRef));\n        /** @type {?} */\n        const viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    move(viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    indexOf(viewRef) {\n        return this._embeddedViews.indexOf(((/** @type {?} */ (viewRef)))._view);\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    remove(index) {\n        /** @type {?} */\n        const viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    detach(index) {\n        /** @type {?} */\n        const view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nclass ViewRef_ {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() { return rootRenderNodes(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return this._view.context; }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return (this._view.state & 128 /* Destroyed */) !== 0; }\n    /**\n     * @return {?}\n     */\n    markForCheck() { markParentViewsForCheck(this._view); }\n    /**\n     * @return {?}\n     */\n    detach() { this._view.state &= ~4 /* Attached */; }\n    /**\n     * @return {?}\n     */\n    detectChanges() {\n        /** @type {?} */\n        const fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { Services.checkNoChangesView(this._view); }\n    /**\n     * @return {?}\n     */\n    reattach() { this._view.state |= 4 /* Attached */; }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push((/** @type {?} */ (callback)));\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nclass TemplateRef_ extends TemplateRef {\n    /**\n     * @param {?} _parentView\n     * @param {?} _def\n     */\n    constructor(_parentView, _def) {\n        super();\n        this._parentView = _parentView;\n        this._def = _def;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    createEmbeddedView(context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, (/** @type {?} */ ((/** @type {?} */ (this._def.element)).template)), context));\n    }\n    /**\n     * @return {?}\n     */\n    get elementRef() {\n        return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nfunction createInjector$1(view, elDef) {\n    return new Injector_(view, elDef);\n}\nclass Injector_ {\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     */\n    constructor(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        /** @type {?} */\n        const allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token, tokenKey: tokenKey(token) }, notFoundValue);\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction nodeValue(view, index) {\n    /** @type {?} */\n    const def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        const elData = asElementData(view, def.nodeIndex);\n        return (/** @type {?} */ (def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(`Illegal state: read nodeValue for node index ${index}`);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nclass RendererAdapter {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    createElement(parent, namespaceAndName) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        const el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    }\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    createViewRoot(hostElement) { return hostElement; }\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    createTemplateAnchor(parentElement) {\n        /** @type {?} */\n        const comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    createText(parentElement, value) {\n        /** @type {?} */\n        const node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    projectNodes(parentElement, nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    }\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    attachViewAfter(node, viewRootNodes) {\n        /** @type {?} */\n        const parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        const nextSibling = this.delegate.nextSibling(node);\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    }\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    detachView(viewRootNodes) {\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            const node = viewRootNodes[i];\n            /** @type {?} */\n            const parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    destroyView(hostElement, viewAllNodes) {\n        for (let i = 0; i < viewAllNodes.length; i++) {\n            (/** @type {?} */ (this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listenGlobal(target, name, callback) {\n        return this.delegate.listen(target, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setElementProperty(renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    setElementAttribute(renderElement, namespaceAndName, attributeValue) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setBindingDebugInfo(renderElement, propertyName, propertyValue) { }\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    setElementClass(renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    setElementStyle(renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    invokeElementMethod(renderElement, methodName, args) {\n        ((/** @type {?} */ (renderElement)))[methodName].apply(renderElement, args);\n    }\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    setText(renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); }\n    /**\n     * @return {?}\n     */\n    animate() { throw new Error('Renderer.animate is no longer supported!'); }\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nclass NgModuleRef_ {\n    /**\n     * @param {?} _moduleType\n     * @param {?} _parent\n     * @param {?} _bootstrapComponents\n     * @param {?} _def\n     */\n    constructor(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        /** @type {?} */\n        let flags = 0 /* None */;\n        if (injectFlags & InjectFlags.SkipSelf) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & InjectFlags.Self) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    }\n    /**\n     * @return {?}\n     */\n    get instance() { return this.get(this._moduleType); }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() { return this.get(ComponentFactoryResolver); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach((listener) => listener());\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RendererV1TokenKey = tokenKey(Renderer);\n/** @type {?} */\nconst Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nconst ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nconst InjectorRefTokenKey$1 = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey$1 = tokenKey(INJECTOR$1);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    const bindings = [];\n    if (props) {\n        for (let prop in props) {\n            const [bindingIndex, nonMinifiedName] = props[prop];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    const outputDefs = [];\n    if (outputs) {\n        for (let propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,\n        ngContentIndex: -1, childCount, bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs,\n        element: null,\n        provider: { token, value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createProviderInstance(view, def) {\n    return _createProviderInstance$1(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPipeInstance(view, def) {\n    // deps are looked up from component.\n    /** @type {?} */\n    let compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    /** @type {?} */\n    const allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass((/** @type {?} */ (compView.parent)), (/** @type {?} */ (viewParentEl(compView))), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    /** @type {?} */\n    const instance = createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n    if (def.outputs.length) {\n        for (let i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            const output = def.outputs[i];\n            /** @type {?} */\n            const outputObservable = instance[(/** @type {?} */ (output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                const subscription = outputObservable.subscribe(eventHandlerClosure(view, (/** @type {?} */ (def.parent)).nodeIndex, output.eventName));\n                (/** @type {?} */ (view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(`@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return (event) => dispatchEvent(view, index, eventName, event);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    for (let i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance$1(view, def) {\n    // private services can see other private services\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    const providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return (/** @type {?} */ (providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    const startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    const tokenKey$$1 = depDef.tokenKey;\n    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && (/** @type {?} */ (elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = (/** @type {?} */ (elDef.parent));\n    }\n    /** @type {?} */\n    let searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey$$1) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if ((/** @type {?} */ (elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    let cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey$1:\n                case INJECTORRefTokenKey$1:\n                    return createInjector$1(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    const providerDef = (/** @type {?} */ ((allowPrivateServices ? (/** @type {?} */ (elDef.element)).allProviders :\n                        (/** @type {?} */ (elDef.element)).publicProviders)))[tokenKey$$1];\n                    if (providerDef) {\n                        /** @type {?} */\n                        let providerData = asProviderData(searchView, providerDef.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance$1(searchView, providerDef) };\n                            searchView.nodes[providerDef.nodeIndex] = (/** @type {?} */ (providerData));\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = (/** @type {?} */ (viewParentEl(searchView)));\n        searchView = (/** @type {?} */ (searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    let compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        const compView = asElementData(view, (/** @type {?} */ (def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const propName = (/** @type {?} */ (binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        const binding = def.bindings[bindingIdx];\n        changes[(/** @type {?} */ (binding.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    const nodes = view.def.nodes;\n    /** @type {?} */\n    let initIndex = 0;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = nodes[i];\n        /** @type {?} */\n        let parent = nodeDef.parent;\n        if (!parent && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent && (parent.flags & 1 /* TypeElement */) &&\n            i === parent.nodeIndex + parent.childCount) {\n            // last child of an element\n            if (parent.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\n            }\n            parent = parent.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    const providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    const provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nfunction queryDef(flags, id, bindings) {\n    /** @type {?} */\n    let bindingDefs = [];\n    for (let propName in bindings) {\n        /** @type {?} */\n        const bindingType = bindings[propName];\n        bindingDefs.push({ propName, bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nfunction createQuery$1() {\n    return new QueryList$1();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction dirtyParentQueries(view) {\n    /** @type {?} */\n    const queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        let tplDef = (/** @type {?} */ (view.parentNodeDef));\n        view = view.parent;\n        // content queries\n        /** @type {?} */\n        const end = tplDef.nodeIndex + tplDef.childCount;\n        for (let i = 0; i <= end; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                ((/** @type {?} */ (nodeDef.query)).filterId & queryIds) === (/** @type {?} */ (nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (let i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    let directiveInstance;\n    /** @type {?} */\n    let newValues = (/** @type {?} */ (undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        const elementDef = (/** @type {?} */ ((/** @type {?} */ (nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = asProviderData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    const bindings = (/** @type {?} */ (nodeDef.query)).bindings;\n    /** @type {?} */\n    let notify = false;\n    for (let i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        const binding = bindings[i];\n        /** @type {?} */\n        let boundValue;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        const valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && (/** @type {?} */ (nodeDef.element)).template &&\n            ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            const elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n                for (let k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    const embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    const dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            const projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (let k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nfunction getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nfunction ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    const ngContentIndex = (/** @type {?} */ (def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nfunction pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    const keys = Object.keys(propToIndex);\n    /** @type {?} */\n    const nbKeys = keys.length;\n    /** @type {?} */\n    const propertyNames = new Array(nbKeys);\n    for (let i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        const key = keys[i];\n        /** @type {?} */\n        const index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    const bindings = new Array(propertyNames.length);\n    for (let i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        const prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[(/** @type {?} */ (bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[(/** @type {?} */ (bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[(/** @type {?} */ (bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[(/** @type {?} */ (bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[(/** @type {?} */ (bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[(/** @type {?} */ (bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[(/** @type {?} */ (bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[(/** @type {?} */ (bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[(/** @type {?} */ (bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[(/** @type {?} */ (bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (let i = 0; i < values.length; i++) {\n                    value[(/** @type {?} */ (bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = values[0];\n                /** @type {?} */\n                const params = values.slice(1);\n                value = ((/** @type {?} */ (pipe.transform)))(...params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nfunction textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    const bindings = new Array(staticText.length - 1);\n    for (let i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0, bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createText(view, renderHost, def) {\n    /** @type {?} */\n    let renderNode$$1;\n    /** @type {?} */\n    const renderer = view.renderer;\n    renderNode$$1 = renderer.createText((/** @type {?} */ (def.text)).prefix);\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode$$1);\n    }\n    return { renderText: renderNode$$1 };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        let value = (/** @type {?} */ (def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        const renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode$$1, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        let value = '';\n        for (let i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = (/** @type {?} */ (def.text)).prefix + value;\n        /** @type {?} */\n        const renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode$$1, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    const valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    /** @type {?} */\n    let viewBindingCount = 0;\n    /** @type {?} */\n    let viewDisposableCount = 0;\n    /** @type {?} */\n    let viewNodeFlags = 0;\n    /** @type {?} */\n    let viewRootNodeFlags = 0;\n    /** @type {?} */\n    let viewMatchedQueries = 0;\n    /** @type {?} */\n    let currentParent = null;\n    /** @type {?} */\n    let currentRenderParent = null;\n    /** @type {?} */\n    let currentElementHasPublicProviders = false;\n    /** @type {?} */\n    let currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    let lastRenderRootNode = null;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            const elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? (/** @type {?} */ (currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true;\n                // Use prototypical inheritance to not get O(n^2) complexity...\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders =\n                    Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders = (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            const isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            const isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders =\n                        Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                }\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                const newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    const handleEvent = (view, nodeIndex, eventName, event) => (/** @type {?} */ ((/** @type {?} */ (nodes[nodeIndex].element)).handleEvent))(view, eventName, event);\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && (/** @type {?} */ (node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    const template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        const parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(`Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        const parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction createEmbeddedView(parent, anchorDef$$1, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    /** @type {?} */\n    const view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nfunction createRootView(root, def, context) {\n    /** @type {?} */\n    const view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    const rendererType = (/** @type {?} */ (nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    let compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, (/** @type {?} */ (nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    const nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    const disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    const view = {\n        def,\n        parent,\n        viewContainerParent: null, parentNodeDef,\n        context: null,\n        component: null, nodes,\n        state: 13 /* CatInit */, root, renderer,\n        oldValues: new Array(def.bindingCount), disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    let renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        const hostDef = view.parentNodeDef;\n        renderHost = asElementData((/** @type {?} */ (view.parent)), (/** @type {?} */ ((/** @type {?} */ (hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    const def = view.def;\n    /** @type {?} */\n    const nodes = view.nodes;\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        let nodeData;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                const el = (/** @type {?} */ (createElement(view, renderHost, nodeDef)));\n                /** @type {?} */\n                let componentView = (/** @type {?} */ (undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = (/** @type {?} */ ({\n                    renderElement: el,\n                    componentView,\n                    viewContainer: null,\n                    template: (/** @type {?} */ (nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                }));\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = (/** @type {?} */ (createText(view, renderHost, nodeDef)));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    const instance = createProviderInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                const instance = createPipeInstance(view, nodeDef);\n                nodeData = (/** @type {?} */ ({ instance }));\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    const instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    const compView = asElementData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = (/** @type {?} */ (createPureExpression(view, nodeDef)));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = (/** @type {?} */ (createQuery$1()));\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    let callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            const projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (let i = 0; i < projectedViews.length; i++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[i];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (let i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), `Query ${(/** @type {?} */ (nodeDef.query)).id} not dirty`, `Query ${(/** @type {?} */ (nodeDef.query)).id} dirty`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (let i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    const len = view.def.nodes.length;\n    for (let i = 0; i < len; i++) {\n        /** @type {?} */\n        const def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nconst ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, i).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    const viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    const nodeCount = view.def.nodes.length;\n    for (let i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet initialized = false;\n/**\n * @return {?}\n */\nfunction initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    const services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: () => { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\n        handleEvent: (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event),\n        updateDirectives: (view, checkType) => view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view),\n        updateRenderer: (view, checkType) => view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view),\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    const root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    const sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    const errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule,\n        injector: elInjector, projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer, errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(viewDef$$1);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {\n    /** @type {?} */\n    const overrideComponentView = viewDefOverrides.get((/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef$$1 = overrideComponentView;\n    }\n    else {\n        viewDef$$1 = applyProviderOverridesToView(viewDef$$1);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nconst providerOverrides = new Map();\n/** @type {?} */\nconst providerOverridesWithScope = new Map();\n/** @type {?} */\nconst viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    /** @type {?} */\n    let injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set((/** @type {?} */ (override.token)), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    const hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n// Notes about the algorithm:\n// 1) Locate the providers of an element and check if one of them was overwritten\n// 2) Change the providers of that element\n//\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    const elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))(() => NOOP);\n    for (let i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        const elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        let lastElementDef = null;\n        for (let i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has((/** @type {?} */ (nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push((/** @type {?} */ (lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef$$1, elIndex) {\n        for (let i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = viewDef$$1.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                const provider = (/** @type {?} */ (nodeDef.provider));\n                /** @type {?} */\n                const override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n// Notes about the algorithm:\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    const { hasOverrides, hasDeprecatedOverrides } = calcHasOverrides(def);\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))(() => NOOP);\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        let hasOverrides = false;\n        /** @type {?} */\n        let hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides, hasDeprecatedOverrides };\n        }\n        def.providers.forEach(node => {\n            /** @type {?} */\n            const override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(module => {\n            providerOverridesWithScope.forEach((override, token) => {\n                if ((/** @type {?} */ (getInjectableDef(token))).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides, hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (let i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            const provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            const override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            let moduleSet = new Set(def.modules);\n            providerOverridesWithScope.forEach((override, token) => {\n                if (moduleSet.has((/** @type {?} */ (getInjectableDef(token))).providedIn)) {\n                    /** @type {?} */\n                    let provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nconst DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nlet _currentAction;\n/** @type {?} */\nlet _currentView;\n/** @type {?} */\nlet _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    const changed = ((/** @type {?} */ (checkAndUpdateNode)))(view, nodeDef, argStyle, ...givenValues);\n    if (changed) {\n        /** @type {?} */\n        const values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            const bindingValues = {};\n            for (let i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                const binding = nodeDef.bindings[i];\n                /** @type {?} */\n                const value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName((/** @type {?} */ (binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            const elDef = (/** @type {?} */ (nodeDef.parent));\n            /** @type {?} */\n            const el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!(/** @type {?} */ (elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);\n            }\n            else {\n                // a regular element.\n                for (let attr in bindingValues) {\n                    /** @type {?} */\n                    const value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    ((/** @type {?} */ (checkNoChangesNode)))(view, nodeDef, argStyle, ...values);\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nclass DebugContext_ {\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     */\n    constructor(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        let elDef = this.nodeDef;\n        /** @type {?} */\n        let elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = (/** @type {?} */ (elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = (/** @type {?} */ (viewParentEl(elView)));\n                elView = (/** @type {?} */ (elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get elOrCompView() {\n        // Has to be done lazily as we use the DebugContext also during creation of elements...\n        return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return createInjector$1(this.elView, this.elDef); }\n    /**\n     * @return {?}\n     */\n    get component() { return this.elOrCompView.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this.elOrCompView.context; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() {\n        /** @type {?} */\n        const tokens = [];\n        if (this.elDef) {\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    tokens.push((/** @type {?} */ (childDef.provider)).token);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return tokens;\n    }\n    /**\n     * @return {?}\n     */\n    get references() {\n        /** @type {?} */\n        const references = {};\n        if (this.elDef) {\n            collectReferences(this.elView, this.elDef, references);\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    collectReferences(this.elView, childDef, references);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return references;\n    }\n    /**\n     * @return {?}\n     */\n    get componentRenderElement() {\n        /** @type {?} */\n        const elData = findHostElement(this.elOrCompView);\n        return elData ? elData.renderElement : undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get renderNode() {\n        return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n            renderNode(this.elView, this.elDef);\n    }\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    logError(console, ...values) {\n        /** @type {?} */\n        let logViewDef;\n        /** @type {?} */\n        let logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        /** @type {?} */\n        const renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        let currRenderNodeIndex = -1;\n        /** @type {?} */\n        let nodeLogger = () => {\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return console.error.bind(console, ...values);\n            }\n            else {\n                return NOOP;\n            }\n        };\n        (/** @type {?} */ (logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            ((/** @type {?} */ (console.error)))(...values);\n        }\n    }\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef$$1, nodeIndex) {\n    /** @type {?} */\n    let renderNodeIndex = -1;\n    for (let i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        const nodeDef = viewDef$$1.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = (/** @type {?} */ (view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, (/** @type {?} */ (viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (let refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    const oldAction = _currentAction;\n    /** @type {?} */\n    const oldView = _currentView;\n    /** @type {?} */\n    const oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        const result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, (/** @type {?} */ (getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nfunction getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nclass DebugRendererFactory2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    createRenderer(element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    }\n    /**\n     * @return {?}\n     */\n    begin() {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    end() {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    }\n}\nclass DebugRenderer2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @private\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    createDebugContext(nativeElement) { return this.debugContextFactory(nativeElement); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    destroyNode(node) {\n        removeDebugNodeFromIndex((/** @type {?} */ (getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { this.delegate.destroy(); }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        /** @type {?} */\n        const el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            /** @type {?} */\n            const debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n            ((/** @type {?} */ (debugEl))).name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) {\n        /** @type {?} */\n        const comment = this.delegate.createComment(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n        }\n        return comment;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) {\n        /** @type {?} */\n        const text = this.delegate.createText(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n        }\n        return text;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        const debugRefEl = (/** @type {?} */ (getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        /** @type {?} */\n        const el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        const debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n        }\n        return el;\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            const debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return this.delegate.parentNode(node); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return this.delegate.nextSibling(node); }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { return this.delegate.setValue(node, value); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} override\n * @return {?}\n */\nfunction overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nfunction overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nfunction clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    const providers = Array.from(def.providers);\n    /** @type {?} */\n    const modules = Array.from(def.modules);\n    /** @type {?} */\n    const providersByKey = {};\n    for (const key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers, modules, providersByKey,\n    };\n}\nclass NgModuleFactory_ extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     * @param {?} _bootstrapComponents\n     * @param {?} _ngModuleDefFactory\n     */\n    constructor(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.moduleType = moduleType;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._ngModuleDefFactory = _ngModuleDefFactory;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        initServicesIfNeeded();\n        // Clone the NgModuleDefinition so that any tree shakeable provider definition\n        // added to this instance of the NgModuleRef doesn't affect the cached copy.\n        // See https://github.com/angular/angular/issues/25018.\n        /** @type {?} */\n        const def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APPLICATION_MODULE_PROVIDERS as ɵangular_packages_core_core_t, _iterableDiffersFactory as ɵangular_packages_core_core_q, _keyValueDiffersFactory as ɵangular_packages_core_core_r, _localeFactory as ɵangular_packages_core_core_s, _appIdRandomProviderFactory as ɵangular_packages_core_core_h, DefaultIterableDifferFactory as ɵangular_packages_core_core_o, DefaultKeyValueDifferFactory as ɵangular_packages_core_core_p, DebugElement__PRE_R3__ as ɵangular_packages_core_core_n, DebugNode__PRE_R3__ as ɵangular_packages_core_core_m, NullInjector as ɵangular_packages_core_core_c, injectInjectorOnly as ɵangular_packages_core_core_d, ReflectiveInjector_ as ɵangular_packages_core_core_e, ReflectiveDependency as ɵangular_packages_core_core_f, resolveReflectiveProviders as ɵangular_packages_core_core_g, getModuleFactory__PRE_R3__ as ɵangular_packages_core_core_l, wtfEnabled as ɵangular_packages_core_core_u, createScope as ɵangular_packages_core_core_w, detectWTF as ɵangular_packages_core_core_v, endTimeRange as ɵangular_packages_core_core_z, leave as ɵangular_packages_core_core_x, startTimeRange as ɵangular_packages_core_core_y, injectAttributeImpl as ɵangular_packages_core_core_bc, NG_INJECTABLE_DEF as ɵangular_packages_core_core_bj, getLView as ɵangular_packages_core_core_bd, getPreviousOrParentTNode as ɵangular_packages_core_core_be, nextContextImpl as ɵangular_packages_core_core_bf, BoundPlayerFactory as ɵangular_packages_core_core_bi, loadInternal as ɵangular_packages_core_core_bm, createElementRef as ɵangular_packages_core_core_i, createTemplateRef as ɵangular_packages_core_core_j, createViewRef as ɵangular_packages_core_core_k, makeParamDecorator as ɵangular_packages_core_core_a, makePropDecorator as ɵangular_packages_core_core_b, getClosureSafeProperty as ɵangular_packages_core_core_bk, _def as ɵangular_packages_core_core_ba, DebugContext as ɵangular_packages_core_core_bb, createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken, enableProdMode, isDevMode, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, NgModule, ViewEncapsulation, Version, VERSION, defineInjectable, defineInjector, forwardRef, resolveForwardRef, Injectable, INJECTOR$1 as INJECTOR, Injector, inject, inject as ɵinject, InjectFlags, ReflectiveInjector, createInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, NgZone, NoopNgZone as ɵNoopNgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentFactory as ɵComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList$1 as QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef$1 as ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, devModeEqual as ɵdevModeEqual, isListLikeIterable as ɵisListLikeIterable, ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy, Console as ɵConsole, getInjectableDef as ɵgetInjectableDef, setCurrentInjector as ɵsetCurrentInjector, APP_ROOT as ɵAPP_ROOT, ivyEnabled as ɵivyEnabled, CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver, resolveComponentResources as ɵresolveComponentResources, ReflectionCapabilities as ɵReflectionCapabilities, RenderDebugInfo as ɵRenderDebugInfo, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeStyle as ɵ_sanitizeStyle, _sanitizeUrl as ɵ_sanitizeUrl, _global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify, makeDecorator as ɵmakeDecorator, isObservable as ɵisObservable, isPromise as ɵisPromise, clearOverrides as ɵclearOverrides, initServicesIfNeeded as ɵinitServicesIfNeeded, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, defineBase as ɵdefineBase, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, defineNgModule as ɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, ComponentFactory$1 as ɵRender3ComponentFactory, ComponentRef$1 as ɵRender3ComponentRef, directiveInject as ɵdirectiveInject, injectAttribute as ɵinjectAttribute, getFactoryOf as ɵgetFactoryOf, getInheritedFactory as ɵgetInheritedFactory, templateRefExtractor as ɵtemplateRefExtractor, ProvidersFeature as ɵProvidersFeature, InheritDefinitionFeature as ɵInheritDefinitionFeature, NgOnChangesFeature as ɵNgOnChangesFeature, LifecycleHooksFeature as ɵLifecycleHooksFeature, NgModuleRef$1 as ɵRender3NgModuleRef, markDirty as ɵmarkDirty, NgModuleFactory$1 as ɵNgModuleFactory, NO_CHANGE as ɵNO_CHANGE, container as ɵcontainer, nextContext as ɵnextContext, elementStart as ɵelementStart, namespaceHTML as ɵnamespaceHTML, namespaceMathML as ɵnamespaceMathML, namespaceSVG as ɵnamespaceSVG, element as ɵelement, listener as ɵlistener, text as ɵtext, embeddedViewStart as ɵembeddedViewStart, query as ɵquery, registerContentQuery as ɵregisterContentQuery, projection as ɵprojection, bind as ɵbind, interpolation1 as ɵinterpolation1, interpolation2 as ɵinterpolation2, interpolation3 as ɵinterpolation3, interpolation4 as ɵinterpolation4, interpolation5 as ɵinterpolation5, interpolation6 as ɵinterpolation6, interpolation7 as ɵinterpolation7, interpolation8 as ɵinterpolation8, interpolationV as ɵinterpolationV, pipeBind1 as ɵpipeBind1, pipeBind2 as ɵpipeBind2, pipeBind3 as ɵpipeBind3, pipeBind4 as ɵpipeBind4, pipeBindV as ɵpipeBindV, pureFunction0 as ɵpureFunction0, pureFunction1 as ɵpureFunction1, pureFunction2 as ɵpureFunction2, pureFunction3 as ɵpureFunction3, pureFunction4 as ɵpureFunction4, pureFunction5 as ɵpureFunction5, pureFunction6 as ɵpureFunction6, pureFunction7 as ɵpureFunction7, pureFunction8 as ɵpureFunction8, pureFunctionV as ɵpureFunctionV, getCurrentView as ɵgetCurrentView, getHostElement as ɵgetHostElement, restoreView as ɵrestoreView, containerRefreshStart as ɵcontainerRefreshStart, containerRefreshEnd as ɵcontainerRefreshEnd, queryRefresh as ɵqueryRefresh, loadQueryList as ɵloadQueryList, elementEnd as ɵelementEnd, elementProperty as ɵelementProperty, componentHostSyntheticProperty as ɵcomponentHostSyntheticProperty, projectionDef as ɵprojectionDef, reference as ɵreference, enableBindings as ɵenableBindings, disableBindings as ɵdisableBindings, allocHostVars as ɵallocHostVars, elementAttribute as ɵelementAttribute, elementContainerStart as ɵelementContainerStart, elementContainerEnd as ɵelementContainerEnd, elementStyling as ɵelementStyling, elementHostAttrs as ɵelementHostAttrs, elementStylingMap as ɵelementStylingMap, elementStyleProp as ɵelementStyleProp, elementStylingApply as ɵelementStylingApply, elementClassProp as ɵelementClassProp, textBinding as ɵtextBinding, template as ɵtemplate, embeddedViewEnd as ɵembeddedViewEnd, store as ɵstore, load as ɵload, pipe as ɵpipe, whenRendered as ɵwhenRendered, i18n as ɵi18n, i18nAttributes as ɵi18nAttributes, i18nExp as ɵi18nExp, i18nStart as ɵi18nStart, i18nEnd as ɵi18nEnd, i18nApply as ɵi18nApply, i18nPostprocess as ɵi18nPostprocess, setClassMetadata as ɵsetClassMetadata, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, patchComponentDefWithScope as ɵpatchComponentDefWithScope, resetCompiledComponents as ɵresetCompiledComponents, compilePipe as ɵcompilePipe, sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, defaultStyleSanitizer as ɵdefaultStyleSanitizer, sanitizeScript as ɵsanitizeScript, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, getLContext as ɵgetLContext, bindPlayerFactory as ɵbindPlayerFactory, addPlayer as ɵaddPlayer, getPlayers as ɵgetPlayers, compileNgModuleFactory__POST_R3__ as ɵcompileNgModuleFactory__POST_R3__, SWITCH_COMPILE_COMPONENT__POST_R3__ as ɵSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as ɵSWITCH_COMPILE_PIPE__POST_R3__, SWITCH_COMPILE_NGMODULE__POST_R3__ as ɵSWITCH_COMPILE_NGMODULE__POST_R3__, getDebugNode__POST_R3__ as ɵgetDebugNode__POST_R3__, SWITCH_COMPILE_INJECTABLE__POST_R3__ as ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, SWITCH_IVY_ENABLED__POST_R3__ as ɵSWITCH_IVY_ENABLED__POST_R3__, SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, Compiler_compileModuleSync__POST_R3__ as ɵCompiler_compileModuleSync__POST_R3__, Compiler_compileModuleAsync__POST_R3__ as ɵCompiler_compileModuleAsync__POST_R3__, Compiler_compileModuleAndAllComponentsSync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__, Compiler_compileModuleAndAllComponentsAsync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__, SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, SWITCH_RENDERER2_FACTORY__POST_R3__ as ɵSWITCH_RENDERER2_FACTORY__POST_R3__, getModuleFactory__POST_R3__ as ɵgetModuleFactory__POST_R3__, publishGlobalUtil as ɵpublishGlobalUtil, publishDefaultGlobalUtils as ɵpublishDefaultGlobalUtils, SWITCH_INJECTOR_FACTORY__POST_R3__ as ɵSWITCH_INJECTOR_FACTORY__POST_R3__, registerModuleFactory as ɵregisterModuleFactory, EMPTY_ARRAY$4 as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue$1 as ɵunv, viewDef as ɵvid };\n//# sourceMappingURL=core.js.map\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\ndeclare const gtag;\r\n\r\n// https://developers.google.com/analytics/devguides/collection/gtagjs/events#default-event-categories-and-labels\r\n// Google Analytics Events\r\nconst Events = {\r\n  Login: {\r\n    NAME: 'login',\r\n    LABEL: 'method'\r\n  },\r\n  Search: {\r\n    NAME: 'search',\r\n    LABEL: 'search_term'\r\n  }\r\n};\r\n\r\nconst CustomEvents = {\r\n  VIDEO_PLAY: 'video_play'\r\n};\r\n@Injectable()\r\nexport class AnalyticsService {\r\n  private projectId = window['GA_PROJECT_ID'];\r\n  private gtag: any;\r\n\r\n  constructor() {\r\n    this.assignGtag();\r\n  }\r\n\r\n  assignGtag() {\r\n    const hasGtagLoaded = 'gtag' in window;\r\n    if (!hasGtagLoaded) {\r\n      console.info('GTAG has not been loaded');\r\n    }\r\n    this.gtag = hasGtagLoaded ? gtag : () => undefined;\r\n  }\r\n\r\n  trackPage(page) {\r\n    this.gtag('config', this.projectId, {\r\n      page_title: page,\r\n      page_location: location.origin,\r\n      page_path: location.hash\r\n    });\r\n  }\r\n\r\n  trackSearch(searchType) {\r\n    this.gtag('event', Events.Search.NAME, {\r\n      [Events.Search.LABEL]: searchType\r\n    });\r\n  }\r\n\r\n  trackSignin() {\r\n    this.gtag('event', Events.Login.NAME, { [Events.Login.LABEL]: 'Google' });\r\n  }\r\n\r\n  trackVideoPlay() {\r\n    this.gtag('event', CustomEvents.VIDEO_PLAY);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { YoutubeDataApi, DataApiProviders } from './youtube-data-api';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nconst SearchTypes = {\r\n  VIDEO: 'video',\r\n  PLAYLIST: 'playlist',\r\n  CHANNEL: 'channel'\r\n};\r\n\r\nexport const SearchParams = {\r\n  Types: {\r\n    [SearchTypes.VIDEO]: 'video',\r\n    [SearchTypes.PLAYLIST]: 'playlist',\r\n    [SearchTypes.CHANNEL]: 'channel'\r\n  }\r\n};\r\n\r\n@Injectable()\r\nexport class YoutubeSearch {\r\n  private _api = DataApiProviders.SEARCH;\r\n  private _apiOptions = {\r\n    part: 'snippet,id',\r\n    q: '',\r\n    type: 'video',\r\n    pageToken: ''\r\n  };\r\n\r\n  constructor(private youtubeDataApi: YoutubeDataApi) {}\r\n\r\n  /**\r\n   * search for video\r\n   * @param query {string}\r\n   * @param params {key/value object}\r\n   */\r\n  search(query: string, params?: any) {\r\n    if (query || '' === query) {\r\n      const preset = params ? ` ${params.preset}` : '';\r\n      this._apiOptions.q = `${query}${preset}`;\r\n    }\r\n    return this.youtubeDataApi.list(this._api, this._apiOptions);\r\n  }\r\n\r\n  /**\r\n   * resolves which type to search for\r\n   * @param type any type of SearchTypes\r\n   * @param query any string\r\n   * @param params params of api\r\n   */\r\n  searchFor(type: string, query: string, params?: any) {\r\n    switch (type) {\r\n      case SearchTypes.VIDEO: {\r\n        return this.searchVideo(query, params);\r\n      }\r\n\r\n      case SearchTypes.PLAYLIST: {\r\n        return this.searchForPlaylist(query, params);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * search for video\r\n   * @param query {string}\r\n   * @param params {key/value object}\r\n   */\r\n  searchVideo(query: string, params?: any) {\r\n    this._apiOptions.type = SearchParams.Types[SearchTypes.VIDEO];\r\n    return this.search(query, params);\r\n  }\r\n\r\n  /**\r\n   * search for playlist\r\n   * @param query {string}\r\n   * @param params {key/value object}\r\n   */\r\n  searchForPlaylist(query: string, params?: any) {\r\n    this._apiOptions.type = SearchParams.Types[SearchTypes.PLAYLIST];\r\n    return this.search(query, params).pipe(\r\n      switchMap((response: any) => {\r\n        const options = {\r\n          part: 'snippet,id,contentDetails',\r\n          id: response.items.map(pl => pl.id.playlistId).join(',')\r\n        };\r\n        return this.youtubeDataApi.list(DataApiProviders.PLAYLISTS, options);\r\n      })\r\n    );\r\n  }\r\n\r\n  searchMore(nextPageToken: string) {\r\n    this._apiOptions.pageToken = nextPageToken;\r\n    return this;\r\n  }\r\n\r\n  resetPageToken() {\r\n    this._apiOptions.pageToken = '';\r\n    return this;\r\n  }\r\n}\r\n","/**\n * @license NgRx 7.3.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { InjectionToken, Injectable, Inject, ErrorHandler, NgModule } from '@angular/core';\nimport { ActionsSubject, UPDATE, INIT, INITIAL_STATE, ReducerObservable, ScannedActionsSubject, ReducerManagerDispatcher, StateObservable } from '@ngrx/store';\nimport { empty, of, Observable, merge, queueScheduler, ReplaySubject } from 'rxjs';\nimport { filter, map, share, switchMap, takeUntil, concatMap, debounceTime, timeout, catchError, take, observeOn, scan, skip, withLatestFrom } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass StoreDevtoolsConfig {\n}\n/** @type {?} */\nconst STORE_DEVTOOLS_CONFIG = new InjectionToken('@ngrx/devtools Options');\n/** @type {?} */\nconst INITIAL_OPTIONS = new InjectionToken('@ngrx/devtools Initial Config');\n/**\n * @return {?}\n */\nfunction noMonitor() {\n    return null;\n}\n/** @type {?} */\nconst DEFAULT_NAME = 'NgRx Store DevTools';\n/**\n * @param {?} _options\n * @return {?}\n */\nfunction createConfig(_options) {\n    /** @type {?} */\n    const DEFAULT_OPTIONS = {\n        maxAge: false,\n        monitor: noMonitor,\n        actionSanitizer: undefined,\n        stateSanitizer: undefined,\n        name: DEFAULT_NAME,\n        serialize: false,\n        logOnly: false,\n        // Add all features explicitely. This prevent buggy behavior for\n        // options like \"lock\" which might otherwise not show up.\n        features: {\n            pause: true,\n            // start/pause recording of dispatched actions\n            lock: true,\n            // lock/unlock dispatching actions and side effects\n            persist: true,\n            // persist states on page reloading\n            export: true,\n            // export history of actions in a file\n            import: 'custom',\n            // import history of actions from a file\n            jump: true,\n            // jump back and forth (time travelling)\n            skip: true,\n            // skip (cancel) actions\n            reorder: true,\n            // drag and drop actions in the history list\n            dispatch: true,\n            // dispatch custom actions or action creators\n            test: true,\n        },\n    };\n    /** @type {?} */\n    let options = typeof _options === 'function' ? _options() : _options;\n    /** @type {?} */\n    const logOnly = options.logOnly\n        ? { pause: true, export: true, test: true }\n        : false;\n    /** @type {?} */\n    const features = options.features || logOnly || DEFAULT_OPTIONS.features;\n    /** @type {?} */\n    const config = Object.assign({}, DEFAULT_OPTIONS, { features }, options);\n    if (config.maxAge && config.maxAge < 2) {\n        throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n    }\n    return config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PERFORM_ACTION = 'PERFORM_ACTION';\n/** @type {?} */\nconst REFRESH = 'REFRESH';\n/** @type {?} */\nconst RESET = 'RESET';\n/** @type {?} */\nconst ROLLBACK = 'ROLLBACK';\n/** @type {?} */\nconst COMMIT = 'COMMIT';\n/** @type {?} */\nconst SWEEP = 'SWEEP';\n/** @type {?} */\nconst TOGGLE_ACTION = 'TOGGLE_ACTION';\n/** @type {?} */\nconst SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\n/** @type {?} */\nconst JUMP_TO_STATE = 'JUMP_TO_STATE';\n/** @type {?} */\nconst JUMP_TO_ACTION = 'JUMP_TO_ACTION';\n/** @type {?} */\nconst IMPORT_STATE = 'IMPORT_STATE';\n/** @type {?} */\nconst LOCK_CHANGES = 'LOCK_CHANGES';\n/** @type {?} */\nconst PAUSE_RECORDING = 'PAUSE_RECORDING';\nclass PerformAction {\n    /**\n     * @param {?} action\n     * @param {?} timestamp\n     */\n    constructor(action, timestamp) {\n        this.action = action;\n        this.timestamp = timestamp;\n        this.type = PERFORM_ACTION;\n        if (typeof action.type === 'undefined') {\n            throw new Error('Actions may not have an undefined \"type\" property. ' +\n                'Have you misspelled a constant?');\n        }\n    }\n}\nclass Refresh {\n    constructor() {\n        this.type = REFRESH;\n    }\n}\nclass Reset {\n    /**\n     * @param {?} timestamp\n     */\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = RESET;\n    }\n}\nclass Rollback {\n    /**\n     * @param {?} timestamp\n     */\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = ROLLBACK;\n    }\n}\nclass Commit {\n    /**\n     * @param {?} timestamp\n     */\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = COMMIT;\n    }\n}\nclass Sweep {\n    constructor() {\n        this.type = SWEEP;\n    }\n}\nclass ToggleAction {\n    /**\n     * @param {?} id\n     */\n    constructor(id) {\n        this.id = id;\n        this.type = TOGGLE_ACTION;\n    }\n}\nclass JumpToState {\n    /**\n     * @param {?} index\n     */\n    constructor(index) {\n        this.index = index;\n        this.type = JUMP_TO_STATE;\n    }\n}\nclass JumpToAction {\n    /**\n     * @param {?} actionId\n     */\n    constructor(actionId) {\n        this.actionId = actionId;\n        this.type = JUMP_TO_ACTION;\n    }\n}\nclass ImportState {\n    /**\n     * @param {?} nextLiftedState\n     */\n    constructor(nextLiftedState) {\n        this.nextLiftedState = nextLiftedState;\n        this.type = IMPORT_STATE;\n    }\n}\nclass LockChanges {\n    /**\n     * @param {?} status\n     */\n    constructor(status) {\n        this.status = status;\n        this.type = LOCK_CHANGES;\n    }\n}\nclass PauseRecording {\n    /**\n     * @param {?} status\n     */\n    constructor(status) {\n        this.status = status;\n        this.type = PAUSE_RECORDING;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} first\n * @param {?} second\n * @return {?}\n */\nfunction difference(first, second) {\n    return first.filter(item => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n * @param {?} liftedState\n * @return {?}\n */\nfunction unliftState(liftedState) {\n    const { computedStates, currentStateIndex } = liftedState;\n    // At start up NgRx dispatches init actions,\n    // When these init actions are being filtered out by the predicate or black/white list options\n    // we don't have a complete computed states yet.\n    // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state\n    if (currentStateIndex >= computedStates.length) {\n        const { state } = computedStates[computedStates.length - 1];\n        return state;\n    }\n    const { state } = computedStates[currentStateIndex];\n    return state;\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n * @param {?} action\n * @return {?}\n */\nfunction liftAction(action) {\n    return new PerformAction(action, +Date.now());\n}\n/**\n * Sanitizes given actions with given function.\n * @param {?} actionSanitizer\n * @param {?} actions\n * @return {?}\n */\nfunction sanitizeActions(actionSanitizer, actions) {\n    return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {\n        /** @type {?} */\n        const idx = Number(actionIdx);\n        sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);\n        return sanitizedActions;\n    }, /** @type {?} */ ({}));\n}\n/**\n * Sanitizes given action with given function.\n * @param {?} actionSanitizer\n * @param {?} action\n * @param {?} actionIdx\n * @return {?}\n */\nfunction sanitizeAction(actionSanitizer, action, actionIdx) {\n    return Object.assign({}, action, { action: actionSanitizer(action.action, actionIdx) });\n}\n/**\n * Sanitizes given states with given function.\n * @param {?} stateSanitizer\n * @param {?} states\n * @return {?}\n */\nfunction sanitizeStates(stateSanitizer, states) {\n    return states.map((computedState, idx) => ({\n        state: sanitizeState(stateSanitizer, computedState.state, idx),\n        error: computedState.error,\n    }));\n}\n/**\n * Sanitizes given state with given function.\n * @param {?} stateSanitizer\n * @param {?} state\n * @param {?} stateIdx\n * @return {?}\n */\nfunction sanitizeState(stateSanitizer, state, stateIdx) {\n    return stateSanitizer(state, stateIdx);\n}\n/**\n * Read the config and tell if actions should be filtered\n * @param {?} config\n * @return {?}\n */\nfunction shouldFilterActions(config) {\n    return config.predicate || config.actionsWhitelist || config.actionsBlacklist;\n}\n/**\n * Return a full filtered lifted state\n * @param {?} liftedState\n * @param {?=} predicate\n * @param {?=} whitelist\n * @param {?=} blacklist\n * @return {?}\n */\nfunction filterLiftedState(liftedState, predicate, whitelist, blacklist) {\n    /** @type {?} */\n    const filteredStagedActionIds = [];\n    /** @type {?} */\n    const filteredActionsById = {};\n    /** @type {?} */\n    const filteredComputedStates = [];\n    liftedState.stagedActionIds.forEach((id, idx) => {\n        /** @type {?} */\n        const liftedAction = liftedState.actionsById[id];\n        if (!liftedAction)\n            return;\n        if (idx &&\n            isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, whitelist, blacklist)) {\n            return;\n        }\n        filteredActionsById[id] = liftedAction;\n        filteredStagedActionIds.push(id);\n        filteredComputedStates.push(liftedState.computedStates[idx]);\n    });\n    return Object.assign({}, liftedState, { stagedActionIds: filteredStagedActionIds, actionsById: filteredActionsById, computedStates: filteredComputedStates });\n}\n/**\n * Return true is the action should be ignored\n * @param {?} state\n * @param {?} action\n * @param {?=} predicate\n * @param {?=} whitelist\n * @param {?=} blacklist\n * @return {?}\n */\nfunction isActionFiltered(state, action, predicate, whitelist, blacklist) {\n    /** @type {?} */\n    const predicateMatch = predicate && !predicate(state, action.action);\n    /** @type {?} */\n    const whitelistMatch = whitelist && !action.action.type.match(whitelist.join('|'));\n    /** @type {?} */\n    const blacklistMatch = blacklist && action.action.type.match(blacklist.join('|'));\n    return predicateMatch || whitelistMatch || blacklistMatch;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass DevtoolsDispatcher extends ActionsSubject {\n}\nDevtoolsDispatcher.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ExtensionActionTypes = {\n    START: 'START',\n    DISPATCH: 'DISPATCH',\n    STOP: 'STOP',\n    ACTION: 'ACTION',\n};\n/** @type {?} */\nconst REDUX_DEVTOOLS_EXTENSION = new InjectionToken('Redux Devtools Extension');\nclass DevtoolsExtension {\n    /**\n     * @param {?} devtoolsExtension\n     * @param {?} config\n     * @param {?} dispatcher\n     */\n    constructor(devtoolsExtension, config, dispatcher) {\n        this.config = config;\n        this.dispatcher = dispatcher;\n        this.devtoolsExtension = devtoolsExtension;\n        this.createActionStreams();\n    }\n    /**\n     * @param {?} action\n     * @param {?} state\n     * @return {?}\n     */\n    notify(action, state) {\n        if (!this.devtoolsExtension) {\n            return;\n        }\n        // Check to see if the action requires a full update of the liftedState.\n        // If it is a simple action generated by the user's app and the recording\n        // is not locked/paused, only send the action and the current state (fast).\n        //\n        // A full liftedState update (slow: serializes the entire liftedState) is\n        // only required when:\n        //   a) redux-devtools-extension fires the @@Init action (ignored by\n        //      @ngrx/store-devtools)\n        //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n        //      or @ngrx/store/update-reducers)\n        //   c) the state has been recomputed due to time-traveling\n        //   d) any action that is not a PerformAction to err on the side of\n        //      caution.\n        if (action.type === PERFORM_ACTION) {\n            if (state.isLocked || state.isPaused) {\n                return;\n            }\n            /** @type {?} */\n            const currentState = unliftState(state);\n            if (shouldFilterActions(this.config) &&\n                isActionFiltered(currentState, action, this.config.predicate, this.config.actionsWhitelist, this.config.actionsBlacklist)) {\n                return;\n            }\n            /** @type {?} */\n            const sanitizedState = this.config.stateSanitizer\n                ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex)\n                : currentState;\n            /** @type {?} */\n            const sanitizedAction = this.config.actionSanitizer\n                ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId)\n                : action;\n            this.sendToReduxDevtools(() => this.extensionConnection.send(sanitizedAction, sanitizedState));\n        }\n        else {\n            /** @type {?} */\n            const sanitizedLiftedState = Object.assign({}, state, { stagedActionIds: state.stagedActionIds, actionsById: this.config.actionSanitizer\n                    ? sanitizeActions(this.config.actionSanitizer, state.actionsById)\n                    : state.actionsById, computedStates: this.config.stateSanitizer\n                    ? sanitizeStates(this.config.stateSanitizer, state.computedStates)\n                    : state.computedStates });\n            this.sendToReduxDevtools(() => this.devtoolsExtension.send(null, sanitizedLiftedState, this.getExtensionConfig(this.config)));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    createChangesObservable() {\n        if (!this.devtoolsExtension) {\n            return empty();\n        }\n        return new Observable(subscriber => {\n            /** @type {?} */\n            const connection = this.devtoolsExtension.connect(this.getExtensionConfig(this.config));\n            this.extensionConnection = connection;\n            connection.init();\n            connection.subscribe((change) => subscriber.next(change));\n            return connection.unsubscribe;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    createActionStreams() {\n        /** @type {?} */\n        const changes$ = this.createChangesObservable().pipe(share());\n        /** @type {?} */\n        const start$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.START));\n        /** @type {?} */\n        const stop$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.STOP));\n        /** @type {?} */\n        const liftedActions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.DISPATCH), map(change => this.unwrapAction(change.payload)), concatMap((action) => {\n            if (action.type === IMPORT_STATE) {\n                // State imports may happen in two situations:\n                // 1. Explicitly by user\n                // 2. User activated the \"persist state accross reloads\" option\n                //    and now the state is imported during reload.\n                // Because of option 2, we need to give possible\n                // lazy loaded reducers time to instantiate.\n                // As soon as there is no UPDATE action within 1 second,\n                // it is assumed that all reducers are loaded.\n                return this.dispatcher.pipe(filter(action => action.type === UPDATE), timeout(1000), debounceTime(1000), map(() => action), catchError(() => of(action)), take(1));\n            }\n            else {\n                return of(action);\n            }\n        }));\n        /** @type {?} */\n        const actions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.ACTION), map(change => this.unwrapAction(change.payload)));\n        /** @type {?} */\n        const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n        /** @type {?} */\n        const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n        this.start$ = start$.pipe(takeUntil(stop$));\n        // Only take the action sources between the start/stop events\n        this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n        this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    unwrapAction(action) {\n        return typeof action === 'string' ? eval(`(${action})`) : action;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    getExtensionConfig(config) {\n        /** @type {?} */\n        const extensionOptions = {\n            name: config.name,\n            features: config.features,\n            serialize: config.serialize,\n        };\n        if (config.maxAge !== false /* support === 0 */) {\n            extensionOptions.maxAge = config.maxAge;\n        }\n        return extensionOptions;\n    }\n    /**\n     * @param {?} send\n     * @return {?}\n     */\n    sendToReduxDevtools(send) {\n        try {\n            send();\n        }\n        catch (err) {\n            console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);\n        }\n    }\n}\nDevtoolsExtension.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDevtoolsExtension.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [REDUX_DEVTOOLS_EXTENSION,] }] },\n    { type: StoreDevtoolsConfig, decorators: [{ type: Inject, args: [STORE_DEVTOOLS_CONFIG,] }] },\n    { type: DevtoolsDispatcher }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INIT_ACTION = { type: INIT };\n/** @type {?} */\nconst RECOMPUTE = /** @type {?} */ ('@ngrx/store-devtools/recompute');\n/** @type {?} */\nconst RECOMPUTE_ACTION = { type: RECOMPUTE };\n/**\n * Computes the next entry in the log by applying an action.\n * @param {?} reducer\n * @param {?} action\n * @param {?} state\n * @param {?} error\n * @param {?} errorHandler\n * @return {?}\n */\nfunction computeNextEntry(reducer, action, state, error, errorHandler) {\n    if (error) {\n        return {\n            state,\n            error: 'Interrupted by an error up the chain',\n        };\n    }\n    /** @type {?} */\n    let nextState = state;\n    /** @type {?} */\n    let nextError;\n    try {\n        nextState = reducer(state, action);\n    }\n    catch (err) {\n        nextError = err.toString();\n        errorHandler.handleError(err.stack || err);\n    }\n    return {\n        state: nextState,\n        error: nextError,\n    };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n * @param {?} computedStates\n * @param {?} minInvalidatedStateIndex\n * @param {?} reducer\n * @param {?} committedState\n * @param {?} actionsById\n * @param {?} stagedActionIds\n * @param {?} skippedActionIds\n * @param {?} errorHandler\n * @param {?} isPaused\n * @return {?}\n */\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused) {\n    // Optimization: exit early and return the same reference\n    // if we know nothing could have changed.\n    if (minInvalidatedStateIndex >= computedStates.length &&\n        computedStates.length === stagedActionIds.length) {\n        return computedStates;\n    }\n    /** @type {?} */\n    const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n    /** @type {?} */\n    const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n    for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n        /** @type {?} */\n        const actionId = stagedActionIds[i];\n        /** @type {?} */\n        const action = actionsById[actionId].action;\n        /** @type {?} */\n        const previousEntry = nextComputedStates[i - 1];\n        /** @type {?} */\n        const previousState = previousEntry ? previousEntry.state : committedState;\n        /** @type {?} */\n        const previousError = previousEntry ? previousEntry.error : undefined;\n        /** @type {?} */\n        const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n        /** @type {?} */\n        const entry = shouldSkip\n            ? previousEntry\n            : computeNextEntry(reducer, action, previousState, previousError, errorHandler);\n        nextComputedStates.push(entry);\n    }\n    // If the recording is paused, the last state will not be recomputed,\n    // because it's essentially not part of the state history.\n    if (isPaused) {\n        nextComputedStates.push(computedStates[computedStates.length - 1]);\n    }\n    return nextComputedStates;\n}\n/**\n * @param {?=} initialCommittedState\n * @param {?=} monitorReducer\n * @return {?}\n */\nfunction liftInitialState(initialCommittedState, monitorReducer) {\n    return {\n        monitorState: monitorReducer(undefined, {}),\n        nextActionId: 1,\n        actionsById: { 0: liftAction(INIT_ACTION) },\n        stagedActionIds: [0],\n        skippedActionIds: [],\n        committedState: initialCommittedState,\n        currentStateIndex: 0,\n        computedStates: [],\n        isLocked: false,\n        isPaused: false,\n    };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n * @param {?} initialCommittedState\n * @param {?} initialLiftedState\n * @param {?} errorHandler\n * @param {?=} monitorReducer\n * @param {?=} options\n * @return {?}\n */\nfunction liftReducerWith(initialCommittedState, initialLiftedState, errorHandler, monitorReducer, options = {}) {\n    /**\n       * Manages how the history actions modify the history state.\n       */\n    return (reducer) => (liftedState, liftedAction) => {\n        let { monitorState, actionsById, nextActionId, stagedActionIds, skippedActionIds, committedState, currentStateIndex, computedStates, isLocked, isPaused, } = liftedState || initialLiftedState;\n        if (!liftedState) {\n            // Prevent mutating initialLiftedState\n            actionsById = Object.create(actionsById);\n        }\n        /**\n         * @param {?} n\n         * @return {?}\n         */\n        function commitExcessActions(n) {\n            /** @type {?} */\n            let excess = n;\n            /** @type {?} */\n            let idsToDelete = stagedActionIds.slice(1, excess + 1);\n            for (let i = 0; i < idsToDelete.length; i++) {\n                if (computedStates[i + 1].error) {\n                    // Stop if error is found. Commit actions up to error.\n                    excess = i;\n                    idsToDelete = stagedActionIds.slice(1, excess + 1);\n                    break;\n                }\n                else {\n                    delete actionsById[idsToDelete[i]];\n                }\n            }\n            skippedActionIds = skippedActionIds.filter(id => idsToDelete.indexOf(id) === -1);\n            stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n            committedState = computedStates[excess].state;\n            computedStates = computedStates.slice(excess);\n            currentStateIndex =\n                currentStateIndex > excess ? currentStateIndex - excess : 0;\n        }\n        /**\n         * @return {?}\n         */\n        function commitChanges() {\n            // Consider the last committed state the new starting point.\n            // Squash any staged actions into a single committed state.\n            actionsById = { 0: liftAction(INIT_ACTION) };\n            nextActionId = 1;\n            stagedActionIds = [0];\n            skippedActionIds = [];\n            committedState = computedStates[currentStateIndex].state;\n            currentStateIndex = 0;\n            computedStates = [];\n        }\n        /** @type {?} */\n        let minInvalidatedStateIndex = 0;\n        switch (liftedAction.type) {\n            case LOCK_CHANGES: {\n                isLocked = liftedAction.status;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case PAUSE_RECORDING: {\n                isPaused = liftedAction.status;\n                if (isPaused) {\n                    // Add a pause action to signal the devtools-user the recording is paused.\n                    // The corresponding state will be overwritten on each update to always contain\n                    // the latest state (see Actions.PERFORM_ACTION).\n                    stagedActionIds = [...stagedActionIds, nextActionId];\n                    actionsById[nextActionId] = new PerformAction({\n                        type: '@ngrx/devtools/pause',\n                    }, +Date.now());\n                    nextActionId++;\n                    minInvalidatedStateIndex = stagedActionIds.length - 1;\n                    computedStates = computedStates.concat(computedStates[computedStates.length - 1]);\n                    if (currentStateIndex === stagedActionIds.length - 2) {\n                        currentStateIndex++;\n                    }\n                    minInvalidatedStateIndex = Infinity;\n                }\n                else {\n                    commitChanges();\n                }\n                break;\n            }\n            case RESET: {\n                // Get back to the state the store was created with.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                committedState = initialCommittedState;\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case COMMIT: {\n                commitChanges();\n                break;\n            }\n            case ROLLBACK: {\n                // Forget about any staged actions.\n                // Start again from the last committed state.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case TOGGLE_ACTION: {\n                const { id: actionId } = liftedAction;\n                /** @type {?} */\n                const index = skippedActionIds.indexOf(actionId);\n                if (index === -1) {\n                    skippedActionIds = [actionId, ...skippedActionIds];\n                }\n                else {\n                    skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n                break;\n            }\n            case SET_ACTIONS_ACTIVE: {\n                const { start, end, active } = liftedAction;\n                /** @type {?} */\n                const actionIds = [];\n                for (let i = start; i < end; i++)\n                    actionIds.push(i);\n                if (active) {\n                    skippedActionIds = difference(skippedActionIds, actionIds);\n                }\n                else {\n                    skippedActionIds = [...skippedActionIds, ...actionIds];\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n                break;\n            }\n            case JUMP_TO_STATE: {\n                // Without recomputing anything, move the pointer that tell us\n                // which state is considered the current one. Useful for sliders.\n                currentStateIndex = liftedAction.index;\n                // Optimization: we know the history has not changed.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case JUMP_TO_ACTION: {\n                /** @type {?} */\n                const index = stagedActionIds.indexOf(liftedAction.actionId);\n                if (index !== -1)\n                    currentStateIndex = index;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case SWEEP: {\n                // Forget any actions that are currently being skipped.\n                stagedActionIds = difference(stagedActionIds, skippedActionIds);\n                skippedActionIds = [];\n                currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n                break;\n            }\n            case PERFORM_ACTION: {\n                // Ignore action and return state as is if recording is locked\n                if (isLocked) {\n                    return liftedState || initialLiftedState;\n                }\n                if (isPaused ||\n                    (liftedState &&\n                        isActionFiltered(liftedState.computedStates[currentStateIndex], liftedAction, options.predicate, options.actionsWhitelist, options.actionsBlacklist))) {\n                    /** @type {?} */\n                    const lastState = computedStates[computedStates.length - 1];\n                    computedStates = [\n                        ...computedStates.slice(0, -1),\n                        computeNextEntry(reducer, liftedAction.action, lastState.state, lastState.error, errorHandler),\n                    ];\n                    minInvalidatedStateIndex = Infinity;\n                    break;\n                }\n                // Auto-commit as new actions come in.\n                if (options.maxAge && stagedActionIds.length === options.maxAge) {\n                    commitExcessActions(1);\n                }\n                if (currentStateIndex === stagedActionIds.length - 1) {\n                    currentStateIndex++;\n                }\n                /** @type {?} */\n                const actionId = nextActionId++;\n                // Mutation! This is the hottest path, and we optimize on purpose.\n                // It is safe because we set a new key in a cache dictionary.\n                actionsById[actionId] = liftedAction;\n                stagedActionIds = [...stagedActionIds, actionId];\n                // Optimization: we know that only the new action needs computing.\n                minInvalidatedStateIndex = stagedActionIds.length - 1;\n                break;\n            }\n            case IMPORT_STATE: {\n                // Completely replace everything.\n                ({\n                    monitorState,\n                    actionsById,\n                    nextActionId,\n                    stagedActionIds,\n                    skippedActionIds,\n                    committedState,\n                    currentStateIndex,\n                    computedStates,\n                    isLocked,\n                    // prettier-ignore\n                    isPaused\n                } = liftedAction.nextLiftedState);\n                break;\n            }\n            case INIT: {\n                // Always recompute states on hot reload and init.\n                minInvalidatedStateIndex = 0;\n                if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                    // States must be recomputed before committing excess.\n                    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    commitExcessActions(stagedActionIds.length - options.maxAge);\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            case UPDATE: {\n                /** @type {?} */\n                const stateHasErrors = computedStates.filter(state => state.error).length > 0;\n                if (stateHasErrors) {\n                    // Recompute all states\n                    minInvalidatedStateIndex = 0;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        // States must be recomputed before committing excess.\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                        // Avoid double computation.\n                        minInvalidatedStateIndex = Infinity;\n                    }\n                }\n                else {\n                    // If not paused/locked, add a new action to signal devtools-user\n                    // that there was a reducer update.\n                    if (!isPaused && !isLocked) {\n                        if (currentStateIndex === stagedActionIds.length - 1) {\n                            currentStateIndex++;\n                        }\n                        /** @type {?} */\n                        const actionId = nextActionId++;\n                        actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n                        stagedActionIds = [...stagedActionIds, actionId];\n                        minInvalidatedStateIndex = stagedActionIds.length - 1;\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    }\n                    // Recompute state history with latest reducer and update action\n                    computedStates = computedStates.map(cmp => (Object.assign({}, cmp, { state: reducer(cmp.state, RECOMPUTE_ACTION) })));\n                    currentStateIndex = stagedActionIds.length - 1;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                    }\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            default: {\n                // If the action is not recognized, it's a monitor action.\n                // Optimization: a monitor action can't change history.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n        }\n        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n        monitorState = monitorReducer(monitorState, liftedAction);\n        return {\n            monitorState,\n            actionsById,\n            nextActionId,\n            stagedActionIds,\n            skippedActionIds,\n            committedState,\n            currentStateIndex,\n            computedStates,\n            isLocked,\n            isPaused,\n        };\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass StoreDevtools {\n    /**\n     * @param {?} dispatcher\n     * @param {?} actions$\n     * @param {?} reducers$\n     * @param {?} extension\n     * @param {?} scannedActions\n     * @param {?} errorHandler\n     * @param {?} initialState\n     * @param {?} config\n     */\n    constructor(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {\n        /** @type {?} */\n        const liftedInitialState = liftInitialState(initialState, config.monitor);\n        /** @type {?} */\n        const liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);\n        /** @type {?} */\n        const liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));\n        /** @type {?} */\n        const liftedReducer$ = reducers$.pipe(map(liftReducer));\n        /** @type {?} */\n        const liftedStateSubject = new ReplaySubject(1);\n        /** @type {?} */\n        const liftedStateSubscription = liftedAction$\n            .pipe(withLatestFrom(liftedReducer$), scan(({ state: liftedState }, [action, reducer]) => {\n            /** @type {?} */\n            let reducedLiftedState = reducer(liftedState, action);\n            // On full state update\n            // If we have actions filters, we must filter completly our lifted state to be sync with the extension\n            if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {\n                reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsWhitelist, config.actionsBlacklist);\n            }\n            // Extension should be sent the sanitized lifted state\n            extension.notify(action, reducedLiftedState);\n            return { state: reducedLiftedState, action };\n        }, { state: liftedInitialState, action: /** @type {?} */ (null) }))\n            .subscribe(({ state, action }) => {\n            liftedStateSubject.next(state);\n            if (action.type === PERFORM_ACTION) {\n                /** @type {?} */\n                const unliftedAction = (/** @type {?} */ (action)).action;\n                scannedActions.next(unliftedAction);\n            }\n        });\n        /** @type {?} */\n        const extensionStartSubscription = extension.start$.subscribe(() => {\n            this.refresh();\n        });\n        /** @type {?} */\n        const liftedState$ = /** @type {?} */ (liftedStateSubject.asObservable());\n        /** @type {?} */\n        const state$ = liftedState$.pipe(map(unliftState));\n        this.extensionStartSubscription = extensionStartSubscription;\n        this.stateSubscription = liftedStateSubscription;\n        this.dispatcher = dispatcher;\n        this.liftedState = liftedState$;\n        this.state = state$;\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    dispatch(action) {\n        this.dispatcher.next(action);\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    next(action) {\n        this.dispatcher.next(action);\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    error(error) { }\n    /**\n     * @return {?}\n     */\n    complete() { }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    performAction(action) {\n        this.dispatch(new PerformAction(action, +Date.now()));\n    }\n    /**\n     * @return {?}\n     */\n    refresh() {\n        this.dispatch(new Refresh());\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this.dispatch(new Reset(+Date.now()));\n    }\n    /**\n     * @return {?}\n     */\n    rollback() {\n        this.dispatch(new Rollback(+Date.now()));\n    }\n    /**\n     * @return {?}\n     */\n    commit() {\n        this.dispatch(new Commit(+Date.now()));\n    }\n    /**\n     * @return {?}\n     */\n    sweep() {\n        this.dispatch(new Sweep());\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    toggleAction(id) {\n        this.dispatch(new ToggleAction(id));\n    }\n    /**\n     * @param {?} actionId\n     * @return {?}\n     */\n    jumpToAction(actionId) {\n        this.dispatch(new JumpToAction(actionId));\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    jumpToState(index) {\n        this.dispatch(new JumpToState(index));\n    }\n    /**\n     * @param {?} nextLiftedState\n     * @return {?}\n     */\n    importState(nextLiftedState) {\n        this.dispatch(new ImportState(nextLiftedState));\n    }\n    /**\n     * @param {?} status\n     * @return {?}\n     */\n    lockChanges(status) {\n        this.dispatch(new LockChanges(status));\n    }\n    /**\n     * @param {?} status\n     * @return {?}\n     */\n    pauseRecording(status) {\n        this.dispatch(new PauseRecording(status));\n    }\n}\nStoreDevtools.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStoreDevtools.ctorParameters = () => [\n    { type: DevtoolsDispatcher },\n    { type: ActionsSubject },\n    { type: ReducerObservable },\n    { type: DevtoolsExtension },\n    { type: ScannedActionsSubject },\n    { type: ErrorHandler },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },\n    { type: StoreDevtoolsConfig, decorators: [{ type: Inject, args: [STORE_DEVTOOLS_CONFIG,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken('Is Devtools Extension or Monitor Present');\n/**\n * @param {?} extension\n * @param {?} config\n * @return {?}\n */\nfunction createIsExtensionOrMonitorPresent(extension, config) {\n    return Boolean(extension) || config.monitor !== noMonitor;\n}\n/**\n * @return {?}\n */\nfunction createReduxDevtoolsExtension() {\n    /** @type {?} */\n    const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n    if (typeof window === 'object' &&\n        typeof (/** @type {?} */ (window))[extensionKey] !== 'undefined') {\n        return (/** @type {?} */ (window))[extensionKey];\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} devtools\n * @return {?}\n */\nfunction createStateObservable(devtools) {\n    return devtools.state;\n}\nclass StoreDevtoolsModule {\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    static instrument(options = {}) {\n        return {\n            ngModule: StoreDevtoolsModule,\n            providers: [\n                DevtoolsExtension,\n                DevtoolsDispatcher,\n                StoreDevtools,\n                {\n                    provide: INITIAL_OPTIONS,\n                    useValue: options,\n                },\n                {\n                    provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n                    deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n                    useFactory: createIsExtensionOrMonitorPresent,\n                },\n                {\n                    provide: REDUX_DEVTOOLS_EXTENSION,\n                    useFactory: createReduxDevtoolsExtension,\n                },\n                {\n                    provide: STORE_DEVTOOLS_CONFIG,\n                    deps: [INITIAL_OPTIONS],\n                    useFactory: createConfig,\n                },\n                {\n                    provide: StateObservable,\n                    deps: [StoreDevtools],\n                    useFactory: createStateObservable,\n                },\n                {\n                    provide: ReducerManagerDispatcher,\n                    useExisting: DevtoolsDispatcher,\n                },\n            ],\n        };\n    }\n}\nStoreDevtoolsModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_OPTIONS as ɵngrx_modules_store_devtools_store_devtools_f, STORE_DEVTOOLS_CONFIG as ɵngrx_modules_store_devtools_store_devtools_e, createConfig as ɵngrx_modules_store_devtools_store_devtools_h, noMonitor as ɵngrx_modules_store_devtools_store_devtools_g, DevtoolsDispatcher as ɵngrx_modules_store_devtools_store_devtools_k, DevtoolsExtension as ɵngrx_modules_store_devtools_store_devtools_j, REDUX_DEVTOOLS_EXTENSION as ɵngrx_modules_store_devtools_store_devtools_i, IS_EXTENSION_OR_MONITOR_PRESENT as ɵngrx_modules_store_devtools_store_devtools_a, createIsExtensionOrMonitorPresent as ɵngrx_modules_store_devtools_store_devtools_b, createReduxDevtoolsExtension as ɵngrx_modules_store_devtools_store_devtools_c, createStateObservable as ɵngrx_modules_store_devtools_store_devtools_d, StoreDevtoolsModule, RECOMPUTE, StoreDevtools, StoreDevtoolsConfig };\n//# sourceMappingURL=store-devtools.js.map\n","function ObjectUnsubscribedErrorImpl() {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n}\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\nexport const ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-navbar-user',\r\n  template: `\r\n    <a class=\"btn btn-link navbar-link navbar-btn\"\r\n      *ngIf=\"signedIn; else userNotSignedIn\"\r\n      [routerLink]=\"['/user']\">\r\n      <img [src]=\"userImageUrl\" class=\"user-icon\">\r\n    </a>\r\n    <ng-template #userNotSignedIn>\r\n      <span class=\"btn btn-link navbar-link navbar-btn\"\r\n        (click)=\"handleSignIn()\">\r\n        <icon name=\"sign-in\"></icon>\r\n        Sign In\r\n      </span>\r\n    </ng-template>\r\n  `,\r\n  styleUrls: ['./app-navbar-user.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppNavbarUserComponent {\r\n  @Input() userImageUrl = '';\r\n  @Input() signedIn = false;\r\n\r\n  @Output() signIn = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  handleSignIn() {\r\n    this.signIn.emit();\r\n  }\r\n}\r\n","\n    <a class=\"btn btn-link navbar-link navbar-btn\"\n      *ngIf=\"signedIn; else userNotSignedIn\"\n      [routerLink]=\"['/user']\">\n      <img [src]=\"userImageUrl\" class=\"user-icon\">\n    </a>\n    <ng-template #userNotSignedIn>\n      <span class=\"btn btn-link navbar-link navbar-btn\"\n        (click)=\"handleSignIn()\">\n        <icon name=\"sign-in\"></icon>\n        Sign In\n      </span>\n    </ng-template>\n  ","import {\r\n  Component,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener\r\n} from '@angular/core';\r\nimport { expandFadeInAnimation } from '@shared/animations/fade-in.animation';\r\nimport { ICON_PREFIX_BRAND } from '@shared/directives/icon';\r\n\r\nenum Key {\r\n  Backspace = 8,\r\n  Tab = 9,\r\n  Enter = 13,\r\n  Shift = 16,\r\n  Escape = 27,\r\n  ArrowLeft = 37,\r\n  ArrowRight = 39,\r\n  ArrowUp = 38,\r\n  ArrowDown = 40\r\n}\r\n@Component({\r\n  selector: 'app-navbar-menu',\r\n  animations: [expandFadeInAnimation],\r\n  template: `\r\n    <button class=\"btn btn-navbar btn-transparent ux-maker btn-toggle\"\r\n      (click)=\"toggleMenu()\">\r\n      <icon name=\"ellipsis-v\"></icon>\r\n      <icon *ngIf=\"appVersion.isNewAvailable\" name=\"dot-circle-o\" class=\"pulse update-indicator text-primary\"></icon>\r\n    </button>\r\n    <div class=\"menu-backdrop\" *ngIf=\"!hide\" (click)=\"hideMenu()\"></div>\r\n    <div class=\"panel menu-dropdown\"\r\n      [class.end-animation]=\"end\"\r\n      [@expandFadeIn]=\"menuState\"\r\n      (@expandFadeIn.done)=\"endAnimation($event)\"\r\n      >\r\n      <div class=\"list-group\">\r\n        <!--<div *ngIf=\"appVersion.isNewAvailable\" class=\"list-group-item\">\r\n          <button class=\"btn btn-success\" title=\"click to update Echoes\"\r\n            (click)=\"handleVersionUpdate()\">\r\n            New Version Is Available - UPDATE NOW\r\n          </button>\r\n        </div>-->\r\n        <!--<a class=\"list-group-item\" href=\"http://github.com/orizens/echoes-player\" target=\"_blank\">\r\n        <icon name=\"github\" prefix=\"${ICON_PREFIX_BRAND}\"></icon> Source Code @Github\r\n        </a>-->\r\n        <!--<a class=\"list-group-item\" *ngIf=\"!hide\" href=\"https://travis-ci.org/orizens/echoes-player\" target=\"_blank\" rel=\"noopener\">\r\n          <icon name=\"medkit\"></icon> <img src=\"https://travis-ci.org/orizens/echoes-player.svg?branch=master\">\r\n        </a>-->\r\n        <!--<div class=\"list-group-item menu-version\" target=\"_blank\">\r\n          <section>\r\n            <icon name=\"code-fork\"></icon>\r\n            <a href=\"https://github.com/orizens/echoes-player/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\">\r\n              {{ appVersion.semver }}\r\n            </a>\r\n          </section>\r\n          <button *ngIf=\"!appVersion.isNewAvailable\"\r\n          class=\"btn btn-info\" (click)=\"handleVersionCheck()\">\r\n          Check For Updates\r\n          </button>\r\n          <div *ngIf=\"appVersion.checkingForVersion\" class=\"text-info\">\r\n          checking for version...\r\n          </div>\r\n        </div>-->\r\n        <div class=\"list-group-item\">\r\n          <icon name=\"paint-brush\" class=\"text-primary\"></icon> Theme: \r\n          <button-group [buttons]=\"theme.themes\" [selectedButton]=\"theme.selected\"\r\n            (buttonClick)=\"updateTheme($event)\"></button-group>\r\n        </div>\r\n        <!--<a class=\"list-group-item\" href=\"http://orizens.com\" rel=\"noopener\" blank=\"_target\">\r\n          <icon name=\"keyboard-o\"></icon> Made with <icon name=\"heart-o\" class=\"text-danger\"></icon> By Orizens\r\n        </a>-->\r\n        <!--<a class=\"list-group-item navbar-action-link\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSdzGRIXoHuzRFZU03EyhgwBJgJp6W1LMatz6Bn44L-5SyuxZA/viewform\" target=\"_blank\" rel=\"noopener\">\r\n          <icon name=\"star-o\"></icon> Request New Features\r\n        </a>-->\r\n        <button class=\"list-group-item\"\r\n          *ngIf=\"signedIn\"\r\n          (click)=\"handleSignOut()\">\r\n          <icon name=\"sign-out\"></icon> Sign Out\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./app-navbar-menu.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppNavbarMenuComponent implements OnInit {\r\n  end = false;\r\n  hide = true;\r\n  get menuState() {\r\n    return this.hide ? 'hide' : 'show';\r\n  }\r\n\r\n  @Input() signedIn = false;\r\n  @Input()\r\n  appVersion = {\r\n    semver: '',\r\n    isNewAvailable: false,\r\n    checkingForVersion: false\r\n  };\r\n  @Input() theme = { themes: [], selected: '' };\r\n  @Output() signOut = new EventEmitter();\r\n  @Output() versionUpdate = new EventEmitter();\r\n  @Output() versionCheck = new EventEmitter();\r\n  @Output() themeChange = new EventEmitter();\r\n\r\n  @HostListener('keyup', ['$event'])\r\n  handleKeyPress(event: KeyboardEvent) {\r\n    if (event.keyCode === Key.Escape) {\r\n      this.hideMenu();\r\n    }\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  handleSignOut() {\r\n    this.signOut.emit();\r\n  }\r\n\r\n  hideMenu() {\r\n    this.hide = true;\r\n  }\r\n\r\n  toggleMenu() {\r\n    this.end = false;\r\n    this.hide = !this.hide;\r\n  }\r\n\r\n  handleVersionUpdate() {\r\n    this.versionUpdate.emit();\r\n  }\r\n\r\n  handleVersionCheck() {\r\n    this.versionCheck.emit();\r\n  }\r\n\r\n  updateTheme(theme) {\r\n    this.themeChange.emit(theme);\r\n  }\r\n\r\n  endAnimation({ toState }) {\r\n    if (toState === 'hide') {\r\n      this.end = true;\r\n    }\r\n  }\r\n}\r\n","\n    <button class=\"btn btn-navbar btn-transparent ux-maker btn-toggle\"\n      (click)=\"toggleMenu()\">\n      <icon name=\"ellipsis-v\"></icon>\n      <icon *ngIf=\"appVersion.isNewAvailable\" name=\"dot-circle-o\" class=\"pulse update-indicator text-primary\"></icon>\n    </button>\n    <div class=\"menu-backdrop\" *ngIf=\"!hide\" (click)=\"hideMenu()\"></div>\n    <div class=\"panel menu-dropdown\"\n      [class.end-animation]=\"end\"\n      [@expandFadeIn]=\"menuState\"\n      (@expandFadeIn.done)=\"endAnimation($event)\"\n      >\n      <div class=\"list-group\">\n        <!--<div *ngIf=\"appVersion.isNewAvailable\" class=\"list-group-item\">\n          <button class=\"btn btn-success\" title=\"click to update Echoes\"\n            (click)=\"handleVersionUpdate()\">\n            New Version Is Available - UPDATE NOW\n          </button>\n        </div>-->\n        <!--<a class=\"list-group-item\" href=\"http://github.com/orizens/echoes-player\" target=\"_blank\">\n        <icon name=\"github\" prefix=\"fa\"></icon> Source Code @Github\n        </a>-->\n        <!--<a class=\"list-group-item\" *ngIf=\"!hide\" href=\"https://travis-ci.org/orizens/echoes-player\" target=\"_blank\" rel=\"noopener\">\n          <icon name=\"medkit\"></icon> <img src=\"https://travis-ci.org/orizens/echoes-player.svg?branch=master\">\n        </a>-->\n        <!--<div class=\"list-group-item menu-version\" target=\"_blank\">\n          <section>\n            <icon name=\"code-fork\"></icon>\n            <a href=\"https://github.com/orizens/echoes-player/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\">\n              {{ appVersion.semver }}\n            </a>\n          </section>\n          <button *ngIf=\"!appVersion.isNewAvailable\"\n          class=\"btn btn-info\" (click)=\"handleVersionCheck()\">\n          Check For Updates\n          </button>\n          <div *ngIf=\"appVersion.checkingForVersion\" class=\"text-info\">\n          checking for version...\n          </div>\n        </div>-->\n        <div class=\"list-group-item\">\n          <icon name=\"paint-brush\" class=\"text-primary\"></icon> Theme: \n          <button-group [buttons]=\"theme.themes\" [selectedButton]=\"theme.selected\"\n            (buttonClick)=\"updateTheme($event)\"></button-group>\n        </div>\n        <!--<a class=\"list-group-item\" href=\"http://orizens.com\" rel=\"noopener\" blank=\"_target\">\n          <icon name=\"keyboard-o\"></icon> Made with <icon name=\"heart-o\" class=\"text-danger\"></icon> By Orizens\n        </a>-->\n        <!--<a class=\"list-group-item navbar-action-link\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSdzGRIXoHuzRFZU03EyhgwBJgJp6W1LMatz6Bn44L-5SyuxZA/viewform\" target=\"_blank\" rel=\"noopener\">\n          <icon name=\"star-o\"></icon> Request New Features\n        </a>-->\n        <button class=\"list-group-item\"\n          *ngIf=\"signedIn\"\n          (click)=\"handleSignOut()\">\n          <icon name=\"sign-out\"></icon> Sign Out\n        </button>\n      </div>\n    </div>\n  ","\n    <nav class=\"row navbar navbar-default navbar-fixed-top\">\n      <div class=\"navbar-container\">\n        <div class=\"navbar__content\">\n        <h3 *ngIf=\"header\" class=\"navbar__header navbar-text\">\n            <button *ngIf=\"mainIcon\" class=\"navbar-btn__main btn-transparent\"\n              (click)=\"handleMainIconClick()\">\n              <icon [name]=\"mainIcon\"></icon>\n            </button>\n            <icon [name]=\"headerIcon\" *ngIf=\"headerIcon\"></icon> {{ header }}\n          </h3>\n          <ng-content></ng-content>\n        </div>\n        <section class=\"navbar-text navbar-actions\">\n          <app-navbar-user\n            [signedIn]=\"isSignIn()\"\n            [userImageUrl]=\"(user$ | async).profile.imageUrl\"\n            (signIn)=\"signInUser()\"\n            ></app-navbar-user>\n          <app-navbar-menu\n            [appVersion]=\"appVersion$ | async\"\n            [theme]=\"themes$ | async\"\n            (themeChange)=\"changeTheme($event)\"\n            [signedIn]=\"isSignIn()\"\n            (signOut)=\"signOutUser()\"\n            (versionUpdate)=\"updateVersion()\"\n            (versionCheck)=\"checkVersion()\"\n          ></app-navbar-menu>\n        </section>\n      </div>\n    </nav>\n  ","export * from './now-playlist.reducer';\r\nexport * from './now-playlist.actions';\r\nexport * from './now-playlist.selectors';\r\n","import { SimpleChange } from '@angular/core';\r\n\r\nexport const isNewChange = (prop: SimpleChange) => {\r\n  return prop.currentValue !== prop.previousValue;\r\n};\r\n\r\nexport const toPayload = (action: any) => action.payload;\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AppNavbarComponent } from './app-navbar.component';\r\nimport { AppNavbarMenuComponent } from './app-navbar-menu';\r\nimport { AppNavbarUserComponent } from './app-navbar-user';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [\r\n    AppNavbarComponent,\r\n    AppNavbarMenuComponent,\r\n    AppNavbarUserComponent\r\n  ],\r\n  exports: [\r\n    AppNavbarComponent\r\n  ]\r\n})\r\nexport class AppNavbarModule { }\r\n","export const environment = {\r\n  production: true,\r\n  youtube: {\r\n    API_KEY: 'AIzaSyATaO28mTyCY7BrISMrBW-pVbOQkEj0OrA',\r\n    CLIENT_ID: '793414844193-arvte2v8kadsp0o00pu1m8p1ckd4e3rn.apps.googleusercontent.com'\r\n  }\r\n};\r\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require(\"@angular/core\");\nvar TooltipContent = (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TooltipContent(element, cdr) {\n        this.element = element;\n        this.cdr = cdr;\n        this.placement = \"bottom\";\n        this.animation = true;\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this.top = -100000;\n        this.left = -100000;\n        this.isIn = false;\n        this.isFade = false;\n    }\n    // -------------------------------------------------------------------------\n    // Lifecycle callbacks\n    // -------------------------------------------------------------------------\n    TooltipContent.prototype.ngAfterViewInit = function () {\n        this.show();\n        this.cdr.detectChanges();\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    TooltipContent.prototype.show = function () {\n        if (!this.hostElement)\n            return;\n        var p = this.positionElements(this.hostElement, this.element.nativeElement.children[0], this.placement);\n        this.top = p.top;\n        this.left = p.left;\n        this.isIn = true;\n        if (this.animation)\n            this.isFade = true;\n    };\n    TooltipContent.prototype.hide = function () {\n        this.top = -100000;\n        this.left = -100000;\n        this.isIn = true;\n        if (this.animation)\n            this.isFade = false;\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    TooltipContent.prototype.positionElements = function (hostEl, targetEl, positionStr, appendToBody) {\n        if (appendToBody === void 0) { appendToBody = false; }\n        var positionStrParts = positionStr.split(\"-\");\n        var pos0 = positionStrParts[0];\n        var pos1 = positionStrParts[1] || \"center\";\n        var hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);\n        var targetElWidth = targetEl.offsetWidth;\n        var targetElHeight = targetEl.offsetHeight;\n        var shiftWidth = {\n            center: function () {\n                return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;\n            },\n            left: function () {\n                return hostElPos.left;\n            },\n            right: function () {\n                return hostElPos.left + hostElPos.width;\n            }\n        };\n        var shiftHeight = {\n            center: function () {\n                return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;\n            },\n            top: function () {\n                return hostElPos.top;\n            },\n            bottom: function () {\n                return hostElPos.top + hostElPos.height;\n            }\n        };\n        var targetElPos;\n        switch (pos0) {\n            case \"right\":\n                targetElPos = {\n                    top: shiftHeight[pos1](),\n                    left: shiftWidth[pos0]()\n                };\n                break;\n            case \"left\":\n                targetElPos = {\n                    top: shiftHeight[pos1](),\n                    left: hostElPos.left - targetElWidth\n                };\n                break;\n            case \"bottom\":\n                targetElPos = {\n                    top: shiftHeight[pos0](),\n                    left: shiftWidth[pos1]()\n                };\n                break;\n            default:\n                targetElPos = {\n                    top: hostElPos.top - targetElHeight,\n                    left: shiftWidth[pos1]()\n                };\n                break;\n        }\n        return targetElPos;\n    };\n    TooltipContent.prototype.position = function (nativeEl) {\n        var offsetParentBCR = { top: 0, left: 0 };\n        var elBCR = this.offset(nativeEl);\n        var offsetParentEl = this.parentOffsetEl(nativeEl);\n        if (offsetParentEl !== window.document) {\n            offsetParentBCR = this.offset(offsetParentEl);\n            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;\n            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;\n        }\n        var boundingClientRect = nativeEl.getBoundingClientRect();\n        return {\n            width: boundingClientRect.width || nativeEl.offsetWidth,\n            height: boundingClientRect.height || nativeEl.offsetHeight,\n            top: elBCR.top - offsetParentBCR.top,\n            left: elBCR.left - offsetParentBCR.left\n        };\n    };\n    TooltipContent.prototype.offset = function (nativeEl) {\n        var boundingClientRect = nativeEl.getBoundingClientRect();\n        return {\n            width: boundingClientRect.width || nativeEl.offsetWidth,\n            height: boundingClientRect.height || nativeEl.offsetHeight,\n            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),\n            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft)\n        };\n    };\n    TooltipContent.prototype.getStyle = function (nativeEl, cssProp) {\n        if (nativeEl.currentStyle)\n            return nativeEl.currentStyle[cssProp];\n        if (window.getComputedStyle)\n            return window.getComputedStyle(nativeEl)[cssProp];\n        // finally try and get inline style\n        return nativeEl.style[cssProp];\n    };\n    TooltipContent.prototype.isStaticPositioned = function (nativeEl) {\n        return (this.getStyle(nativeEl, \"position\") || \"static\") === \"static\";\n    };\n    TooltipContent.prototype.parentOffsetEl = function (nativeEl) {\n        var offsetParent = nativeEl.offsetParent || window.document;\n        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {\n            offsetParent = offsetParent.offsetParent;\n        }\n        return offsetParent || window.document;\n    };\n    return TooltipContent;\n}());\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", HTMLElement)\n], TooltipContent.prototype, \"hostElement\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], TooltipContent.prototype, \"content\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", String)\n], TooltipContent.prototype, \"placement\", void 0);\n__decorate([\n    core_1.Input(),\n    __metadata(\"design:type\", Boolean)\n], TooltipContent.prototype, \"animation\", void 0);\nTooltipContent = __decorate([\n    core_1.Component({\n        selector: \"tooltip-content\",\n        template: \"\\n<div class=\\\"tooltip {{ placement }}\\\"\\n     [style.top]=\\\"top + 'px'\\\"\\n     [style.left]=\\\"left + 'px'\\\"\\n     [class.in]=\\\"isIn\\\"\\n     [class.fade]=\\\"isFade\\\"\\n     role=\\\"tooltip\\\">\\n    <div class=\\\"tooltip-arrow\\\"></div> \\n    <div class=\\\"tooltip-inner\\\">\\n        <ng-content></ng-content>\\n        {{ content }}\\n    </div> \\n</div>\\n\"\n    }),\n    __metadata(\"design:paramtypes\", [core_1.ElementRef,\n        core_1.ChangeDetectorRef])\n], TooltipContent);\nexports.TooltipContent = TooltipContent;\n//# sourceMappingURL=TooltipContent.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeToObservable = (obj) => (subscriber) => {\n    const obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    }\n    else {\n        return obs.subscribe(subscriber);\n    }\n};\n//# sourceMappingURL=subscribeToObservable.js.map","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { extractThumbUrl } from '../utils/media.utils';\r\nimport memo from 'memo-decorator';\r\n\r\n@Pipe({ name: 'videoToThumb' })\r\nexport class VideoToThumbPipe implements PipeTransform {\r\n  @memo()\r\n  transform(value: any): any {\r\n    const thumb = extractThumbUrl(value);\r\n    return thumb || '';\r\n  }\r\n}\r\n","export function getSnippet(media) {\r\n  return media && media.hasOwnProperty('snippet') && media.snippet;\r\n}\r\n\r\nexport function extractThumbnail(snippet) {\r\n  let thumbUrl = '';\r\n  if (snippet) {\r\n    const thumbs = snippet.thumbnails;\r\n    const sizes = ['high', 'standard', 'default'];\r\n    const thumb = sizes.reduce(\r\n      (acc, size) => {\r\n        acc.result = !acc.result.length && thumbs[size] ? thumbs[size].url : acc.result;\r\n        return acc;\r\n      },\r\n      { result: '' }\r\n    );\r\n    thumbUrl = thumb.result;\r\n  }\r\n  return thumbUrl;\r\n}\r\n\r\nexport function extractThumbUrl(media) {\r\n  return extractThumbnail(getSnippet(media));\r\n}\r\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport function isInteropObservable(input) {\n    return input && typeof input[Symbol_observable] === 'function';\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nexport function fromObservable(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToObservable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            sub.add(scheduler.schedule(() => {\n                const observable = input[Symbol_observable]();\n                sub.add(observable.subscribe({\n                    next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n                    error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n                    complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            sub.add(scheduler.schedule(() => input.then(value => {\n                sub.add(scheduler.schedule(() => {\n                    subscriber.next(value);\n                    sub.add(scheduler.schedule(() => subscriber.complete()));\n                }));\n            }, err => {\n                sub.add(scheduler.schedule(() => subscriber.error(err)));\n            })));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromPromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function isIterable(input) {\n    return input && typeof input[Symbol_iterator] === 'function';\n}\n//# sourceMappingURL=isIterable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let iterator;\n            sub.add(() => {\n                if (iterator && typeof iterator.return === 'function') {\n                    iterator.return();\n                }\n            });\n            sub.add(scheduler.schedule(() => {\n                iterator = input[Symbol_iterator]();\n                sub.add(scheduler.schedule(function () {\n                    if (subscriber.closed) {\n                        return;\n                    }\n                    let value;\n                    let done;\n                    try {\n                        const result = iterator.next();\n                        value = result.value;\n                        done = result.done;\n                    }\n                    catch (err) {\n                        subscriber.error(err);\n                        return;\n                    }\n                    if (done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(value);\n                        this.schedule();\n                    }\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromIterable.js.map","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const async = new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map","export const isArray = Array.isArray || ((x) => x && typeof x.length === 'number');\n//# sourceMappingURL=isArray.js.map","import { map } from './map';\nexport function pluck(...properties) {\n    const length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return (source) => map(plucker(properties, length))(source);\n}\nfunction plucker(props, length) {\n    const mapper = (x) => {\n        let currentProp = x;\n        for (let i = 0; i < length; i++) {\n            const p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map","/**\n * @license NgRx 7.3.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { Injectable, InjectionToken, Inject, NgModule, Injector } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, queueScheduler } from 'rxjs';\nimport { observeOn, scan, withLatestFrom, distinctUntilChanged, map, pluck } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INIT = /** @type {?} */ ('@ngrx/store/init');\nclass ActionsSubject extends BehaviorSubject {\n    constructor() {\n        super({ type: INIT });\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    next(action) {\n        if (typeof action === 'undefined') {\n            throw new TypeError(`Actions must be objects`);\n        }\n        else if (typeof action.type === 'undefined') {\n            throw new TypeError(`Actions must have a type property`);\n        }\n        super.next(action);\n    }\n    /**\n     * @return {?}\n     */\n    complete() {\n        /* noop */\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.complete();\n    }\n}\nActionsSubject.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nActionsSubject.ctorParameters = () => [];\n/** @type {?} */\nconst ACTIONS_SUBJECT_PROVIDERS = [ActionsSubject];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');\n/** @type {?} */\nconst INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\n/** @type {?} */\nconst REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');\n/** @type {?} */\nconst _REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory Provider');\n/** @type {?} */\nconst INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');\n/** @type {?} */\nconst _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');\n/** @type {?} */\nconst META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');\n/** @type {?} */\nconst STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\n/** @type {?} */\nconst _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');\n/** @type {?} */\nconst _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');\n/** @type {?} */\nconst _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');\n/** @type {?} */\nconst _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');\n/** @type {?} */\nconst _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');\n/** @type {?} */\nconst FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} reducers\n * @param {?=} initialState\n * @return {?}\n */\nfunction combineReducers(reducers, initialState = {}) {\n    /** @type {?} */\n    const reducerKeys = Object.keys(reducers);\n    /** @type {?} */\n    const finalReducers = {};\n    for (let i = 0; i < reducerKeys.length; i++) {\n        /** @type {?} */\n        const key = reducerKeys[i];\n        if (typeof reducers[key] === 'function') {\n            finalReducers[key] = reducers[key];\n        }\n    }\n    /** @type {?} */\n    const finalReducerKeys = Object.keys(finalReducers);\n    return function combination(state, action) {\n        state = state === undefined ? initialState : state;\n        /** @type {?} */\n        let hasChanged = false;\n        /** @type {?} */\n        const nextState = {};\n        for (let i = 0; i < finalReducerKeys.length; i++) {\n            /** @type {?} */\n            const key = finalReducerKeys[i];\n            /** @type {?} */\n            const reducer = finalReducers[key];\n            /** @type {?} */\n            const previousStateForKey = state[key];\n            /** @type {?} */\n            const nextStateForKey = reducer(previousStateForKey, action);\n            nextState[key] = nextStateForKey;\n            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n        }\n        return hasChanged ? nextState : state;\n    };\n}\n/**\n * @template T\n * @param {?} object\n * @param {?} keyToRemove\n * @return {?}\n */\nfunction omit(object, keyToRemove) {\n    return Object.keys(object)\n        .filter(key => key !== keyToRemove)\n        .reduce((result, key) => Object.assign(result, { [key]: object[key] }), {});\n}\n/**\n * @param {...?} functions\n * @return {?}\n */\nfunction compose(...functions) {\n    return function (arg) {\n        if (functions.length === 0) {\n            return arg;\n        }\n        /** @type {?} */\n        const last = functions[functions.length - 1];\n        /** @type {?} */\n        const rest = functions.slice(0, -1);\n        return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n    };\n}\n/**\n * @template T, V\n * @param {?} reducerFactory\n * @param {?=} metaReducers\n * @return {?}\n */\nfunction createReducerFactory(reducerFactory, metaReducers) {\n    if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n        reducerFactory = compose.apply(null, [...metaReducers, reducerFactory]);\n    }\n    return (reducers, initialState) => {\n        /** @type {?} */\n        const reducer = reducerFactory(reducers);\n        return (state, action) => {\n            state = state === undefined ? (/** @type {?} */ (initialState)) : state;\n            return reducer(state, action);\n        };\n    };\n}\n/**\n * @template T, V\n * @param {?=} metaReducers\n * @return {?}\n */\nfunction createFeatureReducerFactory(metaReducers) {\n    /** @type {?} */\n    const reducerFactory = Array.isArray(metaReducers) && metaReducers.length > 0\n        ? compose(...metaReducers)\n        : (r) => r;\n    return (reducer, initialState) => {\n        reducer = reducerFactory(reducer);\n        return (state, action) => {\n            state = state === undefined ? initialState : state;\n            return reducer(state, action);\n        };\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass ReducerObservable extends Observable {\n}\n/**\n * @abstract\n */\nclass ReducerManagerDispatcher extends ActionsSubject {\n}\n/** @type {?} */\nconst UPDATE = /** @type {?} */ ('@ngrx/store/update-reducers');\nclass ReducerManager extends BehaviorSubject {\n    /**\n     * @param {?} dispatcher\n     * @param {?} initialState\n     * @param {?} reducers\n     * @param {?} reducerFactory\n     */\n    constructor(dispatcher, initialState, reducers, reducerFactory) {\n        super(reducerFactory(reducers, initialState));\n        this.dispatcher = dispatcher;\n        this.initialState = initialState;\n        this.reducers = reducers;\n        this.reducerFactory = reducerFactory;\n    }\n    /**\n     * @param {?} feature\n     * @return {?}\n     */\n    addFeature(feature) {\n        this.addFeatures([feature]);\n    }\n    /**\n     * @param {?} features\n     * @return {?}\n     */\n    addFeatures(features) {\n        /** @type {?} */\n        const reducers = features.reduce((reducerDict, { reducers, reducerFactory, metaReducers, initialState, key }) => {\n            /** @type {?} */\n            const reducer = typeof reducers === 'function'\n                ? createFeatureReducerFactory(metaReducers)(reducers, initialState)\n                : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);\n            reducerDict[key] = reducer;\n            return reducerDict;\n        }, /** @type {?} */ ({}));\n        this.addReducers(reducers);\n    }\n    /**\n     * @param {?} feature\n     * @return {?}\n     */\n    removeFeature(feature) {\n        this.removeFeatures([feature]);\n    }\n    /**\n     * @param {?} features\n     * @return {?}\n     */\n    removeFeatures(features) {\n        this.removeReducers(features.map(p => p.key));\n    }\n    /**\n     * @param {?} key\n     * @param {?} reducer\n     * @return {?}\n     */\n    addReducer(key, reducer) {\n        this.addReducers({ [key]: reducer });\n    }\n    /**\n     * @param {?} reducers\n     * @return {?}\n     */\n    addReducers(reducers) {\n        this.reducers = Object.assign({}, this.reducers, reducers);\n        this.updateReducers(Object.keys(reducers));\n    }\n    /**\n     * @param {?} featureKey\n     * @return {?}\n     */\n    removeReducer(featureKey) {\n        this.removeReducers([featureKey]);\n    }\n    /**\n     * @param {?} featureKeys\n     * @return {?}\n     */\n    removeReducers(featureKeys) {\n        featureKeys.forEach(key => {\n            this.reducers = /** @type {?} */ (omit(this.reducers, key) /*TODO(#823)*/);\n        });\n        this.updateReducers(featureKeys);\n    }\n    /**\n     * @param {?} featureKeys\n     * @return {?}\n     */\n    updateReducers(featureKeys) {\n        this.next(this.reducerFactory(this.reducers, this.initialState));\n        this.dispatcher.next(/** @type {?} */ ({\n            type: UPDATE,\n            features: featureKeys,\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.complete();\n    }\n}\nReducerManager.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nReducerManager.ctorParameters = () => [\n    { type: ReducerManagerDispatcher },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_REDUCERS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [REDUCER_FACTORY,] }] }\n];\n/** @type {?} */\nconst REDUCER_MANAGER_PROVIDERS = [\n    ReducerManager,\n    { provide: ReducerObservable, useExisting: ReducerManager },\n    { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass ScannedActionsSubject extends Subject {\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.complete();\n    }\n}\nScannedActionsSubject.decorators = [\n    { type: Injectable }\n];\n/** @type {?} */\nconst SCANNED_ACTIONS_SUBJECT_PROVIDERS = [\n    ScannedActionsSubject,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass StateObservable extends Observable {\n}\n/**\n * @template T\n */\nclass State extends BehaviorSubject {\n    /**\n     * @param {?} actions$\n     * @param {?} reducer$\n     * @param {?} scannedActions\n     * @param {?} initialState\n     */\n    constructor(actions$, reducer$, scannedActions, initialState) {\n        super(initialState);\n        /** @type {?} */\n        const actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));\n        /** @type {?} */\n        const withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));\n        /** @type {?} */\n        const seed = { state: initialState };\n        /** @type {?} */\n        const stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));\n        this.stateSubscription = stateAndAction$.subscribe(({ state, action }) => {\n            this.next(state);\n            scannedActions.next(action);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateSubscription.unsubscribe();\n        this.complete();\n    }\n}\nState.INIT = INIT;\nState.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nState.ctorParameters = () => [\n    { type: ActionsSubject },\n    { type: ReducerObservable },\n    { type: ScannedActionsSubject },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] }\n];\n/**\n * @template T, V\n * @param {?=} stateActionPair\n * @param {?=} __1\n * @return {?}\n */\nfunction reduceState(stateActionPair = { state: undefined }, [action, reducer]) {\n    const { state } = stateActionPair;\n    return { state: reducer(state, action), action };\n}\n/** @type {?} */\nconst STATE_PROVIDERS = [\n    State,\n    { provide: StateObservable, useExisting: State },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass Store extends Observable {\n    /**\n     * @param {?} state$\n     * @param {?} actionsObserver\n     * @param {?} reducerManager\n     */\n    constructor(state$, actionsObserver, reducerManager) {\n        super();\n        this.actionsObserver = actionsObserver;\n        this.reducerManager = reducerManager;\n        this.source = state$;\n    }\n    /**\n     * @template Props\n     * @param {?} pathOrMapFn\n     * @param {...?} paths\n     * @return {?}\n     */\n    select(pathOrMapFn, ...paths) {\n        return select.call(null, pathOrMapFn, ...paths)(this);\n    }\n    /**\n     * @template R\n     * @param {?} operator\n     * @return {?}\n     */\n    lift(operator) {\n        /** @type {?} */\n        const store = new Store(this, this.actionsObserver, this.reducerManager);\n        store.operator = operator;\n        return store;\n    }\n    /**\n     * @template V\n     * @param {?} action\n     * @return {?}\n     */\n    dispatch(action) {\n        this.actionsObserver.next(action);\n    }\n    /**\n     * @param {?} action\n     * @return {?}\n     */\n    next(action) {\n        this.actionsObserver.next(action);\n    }\n    /**\n     * @param {?} err\n     * @return {?}\n     */\n    error(err) {\n        this.actionsObserver.error(err);\n    }\n    /**\n     * @return {?}\n     */\n    complete() {\n        this.actionsObserver.complete();\n    }\n    /**\n     * @template State, Actions\n     * @param {?} key\n     * @param {?} reducer\n     * @return {?}\n     */\n    addReducer(key, reducer) {\n        this.reducerManager.addReducer(key, reducer);\n    }\n    /**\n     * @template Key\n     * @param {?} key\n     * @return {?}\n     */\n    removeReducer(key) {\n        this.reducerManager.removeReducer(key);\n    }\n}\nStore.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStore.ctorParameters = () => [\n    { type: StateObservable },\n    { type: ActionsSubject },\n    { type: ReducerManager }\n];\n/** @type {?} */\nconst STORE_PROVIDERS = [Store];\n/**\n * @template T, Props, K\n * @param {?} pathOrMapFn\n * @param {?} propsOrPath\n * @param {...?} paths\n * @return {?}\n */\nfunction select(pathOrMapFn, propsOrPath, ...paths) {\n    return function selectOperator(source$) {\n        /** @type {?} */\n        let mapped$;\n        if (typeof pathOrMapFn === 'string') {\n            /** @type {?} */\n            const pathSlices = [/** @type {?} */ (propsOrPath), ...paths].filter(Boolean);\n            mapped$ = source$.pipe(pluck(pathOrMapFn, ...pathSlices));\n        }\n        else if (typeof pathOrMapFn === 'function') {\n            mapped$ = source$.pipe(map(source => pathOrMapFn(source, /** @type {?} */ (propsOrPath))));\n        }\n        else {\n            throw new TypeError(`Unexpected type '${typeof pathOrMapFn}' in select operator,` +\n                ` expected 'string' or 'function'`);\n        }\n        return mapped$.pipe(distinctUntilChanged());\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction isEqualCheck(a, b) {\n    return a === b;\n}\n/**\n * @param {?} args\n * @param {?} lastArguments\n * @param {?} comparator\n * @return {?}\n */\nfunction isArgumentsChanged(args, lastArguments, comparator) {\n    for (let i = 0; i < args.length; i++) {\n        if (!comparator(args[i], lastArguments[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} projectionFn\n * @param {?} isResultEqual\n * @return {?}\n */\nfunction resultMemoize(projectionFn, isResultEqual) {\n    return defaultMemoize(projectionFn, isEqualCheck, isResultEqual);\n}\n/**\n * @param {?} projectionFn\n * @param {?=} isArgumentsEqual\n * @param {?=} isResultEqual\n * @return {?}\n */\nfunction defaultMemoize(projectionFn, isArgumentsEqual = isEqualCheck, isResultEqual = isEqualCheck) {\n    /** @type {?} */\n    let lastArguments = null;\n    /** @type {?} */\n    let lastResult = null;\n    /**\n     * @return {?}\n     */\n    function reset() {\n        lastArguments = null;\n        lastResult = null;\n    }\n    /**\n     * @return {?}\n     */\n    function memoized() {\n        if (!lastArguments) {\n            lastResult = projectionFn.apply(null, arguments);\n            lastArguments = arguments;\n            return lastResult;\n        }\n        if (!isArgumentsChanged(arguments, lastArguments, isArgumentsEqual)) {\n            return lastResult;\n        }\n        lastArguments = arguments;\n        /** @type {?} */\n        const newResult = projectionFn.apply(null, arguments);\n        if (isResultEqual(lastResult, newResult)) {\n            return lastResult;\n        }\n        lastResult = newResult;\n        return newResult;\n    }\n    return { memoized, reset };\n}\n/**\n * @param {...?} input\n * @return {?}\n */\nfunction createSelector(...input) {\n    return createSelectorFactory(defaultMemoize)(...input);\n}\n/**\n * @param {?} state\n * @param {?} selectors\n * @param {?} props\n * @param {?} memoizedProjector\n * @return {?}\n */\nfunction defaultStateFn(state, selectors, props, memoizedProjector) {\n    if (props === undefined) {\n        /** @type {?} */\n        const args = (/** @type {?} */ (selectors)).map(fn => fn(state));\n        return memoizedProjector.memoized.apply(null, args);\n    }\n    /** @type {?} */\n    const args = (/** @type {?} */ (selectors)).map(fn => fn(state, props));\n    return memoizedProjector.memoized.apply(null, [...args, props]);\n}\n/**\n * @param {?} memoize\n * @param {?=} options\n * @return {?}\n */\nfunction createSelectorFactory(memoize, options = {\n    stateFn: defaultStateFn,\n}) {\n    return function (...input) {\n        /** @type {?} */\n        let args = input;\n        if (Array.isArray(args[0])) {\n            const [head, ...tail] = args;\n            args = [...head, ...tail];\n        }\n        /** @type {?} */\n        const selectors = args.slice(0, args.length - 1);\n        /** @type {?} */\n        const projector = args[args.length - 1];\n        /** @type {?} */\n        const memoizedSelectors = selectors.filter((selector) => selector.release && typeof selector.release === 'function');\n        /** @type {?} */\n        const memoizedProjector = memoize(function (...selectors) {\n            return projector.apply(null, selectors);\n        });\n        /** @type {?} */\n        const memoizedState = defaultMemoize(function (state, props) {\n            // createSelector works directly on state\n            // e.g. createSelector((state, props) => ...)\n            if (selectors.length === 0 && props !== undefined) {\n                return projector.apply(null, [state, props]);\n            }\n            return options.stateFn.apply(null, [\n                state,\n                selectors,\n                props,\n                memoizedProjector,\n            ]);\n        });\n        /**\n         * @return {?}\n         */\n        function release() {\n            memoizedState.reset();\n            memoizedProjector.reset();\n            memoizedSelectors.forEach(selector => selector.release());\n        }\n        return Object.assign(memoizedState.memoized, {\n            release,\n            projector: memoizedProjector.memoized,\n        });\n    };\n}\n/**\n * @param {?} featureName\n * @return {?}\n */\nfunction createFeatureSelector(featureName) {\n    return createSelector((state) => state[featureName], (featureState) => featureState);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass StoreRootModule {\n    /**\n     * @param {?} actions$\n     * @param {?} reducer$\n     * @param {?} scannedActions$\n     * @param {?} store\n     */\n    constructor(actions$, reducer$, scannedActions$, store) { }\n}\nStoreRootModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n/** @nocollapse */\nStoreRootModule.ctorParameters = () => [\n    { type: ActionsSubject },\n    { type: ReducerObservable },\n    { type: ScannedActionsSubject },\n    { type: Store }\n];\nclass StoreFeatureModule {\n    /**\n     * @param {?} features\n     * @param {?} featureReducers\n     * @param {?} reducerManager\n     * @param {?} root\n     */\n    constructor(features, featureReducers, reducerManager, root) {\n        this.features = features;\n        this.featureReducers = featureReducers;\n        this.reducerManager = reducerManager;\n        /** @type {?} */\n        const feats = features.map((feature, index) => {\n            /** @type {?} */\n            const featureReducerCollection = featureReducers.shift();\n            /** @type {?} */\n            const reducers = /** @type {?} */ ((featureReducerCollection))[index];\n            return Object.assign({}, feature, { reducers, initialState: _initialStateFactory(feature.initialState) });\n        });\n        reducerManager.addFeatures(feats);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.reducerManager.removeFeatures(this.features);\n    }\n}\nStoreFeatureModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n/** @nocollapse */\nStoreFeatureModule.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [_STORE_FEATURES,] }] },\n    { type: Array, decorators: [{ type: Inject, args: [FEATURE_REDUCERS,] }] },\n    { type: ReducerManager },\n    { type: StoreRootModule }\n];\nclass StoreModule {\n    /**\n     * @param {?} reducers\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(reducers, config = {}) {\n        return {\n            ngModule: StoreRootModule,\n            providers: [\n                { provide: _INITIAL_STATE, useValue: config.initialState },\n                {\n                    provide: INITIAL_STATE,\n                    useFactory: _initialStateFactory,\n                    deps: [_INITIAL_STATE],\n                },\n                { provide: _INITIAL_REDUCERS, useValue: reducers },\n                {\n                    provide: _STORE_REDUCERS,\n                    useExisting: reducers instanceof InjectionToken ? reducers : _INITIAL_REDUCERS,\n                },\n                {\n                    provide: INITIAL_REDUCERS,\n                    deps: [Injector, _INITIAL_REDUCERS, [new Inject(_STORE_REDUCERS)]],\n                    useFactory: _createStoreReducers,\n                },\n                {\n                    provide: META_REDUCERS,\n                    useValue: config.metaReducers ? config.metaReducers : [],\n                },\n                {\n                    provide: _REDUCER_FACTORY,\n                    useValue: config.reducerFactory\n                        ? config.reducerFactory\n                        : combineReducers,\n                },\n                {\n                    provide: REDUCER_FACTORY,\n                    deps: [_REDUCER_FACTORY, META_REDUCERS],\n                    useFactory: createReducerFactory,\n                },\n                ACTIONS_SUBJECT_PROVIDERS,\n                REDUCER_MANAGER_PROVIDERS,\n                SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n                STATE_PROVIDERS,\n                STORE_PROVIDERS,\n            ],\n        };\n    }\n    /**\n     * @param {?} featureName\n     * @param {?} reducers\n     * @param {?=} config\n     * @return {?}\n     */\n    static forFeature(featureName, reducers, config = {}) {\n        return {\n            ngModule: StoreFeatureModule,\n            providers: [\n                {\n                    provide: _FEATURE_CONFIGS,\n                    multi: true,\n                    useValue: config,\n                },\n                {\n                    provide: STORE_FEATURES,\n                    multi: true,\n                    useValue: {\n                        key: featureName,\n                        reducerFactory: !(config instanceof InjectionToken) && config.reducerFactory\n                            ? config.reducerFactory\n                            : combineReducers,\n                        metaReducers: !(config instanceof InjectionToken) && config.metaReducers\n                            ? config.metaReducers\n                            : [],\n                        initialState: !(config instanceof InjectionToken) && config.initialState\n                            ? config.initialState\n                            : undefined,\n                    },\n                },\n                {\n                    provide: _STORE_FEATURES,\n                    deps: [Injector, _FEATURE_CONFIGS, STORE_FEATURES],\n                    useFactory: _createFeatureStore,\n                },\n                { provide: _FEATURE_REDUCERS, multi: true, useValue: reducers },\n                {\n                    provide: _FEATURE_REDUCERS_TOKEN,\n                    multi: true,\n                    useExisting: reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS,\n                },\n                {\n                    provide: FEATURE_REDUCERS,\n                    multi: true,\n                    deps: [\n                        Injector,\n                        _FEATURE_REDUCERS,\n                        [new Inject(_FEATURE_REDUCERS_TOKEN)],\n                    ],\n                    useFactory: _createFeatureReducers,\n                },\n            ],\n        };\n    }\n}\nStoreModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n/**\n * @param {?} injector\n * @param {?} reducers\n * @param {?} tokenReducers\n * @return {?}\n */\nfunction _createStoreReducers(injector, reducers, tokenReducers) {\n    return reducers instanceof InjectionToken ? injector.get(reducers) : reducers;\n}\n/**\n * @param {?} injector\n * @param {?} configs\n * @param {?} featureStores\n * @return {?}\n */\nfunction _createFeatureStore(injector, configs, featureStores) {\n    return featureStores.map((feat, index) => {\n        if (configs[index] instanceof InjectionToken) {\n            /** @type {?} */\n            const conf = injector.get(configs[index]);\n            return {\n                key: feat.key,\n                reducerFactory: conf.reducerFactory\n                    ? conf.reducerFactory\n                    : combineReducers,\n                metaReducers: conf.metaReducers ? conf.metaReducers : [],\n                initialState: conf.initialState,\n            };\n        }\n        return feat;\n    });\n}\n/**\n * @param {?} injector\n * @param {?} reducerCollection\n * @param {?} tokenReducerCollection\n * @return {?}\n */\nfunction _createFeatureReducers(injector, reducerCollection, tokenReducerCollection) {\n    /** @type {?} */\n    const reducers = reducerCollection.map((reducer, index) => {\n        return reducer instanceof InjectionToken ? injector.get(reducer) : reducer;\n    });\n    return reducers;\n}\n/**\n * @param {?} initialState\n * @return {?}\n */\nfunction _initialStateFactory(initialState) {\n    if (typeof initialState === 'function') {\n        return initialState();\n    }\n    return initialState;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ACTIONS_SUBJECT_PROVIDERS as ɵngrx_modules_store_store_c, REDUCER_MANAGER_PROVIDERS as ɵngrx_modules_store_store_d, SCANNED_ACTIONS_SUBJECT_PROVIDERS as ɵngrx_modules_store_store_e, isEqualCheck as ɵngrx_modules_store_store_f, STATE_PROVIDERS as ɵngrx_modules_store_store_g, STORE_PROVIDERS as ɵngrx_modules_store_store_b, _createFeatureStore as ɵngrx_modules_store_store_j, _FEATURE_CONFIGS as ɵngrx_modules_store_store_h, _STORE_FEATURES as ɵngrx_modules_store_store_i, Store, select, combineReducers, compose, createReducerFactory, ActionsSubject, INIT, ReducerManager, ReducerObservable, ReducerManagerDispatcher, UPDATE, ScannedActionsSubject, createSelector, createSelectorFactory, createFeatureSelector, defaultMemoize, defaultStateFn, resultMemoize, State, StateObservable, reduceState, INITIAL_STATE, _REDUCER_FACTORY, REDUCER_FACTORY, _INITIAL_REDUCERS, INITIAL_REDUCERS, STORE_FEATURES, _INITIAL_STATE, META_REDUCERS, _STORE_REDUCERS, _FEATURE_REDUCERS, FEATURE_REDUCERS, _FEATURE_REDUCERS_TOKEN, StoreModule, StoreRootModule, StoreFeatureModule, _initialStateFactory, _createStoreReducers, _createFeatureReducers };\n//# sourceMappingURL=store.js.map\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { PlaylistProxy } from './playlist-view.proxy';\r\n\r\n@Component({\r\n  selector: 'playlist-view',\r\n  styleUrls: ['./playlist-view.component.scss'],\r\n  template: `\r\n  <article>\r\n    <app-navbar [header]=\"header$ | async\"\r\n      [mainIcon]=\"'chevron-left'\"\r\n      (headerMainIconClick)=\"handleBack()\">\r\n    </app-navbar>\r\n    <div class=\"row\">\r\n      <playlist-viewer class=\"clearfix\"\r\n        [videos]=\"videos$ | async\"\r\n        [playlist]=\"playlist$ | async\"\r\n        [queuedPlaylist]=\"nowPlaylistIds$ | async\"\r\n        (playPlaylist)=\"playPlaylist($event)\"\r\n        (queuePlaylist)=\"queuePlaylist($event)\"\r\n        (playVideo)=\"playVideo($event)\"\r\n        (queueVideo)=\"queueVideo($event)\"\r\n        (unqueueVideo)=\"unqueueVideo($event)\"\r\n      ></playlist-viewer>\r\n    </div>\r\n  </article>\r\n  `\r\n})\r\nexport class PlaylistViewComponent implements OnInit {\r\n  playlist$ = this.playlistProxy.fetchPlaylist(this.route);\r\n  videos$ = this.playlistProxy.fetchPlaylistVideos(this.route);\r\n  header$ = this.playlistProxy.fetchPlaylistHeader(this.route);\r\n  nowPlaylistIds$ = this.playlistProxy.nowPlaylistIds$;\r\n\r\n  constructor(\r\n    private playlistProxy: PlaylistProxy,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  playPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.playlistProxy.playPlaylist(playlist);\r\n  }\r\n\r\n  queuePlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.playlistProxy.queuePlaylist(playlist);\r\n  }\r\n\r\n  queueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.playlistProxy.queueVideo(media);\r\n  }\r\n\r\n  playVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.playlistProxy.playVideo(media);\r\n  }\r\n\r\n  unqueueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.playlistProxy.unqueueVideo(media);\r\n  }\r\n\r\n  handleBack() {\r\n    this.playlistProxy.goBack();\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { UserProfile } from '@core/services';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class PlaylistVideosResolver implements Resolve<any> {\r\n  constructor(\r\n    private userProfile: UserProfile,\r\n  ) { }\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n    const playlistId = route.params['id'];\r\n    return this.userProfile.fetchAllPlaylistItems(playlistId);\r\n  }\r\n}\r\n","import { Observable } from '../Observable';\nexport const EMPTY = new Observable(subscriber => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n//# sourceMappingURL=empty.js.map","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'playlist-cover',\r\n  styleUrls: ['./playlist-cover.scss'],\r\n  template: `\r\n  <div class=\"playlist-cover is-flex-row is-flex-valign\">\r\n    <div class=\"cover-bg\" [ngStyle]=\"{ 'background-image': 'url(' + thumbUrl + ')' }\"></div>\r\n    <div class=\"btn btn-transparent playlist-thumbnail\">\r\n      <img [src]=\"thumbUrl\">\r\n    </div>\r\n    <div class=\"actions is-flex-2\">\r\n      <button class=\"btn btn-lg ux-maker play-media bg-primary\"\r\n        (click)=\"play.emit(playlist)\" title=\"play playlist\">\r\n        <icon name=\"play\"></icon>\r\n      </button>\r\n      <button class=\"btn btn-lg ux-maker play-media bg-primary\"\r\n        (click)=\"queue.emit(playlist)\" title=\"queue playlist\">\r\n        <icon name=\"share\"></icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PlaylistCoverComponent implements OnInit {\r\n  @Input() playlist: GoogleApiYouTubePlaylistResource;\r\n  @Output() play = new EventEmitter<GoogleApiYouTubePlaylistResource>();\r\n  @Output() queue = new EventEmitter<GoogleApiYouTubePlaylistResource>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  get title() {\r\n    return this.playlist && this.playlist.snippet\r\n      ? this.playlist.snippet.title\r\n      : '...';\r\n  }\r\n\r\n  get total() {\r\n    return this.playlist && this.playlist.contentDetails\r\n      ? this.playlist.contentDetails.itemCount\r\n      : '...';\r\n  }\r\n\r\n  get thumbUrl() {\r\n    const thumbnails = this.playlist && this.playlist.snippet.thumbnails;\r\n    const sizes = ['default', 'medium'];\r\n    return sizes.reduce(\r\n      (acc, size) => thumbnails.hasOwnProperty(size) && thumbnails[size].url,\r\n      ''\r\n    );\r\n  }\r\n}\r\n","\n  <div class=\"playlist-cover is-flex-row is-flex-valign\">\n    <div class=\"cover-bg\" [ngStyle]=\"{ 'background-image': 'url(' + thumbUrl + ')' }\"></div>\n    <div class=\"btn btn-transparent playlist-thumbnail\">\n      <img [src]=\"thumbUrl\">\n    </div>\n    <div class=\"actions is-flex-2\">\n      <button class=\"btn btn-lg ux-maker play-media bg-primary\"\n        (click)=\"play.emit(playlist)\" title=\"play playlist\">\n        <icon name=\"play\"></icon>\n      </button>\n      <button class=\"btn btn-lg ux-maker play-media bg-primary\"\n        (click)=\"queue.emit(playlist)\" title=\"queue playlist\">\n        <icon name=\"share\"></icon>\n      </button>\n    </div>\n  </div>\n  ","import { Component, EventEmitter, Input, OnInit, Output, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'playlist-viewer',\r\n  styleUrls: ['./playlist-viewer.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `\r\n  <playlist-cover\r\n    [playlist]=\"playlist\"\r\n    (play)=\"onPlayPlaylist($event)\"\r\n    (queue)=\"onQueuePlaylist($event)\">\r\n  </playlist-cover>\r\n  <section>\r\n    <youtube-list\r\n      [list]=\"videos\"\r\n      [queued]=\"queuedPlaylist\"\r\n      (play)=\"onPlayVideo($event)\"\r\n      (queue)=\"onQueueVideo($event)\"\r\n      (unqueue)=\"onRemove($event)\"\r\n    ></youtube-list>\r\n  </section>\r\n  `\r\n})\r\nexport class PlaylistViewerComponent implements OnInit {\r\n  @Input() videos: GoogleApiYouTubeVideoResource[] = [];\r\n  @Input() playlist: GoogleApiYouTubePlaylistResource;\r\n  @Input() queuedPlaylist = [];\r\n\r\n  @Output() queuePlaylist = new EventEmitter<GoogleApiYouTubePlaylistResource>();\r\n  @Output() playPlaylist = new EventEmitter<GoogleApiYouTubePlaylistResource>();\r\n  @Output() queueVideo = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output() playVideo = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output() unqueueVideo = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onPlayPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.playPlaylist.emit(playlist);\r\n  }\r\n\r\n  onQueueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.queueVideo.emit(media);\r\n  }\r\n\r\n  onPlayVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.playVideo.emit(media);\r\n  }\r\n\r\n  onQueuePlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.queuePlaylist.emit(playlist);\r\n  }\r\n\r\n  onRemove(media: GoogleApiYouTubeVideoResource) {\r\n    this.unqueueVideo.emit(media);\r\n  }\r\n}\r\n","\n  <playlist-cover\n    [playlist]=\"playlist\"\n    (play)=\"onPlayPlaylist($event)\"\n    (queue)=\"onQueuePlaylist($event)\">\n  </playlist-cover>\n  <section>\n    <youtube-list\n      [list]=\"videos\"\n      [queued]=\"queuedPlaylist\"\n      (play)=\"onPlayVideo($event)\"\n      (queue)=\"onQueueVideo($event)\"\n      (unqueue)=\"onRemove($event)\"\n    ></youtube-list>\n  </section>\n  ","\n  <article>\n    <app-navbar [header]=\"header$ | async\"\n      [mainIcon]=\"'chevron-left'\"\n      (headerMainIconClick)=\"handleBack()\">\n    </app-navbar>\n    <div class=\"row\">\n      <playlist-viewer class=\"clearfix\"\n        [videos]=\"videos$ | async\"\n        [playlist]=\"playlist$ | async\"\n        [queuedPlaylist]=\"nowPlaylistIds$ | async\"\n        (playPlaylist)=\"playPlaylist($event)\"\n        (queuePlaylist)=\"queuePlaylist($event)\"\n        (playVideo)=\"playVideo($event)\"\n        (queueVideo)=\"queueVideo($event)\"\n        (unqueueVideo)=\"unqueueVideo($event)\"\n      ></playlist-viewer>\n    </div>\n  </article>\n  ","import { Observable } from 'rxjs';\r\nimport { UserProfile } from '@core/services';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class PlaylistResolver implements Resolve<any> {\r\n  constructor(private userProfile: UserProfile) {}\r\n\r\n  resolve(\r\n    route: ActivatedRouteSnapshot\r\n  ): Observable<GoogleApiYouTubePlaylistResource> {\r\n    const playlistId = route.params['id'];\r\n    return this.userProfile\r\n      .fetchPlaylist(playlistId)\r\n      .pipe(map(response => response.items[0]));\r\n  }\r\n}\r\n","import { of } from './of';\nimport { concatAll } from '../operators/concatAll';\nexport function concat(...observables) {\n    return concatAll()(of(...observables));\n}\n//# sourceMappingURL=concat.js.map","import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        const { closed, destination, isStopped } = observer;\n        if (closed || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map","import { Subject, Subscription } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { YoutubeApiService } from './youtube-api.service';\r\nimport { YoutubeVideosInfo } from './youtube-videos-info.service';\r\nimport { Authorization } from './authorization.service';\r\n\r\nimport { GoogleBasicProfile } from '@store/user-profile';\r\nimport { switchMap, take } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class UserProfile {\r\n  isSearching: Boolean = false;\r\n  public playlistInfo: YoutubeApiService;\r\n  public playlists: YoutubeApiService;\r\n  public playlistApi: YoutubeApiService;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private zone: NgZone,\r\n    private youtubeVideosInfo: YoutubeVideosInfo,\r\n    private authorization: Authorization\r\n  ) {\r\n    this.playlistInfo = new YoutubeApiService(\r\n      {\r\n        url: 'https://www.googleapis.com/youtube/v3/playlistItems',\r\n        http: this.http,\r\n        idKey: 'playlistId',\r\n        config: {\r\n          mine: 'true'\r\n        }\r\n      },\r\n      authorization\r\n    );\r\n    // TODO - extract to a Model / Reducer?\r\n    // Reducer - because nextPageToken is changed\r\n    // Model - new _config should be recreated easily with a new nextPageToken\r\n    this.playlists = new YoutubeApiService(\r\n      {\r\n        url: 'https://www.googleapis.com/youtube/v3/playlists',\r\n        http: this.http,\r\n        config: {\r\n          mine: 'true',\r\n          part: 'snippet,id,contentDetails'\r\n        }\r\n      },\r\n      authorization\r\n    );\r\n    this.playlistApi = new YoutubeApiService(\r\n      {\r\n        url: 'https://www.googleapis.com/youtube/v3/playlists',\r\n        http: this.http,\r\n        idKey: 'id',\r\n        config: {\r\n          part: 'snippet,id,contentDetails'\r\n        }\r\n      },\r\n      authorization\r\n    );\r\n  }\r\n\r\n  getPlaylists(isNewPage: boolean) {\r\n    const hasAccessToken = this.playlists.hasToken();\r\n    if (!hasAccessToken) {\r\n      return;\r\n    }\r\n    if (isNewPage) {\r\n      this.playlists.resetPageToken();\r\n    }\r\n    // TODO - extract to a reducer or/and an @Effect - SEARCH_START, SEARCH_COMPLETED\r\n    this.isSearching = true;\r\n    return this.playlists.getList();\r\n  }\r\n\r\n  updatePageToken(pageToken: string) {\r\n    this.playlists.setPageToken(pageToken);\r\n  }\r\n\r\n  resetPageToken() {\r\n    this.playlists.resetPageToken();\r\n  }\r\n\r\n  fetchPlaylist(playlistId: string) {\r\n    return this.playlistApi.list(playlistId);\r\n  }\r\n\r\n  fetchPlaylistItems(playlistId: string, pageToken = '') {\r\n    // const token = this.playlists.config.get('access_token');\r\n    if ('' === pageToken) {\r\n      this.playlistInfo.deletePageToken();\r\n    } else {\r\n      this.playlistInfo.setPageToken(pageToken);\r\n    }\r\n    return this.playlistInfo.list(playlistId).pipe(\r\n      switchMap((response: any) => {\r\n        const videoIds = response.items\r\n          .map(video => video.snippet.resourceId.videoId)\r\n          .join(',');\r\n        return this.youtubeVideosInfo.api.list(videoIds);\r\n      })\r\n    );\r\n  }\r\n\r\n  fetchAllPlaylistItems(playlistId: string) {\r\n    let items = [];\r\n    const subscriptions: Subscription[] = [];\r\n    const items$ = new Subject();\r\n    let nextPageToken = '';\r\n    const fetchMetadata = response => {\r\n      const videoIds = response.items\r\n        .map(video => video.snippet.resourceId.videoId)\r\n        .join(',');\r\n      nextPageToken = response.nextPageToken;\r\n      return this.youtubeVideosInfo.api.list(videoIds);\r\n    };\r\n    const collectItems = videos => {\r\n      items = [...items, ...videos.items];\r\n      if (nextPageToken) {\r\n        fetchItems(playlistId, nextPageToken);\r\n      } else {\r\n        items$.next(items);\r\n        subscriptions.forEach(_s => _s.unsubscribe());\r\n        items$.complete();\r\n      }\r\n    };\r\n    const fetchItems = (id, token) => {\r\n      this.playlistInfo.setPageToken(token);\r\n      const sub = this.playlistInfo\r\n        .list(id)\r\n        .pipe(switchMap(response => fetchMetadata(response)))\r\n        .subscribe(response => collectItems(response));\r\n      subscriptions.push(sub);\r\n      return sub;\r\n    };\r\n    fetchItems(playlistId, '');\r\n    return items$.pipe(take(1));\r\n  }\r\n\r\n  toUserJson(profile): GoogleBasicProfile {\r\n    const _profile: GoogleBasicProfile = {};\r\n    if (profile) {\r\n      _profile.imageUrl = profile.getImageUrl();\r\n      _profile.name = profile.getName();\r\n    }\r\n    return _profile;\r\n  }\r\n\r\n  fetchMetadata(items: GoogleApiYouTubeVideoResource[]) {\r\n    const videoIds = items.map(video => video.id).join(',');\r\n    return this.youtubeVideosInfo.api.list(videoIds);\r\n  }\r\n}\r\n","export const isArrayLike = ((x) => x && typeof x.length === 'number' && typeof x !== 'function');\n//# sourceMappingURL=isArrayLike.js.map","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `HttpHeaders` class represents the header configuration options for an HTTP request.\n * Instances should be assumed immutable with lazy parsing.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a header by a given name.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} Whether the header exits.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Returns the first header value that matches a given name.\n     *\n     * @param {?} name The header name to retrieve.\n     *\n     * @return {?} A string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Returns the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Returns a list of header values for a given header name.\n     *\n     * @param {?} name The header name from which to retrieve the values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new header value to the existing set of\n     * header values.\n     *\n     * @param {?} name The header name for which to append the values.\n     *\n     * @param {?} value\n     * @return {?} A clone of the HTTP header object with the value appended.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets a header value for a given name. If the header name already exists,\n     * its value is replaced with the given value.\n     *\n     * @param {?} name The header name.\n     * @param {?} value Provides the value to set or overide for a given name.\n     *\n     * @return {?} A clone of the HTTP header object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes all header values for a given name.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The header values to delete for a given name.\n     *\n     * @return {?} A clone of the HTTP header object.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        });\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key)))));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map$$1 = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key)))));\n            (/** @type {?} */ (this.updates)).forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n *\n * @see [HTTP Guide](guide/http)\n *\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (/** @type {?} */ (first));\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((event) => event instanceof HttpResponse))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    }\n}\nHttpXhrBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.decorators = [\n    { type: NgModule, args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN',\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ],\n            },] }\n];\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n//# sourceMappingURL=http.js.map\n","export class Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = () => Date.now();\n//# sourceMappingURL=Scheduler.js.map","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, () => {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        });\n        this.actions = [];\n        this.active = false;\n        this.scheduled = undefined;\n    }\n    schedule(work, delay = 0, state) {\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return super.schedule(work, delay, state);\n        }\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift());\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n//# sourceMappingURL=AsyncScheduler.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=take.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        const operator = new CatchOperator(selector);\n        const caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nclass CatchOperator {\n    constructor(selector) {\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    }\n}\nclass CatchSubscriber extends OuterSubscriber {\n    constructor(destination, selector, caught) {\n        super(destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let result;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                super.error(err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n            this.add(innerSubscriber);\n            subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n        }\n    }\n}\n//# sourceMappingURL=catchError.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler = async) {\n    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nclass DebounceTimeOperator {\n    constructor(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    }\n}\nclass DebounceTimeSubscriber extends Subscriber {\n    constructor(destination, dueTime, scheduler) {\n        super(destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    }\n    _complete() {\n        this.debouncedNext();\n        this.destination.complete();\n    }\n    debouncedNext() {\n        this.clearDebounce();\n        if (this.hasValue) {\n            const { lastValue } = this;\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    }\n    clearDebounce() {\n        const debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    }\n}\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","import { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n    let hasSeed = false;\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nclass ScanOperator {\n    constructor(accumulator, seed, hasSeed = false) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    }\n}\nclass ScanSubscriber extends Subscriber {\n    constructor(destination, accumulator, _seed, hasSeed) {\n        super(destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(value) {\n        this.hasSeed = true;\n        this._seed = value;\n    }\n    _next(value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    }\n    _tryNext(value) {\n        const index = this.index++;\n        let result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=scan.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","import { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of(...args) {\n    let scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport const iterator = getSymbolIterator();\nexport const $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\nimport { NgxTypeaheadModule } from 'ngx-typeahead';\r\nimport { YoutubePlayerModule } from 'ngx-youtube-player';\r\nimport { CORE_COMPONENTS } from './components';\r\nimport { CORE_DIRECTIVES } from './directives';\r\nimport { PIPES } from './pipes';\r\nimport { TooltipModule } from 'ngx-tooltip';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    YoutubePlayerModule,\r\n    InfiniteScrollModule,\r\n    NgxTypeaheadModule,\r\n    TooltipModule\r\n  ],\r\n  declarations: [...CORE_COMPONENTS, ...CORE_DIRECTIVES, ...PIPES],\r\n  exports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ...CORE_COMPONENTS,\r\n    ...CORE_DIRECTIVES,\r\n    ...PIPES,\r\n    InfiniteScrollModule,\r\n    YoutubePlayerModule,\r\n    NgxTypeaheadModule,\r\n    TooltipModule\r\n  ],\r\n  providers: []\r\n})\r\nexport class SharedModule {}\r\n","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler = async) {\n    return (source) => source.lift(new SampleTimeOperator(period, scheduler));\n}\nclass SampleTimeOperator {\n    constructor(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    }\n}\nclass SampleTimeSubscriber extends Subscriber {\n    constructor(destination, period, scheduler) {\n        super(destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n    }\n    _next(value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    }\n}\nfunction dispatchNotification(state) {\n    let { subscriber, period } = state;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","import { Directive, ElementRef, EventEmitter, Input, NgModule, NgZone, Output } from '@angular/core';\nimport { fromEvent, of } from 'rxjs';\nimport { filter, map, mergeMap, sampleTime, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} selector\n * @param {?} scrollWindow\n * @param {?} defaultElement\n * @param {?} fromRoot\n * @return {?}\n */\nfunction resolveContainerElement(selector, scrollWindow, defaultElement, fromRoot) {\n    /** @type {?} */\n    const hasWindow = window && !!window.document && window.document.documentElement;\n    /** @type {?} */\n    let container = hasWindow && scrollWindow ? window : defaultElement;\n    if (selector) {\n        /** @type {?} */\n        const containerIsString = selector && hasWindow && typeof selector === 'string';\n        container = containerIsString\n            ? findElement(selector, defaultElement.nativeElement, fromRoot)\n            : selector;\n        if (!container) {\n            throw new Error('ngx-infinite-scroll {resolveContainerElement()}: selector for');\n        }\n    }\n    return container;\n}\n/**\n * @param {?} selector\n * @param {?} customRoot\n * @param {?} fromRoot\n * @return {?}\n */\nfunction findElement(selector, customRoot, fromRoot) {\n    /** @type {?} */\n    const rootEl = fromRoot ? window.document : customRoot;\n    return rootEl.querySelector(selector);\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction inputPropChanged(prop) {\n    return prop && !prop.firstChange;\n}\n/**\n * @return {?}\n */\nfunction hasWindowDefined() {\n    return typeof window !== 'undefined';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst VerticalProps = {\n    clientHeight: \"clientHeight\",\n    offsetHeight: \"offsetHeight\",\n    scrollHeight: \"scrollHeight\",\n    pageYOffset: \"pageYOffset\",\n    offsetTop: \"offsetTop\",\n    scrollTop: \"scrollTop\",\n    top: \"top\"\n};\n/** @type {?} */\nconst HorizontalProps = {\n    clientHeight: \"clientWidth\",\n    offsetHeight: \"offsetWidth\",\n    scrollHeight: \"scrollWidth\",\n    pageYOffset: \"pageXOffset\",\n    offsetTop: \"offsetLeft\",\n    scrollTop: \"scrollLeft\",\n    top: \"left\"\n};\nclass AxisResolver {\n    /**\n     * @param {?=} vertical\n     */\n    constructor(vertical = true) {\n        this.vertical = vertical;\n        this.propsMap = vertical ? VerticalProps : HorizontalProps;\n    }\n    /**\n     * @return {?}\n     */\n    clientHeightKey() {\n        return this.propsMap.clientHeight;\n    }\n    /**\n     * @return {?}\n     */\n    offsetHeightKey() {\n        return this.propsMap.offsetHeight;\n    }\n    /**\n     * @return {?}\n     */\n    scrollHeightKey() {\n        return this.propsMap.scrollHeight;\n    }\n    /**\n     * @return {?}\n     */\n    pageYOffsetKey() {\n        return this.propsMap.pageYOffset;\n    }\n    /**\n     * @return {?}\n     */\n    offsetTopKey() {\n        return this.propsMap.offsetTop;\n    }\n    /**\n     * @return {?}\n     */\n    scrollTopKey() {\n        return this.propsMap.scrollTop;\n    }\n    /**\n     * @return {?}\n     */\n    topKey() {\n        return this.propsMap.top;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @param {?} alwaysCallback\n * @param {?} shouldFireScrollEvent\n * @param {?} isTriggeredCurrentTotal\n * @return {?}\n */\nfunction shouldTriggerEvents(alwaysCallback, shouldFireScrollEvent, isTriggeredCurrentTotal) {\n    if (alwaysCallback && shouldFireScrollEvent) {\n        return true;\n    }\n    if (!isTriggeredCurrentTotal && shouldFireScrollEvent) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createResolver({ windowElement, axis }) {\n    return createResolverWithContainer({ axis, isWindow: isElementWindow(windowElement) }, windowElement);\n}\n/**\n * @param {?} resolver\n * @param {?} windowElement\n * @return {?}\n */\nfunction createResolverWithContainer(resolver, windowElement) {\n    /** @type {?} */\n    const container = resolver.isWindow || (windowElement && !windowElement.nativeElement)\n        ? windowElement\n        : windowElement.nativeElement;\n    return Object.assign({}, resolver, { container });\n}\n/**\n * @param {?} windowElement\n * @return {?}\n */\nfunction isElementWindow(windowElement) {\n    /** @type {?} */\n    const isWindow = ['Window', 'global'].some((obj) => Object.prototype.toString.call(windowElement).includes(obj));\n    return isWindow;\n}\n/**\n * @param {?} isContainerWindow\n * @param {?} windowElement\n * @return {?}\n */\nfunction getDocumentElement(isContainerWindow, windowElement) {\n    return isContainerWindow ? windowElement.document.documentElement : null;\n}\n/**\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePoints(element, resolver) {\n    /** @type {?} */\n    const height = extractHeightForElement(resolver);\n    return resolver.isWindow\n        ? calculatePointsForWindow(height, element, resolver)\n        : calculatePointsForElement(height, element, resolver);\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForWindow(height, element, resolver) {\n    const { axis, container, isWindow } = resolver;\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    // scrolled until now / current y point\n    /** @type {?} */\n    const scrolled = height +\n        getElementPageYOffset(getDocumentElement(isWindow, container), axis, isWindow);\n    // total height / most bottom y point\n    /** @type {?} */\n    const nativeElementHeight = getElementHeight(element.nativeElement, isWindow, offsetHeightKey, clientHeightKey);\n    /** @type {?} */\n    const totalToScroll = getElementOffsetTop(element.nativeElement, axis, isWindow) +\n        nativeElementHeight;\n    return { height, scrolled, totalToScroll };\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForElement(height, element, resolver) {\n    const { axis, container } = resolver;\n    // perhaps use container.offsetTop instead of 'scrollTop'\n    /** @type {?} */\n    const scrolled = container[axis.scrollTopKey()];\n    /** @type {?} */\n    const totalToScroll = container[axis.scrollHeightKey()];\n    return { height, scrolled, totalToScroll };\n}\n/**\n * @param {?} axis\n * @return {?}\n */\nfunction extractHeightPropKeys(axis) {\n    return {\n        offsetHeightKey: axis.offsetHeightKey(),\n        clientHeightKey: axis.clientHeightKey()\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction extractHeightForElement({ container, isWindow, axis }) {\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    return getElementHeight(container, isWindow, offsetHeightKey, clientHeightKey);\n}\n/**\n * @param {?} elem\n * @param {?} isWindow\n * @param {?} offsetHeightKey\n * @param {?} clientHeightKey\n * @return {?}\n */\nfunction getElementHeight(elem, isWindow, offsetHeightKey, clientHeightKey) {\n    if (isNaN(elem[offsetHeightKey])) {\n        /** @type {?} */\n        const docElem = getDocumentElement(isWindow, elem);\n        return docElem ? docElem[clientHeightKey] : 0;\n    }\n    else {\n        return elem[offsetHeightKey];\n    }\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementOffsetTop(elem, axis, isWindow) {\n    /** @type {?} */\n    const topKey = axis.topKey();\n    // elem = elem.nativeElement;\n    if (!elem.getBoundingClientRect) {\n        // || elem.css('none')) {\n        return;\n    }\n    return (elem.getBoundingClientRect()[topKey] +\n        getElementPageYOffset(elem, axis, isWindow));\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementPageYOffset(elem, axis, isWindow) {\n    /** @type {?} */\n    const pageYOffset = axis.pageYOffsetKey();\n    /** @type {?} */\n    const scrollTop = axis.scrollTopKey();\n    /** @type {?} */\n    const offsetTop = axis.offsetTopKey();\n    if (isNaN(window[pageYOffset])) {\n        return getDocumentElement(isWindow, elem)[scrollTop];\n    }\n    else if (elem.ownerDocument) {\n        return elem.ownerDocument.defaultView[pageYOffset];\n    }\n    else {\n        return elem[offsetTop];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} container\n * @param {?} distance\n * @param {?} scrollingDown\n * @return {?}\n */\nfunction shouldFireScrollEvent(container, distance, scrollingDown) {\n    /** @type {?} */\n    let remaining;\n    /** @type {?} */\n    let containerBreakpoint;\n    if (container.totalToScroll <= 0) {\n        return false;\n    }\n    /** @type {?} */\n    const scrolledUntilNow = container.height + container.scrolled;\n    if (scrollingDown) {\n        remaining =\n            (container.totalToScroll - scrolledUntilNow) / container.totalToScroll;\n        containerBreakpoint = distance.down / 10;\n    }\n    else {\n        /** @type {?} */\n        const totalHiddenContentHeight = container.scrolled + (container.totalToScroll - scrolledUntilNow);\n        remaining = container.scrolled / totalHiddenContentHeight;\n        containerBreakpoint = distance.up / 10;\n    }\n    /** @type {?} */\n    const shouldFireEvent = remaining <= containerBreakpoint;\n    return shouldFireEvent;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @return {?}\n */\nfunction isScrollingDownwards(lastScrollPosition, container) {\n    return lastScrollPosition < container.scrolled;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @param {?} distance\n * @return {?}\n */\nfunction getScrollStats(lastScrollPosition, container, distance) {\n    /** @type {?} */\n    const scrollDown = isScrollingDownwards(lastScrollPosition, container);\n    return {\n        fire: shouldFireScrollEvent(container, distance, scrollDown),\n        scrollDown\n    };\n}\n/**\n * @param {?} position\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} scroll\n * @param {?} scrollState\n * @param {?} triggered\n * @param {?} isScrollingDown\n * @return {?}\n */\n\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @param {?} isScrollingDown\n * @return {?}\n */\n\n/**\n * @param {?} scrollState\n * @param {?} scrolledUntilNow\n * @param {?} totalToScroll\n * @return {?}\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollState {\n    /**\n     * @param {?} __0\n     */\n    constructor({ totalToScroll }) {\n        this.lastScrollPosition = 0;\n        this.lastTotalToScroll = 0;\n        this.totalToScroll = 0;\n        this.triggered = {\n            down: 0,\n            up: 0\n        };\n        this.totalToScroll = totalToScroll;\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    updateScrollPosition(position) {\n        return (this.lastScrollPosition = position);\n    }\n    /**\n     * @param {?} totalToScroll\n     * @return {?}\n     */\n    updateTotalToScroll(totalToScroll) {\n        if (this.lastTotalToScroll !== totalToScroll) {\n            this.lastTotalToScroll = this.totalToScroll;\n            this.totalToScroll = totalToScroll;\n        }\n    }\n    /**\n     * @param {?} scrolledUntilNow\n     * @param {?} totalToScroll\n     * @return {?}\n     */\n    updateScroll(scrolledUntilNow, totalToScroll) {\n        this.updateScrollPosition(scrolledUntilNow);\n        this.updateTotalToScroll(totalToScroll);\n    }\n    /**\n     * @param {?} scroll\n     * @param {?} isScrollingDown\n     * @return {?}\n     */\n    updateTriggeredFlag(scroll, isScrollingDown) {\n        if (isScrollingDown) {\n            this.triggered.down = scroll;\n        }\n        else {\n            this.triggered.up = scroll;\n        }\n    }\n    /**\n     * @param {?} totalToScroll\n     * @param {?} isScrollingDown\n     * @return {?}\n     */\n    isTriggeredScroll(totalToScroll, isScrollingDown) {\n        return isScrollingDown\n            ? this.triggered.down === totalToScroll\n            : this.triggered.up === totalToScroll;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction createScroller(config) {\n    const { scrollContainer, scrollWindow, element, fromRoot } = config;\n    /** @type {?} */\n    const resolver = createResolver({\n        axis: new AxisResolver(!config.horizontal),\n        windowElement: resolveContainerElement(scrollContainer, scrollWindow, element, fromRoot)\n    });\n    /** @type {?} */\n    const scrollState = new ScrollState({\n        totalToScroll: calculatePoints(element, resolver)\n    });\n    /** @type {?} */\n    const options = {\n        container: resolver.container,\n        throttle: config.throttle\n    };\n    /** @type {?} */\n    const distance = {\n        up: config.upDistance,\n        down: config.downDistance\n    };\n    return attachScrollEvent(options).pipe(mergeMap(() => of(calculatePoints(element, resolver))), map((positionStats) => toInfiniteScrollParams(scrollState.lastScrollPosition, positionStats, distance)), tap(({ stats }) => scrollState.updateScroll(stats.scrolled, stats.totalToScroll)), filter(({ fire, scrollDown, stats: { totalToScroll } }) => shouldTriggerEvents(config.alwaysCallback, fire, scrollState.isTriggeredScroll(totalToScroll, scrollDown))), tap(({ scrollDown, stats: { totalToScroll } }) => {\n        scrollState.updateTriggeredFlag(totalToScroll, scrollDown);\n    }), map(toInfiniteScrollAction));\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction attachScrollEvent(options) {\n    /** @type {?} */\n    let obs = fromEvent(options.container, 'scroll');\n    // For an unknown reason calling `sampleTime()` causes trouble for many users, even with `options.throttle = 0`.\n    // Let's avoid calling the function unless needed.\n    // See https://github.com/orizens/ngx-infinite-scroll/issues/198\n    if (options.throttle) {\n        obs = obs.pipe(sampleTime(options.throttle));\n    }\n    return obs;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} stats\n * @param {?} distance\n * @return {?}\n */\nfunction toInfiniteScrollParams(lastScrollPosition, stats, distance) {\n    const { scrollDown, fire } = getScrollStats(lastScrollPosition, stats, distance);\n    return {\n        scrollDown,\n        fire,\n        stats\n    };\n}\n/** @type {?} */\nconst InfiniteScrollActions = {\n    DOWN: '[NGX_ISE] DOWN',\n    UP: '[NGX_ISE] UP'\n};\n/**\n * @param {?} response\n * @return {?}\n */\nfunction toInfiniteScrollAction(response) {\n    const { scrollDown, stats: { scrolled: currentScrollPosition } } = response;\n    return {\n        type: scrollDown ? InfiniteScrollActions.DOWN : InfiniteScrollActions.UP,\n        payload: {\n            currentScrollPosition\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InfiniteScrollDirective {\n    /**\n     * @param {?} element\n     * @param {?} zone\n     */\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.scrolled = new EventEmitter();\n        this.scrolledUp = new EventEmitter();\n        this.infiniteScrollDistance = 2;\n        this.infiniteScrollUpDistance = 1.5;\n        this.infiniteScrollThrottle = 150;\n        this.infiniteScrollDisabled = false;\n        this.infiniteScrollContainer = null;\n        this.scrollWindow = true;\n        this.immediateCheck = false;\n        this.horizontal = false;\n        this.alwaysCallback = false;\n        this.fromRoot = false;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!this.infiniteScrollDisabled) {\n            this.setup();\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance }) {\n        /** @type {?} */\n        const containerChanged = inputPropChanged(infiniteScrollContainer);\n        /** @type {?} */\n        const disabledChanged = inputPropChanged(infiniteScrollDisabled);\n        /** @type {?} */\n        const distanceChanged = inputPropChanged(infiniteScrollDistance);\n        /** @type {?} */\n        const shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||\n            (disabledChanged && !infiniteScrollDisabled.currentValue) || distanceChanged;\n        if (containerChanged || disabledChanged || distanceChanged) {\n            this.destroyScroller();\n            if (shouldSetup) {\n                this.setup();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    setup() {\n        if (hasWindowDefined()) {\n            this.zone.runOutsideAngular(() => {\n                this.disposeScroller = createScroller({\n                    fromRoot: this.fromRoot,\n                    alwaysCallback: this.alwaysCallback,\n                    disable: this.infiniteScrollDisabled,\n                    downDistance: this.infiniteScrollDistance,\n                    element: this.element,\n                    horizontal: this.horizontal,\n                    scrollContainer: this.infiniteScrollContainer,\n                    scrollWindow: this.scrollWindow,\n                    throttle: this.infiniteScrollThrottle,\n                    upDistance: this.infiniteScrollUpDistance\n                }).subscribe((payload) => this.zone.run(() => this.handleOnScroll(payload)));\n            });\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    handleOnScroll({ type, payload }) {\n        switch (type) {\n            case InfiniteScrollActions.DOWN:\n                return this.scrolled.emit(payload);\n            case InfiniteScrollActions.UP:\n                return this.scrolledUp.emit(payload);\n            default:\n                return;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyScroller();\n    }\n    /**\n     * @return {?}\n     */\n    destroyScroller() {\n        if (this.disposeScroller) {\n            this.disposeScroller.unsubscribe();\n        }\n    }\n}\nInfiniteScrollDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]'\n            },] },\n];\n/** @nocollapse */\nInfiniteScrollDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nInfiniteScrollDirective.propDecorators = {\n    scrolled: [{ type: Output }],\n    scrolledUp: [{ type: Output }],\n    infiniteScrollDistance: [{ type: Input }],\n    infiniteScrollUpDistance: [{ type: Input }],\n    infiniteScrollThrottle: [{ type: Input }],\n    infiniteScrollDisabled: [{ type: Input }],\n    infiniteScrollContainer: [{ type: Input }],\n    scrollWindow: [{ type: Input }],\n    immediateCheck: [{ type: Input }],\n    horizontal: [{ type: Input }],\n    alwaysCallback: [{ type: Input }],\n    fromRoot: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InfiniteScrollModule {\n}\nInfiniteScrollModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [InfiniteScrollDirective],\n                exports: [InfiniteScrollDirective],\n                imports: [],\n                providers: []\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * Entry point for all public APIs of the package.\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InfiniteScrollDirective, InfiniteScrollModule };\n//# sourceMappingURL=ngx-infinite-scroll.js.map\n","export const Themes = ['halloween', 'bumblebee'];\r\n\r\nexport const DEFAULT_THEME = Themes[1];\r\n","import { Store } from '@ngrx/store';\r\nimport { ActionTypes, Action } from './app-core.actions';\r\nimport { Themes, DEFAULT_THEME } from '../../../app.themes';\r\nimport { migrateReducerState } from '../store.utils';\r\n\r\nexport enum ErrorActions {\r\n  RELOAD = 'Reload',\r\n  NONE = 0,\r\n  RESET = 1\r\n}\r\nexport enum ErrorMessages {\r\n  OFFLINE = 'No Connection Available',\r\n  RESPONSE_ERROR = 'Error With Providing Response'\r\n}\r\nexport interface IAppVersion {\r\n  semver: string;\r\n  isNewAvailable: boolean;\r\n  checkingForVersion: boolean;\r\n}\r\nexport interface IAppError {\r\n  message: string;\r\n  show: boolean;\r\n  action: ErrorActions;\r\n}\r\nexport interface IAppCore {\r\n  sidebarExpanded: boolean;\r\n  requestInProcess: boolean;\r\n  version: IAppVersion;\r\n  theme: string;\r\n  themes: string[];\r\n  error: IAppError;\r\n}\r\nconst newInitialState: IAppCore = {\r\n  sidebarExpanded: true,\r\n  requestInProcess: false,\r\n  version: {\r\n    semver: '',\r\n    isNewAvailable: false,\r\n    checkingForVersion: false\r\n  },\r\n  theme: DEFAULT_THEME,\r\n  themes: Themes.sort(),\r\n  error: {\r\n    message: '',\r\n    show: false,\r\n    action: ErrorActions.NONE\r\n  }\r\n};\r\nconst initialState: IAppCore = migrateReducerState(\r\n  'appLayout',\r\n  newInitialState,\r\n  localStorage\r\n);\r\n\r\nexport function appCore(\r\n  state: IAppCore = initialState,\r\n  action: Action\r\n): IAppCore {\r\n  switch (action.type) {\r\n    case ActionTypes.SIDEBAR_EXPAND:\r\n      return { ...state, sidebarExpanded: true };\r\n\r\n    case ActionTypes.SIDEBAR_COLLAPSE:\r\n      return { ...state, sidebarExpanded: false };\r\n\r\n    case ActionTypes.SIDEBAR_TOGGLE:\r\n      return { ...state, sidebarExpanded: !state.sidebarExpanded };\r\n\r\n    case ActionTypes.APP_VERSION_RECIEVED: {\r\n      const version = getVersion(state, action.payload);\r\n      return { ...state, version };\r\n    }\r\n\r\n    case ActionTypes.APP_CHECK_VERSION: {\r\n      const version = {\r\n        ...state.version,\r\n        checkingForVersion: true\r\n      };\r\n      return { ...state, version };\r\n    }\r\n\r\n    case ActionTypes.APP_THEME_CHANGE: {\r\n      return { ...state, theme: action.payload };\r\n    }\r\n\r\n    case ActionTypes.ERROR_ADD: {\r\n      const { payload: { message } } = action;\r\n      return {\r\n        ...state,\r\n        error: {\r\n          message,\r\n          show: true,\r\n          action: ErrorActions.RELOAD\r\n        }\r\n      };\r\n    }\r\n\r\n    case ActionTypes.ERROR_CLEAN: {\r\n      return {\r\n        ...state,\r\n        error: {\r\n          ...initialState.error\r\n        }\r\n      };\r\n    }\r\n\r\n    case ActionTypes.TOGGLE_ERROR: {\r\n      return {\r\n        ...state,\r\n        error: {\r\n          ...initialState.error,\r\n          show: false\r\n        }\r\n      };\r\n    }\r\n\r\n    default:\r\n      return {\r\n        ...initialState,\r\n        ...state,\r\n        themes: Themes.sort()\r\n      };\r\n  }\r\n}\r\n\r\nexport function getSidebarExpanded($state: Store<IAppCore>) {\r\n  return $state.select(state => state.sidebarExpanded);\r\n}\r\n\r\nfunction getVersion(state: IAppCore, packageJson: any): IAppVersion {\r\n  const currentVersion = state.version.semver;\r\n  const remoteVersion = packageJson.version;\r\n  const version: IAppVersion = {\r\n    semver: '',\r\n    isNewAvailable: state.version.isNewAvailable,\r\n    checkingForVersion: false\r\n  };\r\n  const isCurrentVersionEmpty = '' === currentVersion;\r\n  const isCurrentDifferentFromRemote =\r\n    !isCurrentVersionEmpty && currentVersion !== remoteVersion;\r\n  if (isCurrentVersionEmpty) {\r\n    version.semver = remoteVersion;\r\n  }\r\n  if (isCurrentDifferentFromRemote && !version.isNewAvailable) {\r\n    version.semver = currentVersion;\r\n    version.isNewAvailable = true;\r\n  } else {\r\n    // upgrade is completed\r\n    version.semver = remoteVersion;\r\n    version.isNewAvailable = false;\r\n  }\r\n  return version;\r\n}\r\n","/**\r\n * migrate reducer strategy\r\n */\r\nexport function migrateReducerState(\r\n  prevReducerKey: string,\r\n  newReducerState: any,\r\n  storage: { getItem: Function; removeItem: Function }\r\n): any {\r\n  const prevReducerState = storage.getItem(prevReducerKey);\r\n  const prevStateJson =\r\n    prevReducerState && prevReducerState.length > 0\r\n      ? JSON.parse(prevReducerState)\r\n      : false;\r\n  if (prevStateJson) {\r\n    storage.removeItem(prevReducerKey);\r\n  }\r\n  return prevStateJson\r\n    ? { ...newReducerState, ...prevStateJson }\r\n    : newReducerState;\r\n}\r\n","export function hostReportError(err) {\n    setTimeout(() => { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map","import { Observable } from '../Observable';\nimport { from } from './from';\nimport { empty } from './empty';\nexport function defer(observableFactory) {\n    return new Observable(subscriber => {\n        let input;\n        try {\n            input = observableFactory();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        const source = input ? from(input) : empty();\n        return source.subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=defer.js.map","import { isArray } from './isArray';\nexport function isNumeric(val) {\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime = 0, periodOrScheduler, scheduler) {\n    let period = -1;\n    if (isNumeric(periodOrScheduler)) {\n        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n    }\n    else if (isScheduler(periodOrScheduler)) {\n        scheduler = periodOrScheduler;\n    }\n    if (!isScheduler(scheduler)) {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        const due = isNumeric(dueTime)\n            ? dueTime\n            : (+dueTime - scheduler.now());\n        return scheduler.schedule(dispatch, due, {\n            index: 0, period, subscriber\n        });\n    });\n}\nfunction dispatch(state) {\n    const { index, period, subscriber } = state;\n    subscriber.next(index);\n    if (subscriber.closed) {\n        return;\n    }\n    else if (period === -1) {\n        return subscriber.complete();\n    }\n    state.index = index + 1;\n    this.schedule(state, period);\n}\n//# sourceMappingURL=timer.js.map","import { Action } from '@ngrx/store';\r\nimport * as fromActions from './now-playlist.actions';\r\n\r\nexport interface INowPlaylist {\r\n  videos: GoogleApiYouTubeVideoResource[];\r\n  selectedId: string;\r\n  filter: string;\r\n  repeat: boolean;\r\n}\r\n\r\nconst initialState: INowPlaylist = {\r\n  videos: [],\r\n  selectedId: '',\r\n  filter: '',\r\n  repeat: false\r\n};\r\ninterface UnsafeAction {\r\n  payload?: any;\r\n  type: any;\r\n}\r\nexport function nowPlaylist(\r\n  state: INowPlaylist = initialState,\r\n  action: UnsafeAction\r\n): INowPlaylist {\r\n  switch (action.type) {\r\n    case fromActions.ActionTypes.SELECT:\r\n      return { ...state, selectedId: action.payload.id };\r\n\r\n    case fromActions.ActionTypes.QUEUE:\r\n      return { ...state, videos: addMedia(state.videos, action.payload) };\r\n\r\n    case fromActions.ActionTypes.QUEUE_VIDEOS:\r\n      return { ...state, videos: addMedias(state.videos, action.payload) };\r\n\r\n    case fromActions.ActionTypes.REMOVE:\r\n      return { ...state, videos: removeMedia(state.videos, action.payload) };\r\n\r\n    // updates index by media\r\n    case fromActions.ActionTypes.UPDATE_INDEX:\r\n      return { ...state, selectedId: action.payload };\r\n\r\n    case fromActions.ActionTypes.FILTER_CHANGE:\r\n      return { ...state, filter: action.payload };\r\n\r\n    case fromActions.ActionTypes.REMOVE_ALL:\r\n      return { ...state, videos: [], filter: '', selectedId: '' };\r\n\r\n    case fromActions.ActionTypes.SELECT_NEXT: {\r\n      return {\r\n        ...state,\r\n        selectedId: selectNextIndex(\r\n          state.videos,\r\n          state.selectedId,\r\n          state.filter,\r\n          state.repeat\r\n        )\r\n      };\r\n    }\r\n\r\n    case fromActions.ActionTypes.SELECT_PREVIOUS:\r\n      return {\r\n        ...state,\r\n        selectedId: selectPreviousIndex(\r\n          state.videos,\r\n          state.selectedId,\r\n          state.filter\r\n        )\r\n      };\r\n\r\n    case fromActions.ActionTypes.MEDIA_ENDED:\r\n      return selectNextOrPreviousTrack(state, state.filter);\r\n\r\n    case fromActions.ActionTypes.TOGGLE_REPEAT: {\r\n      return {\r\n        ...state,\r\n        repeat: !state.repeat\r\n      };\r\n    }\r\n\r\n    case fromActions.ActionTypes.LOAD_PLAYLIST_END: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction addMedia(videos: GoogleApiYouTubeVideoResource[], media: any) {\r\n  const newMedia = videos.findIndex(video => video.id === media.id);\r\n  const newMedias = [];\r\n  if (newMedia === -1) {\r\n    newMedias.push(media);\r\n  }\r\n  return [...videos, ...newMedias];\r\n}\r\n\r\nfunction addMedias(videos, medias) {\r\n  const allVideoIds = videos.map(video => video.id);\r\n  const newVideos = medias.filter(media => !allVideoIds.includes(media.id));\r\n  return [...videos, ...newVideos];\r\n}\r\n\r\nfunction filterVideos(videos: GoogleApiYouTubeVideoResource[], filter: string) {\r\n  const sanitizedFilter = filter.toLowerCase();\r\n  return videos.filter(video =>\r\n    JSON.stringify(video)\r\n      .toLowerCase()\r\n      .includes(sanitizedFilter)\r\n  );\r\n}\r\n\r\nfunction getSelectedInFilteredVideos(\r\n  videos: GoogleApiYouTubeVideoResource[],\r\n  filter: string,\r\n  selectedId: string\r\n) {\r\n  const filteredVideos = filterVideos(videos, filter);\r\n  const currentIndex: number = filteredVideos.findIndex(\r\n    video => video.id === selectedId\r\n  );\r\n  return {\r\n    filteredVideos,\r\n    currentIndex\r\n  };\r\n}\r\n\r\nfunction selectNextIndex(\r\n  videos: GoogleApiYouTubeVideoResource[],\r\n  selectedId: string,\r\n  filter: string,\r\n  isRepeat: boolean\r\n): string {\r\n  const { filteredVideos, currentIndex } = getSelectedInFilteredVideos(\r\n    videos,\r\n    filter,\r\n    selectedId\r\n  );\r\n  let nextIndex = currentIndex + 1;\r\n  if (!filteredVideos.length) {\r\n    nextIndex = 0;\r\n  }\r\n  if (filteredVideos.length === nextIndex) {\r\n    nextIndex = isRepeat ? 0 : currentIndex;\r\n  }\r\n\r\n  return filteredVideos[nextIndex].id || '';\r\n}\r\n\r\nfunction selectPreviousIndex(\r\n  videos: GoogleApiYouTubeVideoResource[],\r\n  selectedId: string,\r\n  filter: string\r\n): string {\r\n  const { filteredVideos, currentIndex } = getSelectedInFilteredVideos(\r\n    videos,\r\n    filter,\r\n    selectedId\r\n  );\r\n  let previousIndex = currentIndex - 1;\r\n  if (!filteredVideos.length || previousIndex < 0) {\r\n    previousIndex = 0;\r\n  }\r\n\r\n  return filteredVideos[previousIndex].id || '';\r\n}\r\n\r\nfunction selectNextOrPreviousTrack(\r\n  state: INowPlaylist,\r\n  filter: string\r\n): INowPlaylist {\r\n  const { videos, selectedId, repeat } = state;\r\n  const { filteredVideos, currentIndex } = getSelectedInFilteredVideos(\r\n    videos,\r\n    filter,\r\n    selectedId\r\n  );\r\n  const isCurrentLast = currentIndex + 1 === filteredVideos.length;\r\n  const nextId = isCurrentLast\r\n    ? getNextIdForPlaylist(filteredVideos, repeat, selectedId)\r\n    : selectNextIndex(filteredVideos, selectedId, filter, repeat);\r\n  return {\r\n    ...state,\r\n    selectedId: nextId\r\n  };\r\n}\r\n\r\nfunction getNextIdForPlaylist(\r\n  videos: GoogleApiYouTubeVideoResource[],\r\n  repeat: boolean,\r\n  currentId: string = ''\r\n) {\r\n  let id = '';\r\n  if (videos.length && repeat) {\r\n    id = videos[0].id;\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction removeMedia(\r\n  videos: GoogleApiYouTubeVideoResource[],\r\n  media: GoogleApiYouTubeVideoResource\r\n): GoogleApiYouTubeVideoResource[] {\r\n  return videos.filter(\r\n    (_media: GoogleApiYouTubeVideoResource) => _media.id !== media.id\r\n  );\r\n}\r\n","/**\n * @license ngx-youtube-library\n * Copyright (c) 2018 Oren Farhi\n * MIT license\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n */\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, Renderer2 } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction win() {\n    return window;\n}\n/**\n * @return {?}\n */\nfunction YouTubeRef() {\n    return win()['YT'];\n}\n/**\n * @return {?}\n */\nfunction YouTubePlayerRef() {\n    return YouTubeRef().Player;\n}\nconst defaultSizes = {\n    height: 270,\n    width: 367\n};\nclass YoutubePlayerService {\n    /**\n     * @param {?} zone\n     */\n    constructor(zone) {\n        this.zone = zone;\n        this.ytApiLoaded = false;\n        this.api = new ReplaySubject(1);\n        this.createApi();\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    loadPlayerApi(options) {\n        const /** @type {?} */ doc = win().document;\n        if (!this.ytApiLoaded) {\n            this.ytApiLoaded = true;\n            const /** @type {?} */ playerApiScript = doc.createElement('script');\n            playerApiScript.type = 'text/javascript';\n            playerApiScript.src = `${options.protocol}://www.youtube.com/iframe_api`;\n            doc.body.appendChild(playerApiScript);\n        }\n    }\n    /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n    setupPlayer(elementId, outputs, sizes, videoId = '', playerVars) {\n        const /** @type {?} */ createPlayer = () => {\n            if (YouTubePlayerRef) {\n                this.createPlayer(elementId, outputs, sizes, videoId, playerVars);\n            }\n        };\n        this.api.subscribe(createPlayer);\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    play(player) {\n        player.playVideo();\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    pause(player) {\n        player.pauseVideo();\n    }\n    /**\n     * @param {?} media\n     * @param {?} player\n     * @return {?}\n     */\n    playVideo(media, player) {\n        const /** @type {?} */ id = media.id.videoId ? media.id.videoId : media.id;\n        player.loadVideoById(id);\n        this.play(player);\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    isPlaying(player) {\n        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING\n        const /** @type {?} */ isPlayerReady = player && player.getPlayerState;\n        const /** @type {?} */ playerState = isPlayerReady ? player.getPlayerState() : {};\n        const /** @type {?} */ isPlayerPlaying = isPlayerReady\n            ? playerState !== YouTubeRef().PlayerState.ENDED &&\n                playerState !== YouTubeRef().PlayerState.PAUSED\n            : false;\n        return isPlayerPlaying;\n    }\n    /**\n     * @param {?} elementId\n     * @param {?} outputs\n     * @param {?} sizes\n     * @param {?=} videoId\n     * @param {?=} playerVars\n     * @return {?}\n     */\n    createPlayer(elementId, outputs, sizes, videoId = '', playerVars = {}) {\n        const /** @type {?} */ playerSize = {\n            height: sizes.height || defaultSizes.height,\n            width: sizes.width || defaultSizes.width\n        };\n        const /** @type {?} */ ytPlayer = YouTubePlayerRef();\n        return new ytPlayer(elementId, Object.assign({}, playerSize, { events: {\n                onReady: (ev) => {\n                    this.zone.run(() => outputs.ready && outputs.ready.next(ev.target));\n                },\n                onStateChange: (ev) => {\n                    this.zone.run(() => outputs.change && outputs.change.next(ev));\n                }\n            }, playerVars,\n            videoId }));\n    }\n    /**\n     * @param {?} player\n     * @param {?} isFullScreen\n     * @return {?}\n     */\n    toggleFullScreen(player, isFullScreen) {\n        let { height, width } = defaultSizes;\n        if (!isFullScreen) {\n            height = window.innerHeight;\n            width = window.innerWidth;\n        }\n        player.setSize(width, height);\n    }\n    /**\n     * @return {?}\n     */\n    generateUniqueId() {\n        const /** @type {?} */ len = 7;\n        return Math.random()\n            .toString(35)\n            .substr(2, len);\n    }\n    /**\n     * @return {?}\n     */\n    createApi() {\n        const /** @type {?} */ onYouTubeIframeAPIReady = () => {\n            if (win()) {\n                this.api.next(YouTubeRef());\n            }\n        };\n        win()['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;\n    }\n}\nYoutubePlayerService.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nYoutubePlayerService.ctorParameters = () => [\n    { type: NgZone, },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass YoutubePlayerComponent {\n    /**\n     * @param {?} playerService\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    constructor(playerService, elementRef, renderer) {\n        this.playerService = playerService;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.videoId = '';\n        this.height = defaultSizes.height;\n        this.width = defaultSizes.width;\n        /**\n         * \\@description sets the protocol by the navigator object\n         * if there is no window, it sets a default http protocol\n         * unless the protocol is set from outside\n         */\n        this.protocol = this.getProtocol();\n        this.playerVars = {};\n        // player created and initialized - sends instance of the player\n        this.ready = new EventEmitter();\n        // state change: send the YT event with its state\n        this.change = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        const /** @type {?} */ htmlId = this.playerService.generateUniqueId();\n        const /** @type {?} */ playerSize = { height: this.height, width: this.width };\n        const /** @type {?} */ container = this.renderer.selectRootElement('#yt-player-ngx-component');\n        this.renderer.setAttribute(container, 'id', htmlId);\n        this.playerService.loadPlayerApi({\n            protocol: this.protocol\n        });\n        this.playerService.setupPlayer(htmlId, {\n            change: this.change,\n            ready: this.ready\n        }, playerSize, this.videoId, this.playerVars);\n    }\n    /**\n     * @return {?}\n     */\n    getProtocol() {\n        const /** @type {?} */ hasWindow = window && window.location;\n        const /** @type {?} */ protocol = hasWindow\n            ? window.location.protocol.replace(':', '')\n            : 'http';\n        return protocol;\n    }\n}\nYoutubePlayerComponent.decorators = [\n    { type: Component, args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'youtube-player',\n                template: `\n    <div id=\"yt-player-ngx-component\"></div>\n  `\n            },] },\n];\n/** @nocollapse */\nYoutubePlayerComponent.ctorParameters = () => [\n    { type: YoutubePlayerService, },\n    { type: ElementRef, },\n    { type: Renderer2, },\n];\nYoutubePlayerComponent.propDecorators = {\n    \"videoId\": [{ type: Input },],\n    \"height\": [{ type: Input },],\n    \"width\": [{ type: Input },],\n    \"protocol\": [{ type: Input },],\n    \"playerVars\": [{ type: Input },],\n    \"ready\": [{ type: Output },],\n    \"change\": [{ type: Output },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass YoutubePlayerModule {\n}\nYoutubePlayerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    YoutubePlayerComponent\n                ],\n                exports: [\n                    YoutubePlayerComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    YoutubePlayerService\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Copyright Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { YoutubePlayerModule, YoutubePlayerComponent as ɵa, YoutubePlayerService as ɵb };\n//# sourceMappingURL=ngx-youtube-player.js.map\n","import { Store } from '@ngrx/store';\r\nimport { Injectable } from '@angular/core';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\n// Actions\r\nimport * as AppCore from '@store/app-core';\r\nimport * as RouterActions from '@store/router-store';\r\nimport * as UserActions from '@store/user-profile';\r\n\r\n@Injectable()\r\nexport class AppApi {\r\n  themes$ = this.store.select(AppCore.getAppThemes);\r\n  appVersion$ = this.store.select(AppCore.getAppVersion);\r\n  user$ = this.store.select(UserActions.getUser);\r\n\r\n  constructor(private store: Store<EchoesState>) {}\r\n\r\n  toggleSidebar() {\r\n    this.store.dispatch(new AppCore.ToggleSidebar());\r\n  }\r\n\r\n  navigateBack() {\r\n    this.store.dispatch(new RouterActions.Back());\r\n  }\r\n\r\n  updateVersion() {\r\n    this.store.dispatch(new AppCore.UpdateAppVersion());\r\n  }\r\n\r\n  checkVersion() {\r\n    this.store.dispatch(new AppCore.CheckVersion());\r\n  }\r\n\r\n  changeTheme(theme: string) {\r\n    this.store.dispatch(new AppCore.ThemeChange(theme));\r\n  }\r\n\r\n  notifyNewVersion(response) {\r\n    this.store.dispatch(new AppCore.RecievedAppVersion(response));\r\n  }\r\n\r\n  recievedNewVersion(response) {\r\n    this.store.dispatch(new AppCore.RecievedAppVersion(response));\r\n  }\r\n\r\n  // AUTHORIZATION\r\n  signinUser() {\r\n    this.store.dispatch(new UserActions.UserSignin());\r\n  }\r\n\r\n  signoutUser() {\r\n    this.store.dispatch(new UserActions.UserSignout());\r\n  }\r\n\r\n  checkUserAuth() {\r\n    this.store.dispatch(new UserActions.CheckUserAuth());\r\n  }\r\n\r\n  notifyError(error) {\r\n    this.store.dispatch(new AppCore.AddError(error));\r\n  }\r\n}\r\n","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, EventEmitter, Injectable, Optional, Inject, LOCALE_ID, ɵisListLikeIterable, ɵstringify, Directive, IterableDiffers, KeyValueDiffers, ElementRef, Renderer2, Input, NgModuleRef, ComponentFactoryResolver, ViewContainerRef, isDevMode, TemplateRef, Host, Attribute, Pipe, WrappedValue, ɵisPromise, ɵisObservable, ChangeDetectorRef, NgModule, Version, defineInjectable, inject } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * \\@publicApi\n * @abstract\n */\nclass PlatformLocation {\n}\n/**\n * \\@description\n * Indicates when a location is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCATION_INITIALIZED = new InjectionToken('Location Initialized');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\n *\n * This is used under the hood of the {\\@link Location} service.\n *\n * Applications should use the {\\@link Router} or {\\@link Location} services to\n * interact with application route state.\n *\n * For instance, {\\@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n *\n * See these two classes for more.\n *\n * \\@publicApi\n * @abstract\n */\nclass LocationStrategy {\n}\n/**\n * A predefined [DI token](guide/glossary#di-token) for the base href\n * to be used with the `PathLocationStrategy`.\n * The base href is the URL prefix that should be preserved when generating\n * and recognizing URLs.\n *\n * \\@usageNotes\n *\n * The following example shows how to use this token to configure the root app injector\n * with a base href value, so that the DI framework can supply the dependency anywhere in the app.\n *\n * ```typescript\n * import {Component, NgModule} from '\\@angular/core';\n * import {APP_BASE_HREF} from '\\@angular/common';\n *\n * \\@NgModule({\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BASE_HREF = new InjectionToken('appBaseHref');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * A service that applications can use to interact with a browser's URL.\n *\n * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n *\n * \\@usageNotes\n *\n * It's better to use {\\@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n *\n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n *\n * ### Example\n *\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass Location {\n    /**\n     * @param {?} platformStrategy\n     */\n    constructor(platformStrategy) {\n        /**\n         * \\@internal\n         */\n        this._subject = new EventEmitter();\n        this._platformStrategy = platformStrategy;\n        /** @type {?} */\n        const browserBaseHref = this._platformStrategy.getBaseHref();\n        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n        this._platformStrategy.onPopState((ev) => {\n            this._subject.emit({\n                'url': this.path(true),\n                'pop': true,\n                'state': ev.state,\n                'type': ev.type,\n            });\n        });\n    }\n    /**\n     * Returns the normalized URL path.\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is\n    // removed.\n    path(includeHash = false) {\n        return this.normalize(this._platformStrategy.path(includeHash));\n    }\n    /**\n     * Normalizes the given path and compares to the current normalized path.\n     * @param {?} path\n     * @param {?=} query\n     * @return {?}\n     */\n    isCurrentPathEqualTo(path, query = '') {\n        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n    }\n    /**\n     * Given a string representing a URL, returns the normalized URL path without leading or\n     * trailing slashes.\n     * @param {?} url\n     * @return {?}\n     */\n    normalize(url) {\n        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n    }\n    /**\n     * Given a string representing a URL, returns the platform-specific external URL path.\n     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n     * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n     * @param {?} url\n     * @return {?}\n     */\n    prepareExternalUrl(url) {\n        if (url && url[0] !== '/') {\n            url = '/' + url;\n        }\n        return this._platformStrategy.prepareExternalUrl(url);\n    }\n    // TODO: rename this method to pushState\n    /**\n     * Changes the browsers URL to the normalized version of the given URL, and pushes a\n     * new item onto the platform's history.\n     * @param {?} path\n     * @param {?=} query\n     * @param {?=} state\n     * @return {?}\n     */\n    go(path, query = '', state = null) {\n        this._platformStrategy.pushState(state, '', path, query);\n    }\n    /**\n     * Changes the browsers URL to the normalized version of the given URL, and replaces\n     * the top item on the platform's history stack.\n     * @param {?} path\n     * @param {?=} query\n     * @param {?=} state\n     * @return {?}\n     */\n    replaceState(path, query = '', state = null) {\n        this._platformStrategy.replaceState(state, '', path, query);\n    }\n    /**\n     * Navigates forward in the platform's history.\n     * @return {?}\n     */\n    forward() { this._platformStrategy.forward(); }\n    /**\n     * Navigates back in the platform's history.\n     * @return {?}\n     */\n    back() { this._platformStrategy.back(); }\n    /**\n     * Subscribe to the platform's `popState` events.\n     * @param {?} onNext\n     * @param {?=} onThrow\n     * @param {?=} onReturn\n     * @return {?}\n     */\n    subscribe(onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    }\n    /**\n     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n     * is.\n     * @param {?} params\n     * @return {?}\n     */\n    static normalizeQueryParams(params) {\n        return params && params[0] !== '?' ? '?' + params : params;\n    }\n    /**\n     * Given 2 parts of a url, join them with a slash if needed.\n     * @param {?} start\n     * @param {?} end\n     * @return {?}\n     */\n    static joinWithSlash(start, end) {\n        if (start.length == 0) {\n            return end;\n        }\n        if (end.length == 0) {\n            return start;\n        }\n        /** @type {?} */\n        let slashes = 0;\n        if (start.endsWith('/')) {\n            slashes++;\n        }\n        if (end.startsWith('/')) {\n            slashes++;\n        }\n        if (slashes == 2) {\n            return start + end.substring(1);\n        }\n        if (slashes == 1) {\n            return start + end;\n        }\n        return start + '/' + end;\n    }\n    /**\n     * If url has a trailing slash, remove it, otherwise return url as is. This\n     * method looks for the first occurrence of either #, ?, or the end of the\n     * line as `/` characters after any of these should not be replaced.\n     * @param {?} url\n     * @return {?}\n     */\n    static stripTrailingSlash(url) {\n        /** @type {?} */\n        const match = url.match(/#|\\?|$/);\n        /** @type {?} */\n        const pathEndIdx = match && match.index || url.length;\n        /** @type {?} */\n        const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\n        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\n    }\n}\nLocation.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nLocation.ctorParameters = () => [\n    { type: LocationStrategy }\n];\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref, url) {\n    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url) {\n    return url.replace(/\\/index.html$/, '');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A {\\@link LocationStrategy} used to configure the {\\@link Location} service to\n * represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n *\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass HashLocationStrategy extends LocationStrategy {\n    /**\n     * @param {?} _platformLocation\n     * @param {?=} _baseHref\n     */\n    constructor(_platformLocation, _baseHref) {\n        super();\n        this._platformLocation = _platformLocation;\n        this._baseHref = '';\n        if (_baseHref != null) {\n            this._baseHref = _baseHref;\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHref() { return this._baseHref; }\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    path(includeHash = false) {\n        // the hash value is always prefixed with a `#`\n        // and if it is empty then it will stay empty\n        /** @type {?} */\n        let path = this._platformLocation.hash;\n        if (path == null)\n            path = '#';\n        return path.length > 0 ? path.substring(1) : path;\n    }\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    prepareExternalUrl(internal) {\n        /** @type {?} */\n        const url = Location.joinWithSlash(this._baseHref, internal);\n        return url.length > 0 ? ('#' + url) : url;\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} path\n     * @param {?} queryParams\n     * @return {?}\n     */\n    pushState(state, title, path, queryParams) {\n        /** @type {?} */\n        let url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.pushState(state, title, url);\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} path\n     * @param {?} queryParams\n     * @return {?}\n     */\n    replaceState(state, title, path, queryParams) {\n        /** @type {?} */\n        let url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n        if (url.length == 0) {\n            url = this._platformLocation.pathname;\n        }\n        this._platformLocation.replaceState(state, title, url);\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._platformLocation.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._platformLocation.back(); }\n}\nHashLocationStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHashLocationStrategy.ctorParameters = () => [\n    { type: PlatformLocation },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A {\\@link LocationStrategy} used to configure the {\\@link Location} service to\n * represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n *\n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n *\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n *\n * \\@publicApi\n */\nclass PathLocationStrategy extends LocationStrategy {\n    /**\n     * @param {?} _platformLocation\n     * @param {?=} href\n     */\n    constructor(_platformLocation, href) {\n        super();\n        this._platformLocation = _platformLocation;\n        if (href == null) {\n            href = this._platformLocation.getBaseHrefFromDOM();\n        }\n        if (href == null) {\n            throw new Error(`No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n        }\n        this._baseHref = href;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        this._platformLocation.onPopState(fn);\n        this._platformLocation.onHashChange(fn);\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHref() { return this._baseHref; }\n    /**\n     * @param {?} internal\n     * @return {?}\n     */\n    prepareExternalUrl(internal) {\n        return Location.joinWithSlash(this._baseHref, internal);\n    }\n    /**\n     * @param {?=} includeHash\n     * @return {?}\n     */\n    path(includeHash = false) {\n        /** @type {?} */\n        const pathname = this._platformLocation.pathname +\n            Location.normalizeQueryParams(this._platformLocation.search);\n        /** @type {?} */\n        const hash = this._platformLocation.hash;\n        return hash && includeHash ? `${pathname}${hash}` : pathname;\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    pushState(state, title, url, queryParams) {\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.pushState(state, title, externalUrl);\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @param {?} queryParams\n     * @return {?}\n     */\n    replaceState(state, title, url, queryParams) {\n        /** @type {?} */\n        const externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n        this._platformLocation.replaceState(state, title, externalUrl);\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._platformLocation.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._platformLocation.back(); }\n}\nPathLocationStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nPathLocationStrategy.ctorParameters = () => [\n    { type: PlatformLocation },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n/** @type {?} */\nconst u = undefined;\n/**\n * @param {?} n\n * @return {?}\n */\nfunction plural(n) {\n    /** @type {?} */\n    let i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    let v = n.toString().replace(/^[^.]*\\.?/, '').length;\n    if (i === 1 && v === 0)\n        return 1;\n    return 5;\n}\nvar localeEn = [\n    'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n    [\n        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n    ],\n    u,\n    [\n        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        [\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n            'October', 'November', 'December'\n        ]\n    ],\n    u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n    ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\n    ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst LOCALE_DATA = {};\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * \\@publicApi\n * @param {?} data\n * @param {?=} localeId\n * @param {?=} extraData\n * @return {?}\n */\n// The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\nfunction registerLocaleData(data, localeId, extraData) {\n    if (typeof localeId !== 'string') {\n        extraData = localeId;\n        localeId = data[0 /* LocaleId */];\n    }\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\n    LOCALE_DATA[localeId] = data;\n    if (extraData) {\n        LOCALE_DATA[localeId][19 /* ExtraData */] = extraData;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n/**\n * \\@internal\n * @type {?}\n */\nconst CURRENCIES_EN = {\n    'ADP': [undefined, undefined, 0],\n    'AFN': [undefined, undefined, 0],\n    'ALL': [undefined, undefined, 0],\n    'AMD': [undefined, undefined, 0],\n    'AOA': [undefined, 'Kz'],\n    'ARS': [undefined, '$'],\n    'AUD': ['A$', '$'],\n    'BAM': [undefined, 'KM'],\n    'BBD': [undefined, '$'],\n    'BDT': [undefined, '৳'],\n    'BHD': [undefined, undefined, 3],\n    'BIF': [undefined, undefined, 0],\n    'BMD': [undefined, '$'],\n    'BND': [undefined, '$'],\n    'BOB': [undefined, 'Bs'],\n    'BRL': ['R$'],\n    'BSD': [undefined, '$'],\n    'BWP': [undefined, 'P'],\n    'BYN': [undefined, 'р.', 2],\n    'BYR': [undefined, undefined, 0],\n    'BZD': [undefined, '$'],\n    'CAD': ['CA$', '$', 2],\n    'CHF': [undefined, undefined, 2],\n    'CLF': [undefined, undefined, 4],\n    'CLP': [undefined, '$', 0],\n    'CNY': ['CN¥', '¥'],\n    'COP': [undefined, '$', 0],\n    'CRC': [undefined, '₡', 2],\n    'CUC': [undefined, '$'],\n    'CUP': [undefined, '$'],\n    'CZK': [undefined, 'Kč', 2],\n    'DJF': [undefined, undefined, 0],\n    'DKK': [undefined, 'kr', 2],\n    'DOP': [undefined, '$'],\n    'EGP': [undefined, 'E£'],\n    'ESP': [undefined, '₧', 0],\n    'EUR': ['€'],\n    'FJD': [undefined, '$'],\n    'FKP': [undefined, '£'],\n    'GBP': ['£'],\n    'GEL': [undefined, '₾'],\n    'GIP': [undefined, '£'],\n    'GNF': [undefined, 'FG', 0],\n    'GTQ': [undefined, 'Q'],\n    'GYD': [undefined, '$', 0],\n    'HKD': ['HK$', '$'],\n    'HNL': [undefined, 'L'],\n    'HRK': [undefined, 'kn'],\n    'HUF': [undefined, 'Ft', 2],\n    'IDR': [undefined, 'Rp', 0],\n    'ILS': ['₪'],\n    'INR': ['₹'],\n    'IQD': [undefined, undefined, 0],\n    'IRR': [undefined, undefined, 0],\n    'ISK': [undefined, 'kr', 0],\n    'ITL': [undefined, undefined, 0],\n    'JMD': [undefined, '$'],\n    'JOD': [undefined, undefined, 3],\n    'JPY': ['¥', undefined, 0],\n    'KHR': [undefined, '៛'],\n    'KMF': [undefined, 'CF', 0],\n    'KPW': [undefined, '₩', 0],\n    'KRW': ['₩', undefined, 0],\n    'KWD': [undefined, undefined, 3],\n    'KYD': [undefined, '$'],\n    'KZT': [undefined, '₸'],\n    'LAK': [undefined, '₭', 0],\n    'LBP': [undefined, 'L£', 0],\n    'LKR': [undefined, 'Rs'],\n    'LRD': [undefined, '$'],\n    'LTL': [undefined, 'Lt'],\n    'LUF': [undefined, undefined, 0],\n    'LVL': [undefined, 'Ls'],\n    'LYD': [undefined, undefined, 3],\n    'MGA': [undefined, 'Ar', 0],\n    'MGF': [undefined, undefined, 0],\n    'MMK': [undefined, 'K', 0],\n    'MNT': [undefined, '₮', 0],\n    'MRO': [undefined, undefined, 0],\n    'MUR': [undefined, 'Rs', 0],\n    'MXN': ['MX$', '$'],\n    'MYR': [undefined, 'RM'],\n    'NAD': [undefined, '$'],\n    'NGN': [undefined, '₦'],\n    'NIO': [undefined, 'C$'],\n    'NOK': [undefined, 'kr', 2],\n    'NPR': [undefined, 'Rs'],\n    'NZD': ['NZ$', '$'],\n    'OMR': [undefined, undefined, 3],\n    'PHP': [undefined, '₱'],\n    'PKR': [undefined, 'Rs', 0],\n    'PLN': [undefined, 'zł'],\n    'PYG': [undefined, '₲', 0],\n    'RON': [undefined, 'lei'],\n    'RSD': [undefined, undefined, 0],\n    'RUB': [undefined, '₽'],\n    'RUR': [undefined, 'р.'],\n    'RWF': [undefined, 'RF', 0],\n    'SBD': [undefined, '$'],\n    'SEK': [undefined, 'kr', 2],\n    'SGD': [undefined, '$'],\n    'SHP': [undefined, '£'],\n    'SLL': [undefined, undefined, 0],\n    'SOS': [undefined, undefined, 0],\n    'SRD': [undefined, '$'],\n    'SSP': [undefined, '£'],\n    'STD': [undefined, undefined, 0],\n    'STN': [undefined, 'Db'],\n    'SYP': [undefined, '£', 0],\n    'THB': [undefined, '฿'],\n    'TMM': [undefined, undefined, 0],\n    'TND': [undefined, undefined, 3],\n    'TOP': [undefined, 'T$'],\n    'TRL': [undefined, undefined, 0],\n    'TRY': [undefined, '₺'],\n    'TTD': [undefined, '$'],\n    'TWD': ['NT$', '$', 2],\n    'TZS': [undefined, undefined, 0],\n    'UAH': [undefined, '₴'],\n    'UGX': [undefined, undefined, 0],\n    'USD': ['$'],\n    'UYI': [undefined, undefined, 0],\n    'UYU': [undefined, '$'],\n    'UZS': [undefined, undefined, 0],\n    'VEF': [undefined, 'Bs'],\n    'VND': ['₫', undefined, 0],\n    'VUV': [undefined, undefined, 0],\n    'XAF': ['FCFA', undefined, 0],\n    'XCD': ['EC$', '$'],\n    'XOF': ['CFA', undefined, 0],\n    'XPF': ['CFPF', undefined, 0],\n    'YER': [undefined, undefined, 0],\n    'ZAR': [undefined, 'R'],\n    'ZMK': [undefined, undefined, 0],\n    'ZMW': [undefined, 'ZK'],\n    'ZWD': [undefined, undefined, 0]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst NumberFormatStyle = {\n    Decimal: 0,\n    Percent: 1,\n    Currency: 2,\n    Scientific: 3,\n};\nNumberFormatStyle[NumberFormatStyle.Decimal] = 'Decimal';\nNumberFormatStyle[NumberFormatStyle.Percent] = 'Percent';\nNumberFormatStyle[NumberFormatStyle.Currency] = 'Currency';\nNumberFormatStyle[NumberFormatStyle.Scientific] = 'Scientific';\n/** @enum {number} */\nconst Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/** @enum {number} */\nconst FormStyle = {\n    Format: 0,\n    Standalone: 1,\n};\nFormStyle[FormStyle.Format] = 'Format';\nFormStyle[FormStyle.Standalone] = 'Standalone';\n/** @enum {number} */\nconst TranslationWidth = {\n    Narrow: 0,\n    Abbreviated: 1,\n    Wide: 2,\n    Short: 3,\n};\nTranslationWidth[TranslationWidth.Narrow] = 'Narrow';\nTranslationWidth[TranslationWidth.Abbreviated] = 'Abbreviated';\nTranslationWidth[TranslationWidth.Wide] = 'Wide';\nTranslationWidth[TranslationWidth.Short] = 'Short';\n/** @enum {number} */\nconst FormatWidth = {\n    Short: 0,\n    Medium: 1,\n    Long: 2,\n    Full: 3,\n};\nFormatWidth[FormatWidth.Short] = 'Short';\nFormatWidth[FormatWidth.Medium] = 'Medium';\nFormatWidth[FormatWidth.Long] = 'Long';\nFormatWidth[FormatWidth.Full] = 'Full';\n/** @enum {number} */\nconst NumberSymbol = {\n    Decimal: 0,\n    Group: 1,\n    List: 2,\n    PercentSign: 3,\n    PlusSign: 4,\n    MinusSign: 5,\n    Exponential: 6,\n    SuperscriptingExponent: 7,\n    PerMille: 8,\n    Infinity: 9,\n    NaN: 10,\n    TimeSeparator: 11,\n    CurrencyDecimal: 12,\n    CurrencyGroup: 13,\n};\nNumberSymbol[NumberSymbol.Decimal] = 'Decimal';\nNumberSymbol[NumberSymbol.Group] = 'Group';\nNumberSymbol[NumberSymbol.List] = 'List';\nNumberSymbol[NumberSymbol.PercentSign] = 'PercentSign';\nNumberSymbol[NumberSymbol.PlusSign] = 'PlusSign';\nNumberSymbol[NumberSymbol.MinusSign] = 'MinusSign';\nNumberSymbol[NumberSymbol.Exponential] = 'Exponential';\nNumberSymbol[NumberSymbol.SuperscriptingExponent] = 'SuperscriptingExponent';\nNumberSymbol[NumberSymbol.PerMille] = 'PerMille';\nNumberSymbol[NumberSymbol.Infinity] = 'Infinity';\nNumberSymbol[NumberSymbol.NaN] = 'NaN';\nNumberSymbol[NumberSymbol.TimeSeparator] = 'TimeSeparator';\nNumberSymbol[NumberSymbol.CurrencyDecimal] = 'CurrencyDecimal';\nNumberSymbol[NumberSymbol.CurrencyGroup] = 'CurrencyGroup';\n/** @enum {number} */\nconst WeekDay = {\n    Sunday: 0,\n    Monday: 1,\n    Tuesday: 2,\n    Wednesday: 3,\n    Thursday: 4,\n    Friday: 5,\n    Saturday: 6,\n};\nWeekDay[WeekDay.Sunday] = 'Sunday';\nWeekDay[WeekDay.Monday] = 'Monday';\nWeekDay[WeekDay.Tuesday] = 'Tuesday';\nWeekDay[WeekDay.Wednesday] = 'Wednesday';\nWeekDay[WeekDay.Thursday] = 'Thursday';\nWeekDay[WeekDay.Friday] = 'Friday';\nWeekDay[WeekDay.Saturday] = 'Saturday';\n/**\n * The locale id for the chosen locale (e.g `en-GB`).\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction getLocaleId(locale) {\n    return findLocaleData(locale)[0 /* LocaleId */];\n}\n/**\n * Periods of the day (e.g. `[AM, PM]` for en-US).\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleDayPeriods(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const amPmData = (/** @type {?} */ ([data[1 /* DayPeriodsFormat */], data[2 /* DayPeriodsStandalone */]]));\n    /** @type {?} */\n    const amPm = getLastDefinedValue(amPmData, formStyle);\n    return getLastDefinedValue(amPm, width);\n}\n/**\n * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleDayNames(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const daysData = (/** @type {?} */ ([data[3 /* DaysFormat */], data[4 /* DaysStandalone */]]));\n    /** @type {?} */\n    const days = getLastDefinedValue(daysData, formStyle);\n    return getLastDefinedValue(days, width);\n}\n/**\n * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleMonthNames(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const monthsData = (/** @type {?} */ ([data[5 /* MonthsFormat */], data[6 /* MonthsStandalone */]]));\n    /** @type {?} */\n    const months = getLastDefinedValue(monthsData, formStyle);\n    return getLastDefinedValue(months, width);\n}\n/**\n * Eras for the Gregorian calendar (e.g. AD/BC).\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleEraNames(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const erasData = (/** @type {?} */ (data[7 /* Eras */]));\n    return getLastDefinedValue(erasData, width);\n}\n/**\n * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).\n * For example in french the value would be 1 because the first day of the week is Monday.\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction getLocaleFirstDayOfWeek(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[8 /* FirstDayOfWeek */];\n}\n/**\n * Range of days in the week that represent the week-end for this locale, based on english days\n * (Sunday = 0, Monday = 1, ...).\n * For example in english the value would be [6,0] for Saturday to Sunday.\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction getLocaleWeekEndRange(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[9 /* WeekendRange */];\n}\n/**\n * Date format that depends on the locale.\n *\n * There are four basic date formats:\n * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).\n *\n *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like\n *  \"Tuesday, September 14, 1999\".\n *\n * - `long` should contain year, long-month, day.\n *\n *  For example, `MMMM d, y`, corresponding to a date like \"September 14, 1999\".\n *\n * - `medium` should contain year, abbreviated-month (MMM), day.\n *\n *  For example, `MMM d, y`, corresponding to a date like \"Sep 14, 1999\".\n *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,\n *  `y/MM/dd`, corresponding to a date like \"1999/09/14\".\n *\n * - `short` should contain year, numeric-month (MM/M), and day.\n *\n *  For example, `M/d/yy`, corresponding to a date like \"9/14/99\".\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleDateFormat(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return getLastDefinedValue(data[10 /* DateFormat */], width);\n}\n/**\n * Time format that depends on the locale.\n *\n * The standard formats include four basic time formats:\n * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).\n * - `long` should contain hour, minute, second, and zone (z)\n * - `medium` should contain hour, minute, second.\n * - `short` should contain hour, minute.\n *\n * Note: The patterns depend on whether the main country using your language uses 12-hour time or\n * not:\n * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running\n * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle\n * running 0 through 11 (midnight plus 1 minute is 0:01).\n * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0\n * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running\n * 1 through 24 (midnight plus 1 minute is 24:01).\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleTimeFormat(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return getLastDefinedValue(data[11 /* TimeFormat */], width);\n}\n/**\n * Date-time format that depends on the locale.\n *\n * The date-time pattern shows how to combine separate patterns for date (represented by {1})\n * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.\n * What you want to pay attention to are:\n * - possibly removing a space for languages that don't use it, such as many East Asian languages\n * - possibly adding a comma, other punctuation, or a combining word\n *\n * For example:\n * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses\n *  `{1}{0}`.\n * - An English formatted date-time using the combining pattern `{1}, {0}` could be\n *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time\n *  portion.\n *\n * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use\n * is normally based on the date style. For example, if the date has a full month and weekday\n * name, the full combining pattern will be used to combine that with a time. If the date has\n * numeric month, the short version of the combining pattern will be used to combine that with a\n * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short\n * styles.\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleDateTimeFormat(locale, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const dateTimeFormatData = (/** @type {?} */ (data[12 /* DateTimeFormat */]));\n    return getLastDefinedValue(dateTimeFormatData, width);\n}\n/**\n * Number symbol that can be used to replace placeholders in number formats.\n * See {\\@link NumberSymbol} for more information.\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} symbol\n * @return {?}\n */\nfunction getLocaleNumberSymbol(locale, symbol) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    /** @type {?} */\n    const res = data[13 /* NumberSymbols */][symbol];\n    if (typeof res === 'undefined') {\n        if (symbol === NumberSymbol.CurrencyDecimal) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Decimal];\n        }\n        else if (symbol === NumberSymbol.CurrencyGroup) {\n            return data[13 /* NumberSymbols */][NumberSymbol.Group];\n        }\n    }\n    return res;\n}\n/**\n * Number format that depends on the locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,67\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;\n * they stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders; for example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the Number Symbols for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |\n * | % | This marks a percent format. The % symbol may change position, but must be retained. |\n * | E | This marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * You can find more information\n * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} type\n * @return {?}\n */\nfunction getLocaleNumberFormat(locale, type) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[14 /* NumberFormats */][type];\n}\n/**\n * The symbol used to represent the currency for the main country using this locale (e.g. $ for\n * the locale en-US).\n * The symbol will be `null` if the main country cannot be determined.\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction getLocaleCurrencySymbol(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[15 /* CurrencySymbol */] || null;\n}\n/**\n * The name of the currency for the main country using this locale (e.g. 'US Dollar' for the locale\n * en-US).\n * The name will be `null` if the main country cannot be determined.\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction getLocaleCurrencyName(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[16 /* CurrencyName */] || null;\n}\n/**\n * Returns the currency values for the locale\n * @param {?} locale\n * @return {?}\n */\nfunction getLocaleCurrencies(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[17 /* Currencies */];\n}\n/**\n * The locale plural function used by ICU expressions to determine the plural case to use.\n * See {\\@link NgPlural} for more information.\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction getLocalePluralCase(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    return data[18 /* PluralCase */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction checkFullData(data) {\n    if (!data[19 /* ExtraData */]) {\n        throw new Error(`Missing extra locale data for the locale \"${data[0 /* LocaleId */]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n    }\n}\n/**\n * Rules used to determine which day period to use (See `dayPeriods` below).\n * The rules can either be an array or a single value. If it's an array, consider it as \"from\"\n * and \"to\". If it's a single value then it means that the period is only valid at this exact\n * value.\n * There is always the same number of rules as the number of day periods, which means that the\n * first rule is applied to the first day period and so on.\n * You should fallback to AM/PM when there are no rules available.\n *\n * Note: this is only available if you load the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale\n * data.\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction getLocaleExtraDayPeriodRules(locale) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    checkFullData(data);\n    /** @type {?} */\n    const rules = data[19 /* ExtraData */][2 /* ExtraDayPeriodsRules */] || [];\n    return rules.map((rule) => {\n        if (typeof rule === 'string') {\n            return extractTime(rule);\n        }\n        return [extractTime(rule[0]), extractTime(rule[1])];\n    });\n}\n/**\n * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,\n * noon, afternoon, midnight, ...).\n * You should use the function {\\@link getLocaleExtraDayPeriodRules} to determine which period to\n * use.\n * You should fallback to AM/PM when there are no day periods available.\n *\n * Note: this is only available if you load the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale\n * data.\n *\n * \\@publicApi\n * @param {?} locale\n * @param {?} formStyle\n * @param {?} width\n * @return {?}\n */\nfunction getLocaleExtraDayPeriods(locale, formStyle, width) {\n    /** @type {?} */\n    const data = findLocaleData(locale);\n    checkFullData(data);\n    /** @type {?} */\n    const dayPeriodsData = (/** @type {?} */ ([\n        data[19 /* ExtraData */][0 /* ExtraDayPeriodFormats */],\n        data[19 /* ExtraData */][1 /* ExtraDayPeriodStandalone */]\n    ]));\n    /** @type {?} */\n    const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n    return getLastDefinedValue(dayPeriods, width) || [];\n}\n/**\n * Returns the first value that is defined in an array, going backwards.\n *\n * To avoid repeating the same data (e.g. when \"format\" and \"standalone\" are the same) we only\n * add the first one to the locale data arrays, the other ones are only defined when different.\n * We use this function to retrieve the first defined value.\n *\n * \\@publicApi\n * @template T\n * @param {?} data\n * @param {?} index\n * @return {?}\n */\nfunction getLastDefinedValue(data, index) {\n    for (let i = index; i > -1; i--) {\n        if (typeof data[i] !== 'undefined') {\n            return data[i];\n        }\n    }\n    throw new Error('Locale data API: locale data undefined');\n}\n/**\n * Extract the hours and minutes from a string like \"15:45\"\n * @param {?} time\n * @return {?}\n */\nfunction extractTime(time) {\n    const [h, m] = time.split(':');\n    return { hours: +h, minutes: +m };\n}\n/**\n * Finds the locale data for a locale id\n *\n * \\@publicApi\n * @param {?} locale\n * @return {?}\n */\nfunction findLocaleData(locale) {\n    /** @type {?} */\n    const normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n    /** @type {?} */\n    let match = LOCALE_DATA[normalizedLocale];\n    if (match) {\n        return match;\n    }\n    // let's try to find a parent locale\n    /** @type {?} */\n    const parentLocale = normalizedLocale.split('-')[0];\n    match = LOCALE_DATA[parentLocale];\n    if (match) {\n        return match;\n    }\n    if (parentLocale === 'en') {\n        return localeEn;\n    }\n    throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Returns the currency symbol for a given currency code, or the code if no symbol available\n * (e.g.: format narrow = $, format wide = US$, code = USD)\n * If no locale is provided, it uses the locale \"en\" by default\n *\n * \\@publicApi\n * @param {?} code\n * @param {?} format\n * @param {?=} locale\n * @return {?}\n */\nfunction getCurrencySymbol(code, format, locale = 'en') {\n    /** @type {?} */\n    const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n    /** @type {?} */\n    const symbolNarrow = currency[1 /* SymbolNarrow */];\n    if (format === 'narrow' && typeof symbolNarrow === 'string') {\n        return symbolNarrow;\n    }\n    return currency[0 /* Symbol */] || code;\n}\n// Most currencies have cents, that's why the default is 2\n/** @type {?} */\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n/**\n * Returns the number of decimal digits for the given currency.\n * Its value depends upon the presence of cents in that particular currency.\n *\n * \\@publicApi\n * @param {?} code\n * @return {?}\n */\nfunction getNumberOfCurrencyDigits(code) {\n    /** @type {?} */\n    let digits;\n    /** @type {?} */\n    const currency = CURRENCIES_EN[code];\n    if (currency) {\n        digits = currency[2 /* NbOfDigits */];\n    }\n    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ISO8601_DATE_REGEX = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\n/** @type {?} */\nconst NAMED_FORMATS = {};\n/** @type {?} */\nconst DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n/** @enum {number} */\nconst ZoneWidth = {\n    Short: 0,\n    ShortGMT: 1,\n    Long: 2,\n    Extended: 3,\n};\nZoneWidth[ZoneWidth.Short] = 'Short';\nZoneWidth[ZoneWidth.ShortGMT] = 'ShortGMT';\nZoneWidth[ZoneWidth.Long] = 'Long';\nZoneWidth[ZoneWidth.Extended] = 'Extended';\n/** @enum {number} */\nconst DateType = {\n    FullYear: 0,\n    Month: 1,\n    Date: 2,\n    Hours: 3,\n    Minutes: 4,\n    Seconds: 5,\n    FractionalSeconds: 6,\n    Day: 7,\n};\nDateType[DateType.FullYear] = 'FullYear';\nDateType[DateType.Month] = 'Month';\nDateType[DateType.Date] = 'Date';\nDateType[DateType.Hours] = 'Hours';\nDateType[DateType.Minutes] = 'Minutes';\nDateType[DateType.Seconds] = 'Seconds';\nDateType[DateType.FractionalSeconds] = 'FractionalSeconds';\nDateType[DateType.Day] = 'Day';\n/** @enum {number} */\nconst TranslationType = {\n    DayPeriods: 0,\n    Days: 1,\n    Months: 2,\n    Eras: 3,\n};\nTranslationType[TranslationType.DayPeriods] = 'DayPeriods';\nTranslationType[TranslationType.Days] = 'Days';\nTranslationType[TranslationType.Months] = 'Months';\nTranslationType[TranslationType.Eras] = 'Eras';\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `value` is a Date, a number (milliseconds since UTC epoch) or an ISO string\n *   (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. See {\\@link DatePipe} for more\n *   details.\n * - `locale` is a `string` defining the locale to use.\n * - `timezone` to be used for formatting. It understands UTC/GMT and the continental US time zone\n *   abbreviations, but for general use, use a time zone offset (e.g. `'+0430'`).\n *   If not specified, host system settings are used.\n *\n * See {\\@link DatePipe} for more details.\n *\n * \\@publicApi\n * @param {?} value\n * @param {?} format\n * @param {?} locale\n * @param {?=} timezone\n * @return {?}\n */\nfunction formatDate(value, format, locale, timezone) {\n    /** @type {?} */\n    let date = toDate(value);\n    /** @type {?} */\n    const namedFormat = getNamedFormat(locale, format);\n    format = namedFormat || format;\n    /** @type {?} */\n    let parts = [];\n    /** @type {?} */\n    let match;\n    while (format) {\n        match = DATE_FORMATS_SPLIT.exec(format);\n        if (match) {\n            parts = parts.concat(match.slice(1));\n            /** @type {?} */\n            const part = parts.pop();\n            if (!part) {\n                break;\n            }\n            format = part;\n        }\n        else {\n            parts.push(format);\n            break;\n        }\n    }\n    /** @type {?} */\n    let dateTimezoneOffset = date.getTimezoneOffset();\n    if (timezone) {\n        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n        date = convertTimezoneToLocal(date, timezone, true);\n    }\n    /** @type {?} */\n    let text = '';\n    parts.forEach(value => {\n        /** @type {?} */\n        const dateFormatter = getDateFormatter(value);\n        text += dateFormatter ?\n            dateFormatter(date, locale, dateTimezoneOffset) :\n            value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n    });\n    return text;\n}\n/**\n * @param {?} locale\n * @param {?} format\n * @return {?}\n */\nfunction getNamedFormat(locale, format) {\n    /** @type {?} */\n    const localeId = getLocaleId(locale);\n    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n    if (NAMED_FORMATS[localeId][format]) {\n        return NAMED_FORMATS[localeId][format];\n    }\n    /** @type {?} */\n    let formatValue = '';\n    switch (format) {\n        case 'shortDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullDate':\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n            break;\n        case 'shortTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n            break;\n        case 'mediumTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n            break;\n        case 'longTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n            break;\n        case 'fullTime':\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n            break;\n        case 'short':\n            /** @type {?} */\n            const shortTime = getNamedFormat(locale, 'shortTime');\n            /** @type {?} */\n            const shortDate = getNamedFormat(locale, 'shortDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n            break;\n        case 'medium':\n            /** @type {?} */\n            const mediumTime = getNamedFormat(locale, 'mediumTime');\n            /** @type {?} */\n            const mediumDate = getNamedFormat(locale, 'mediumDate');\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n            break;\n        case 'long':\n            /** @type {?} */\n            const longTime = getNamedFormat(locale, 'longTime');\n            /** @type {?} */\n            const longDate = getNamedFormat(locale, 'longDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n            break;\n        case 'full':\n            /** @type {?} */\n            const fullTime = getNamedFormat(locale, 'fullTime');\n            /** @type {?} */\n            const fullDate = getNamedFormat(locale, 'fullDate');\n            formatValue =\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n            break;\n    }\n    if (formatValue) {\n        NAMED_FORMATS[localeId][format] = formatValue;\n    }\n    return formatValue;\n}\n/**\n * @param {?} str\n * @param {?} opt_values\n * @return {?}\n */\nfunction formatDateTime(str, opt_values) {\n    if (opt_values) {\n        str = str.replace(/\\{([^}]+)}/g, function (match, key) {\n            return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n        });\n    }\n    return str;\n}\n/**\n * @param {?} num\n * @param {?} digits\n * @param {?=} minusSign\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction padNumber(num, digits, minusSign = '-', trim, negWrap) {\n    /** @type {?} */\n    let neg = '';\n    if (num < 0 || (negWrap && num <= 0)) {\n        if (negWrap) {\n            num = -num + 1;\n        }\n        else {\n            num = -num;\n            neg = minusSign;\n        }\n    }\n    /** @type {?} */\n    let strNum = String(num);\n    while (strNum.length < digits) {\n        strNum = '0' + strNum;\n    }\n    if (trim) {\n        strNum = strNum.substr(strNum.length - digits);\n    }\n    return neg + strNum;\n}\n/**\n * @param {?} milliseconds\n * @param {?} digits\n * @return {?}\n */\nfunction formatFractionalSeconds(milliseconds, digits) {\n    /** @type {?} */\n    const strMs = padNumber(milliseconds, 3);\n    return strMs.substr(0, digits);\n}\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n * @param {?} name\n * @param {?} size\n * @param {?=} offset\n * @param {?=} trim\n * @param {?=} negWrap\n * @return {?}\n */\nfunction dateGetter(name, size, offset = 0, trim = false, negWrap = false) {\n    return function (date, locale) {\n        /** @type {?} */\n        let part = getDatePart(name, date);\n        if (offset > 0 || part > -offset) {\n            part += offset;\n        }\n        if (name === DateType.Hours) {\n            if (part === 0 && offset === -12) {\n                part = 12;\n            }\n        }\n        else if (name === DateType.FractionalSeconds) {\n            return formatFractionalSeconds(part, size);\n        }\n        /** @type {?} */\n        const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        return padNumber(part, size, localeMinus, trim, negWrap);\n    };\n}\n/**\n * @param {?} part\n * @param {?} date\n * @return {?}\n */\nfunction getDatePart(part, date) {\n    switch (part) {\n        case DateType.FullYear:\n            return date.getFullYear();\n        case DateType.Month:\n            return date.getMonth();\n        case DateType.Date:\n            return date.getDate();\n        case DateType.Hours:\n            return date.getHours();\n        case DateType.Minutes:\n            return date.getMinutes();\n        case DateType.Seconds:\n            return date.getSeconds();\n        case DateType.FractionalSeconds:\n            return date.getMilliseconds();\n        case DateType.Day:\n            return date.getDay();\n        default:\n            throw new Error(`Unknown DateType value \"${part}\".`);\n    }\n}\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n * @param {?} name\n * @param {?} width\n * @param {?=} form\n * @param {?=} extended\n * @return {?}\n */\nfunction dateStrGetter(name, width, form = FormStyle.Format, extended = false) {\n    return function (date, locale) {\n        return getDateTranslation(date, locale, name, width, form, extended);\n    };\n}\n/**\n * Returns the locale translation of a date for a given form, type and width\n * @param {?} date\n * @param {?} locale\n * @param {?} name\n * @param {?} width\n * @param {?} form\n * @param {?} extended\n * @return {?}\n */\nfunction getDateTranslation(date, locale, name, width, form, extended) {\n    switch (name) {\n        case TranslationType.Months:\n            return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n        case TranslationType.Days:\n            return getLocaleDayNames(locale, form, width)[date.getDay()];\n        case TranslationType.DayPeriods:\n            /** @type {?} */\n            const currentHours = date.getHours();\n            /** @type {?} */\n            const currentMinutes = date.getMinutes();\n            if (extended) {\n                /** @type {?} */\n                const rules = getLocaleExtraDayPeriodRules(locale);\n                /** @type {?} */\n                const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n                /** @type {?} */\n                let result;\n                rules.forEach((rule, index) => {\n                    if (Array.isArray(rule)) {\n                        // morning, afternoon, evening, night\n                        const { hours: hoursFrom, minutes: minutesFrom } = rule[0];\n                        const { hours: hoursTo, minutes: minutesTo } = rule[1];\n                        if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\n                            (currentHours < hoursTo ||\n                                (currentHours === hoursTo && currentMinutes < minutesTo))) {\n                            result = dayPeriods[index];\n                        }\n                    }\n                    else { // noon or midnight\n                        // noon or midnight\n                        const { hours, minutes } = rule;\n                        if (hours === currentHours && minutes === currentMinutes) {\n                            result = dayPeriods[index];\n                        }\n                    }\n                });\n                if (result) {\n                    return result;\n                }\n            }\n            // if no rules for the day periods, we use am/pm by default\n            return getLocaleDayPeriods(locale, form, (/** @type {?} */ (width)))[currentHours < 12 ? 0 : 1];\n        case TranslationType.Eras:\n            return getLocaleEraNames(locale, (/** @type {?} */ (width)))[date.getFullYear() <= 0 ? 0 : 1];\n        default:\n            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n            // However Closure Compiler does not understand that and reports an error in typed mode.\n            // The `throw new Error` below works around the problem, and the unexpected: never variable\n            // makes sure tsc still checks this code is unreachable.\n            /** @type {?} */\n            const unexpected = name;\n            throw new Error(`unexpected translation type ${unexpected}`);\n    }\n}\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n * @param {?} width\n * @return {?}\n */\nfunction timeZoneGetter(width) {\n    return function (date, locale, offset) {\n        /** @type {?} */\n        const zone = -1 * offset;\n        /** @type {?} */\n        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n        /** @type {?} */\n        const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n        switch (width) {\n            case ZoneWidth.Short:\n                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.ShortGMT:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n            case ZoneWidth.Long:\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\n            case ZoneWidth.Extended:\n                if (offset === 0) {\n                    return 'Z';\n                }\n                else {\n                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n                        padNumber(Math.abs(zone % 60), 2, minusSign);\n                }\n            default:\n                throw new Error(`Unknown zone width \"${width}\"`);\n        }\n    };\n}\n/** @type {?} */\nconst JANUARY = 0;\n/** @type {?} */\nconst THURSDAY = 4;\n/**\n * @param {?} year\n * @return {?}\n */\nfunction getFirstThursdayOfYear(year) {\n    /** @type {?} */\n    const firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n/**\n * @param {?} datetime\n * @return {?}\n */\nfunction getThursdayThisWeek(datetime) {\n    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n/**\n * @param {?} size\n * @param {?=} monthBased\n * @return {?}\n */\nfunction weekGetter(size, monthBased = false) {\n    return function (date, locale) {\n        /** @type {?} */\n        let result;\n        if (monthBased) {\n            /** @type {?} */\n            const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n            /** @type {?} */\n            const today = date.getDate();\n            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n        }\n        else {\n            /** @type {?} */\n            const firstThurs = getFirstThursdayOfYear(date.getFullYear());\n            /** @type {?} */\n            const thisThurs = getThursdayThisWeek(date);\n            /** @type {?} */\n            const diff = thisThurs.getTime() - firstThurs.getTime();\n            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n        }\n        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    };\n}\n/** @type {?} */\nconst DATE_FORMATS = {};\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x\n/**\n * @param {?} format\n * @return {?}\n */\nfunction getDateFormatter(format) {\n    if (DATE_FORMATS[format]) {\n        return DATE_FORMATS[format];\n    }\n    /** @type {?} */\n    let formatter;\n    switch (format) {\n        // Era name (AD/BC)\n        case 'G':\n        case 'GG':\n        case 'GGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n            break;\n        case 'GGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n            break;\n        case 'GGGGG':\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n            break;\n        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n        case 'y':\n            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n            break;\n        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yy':\n            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n            break;\n        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n        case 'yyy':\n            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n            break;\n        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n        case 'yyyy':\n            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n            break;\n        // Month of the year (1-12), numeric\n        case 'M':\n        case 'L':\n            formatter = dateGetter(DateType.Month, 1, 1);\n            break;\n        case 'MM':\n        case 'LL':\n            formatter = dateGetter(DateType.Month, 2, 1);\n            break;\n        // Month of the year (January, ...), string, format\n        case 'MMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n            break;\n        case 'MMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n            break;\n        case 'MMMMM':\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n            break;\n        // Month of the year (January, ...), string, standalone\n        case 'LLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n            break;\n        case 'LLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n            break;\n        case 'LLLLL':\n            formatter =\n                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n            break;\n        // Week of the year (1, ... 52)\n        case 'w':\n            formatter = weekGetter(1);\n            break;\n        case 'ww':\n            formatter = weekGetter(2);\n            break;\n        // Week of the month (1, ...)\n        case 'W':\n            formatter = weekGetter(1, true);\n            break;\n        // Day of the month (1-31)\n        case 'd':\n            formatter = dateGetter(DateType.Date, 1);\n            break;\n        case 'dd':\n            formatter = dateGetter(DateType.Date, 2);\n            break;\n        // Day of the Week\n        case 'E':\n        case 'EE':\n        case 'EEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n            break;\n        case 'EEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n            break;\n        case 'EEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n            break;\n        case 'EEEEEE':\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n            break;\n        // Generic period of the day (am-pm)\n        case 'a':\n        case 'aa':\n        case 'aaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n            break;\n        case 'aaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n            break;\n        case 'aaaaa':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n            break;\n        // Extended period of the day (midnight, at night, ...), standalone\n        case 'b':\n        case 'bb':\n        case 'bbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n            break;\n        case 'bbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n            break;\n        case 'bbbbb':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n            break;\n        // Extended period of the day (midnight, night, ...), standalone\n        case 'B':\n        case 'BB':\n        case 'BBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n            break;\n        case 'BBBB':\n            formatter =\n                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n            break;\n        case 'BBBBB':\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n            break;\n        // Hour in AM/PM, (1-12)\n        case 'h':\n            formatter = dateGetter(DateType.Hours, 1, -12);\n            break;\n        case 'hh':\n            formatter = dateGetter(DateType.Hours, 2, -12);\n            break;\n        // Hour of the day (0-23)\n        case 'H':\n            formatter = dateGetter(DateType.Hours, 1);\n            break;\n        // Hour in day, padded (00-23)\n        case 'HH':\n            formatter = dateGetter(DateType.Hours, 2);\n            break;\n        // Minute of the hour (0-59)\n        case 'm':\n            formatter = dateGetter(DateType.Minutes, 1);\n            break;\n        case 'mm':\n            formatter = dateGetter(DateType.Minutes, 2);\n            break;\n        // Second of the minute (0-59)\n        case 's':\n            formatter = dateGetter(DateType.Seconds, 1);\n            break;\n        case 'ss':\n            formatter = dateGetter(DateType.Seconds, 2);\n            break;\n        // Fractional second\n        case 'S':\n            formatter = dateGetter(DateType.FractionalSeconds, 1);\n            break;\n        case 'SS':\n            formatter = dateGetter(DateType.FractionalSeconds, 2);\n            break;\n        case 'SSS':\n            formatter = dateGetter(DateType.FractionalSeconds, 3);\n            break;\n        // Timezone ISO8601 short format (-0430)\n        case 'Z':\n        case 'ZZ':\n        case 'ZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Short);\n            break;\n        // Timezone ISO8601 extended format (-04:30)\n        case 'ZZZZZ':\n            formatter = timeZoneGetter(ZoneWidth.Extended);\n            break;\n        // Timezone GMT short format (GMT+4)\n        case 'O':\n        case 'OO':\n        case 'OOO':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'z':\n        case 'zz':\n        case 'zzz':\n            formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n            break;\n        // Timezone GMT long format (GMT+0430)\n        case 'OOOO':\n        case 'ZZZZ':\n        // Should be location, but fallback to format O instead because we don't have the data yet\n        case 'zzzz':\n            formatter = timeZoneGetter(ZoneWidth.Long);\n            break;\n        default:\n            return null;\n    }\n    DATE_FORMATS[format] = formatter;\n    return formatter;\n}\n/**\n * @param {?} timezone\n * @param {?} fallback\n * @return {?}\n */\nfunction timezoneToOffset(timezone, fallback) {\n    // Support: IE 9-11 only, Edge 13-15+\n    // IE/Edge do not \"understand\" colon (`:`) in timezone\n    timezone = timezone.replace(/:/g, '');\n    /** @type {?} */\n    const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\nfunction addDateMinutes(date, minutes) {\n    date = new Date(date.getTime());\n    date.setMinutes(date.getMinutes() + minutes);\n    return date;\n}\n/**\n * @param {?} date\n * @param {?} timezone\n * @param {?} reverse\n * @return {?}\n */\nfunction convertTimezoneToLocal(date, timezone, reverse) {\n    /** @type {?} */\n    const reverseValue = reverse ? -1 : 1;\n    /** @type {?} */\n    const dateTimezoneOffset = date.getTimezoneOffset();\n    /** @type {?} */\n    const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n * @param {?} value\n * @return {?}\n */\nfunction toDate(value) {\n    if (isDate(value)) {\n        return value;\n    }\n    if (typeof value === 'number' && !isNaN(value)) {\n        return new Date(value);\n    }\n    if (typeof value === 'string') {\n        value = value.trim();\n        /** @type {?} */\n        const parsedNb = parseFloat(value);\n        // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n        if (!isNaN((/** @type {?} */ (value)) - parsedNb)) {\n            return new Date(parsedNb);\n        }\n        if (/^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n                  before Date creation to avoid time offset and errors in the new Date.\n                  If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n                  date, some browsers (e.g. IE 9) will throw an invalid Date error.\n                  If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n                  is applied.\n                  Note: ISO months are 0 for January, 1 for February, ... */\n            const [y, m, d] = value.split('-').map((val) => +val);\n            return new Date(y, m - 1, d);\n        }\n        /** @type {?} */\n        let match;\n        if (match = value.match(ISO8601_DATE_REGEX)) {\n            return isoStringToDate(match);\n        }\n    }\n    /** @type {?} */\n    const date = new Date((/** @type {?} */ (value)));\n    if (!isDate(date)) {\n        throw new Error(`Unable to convert \"${value}\" into a date`);\n    }\n    return date;\n}\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n * @param {?} match\n * @return {?}\n */\nfunction isoStringToDate(match) {\n    /** @type {?} */\n    const date = new Date(0);\n    /** @type {?} */\n    let tzHour = 0;\n    /** @type {?} */\n    let tzMin = 0;\n    // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n    /** @type {?} */\n    const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n    /** @type {?} */\n    const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n    // if there is a timezone defined like \"+01:00\" or \"+0100\"\n    if (match[9]) {\n        tzHour = Number(match[9] + match[10]);\n        tzMin = Number(match[9] + match[11]);\n    }\n    dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n    /** @type {?} */\n    const h = Number(match[4] || 0) - tzHour;\n    /** @type {?} */\n    const m = Number(match[5] || 0) - tzMin;\n    /** @type {?} */\n    const s = Number(match[6] || 0);\n    /** @type {?} */\n    const ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n    timeSetter.call(date, h, m, s, ms);\n    return date;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/** @type {?} */\nconst MAX_DIGITS = 22;\n/** @type {?} */\nconst DECIMAL_SEP = '.';\n/** @type {?} */\nconst ZERO_CHAR = '0';\n/** @type {?} */\nconst PATTERN_SEP = ';';\n/** @type {?} */\nconst GROUP_SEP = ',';\n/** @type {?} */\nconst DIGIT_CHAR = '#';\n/** @type {?} */\nconst CURRENCY_CHAR = '¤';\n/** @type {?} */\nconst PERCENT_CHAR = '%';\n/**\n * Transforms a number to a locale string based on a style and a format\n * @param {?} value\n * @param {?} pattern\n * @param {?} locale\n * @param {?} groupSymbol\n * @param {?} decimalSymbol\n * @param {?=} digitsInfo\n * @param {?=} isPercent\n * @return {?}\n */\nfunction formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {\n    /** @type {?} */\n    let formattedText = '';\n    /** @type {?} */\n    let isZero = false;\n    if (!isFinite(value)) {\n        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n    }\n    else {\n        /** @type {?} */\n        let parsedNumber = parseNumber(value);\n        if (isPercent) {\n            parsedNumber = toPercent(parsedNumber);\n        }\n        /** @type {?} */\n        let minInt = pattern.minInt;\n        /** @type {?} */\n        let minFraction = pattern.minFrac;\n        /** @type {?} */\n        let maxFraction = pattern.maxFrac;\n        if (digitsInfo) {\n            /** @type {?} */\n            const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n            if (parts === null) {\n                throw new Error(`${digitsInfo} is not a valid digit info`);\n            }\n            /** @type {?} */\n            const minIntPart = parts[1];\n            /** @type {?} */\n            const minFractionPart = parts[3];\n            /** @type {?} */\n            const maxFractionPart = parts[5];\n            if (minIntPart != null) {\n                minInt = parseIntAutoRadix(minIntPart);\n            }\n            if (minFractionPart != null) {\n                minFraction = parseIntAutoRadix(minFractionPart);\n            }\n            if (maxFractionPart != null) {\n                maxFraction = parseIntAutoRadix(maxFractionPart);\n            }\n            else if (minFractionPart != null && minFraction > maxFraction) {\n                maxFraction = minFraction;\n            }\n        }\n        roundNumber(parsedNumber, minFraction, maxFraction);\n        /** @type {?} */\n        let digits = parsedNumber.digits;\n        /** @type {?} */\n        let integerLen = parsedNumber.integerLen;\n        /** @type {?} */\n        const exponent = parsedNumber.exponent;\n        /** @type {?} */\n        let decimals = [];\n        isZero = digits.every(d => !d);\n        // pad zeros for small numbers\n        for (; integerLen < minInt; integerLen++) {\n            digits.unshift(0);\n        }\n        // pad zeros for small numbers\n        for (; integerLen < 0; integerLen++) {\n            digits.unshift(0);\n        }\n        // extract decimals digits\n        if (integerLen > 0) {\n            decimals = digits.splice(integerLen, digits.length);\n        }\n        else {\n            decimals = digits;\n            digits = [0];\n        }\n        // format the integer digits with grouping separators\n        /** @type {?} */\n        const groups = [];\n        if (digits.length >= pattern.lgSize) {\n            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n        }\n        while (digits.length > pattern.gSize) {\n            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n        }\n        if (digits.length) {\n            groups.unshift(digits.join(''));\n        }\n        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n        // append the decimal digits\n        if (decimals.length) {\n            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n        }\n        if (exponent) {\n            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n        }\n    }\n    if (value < 0 && !isZero) {\n        formattedText = pattern.negPre + formattedText + pattern.negSuf;\n    }\n    else {\n        formattedText = pattern.posPre + formattedText + pattern.posSuf;\n    }\n    return formattedText;\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `currency` is the string that represents the currency, it can be its symbol or its name.\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `digitInfo` See {\\@link DecimalPipe} for more details.\n *\n * \\@publicApi\n * @param {?} value\n * @param {?} locale\n * @param {?} currency\n * @param {?=} currencyCode\n * @param {?=} digitsInfo\n * @return {?}\n */\nfunction formatCurrency(value, locale, currency, currencyCode, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    pattern.minFrac = getNumberOfCurrencyDigits((/** @type {?} */ (currencyCode)));\n    pattern.maxFrac = pattern.minFrac;\n    /** @type {?} */\n    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);\n    return res\n        .replace(CURRENCY_CHAR, currency)\n        // if we have 2 time the currency character, the second one is ignored\n        .replace(CURRENCY_CHAR, '');\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `digitInfo` See {\\@link DecimalPipe} for more details.\n *\n * \\@publicApi\n * @param {?} value\n * @param {?} locale\n * @param {?=} digitsInfo\n * @return {?}\n */\nfunction formatPercent(value, locale, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    /** @type {?} */\n    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);\n    return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the locale.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `digitInfo` See {\\@link DecimalPipe} for more details.\n *\n * \\@publicApi\n * @param {?} value\n * @param {?} locale\n * @param {?=} digitsInfo\n * @return {?}\n */\nfunction formatNumber(value, locale, digitsInfo) {\n    /** @type {?} */\n    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n    /** @type {?} */\n    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n    return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);\n}\n/**\n * @param {?} format\n * @param {?=} minusSign\n * @return {?}\n */\nfunction parseNumberFormat(format, minusSign = '-') {\n    /** @type {?} */\n    const p = {\n        minInt: 1,\n        minFrac: 0,\n        maxFrac: 0,\n        posPre: '',\n        posSuf: '',\n        negPre: '',\n        negSuf: '',\n        gSize: 0,\n        lgSize: 0\n    };\n    /** @type {?} */\n    const patternParts = format.split(PATTERN_SEP);\n    /** @type {?} */\n    const positive = patternParts[0];\n    /** @type {?} */\n    const negative = patternParts[1];\n    /** @type {?} */\n    const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n        positive.split(DECIMAL_SEP) :\n        [\n            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n        ];\n    /** @type {?} */\n    const integer = positiveParts[0];\n    /** @type {?} */\n    const fraction = positiveParts[1] || '';\n    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\n    for (let i = 0; i < fraction.length; i++) {\n        /** @type {?} */\n        const ch = fraction.charAt(i);\n        if (ch === ZERO_CHAR) {\n            p.minFrac = p.maxFrac = i + 1;\n        }\n        else if (ch === DIGIT_CHAR) {\n            p.maxFrac = i + 1;\n        }\n        else {\n            p.posSuf += ch;\n        }\n    }\n    /** @type {?} */\n    const groups = integer.split(GROUP_SEP);\n    p.gSize = groups[1] ? groups[1].length : 0;\n    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n    if (negative) {\n        /** @type {?} */\n        const trunkLen = positive.length - p.posPre.length - p.posSuf.length;\n        /** @type {?} */\n        const pos = negative.indexOf(DIGIT_CHAR);\n        p.negPre = negative.substr(0, pos).replace(/'/g, '');\n        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\n    }\n    else {\n        p.negPre = minusSign + p.posPre;\n        p.negSuf = p.posSuf;\n    }\n    return p;\n}\n// Transforms a parsed number into a percentage by multiplying it by 100\n/**\n * @param {?} parsedNumber\n * @return {?}\n */\nfunction toPercent(parsedNumber) {\n    // if the number is 0, don't do anything\n    if (parsedNumber.digits[0] === 0) {\n        return parsedNumber;\n    }\n    // Getting the current number of decimals\n    /** @type {?} */\n    const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n    if (parsedNumber.exponent) {\n        parsedNumber.exponent += 2;\n    }\n    else {\n        if (fractionLen === 0) {\n            parsedNumber.digits.push(0, 0);\n        }\n        else if (fractionLen === 1) {\n            parsedNumber.digits.push(0);\n        }\n        parsedNumber.integerLen += 2;\n    }\n    return parsedNumber;\n}\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n * @param {?} num\n * @return {?}\n */\nfunction parseNumber(num) {\n    /** @type {?} */\n    let numStr = Math.abs(num) + '';\n    /** @type {?} */\n    let exponent = 0;\n    /** @type {?} */\n    let digits;\n    /** @type {?} */\n    let integerLen;\n    /** @type {?} */\n    let i;\n    /** @type {?} */\n    let j;\n    /** @type {?} */\n    let zeros;\n    // Decimal point?\n    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n        numStr = numStr.replace(DECIMAL_SEP, '');\n    }\n    // Exponential form?\n    if ((i = numStr.search(/e/i)) > 0) {\n        // Work out the exponent.\n        if (integerLen < 0)\n            integerLen = i;\n        integerLen += +numStr.slice(i + 1);\n        numStr = numStr.substring(0, i);\n    }\n    else if (integerLen < 0) {\n        // There was no decimal point or exponent so it is an integer.\n        integerLen = numStr.length;\n    }\n    // Count the number of leading zeros.\n    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n    }\n    if (i === (zeros = numStr.length)) {\n        // The digits are all zero.\n        digits = [0];\n        integerLen = 1;\n    }\n    else {\n        // Count the number of trailing zeros\n        zeros--;\n        while (numStr.charAt(zeros) === ZERO_CHAR)\n            zeros--;\n        // Trailing zeros are insignificant so ignore them\n        integerLen -= i;\n        digits = [];\n        // Convert string to array of digits without leading/trailing zeros.\n        for (j = 0; i <= zeros; i++, j++) {\n            digits[j] = Number(numStr.charAt(i));\n        }\n    }\n    // If the number overflows the maximum allowed digits then use an exponent.\n    if (integerLen > MAX_DIGITS) {\n        digits = digits.splice(0, MAX_DIGITS - 1);\n        exponent = integerLen - 1;\n        integerLen = 1;\n    }\n    return { digits, exponent, integerLen };\n}\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n * @param {?} parsedNumber\n * @param {?} minFrac\n * @param {?} maxFrac\n * @return {?}\n */\nfunction roundNumber(parsedNumber, minFrac, maxFrac) {\n    if (minFrac > maxFrac) {\n        throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\n    }\n    /** @type {?} */\n    let digits = parsedNumber.digits;\n    /** @type {?} */\n    let fractionLen = digits.length - parsedNumber.integerLen;\n    /** @type {?} */\n    const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n    // The index of the digit to where rounding is to occur\n    /** @type {?} */\n    let roundAt = fractionSize + parsedNumber.integerLen;\n    /** @type {?} */\n    let digit = digits[roundAt];\n    if (roundAt > 0) {\n        // Drop fractional digits beyond `roundAt`\n        digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n        // Set non-fractional digits beyond `roundAt` to 0\n        for (let j = roundAt; j < digits.length; j++) {\n            digits[j] = 0;\n        }\n    }\n    else {\n        // We rounded to zero so reset the parsedNumber\n        fractionLen = Math.max(0, fractionLen);\n        parsedNumber.integerLen = 1;\n        digits.length = Math.max(1, roundAt = fractionSize + 1);\n        digits[0] = 0;\n        for (let i = 1; i < roundAt; i++)\n            digits[i] = 0;\n    }\n    if (digit >= 5) {\n        if (roundAt - 1 < 0) {\n            for (let k = 0; k > roundAt; k--) {\n                digits.unshift(0);\n                parsedNumber.integerLen++;\n            }\n            digits.unshift(1);\n            parsedNumber.integerLen++;\n        }\n        else {\n            digits[roundAt - 1]++;\n        }\n    }\n    // Pad out with zeros to get the required fraction length\n    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)\n        digits.push(0);\n    /** @type {?} */\n    let dropTrailingZeros = fractionSize !== 0;\n    // Minimal length = nb of decimals required + current nb of integers\n    // Any number besides that is optional and can be removed if it's a trailing 0\n    /** @type {?} */\n    const minLen = minFrac + parsedNumber.integerLen;\n    // Do any carrying, e.g. a digit was rounded up to 10\n    /** @type {?} */\n    const carry = digits.reduceRight(function (carry, d, i, digits) {\n        d = d + carry;\n        digits[i] = d < 10 ? d : d - 10; // d % 10\n        if (dropTrailingZeros) {\n            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n            if (digits[i] === 0 && i >= minLen) {\n                digits.pop();\n            }\n            else {\n                dropTrailingZeros = false;\n            }\n        }\n        return d >= 10 ? 1 : 0; // Math.floor(d / 10);\n    }, 0);\n    if (carry) {\n        digits.unshift(carry);\n        parsedNumber.integerLen++;\n    }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text) {\n    /** @type {?} */\n    const result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated from v5\n * @type {?}\n */\nconst DEPRECATED_PLURAL_FN = new InjectionToken('UseV4Plurals');\n/**\n * \\@publicApi\n * @abstract\n */\nclass NgLocalization {\n}\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @param {?=} locale\n * @return {?}\n */\nfunction getPluralCategory(value, cases, ngLocalization, locale) {\n    /** @type {?} */\n    let key = `=${value}`;\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    key = ngLocalization.getPluralCategory(value, locale);\n    if (cases.indexOf(key) > -1) {\n        return key;\n    }\n    if (cases.indexOf('other') > -1) {\n        return 'other';\n    }\n    throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n *\n * \\@publicApi\n */\nclass NgLocaleLocalization extends NgLocalization {\n    /**\n     * @param {?} locale\n     * @param {?=} deprecatedPluralFn\n     */\n    constructor(locale, deprecatedPluralFn) {\n        super();\n        this.locale = locale;\n        this.deprecatedPluralFn = deprecatedPluralFn;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} locale\n     * @return {?}\n     */\n    getPluralCategory(value, locale) {\n        /** @type {?} */\n        const plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\n            getLocalePluralCase(locale || this.locale)(value);\n        switch (plural) {\n            case Plural.Zero:\n                return 'zero';\n            case Plural.One:\n                return 'one';\n            case Plural.Two:\n                return 'two';\n            case Plural.Few:\n                return 'few';\n            case Plural.Many:\n                return 'many';\n            default:\n                return 'other';\n        }\n    }\n}\nNgLocaleLocalization.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgLocaleLocalization.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEPRECATED_PLURAL_FN,] }] }\n];\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * \\@publicApi\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    // TODO(vicb): lazy compute\n    if (typeof nLike === 'string') {\n        nLike = parseInt((/** @type {?} */ (nLike)), 10);\n    }\n    /** @type {?} */\n    const n = (/** @type {?} */ (nLike));\n    /** @type {?} */\n    const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    const i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    const v = nDecimal.length;\n    /** @type {?} */\n    const f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    const lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nfunction parseCookieValue(cookieStr, name) {\n    name = encodeURIComponent(name);\n    for (const cookie of cookieStr.split(';')) {\n        /** @type {?} */\n        const eqIndex = cookie.indexOf('=');\n        const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n        if (cookieName.trim() === name) {\n            return decodeURIComponent(cookieValue);\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * \\@description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n * \\@publicApi\n */\nclass NgClass {\n    /**\n     * @param {?} _iterableDiffers\n     * @param {?} _keyValueDiffers\n     * @param {?} _ngEl\n     * @param {?} _renderer\n     */\n    constructor(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {\n        this._iterableDiffers = _iterableDiffers;\n        this._keyValueDiffers = _keyValueDiffers;\n        this._ngEl = _ngEl;\n        this._renderer = _renderer;\n        this._initialClasses = [];\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set klass(value) {\n        this._removeClasses(this._initialClasses);\n        this._initialClasses = typeof value === 'string' ? value.split(/\\s+/) : [];\n        this._applyClasses(this._initialClasses);\n        this._applyClasses(this._rawClass);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngClass(value) {\n        this._removeClasses(this._rawClass);\n        this._applyClasses(this._initialClasses);\n        this._iterableDiffer = null;\n        this._keyValueDiffer = null;\n        this._rawClass = typeof value === 'string' ? value.split(/\\s+/) : value;\n        if (this._rawClass) {\n            if (ɵisListLikeIterable(this._rawClass)) {\n                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n            }\n            else {\n                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._iterableDiffer) {\n            /** @type {?} */\n            const iterableChanges = this._iterableDiffer.diff((/** @type {?} */ (this._rawClass)));\n            if (iterableChanges) {\n                this._applyIterableChanges(iterableChanges);\n            }\n        }\n        else if (this._keyValueDiffer) {\n            /** @type {?} */\n            const keyValueChanges = this._keyValueDiffer.diff((/** @type {?} */ (this._rawClass)));\n            if (keyValueChanges) {\n                this._applyKeyValueChanges(keyValueChanges);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyKeyValueChanges(changes) {\n        changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n        changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n        changes.forEachRemovedItem((record) => {\n            if (record.previousValue) {\n                this._toggleClass(record.key, false);\n            }\n        });\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyIterableChanges(changes) {\n        changes.forEachAddedItem((record) => {\n            if (typeof record.item === 'string') {\n                this._toggleClass(record.item, true);\n            }\n            else {\n                throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${ɵstringify(record.item)}`);\n            }\n        });\n        changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n    }\n    /**\n     * Applies a collection of CSS classes to the DOM element.\n     *\n     * For argument of type Set and Array CSS class names contained in those collections are always\n     * added.\n     * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n     * for truthy and removed for falsy).\n     * @private\n     * @param {?} rawClassVal\n     * @return {?}\n     */\n    _applyClasses(rawClassVal) {\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                ((/** @type {?} */ (rawClassVal))).forEach((klass) => this._toggleClass(klass, true));\n            }\n            else {\n                Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, !!rawClassVal[klass]));\n            }\n        }\n    }\n    /**\n     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n     * purposes.\n     * @private\n     * @param {?} rawClassVal\n     * @return {?}\n     */\n    _removeClasses(rawClassVal) {\n        if (rawClassVal) {\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n                ((/** @type {?} */ (rawClassVal))).forEach((klass) => this._toggleClass(klass, false));\n            }\n            else {\n                Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, false));\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} klass\n     * @param {?} enabled\n     * @return {?}\n     */\n    _toggleClass(klass, enabled) {\n        klass = klass.trim();\n        if (klass) {\n            klass.split(/\\s+/g).forEach(klass => {\n                if (enabled) {\n                    this._renderer.addClass(this._ngEl.nativeElement, klass);\n                }\n                else {\n                    this._renderer.removeClass(this._ngEl.nativeElement, klass);\n                }\n            });\n        }\n    }\n}\nNgClass.decorators = [\n    { type: Directive, args: [{ selector: '[ngClass]' },] }\n];\n/** @nocollapse */\nNgClass.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: KeyValueDiffers },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nNgClass.propDecorators = {\n    klass: [{ type: Input, args: ['class',] }],\n    ngClass: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n *\n * \\@usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n *\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n * A more complete example with ngModuleFactory:\n *\n * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n *\n * \\@publicApi\n * \\@ngModule CommonModule\n */\nclass NgComponentOutlet {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._componentRef = null;\n        this._moduleRef = null;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._viewContainerRef.clear();\n        this._componentRef = null;\n        if (this.ngComponentOutlet) {\n            /** @type {?} */\n            const elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n            if (changes['ngComponentOutletNgModuleFactory']) {\n                if (this._moduleRef)\n                    this._moduleRef.destroy();\n                if (this.ngComponentOutletNgModuleFactory) {\n                    /** @type {?} */\n                    const parentModule = elInjector.get(NgModuleRef);\n                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n                }\n                else {\n                    this._moduleRef = null;\n                }\n            }\n            /** @type {?} */\n            const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            /** @type {?} */\n            const componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._moduleRef)\n            this._moduleRef.destroy();\n    }\n}\nNgComponentOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[ngComponentOutlet]' },] }\n];\n/** @nocollapse */\nNgComponentOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nNgComponentOutlet.propDecorators = {\n    ngComponentOutlet: [{ type: Input }],\n    ngComponentOutletInjector: [{ type: Input }],\n    ngComponentOutletContent: [{ type: Input }],\n    ngComponentOutletNgModuleFactory: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @template T\n */\nclass NgForOfContext {\n    /**\n     * @param {?} $implicit\n     * @param {?} ngForOf\n     * @param {?} index\n     * @param {?} count\n     */\n    constructor($implicit, ngForOf, index, count) {\n        this.$implicit = $implicit;\n        this.ngForOf = ngForOf;\n        this.index = index;\n        this.count = count;\n    }\n    /**\n     * @return {?}\n     */\n    get first() { return this.index === 0; }\n    /**\n     * @return {?}\n     */\n    get last() { return this.index === this.count - 1; }\n    /**\n     * @return {?}\n     */\n    get even() { return this.index % 2 === 0; }\n    /**\n     * @return {?}\n     */\n    get odd() { return !this.even; }\n}\n/**\n * A [structural directive](guide/structural-directives) that renders\n * a template for each item in a collection.\n * The directive is placed on an element, which becomes the parent\n * of the cloned templates.\n *\n * The `ngForOf` is generally used in the\n * [shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.\n * In this form, the template to be rendered for each iteration is the content\n * of an anchor element containing the directive.\n *\n * The following example shows the shorthand syntax with some options,\n * contained in an `<li>` element.\n *\n * ```\n * <li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>\n * ```\n *\n * The shorthand form expands into a long form that uses the `ngForOf` selector\n * on an `<ng-template>` element.\n * The content of the `<ng-template>` element is the `<li>` element that held the\n * short-form directive.\n *\n * Here is the expanded version of the short-form example.\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * Angular automatically expands the shorthand syntax as it compiles the template.\n * The context for each embedded view is logically merged to the current component\n * context according to its lexical position.\n *\n * When using the shorthand syntax, Angular allows only [one structural directive\n * on an element](guide/structural-directives#one-structural-directive-per-host-element).\n * If you want to iterate conditionally, for example,\n * put the `*ngIf` on a container element that wraps the `*ngFor` element.\n * For futher discussion, see\n * [Structural Directives](guide/structural-directives#one-per-element).\n *\n * \\@usageNotes\n *\n * ### Local variables\n *\n * `NgForOf` provides exported values that can be aliased to local variables.\n * For example:\n *\n *  ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * The following exported values can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ### Change propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls that are present, such as `<input>` elements that accept user input. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).\n *\n * The identities of elements in the iterator can change while the data does not.\n * This can happen, for example, if the iterator is produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response produces objects with\n * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted).\n *\n * To avoid this expensive operation, you can customize the default tracking algorithm.\n * by supplying the `trackBy` option to `NgForOf`.\n * `trackBy` takes a function that has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * @see [Structural Directives](guide/structural-directives)\n * \\@ngModule CommonModule\n * \\@publicApi\n * @template T\n */\nclass NgForOf {\n    /**\n     * @param {?} _viewContainer\n     * @param {?} _template\n     * @param {?} _differs\n     */\n    constructor(_viewContainer, _template, _differs) {\n        this._viewContainer = _viewContainer;\n        this._template = _template;\n        this._differs = _differs;\n        this._ngForOfDirty = true;\n        this._differ = null;\n    }\n    /**\n     * @param {?} ngForOf\n     * @return {?}\n     */\n    set ngForOf(ngForOf) {\n        this._ngForOf = ngForOf;\n        this._ngForOfDirty = true;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set ngForTrackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function') {\n            // TODO(vicb): use a log service once there is a public one available\n            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n                console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n                    `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n            }\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * @return {?}\n     */\n    get ngForTrackBy() { return this._trackByFn; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngForTemplate(value) {\n        // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n        // The current type is too restrictive; a template that just uses index, for example,\n        // should be acceptable.\n        if (value) {\n            this._template = value;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._ngForOfDirty) {\n            this._ngForOfDirty = false;\n            // React on ngForOf changes only once all inputs have been initialized\n            /** @type {?} */\n            const value = this._ngForOf;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.ngForTrackBy);\n                }\n                catch (_a) {\n                    throw new Error(`Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        if (this._differ) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._ngForOf);\n            if (changes)\n                this._applyChanges(changes);\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        /** @type {?} */\n        const insertTuples = [];\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                /** @type {?} */\n                const view = this._viewContainer.createEmbeddedView(this._template, new NgForOfContext((/** @type {?} */ (null)), this._ngForOf, -1, -1), currentIndex);\n                /** @type {?} */\n                const tuple = new RecordViewTuple(item, view);\n                insertTuples.push(tuple);\n            }\n            else if (currentIndex == null) {\n                this._viewContainer.remove(adjustedPreviousIndex);\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainer.get(adjustedPreviousIndex)));\n                this._viewContainer.move(view, currentIndex);\n                /** @type {?} */\n                const tuple = new RecordViewTuple(item, (/** @type {?} */ (view)));\n                insertTuples.push(tuple);\n            }\n        });\n        for (let i = 0; i < insertTuples.length; i++) {\n            this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n        }\n        for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (this._viewContainer.get(i)));\n            viewRef.context.index = i;\n            viewRef.context.count = ilen;\n            viewRef.context.ngForOf = this._ngForOf;\n        }\n        changes.forEachIdentityChange((record) => {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (this._viewContainer.get(record.currentIndex)));\n            viewRef.context.$implicit = record.item;\n        });\n    }\n    /**\n     * @private\n     * @param {?} view\n     * @param {?} record\n     * @return {?}\n     */\n    _perViewChange(view, record) {\n        view.context.$implicit = record.item;\n    }\n    /**\n     * Asserts the correct type of the context for the template that `NgForOf` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `NgForOf` structural directive renders its template with a specific context type.\n     * @template T\n     * @param {?} dir\n     * @param {?} ctx\n     * @return {?}\n     */\n    static ngTemplateContextGuard(dir, ctx) {\n        return true;\n    }\n}\nNgForOf.decorators = [\n    { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] }\n];\n/** @nocollapse */\nNgForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\nNgForOf.propDecorators = {\n    ngForOf: [{ type: Input }],\n    ngForTrackBy: [{ type: Input }],\n    ngForTemplate: [{ type: Input }]\n};\n/**\n * @template T\n */\nclass RecordViewTuple {\n    /**\n     * @param {?} record\n     * @param {?} view\n     */\n    constructor(record, view) {\n        this.record = record;\n        this.view = view;\n    }\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean.\n * When the expression evaluates to true, Angular renders the template\n * provided in a `then` clause, and when  false or null,\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,\n * `*ngIf=\"condition\"`, is generally used, provided\n * as an attribute of the anchor element for the inserted template.\n * Angular expands this into a more explicit version, in which the anchor element\n * is contained in an `<ng-template>` element.\n *\n * Simple form with shorthand syntax:\n *\n * ```\n * <div *ngIf=\"condition\">Content to render when condition is true.</div>\n * ```\n *\n * Simple form with expanded syntax:\n *\n * ```\n * <ng-template [ngIf]=\"condition\"><div>Content to render when condition is\n * true.</div></ng-template>\n * ```\n *\n * Form with an \"else\" block:\n *\n * ```\n * <div *ngIf=\"condition; else elseBlock\">Content to render when condition is true.</div>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Shorthand form with \"then\" and \"else\" blocks:\n *\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n * <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n * ```\n *\n * Form with storing the value locally:\n *\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>Content to render when value is null.</ng-template>\n * ```\n *\n * \\@usageNotes\n *\n * The `*ngIf` directive is most commonly used to conditionally show an inline template,\n * as seen in the following  example.\n * The default `else` template is blank.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * To display a template when `expression` evaluates to false, use an `else` template\n * binding as shown in the following example.\n * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.\n * The template can be defined anywhere in the component view, but is typically placed right after\n * `ngIf` for readability.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using an external `then` template\n *\n * In the previous example, the then-clause template is specified inline, as the content of the\n * tag that contains the `ngIf` directive. You can also specify a template that is defined\n * externally, by referencing a labeled `<ng-template>` element. When you do this, you can\n * change which template to use at runtime, as shown in the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing a conditional result in a variable\n *\n * You might want to show a set of properties from the same object. If you are waiting\n * for asynchronous data, the object can be undefined.\n * In this case, you can use `ngIf` and store the result of the condition in a local\n * variable as shown in the the following example.\n *\n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * This code uses only one `AsyncPipe`, so only one subscription is created.\n * The conditional statement stores the result of `userStream|async` in the local variable `user`.\n * You can then bind the local `user` repeatedly.\n *\n * The conditional displays the data only if `userStream` returns a value,\n * so you don't need to use the\n * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)\n * to guard against null values when accessing properties.\n * You can display an alternative template while waiting for the data.\n *\n * ### Shorthand syntax\n *\n * The shorthand syntax `*ngIf` expands into two separate template specifications\n * for the \"then\" and \"else\" clauses. For example, consider the following shorthand statement,\n * that is meant to show a loading page while waiting for data to be loaded.\n *\n * ```\n * <div class=\"hero-list\" *ngIf=\"heroes else loading\">\n *  ...\n * </div>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * You can see that the \"else\" clause references the `<ng-template>`\n * with the `#loading` label, and the template for the \"then\" clause\n * is provided as the content of the anchor element.\n *\n * However, when Angular expands the shorthand syntax, it creates\n * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.\n * The anchor element containing the template for the \"then\" clause becomes\n * the content of this unlabeled `<ng-template>` tag.\n *\n * ```\n * <ng-template [ngIf]=\"hero-list\" [ngIfElse]=\"loading\">\n *  <div class=\"hero-list\">\n *   ...\n *  </div>\n * </ng-template>\n *\n * <ng-template #loading>\n *  <div>Loading...</div>\n * </ng-template>\n * ```\n *\n * The presence of the implicit template object has implications for the nesting of\n * structural directives. For more on this subject, see\n * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass NgIf {\n    /**\n     * @param {?} _viewContainer\n     * @param {?} templateRef\n     */\n    constructor(_viewContainer, templateRef) {\n        this._viewContainer = _viewContainer;\n        this._context = new NgIfContext();\n        this._thenTemplateRef = null;\n        this._elseTemplateRef = null;\n        this._thenViewRef = null;\n        this._elseViewRef = null;\n        this._thenTemplateRef = templateRef;\n    }\n    /**\n     * @param {?} condition\n     * @return {?}\n     */\n    set ngIf(condition) {\n        this._context.$implicit = this._context.ngIf = condition;\n        this._updateView();\n    }\n    /**\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfThen(templateRef) {\n        assertTemplate('ngIfThen', templateRef);\n        this._thenTemplateRef = templateRef;\n        this._thenViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * @param {?} templateRef\n     * @return {?}\n     */\n    set ngIfElse(templateRef) {\n        assertTemplate('ngIfElse', templateRef);\n        this._elseTemplateRef = templateRef;\n        this._elseViewRef = null; // clear previous view if any.\n        this._updateView();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateView() {\n        if (this._context.$implicit) {\n            if (!this._thenViewRef) {\n                this._viewContainer.clear();\n                this._elseViewRef = null;\n                if (this._thenTemplateRef) {\n                    this._thenViewRef =\n                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n                }\n            }\n        }\n        else {\n            if (!this._elseViewRef) {\n                this._viewContainer.clear();\n                this._thenViewRef = null;\n                if (this._elseTemplateRef) {\n                    this._elseViewRef =\n                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n                }\n            }\n        }\n    }\n    /**\n     * Assert the correct type of the expression bound to the `ngIf` input within the template.\n     *\n     * The presence of this method is a signal to the Ivy template type check compiler that when the\n     * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`\n     * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the\n     * strictNullChecks feature of TypeScript to work with `NgIf`.\n     * @template E\n     * @param {?} dir\n     * @param {?} expr\n     * @return {?}\n     */\n    static ngTemplateGuard_ngIf(dir, expr) { return true; }\n}\nNgIf.decorators = [\n    { type: Directive, args: [{ selector: '[ngIf]' },] }\n];\n/** @nocollapse */\nNgIf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef }\n];\nNgIf.propDecorators = {\n    ngIf: [{ type: Input }],\n    ngIfThen: [{ type: Input }],\n    ngIfElse: [{ type: Input }]\n};\n/**\n * \\@publicApi\n */\nclass NgIfContext {\n    constructor() {\n        this.$implicit = null;\n        this.ngIf = null;\n    }\n}\n/**\n * @param {?} property\n * @param {?} templateRef\n * @return {?}\n */\nfunction assertTemplate(property, templateRef) {\n    /** @type {?} */\n    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n    if (!isTemplateRefOrNull) {\n        throw new Error(`${property} must be a TemplateRef, but received '${ɵstringify(templateRef)}'.`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SwitchView {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _templateRef\n     */\n    constructor(_viewContainerRef, _templateRef) {\n        this._viewContainerRef = _viewContainerRef;\n        this._templateRef = _templateRef;\n        this._created = false;\n    }\n    /**\n     * @return {?}\n     */\n    create() {\n        this._created = true;\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this._created = false;\n        this._viewContainerRef.clear();\n    }\n    /**\n     * @param {?} created\n     * @return {?}\n     */\n    enforceState(created) {\n        if (created && !this._created) {\n            this.create();\n        }\n        else if (!created && this._created) {\n            this.destroy();\n        }\n    }\n}\n/**\n * \\@ngModule CommonModule\n *\n * \\@description A structural directive that adds or removes templates (displaying or hiding views)\n * when the next match expression matches the switch expression.\n *\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * \\@usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * \\@publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Stuctural Directives](guide/structural-directives)\n *\n */\nclass NgSwitch {\n    constructor() {\n        this._defaultUsed = false;\n        this._caseCount = 0;\n        this._lastCaseCheckIndex = 0;\n        this._lastCasesMatched = false;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set ngSwitch(newValue) {\n        this._ngSwitch = newValue;\n        if (this._caseCount === 0) {\n            this._updateDefaultCases(true);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _addCase() { return this._caseCount++; }\n    /**\n     * \\@internal\n     * @param {?} view\n     * @return {?}\n     */\n    _addDefault(view) {\n        if (!this._defaultViews) {\n            this._defaultViews = [];\n        }\n        this._defaultViews.push(view);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _matchCase(value) {\n        /** @type {?} */\n        const matched = value == this._ngSwitch;\n        this._lastCasesMatched = this._lastCasesMatched || matched;\n        this._lastCaseCheckIndex++;\n        if (this._lastCaseCheckIndex === this._caseCount) {\n            this._updateDefaultCases(!this._lastCasesMatched);\n            this._lastCaseCheckIndex = 0;\n            this._lastCasesMatched = false;\n        }\n        return matched;\n    }\n    /**\n     * @private\n     * @param {?} useDefault\n     * @return {?}\n     */\n    _updateDefaultCases(useDefault) {\n        if (this._defaultViews && useDefault !== this._defaultUsed) {\n            this._defaultUsed = useDefault;\n            for (let i = 0; i < this._defaultViews.length; i++) {\n                /** @type {?} */\n                const defaultView = this._defaultViews[i];\n                defaultView.enforceState(useDefault);\n            }\n        }\n    }\n}\nNgSwitch.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitch]' },] }\n];\nNgSwitch.propDecorators = {\n    ngSwitch: [{ type: Input }]\n};\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * \\@usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * \\@publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\nclass NgSwitchCase {\n    /**\n     * @param {?} viewContainer\n     * @param {?} templateRef\n     * @param {?} ngSwitch\n     */\n    constructor(viewContainer, templateRef, ngSwitch) {\n        this.ngSwitch = ngSwitch;\n        ngSwitch._addCase();\n        this._view = new SwitchView(viewContainer, templateRef);\n    }\n    /**\n     * Performs case matching. For internal use only.\n     * @return {?}\n     */\n    ngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\n}\nNgSwitchCase.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitchCase]' },] }\n];\n/** @nocollapse */\nNgSwitchCase.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: NgSwitch, decorators: [{ type: Host }] }\n];\nNgSwitchCase.propDecorators = {\n    ngSwitchCase: [{ type: Input }]\n};\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * \\@publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\nclass NgSwitchDefault {\n    /**\n     * @param {?} viewContainer\n     * @param {?} templateRef\n     * @param {?} ngSwitch\n     */\n    constructor(viewContainer, templateRef, ngSwitch) {\n        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n    }\n}\nNgSwitchDefault.decorators = [\n    { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] }\n];\n/** @nocollapse */\nNgSwitchDefault.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: NgSwitch, decorators: [{ type: Host }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * \\@description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * \\@publicApi\n */\nclass NgPlural {\n    /**\n     * @param {?} _localization\n     */\n    constructor(_localization) {\n        this._localization = _localization;\n        this._caseViews = {};\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set ngPlural(value) {\n        this._switchValue = value;\n        this._updateView();\n    }\n    /**\n     * @param {?} value\n     * @param {?} switchView\n     * @return {?}\n     */\n    addCase(value, switchView) { this._caseViews[value] = switchView; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateView() {\n        this._clearViews();\n        /** @type {?} */\n        const cases = Object.keys(this._caseViews);\n        /** @type {?} */\n        const key = getPluralCategory(this._switchValue, cases, this._localization);\n        this._activateView(this._caseViews[key]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearViews() {\n        if (this._activeView)\n            this._activeView.destroy();\n    }\n    /**\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _activateView(view) {\n        if (view) {\n            this._activeView = view;\n            this._activeView.create();\n        }\n    }\n}\nNgPlural.decorators = [\n    { type: Directive, args: [{ selector: '[ngPlural]' },] }\n];\n/** @nocollapse */\nNgPlural.ctorParameters = () => [\n    { type: NgLocalization }\n];\nNgPlural.propDecorators = {\n    ngPlural: [{ type: Input }]\n};\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * \\@usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n *\n * See {\\@link NgPlural} for more details and example.\n *\n * \\@publicApi\n */\nclass NgPluralCase {\n    /**\n     * @param {?} value\n     * @param {?} template\n     * @param {?} viewContainer\n     * @param {?} ngPlural\n     */\n    constructor(value, template, viewContainer, ngPlural) {\n        this.value = value;\n        /** @type {?} */\n        const isANumber = !isNaN(Number(value));\n        ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n    }\n}\nNgPluralCase.decorators = [\n    { type: Directive, args: [{ selector: '[ngPluralCase]' },] }\n];\n/** @nocollapse */\nNgPluralCase.ctorParameters = () => [\n    { type: String, decorators: [{ type: Attribute, args: ['ngPluralCase',] }] },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: NgPlural, decorators: [{ type: Host }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@usageNotes\n *\n * Set the font of the containing element to the result of an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * ```\n *\n * Set the width of the containing element to a pixel value returned by an expression.\n *\n * ```\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * ```\n *\n * Set a collection of style values using an expression that returns key-value pairs.\n *\n * ```\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * \\@description\n *\n * An attribute directive that updates styles for the containing HTML element.\n * Sets one or more style properties, specified as colon-separated key-value pairs.\n * The key is a style name, with an optional `.<unit>` suffix\n * (such as 'top.px', 'font-style.em').\n * The value is an expression to be evaluated.\n * The resulting non-null value, expressed in the given unit,\n * is assigned to the given style property.\n * If the result of evaluation is null, the corresponding style is removed.\n *\n * \\@publicApi\n */\nclass NgStyle {\n    /**\n     * @param {?} _differs\n     * @param {?} _ngEl\n     * @param {?} _renderer\n     */\n    constructor(_differs, _ngEl, _renderer) {\n        this._differs = _differs;\n        this._ngEl = _ngEl;\n        this._renderer = _renderer;\n    }\n    /**\n     * @param {?} values\n     * @return {?}\n     */\n    set ngStyle(\n    /**\n     * A map of style properties, specified as colon-separated\n     * key-value pairs.\n     * * The key is a style name, with an optional `.<unit>` suffix\n     *    (such as 'top.px', 'font-style.em').\n     * * The value is an expression to be evaluated.\n     */\n    values) {\n        this._ngStyle = values;\n        if (!this._differ && values) {\n            this._differ = this._differs.find(values).create();\n        }\n    }\n    /**\n     * Applies the new styles if needed.\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ) {\n            /** @type {?} */\n            const changes = this._differ.diff(this._ngStyle);\n            if (changes) {\n                this._applyChanges(changes);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n        changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n        changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n    }\n    /**\n     * @private\n     * @param {?} nameAndUnit\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(nameAndUnit, value) {\n        const [name, unit] = nameAndUnit.split('.');\n        value = value != null && unit ? `${value}${unit}` : value;\n        if (value != null) {\n            this._renderer.setStyle(this._ngEl.nativeElement, name, (/** @type {?} */ (value)));\n        }\n        else {\n            this._renderer.removeStyle(this._ngEl.nativeElement, name);\n        }\n    }\n}\nNgStyle.decorators = [\n    { type: Directive, args: [{ selector: '[ngStyle]' },] }\n];\n/** @nocollapse */\nNgStyle.ctorParameters = () => [\n    { type: KeyValueDiffers },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nNgStyle.propDecorators = {\n    ngStyle: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * \\@usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * \\@publicApi\n */\nclass NgTemplateOutlet {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n        this._viewContainerRef = _viewContainerRef;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const recreateView = this._shouldRecreateView(changes);\n        if (recreateView) {\n            if (this._viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            if (this.ngTemplateOutlet) {\n                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);\n            }\n        }\n        else {\n            if (this._viewRef && this.ngTemplateOutletContext) {\n                this._updateExistingContext(this.ngTemplateOutletContext);\n            }\n        }\n    }\n    /**\n     * We need to re-create existing embedded view if:\n     * - templateRef has changed\n     * - context has changes\n     *\n     * We mark context object as changed when the corresponding object\n     * shape changes (new properties are added or existing properties are removed).\n     * In other words we consider context with the same properties as \"the same\" even\n     * if object reference changes (see https://github.com/angular/angular/issues/13407).\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _shouldRecreateView(changes) {\n        /** @type {?} */\n        const ctxChange = changes['ngTemplateOutletContext'];\n        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n    /**\n     * @private\n     * @param {?} ctxChange\n     * @return {?}\n     */\n    _hasContextShapeChanged(ctxChange) {\n        /** @type {?} */\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        /** @type {?} */\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (let propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * @private\n     * @param {?} ctx\n     * @return {?}\n     */\n    _updateExistingContext(ctx) {\n        for (let propName of Object.keys(ctx)) {\n            ((/** @type {?} */ (this._viewRef.context)))[propName] = ((/** @type {?} */ (this.ngTemplateOutletContext)))[propName];\n        }\n    }\n}\nNgTemplateOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] }\n];\n/** @nocollapse */\nNgTemplateOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nNgTemplateOutlet.propDecorators = {\n    ngTemplateOutletContext: [{ type: Input }],\n    ngTemplateOutlet: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n * @type {?}\n */\nconst COMMON_DIRECTIVES = [\n    NgClass,\n    NgComponentOutlet,\n    NgForOf,\n    NgIf,\n    NgTemplateOutlet,\n    NgStyle,\n    NgSwitch,\n    NgSwitchCase,\n    NgSwitchDefault,\n    NgPlural,\n    NgPluralCase,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} value\n * @return {?}\n */\nfunction invalidPipeArgumentError(type, value) {\n    return Error(`InvalidPipeArgument: '${value}' for pipe '${ɵstringify(type)}'`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NumberFormatter {\n    /**\n     * @param {?} num\n     * @param {?} locale\n     * @param {?} style\n     * @param {?=} opts\n     * @return {?}\n     */\n    static format(num, locale, style, opts = {}) {\n        const { minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency, currencyAsSymbol = false } = opts;\n        /** @type {?} */\n        const options = {\n            minimumIntegerDigits,\n            minimumFractionDigits,\n            maximumFractionDigits,\n            style: NumberFormatStyle[style].toLowerCase()\n        };\n        if (style == NumberFormatStyle.Currency) {\n            options.currency = typeof currency == 'string' ? currency : undefined;\n            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n        }\n        return new Intl.NumberFormat(locale, options).format(num);\n    }\n}\n/** @type {?} */\nconst DATE_FORMATS_SPLIT$1 = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n/** @type {?} */\nconst PATTERN_ALIASES = {\n    // Keys are quoted so they do not get renamed during closure compilation.\n    'yMMMdjms': datePartGetterFactory(combine([\n        digitCondition('year', 1),\n        nameCondition('month', 3),\n        digitCondition('day', 1),\n        digitCondition('hour', 1),\n        digitCondition('minute', 1),\n        digitCondition('second', 1),\n    ])),\n    'yMdjm': datePartGetterFactory(combine([\n        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n        digitCondition('hour', 1), digitCondition('minute', 1)\n    ])),\n    'yMMMMEEEEd': datePartGetterFactory(combine([\n        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n        digitCondition('day', 1)\n    ])),\n    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n/** @type {?} */\nconst DATE_FORMATS$1 = {\n    // Keys are quoted so they do not get renamed.\n    'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n    'yy': datePartGetterFactory(digitCondition('year', 2)),\n    'y': datePartGetterFactory(digitCondition('year', 1)),\n    'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n    'MMM': datePartGetterFactory(nameCondition('month', 3)),\n    'MM': datePartGetterFactory(digitCondition('month', 2)),\n    'M': datePartGetterFactory(digitCondition('month', 1)),\n    'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n    'L': datePartGetterFactory(nameCondition('month', 1)),\n    'dd': datePartGetterFactory(digitCondition('day', 2)),\n    'd': datePartGetterFactory(digitCondition('day', 1)),\n    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'jj': datePartGetterFactory(digitCondition('hour', 2)),\n    'j': datePartGetterFactory(digitCondition('hour', 1)),\n    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n    'm': datePartGetterFactory(digitCondition('minute', 1)),\n    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n    's': datePartGetterFactory(digitCondition('second', 1)),\n    // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n    // we can be just safely rely on using `sss` since we currently don't support single or two digit\n    // fractions\n    'sss': datePartGetterFactory(digitCondition('second', 3)),\n    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n    'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n    'E': datePartGetterFactory(nameCondition('weekday', 1)),\n    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n    'Z': timeZoneGetter$1('short'),\n    'z': timeZoneGetter$1('long'),\n    'ww': datePartGetterFactory({}),\n    // Week of year, padded (00-53). Week 01 is the week with the\n    // first Thursday of the year. not support ?\n    'w': datePartGetterFactory({}),\n    // Week of year (0-53). Week 1 is the week with the first Thursday\n    // of the year not support ?\n    'G': datePartGetterFactory(nameCondition('era', 1)),\n    'GG': datePartGetterFactory(nameCondition('era', 2)),\n    'GGG': datePartGetterFactory(nameCondition('era', 3)),\n    'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner) {\n    return function (date, locale) {\n        /** @type {?} */\n        const result = inner(date, locale);\n        return result.length == 1 ? '0' + result : result;\n    };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner) {\n    return function (date, locale) { return inner(date, locale).split(' ')[1]; };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner) {\n    return function (date, locale) { return inner(date, locale).split(' ')[0]; };\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date, locale, options) {\n    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter$1(timezone) {\n    // To workaround `Intl` API restriction for single timezone let format with 24 hours\n    /** @type {?} */\n    const options = { hour: '2-digit', hour12: false, timeZoneName: timezone };\n    return function (date, locale) {\n        /** @type {?} */\n        const result = intlDateFormat(date, locale, options);\n        // Then extract first 3 letters that related to hours\n        return result ? result.substring(3) : '';\n    };\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(options, value) {\n    options.hour12 = value;\n    return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop, len) {\n    /** @type {?} */\n    const result = {};\n    result[prop] = len === 2 ? '2-digit' : 'numeric';\n    return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop, len) {\n    /** @type {?} */\n    const result = {};\n    if (len < 4) {\n        result[prop] = len > 1 ? 'short' : 'narrow';\n    }\n    else {\n        result[prop] = 'long';\n    }\n    return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options) {\n    return options.reduce((merged, opt) => (Object.assign({}, merged, opt)), {});\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret) {\n    return (date, locale) => intlDateFormat(date, locale, ret);\n}\n/** @type {?} */\nconst DATE_FORMATTER_CACHE = new Map();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format, date, locale) {\n    /** @type {?} */\n    const fn = PATTERN_ALIASES[format];\n    if (fn)\n        return fn(date, locale);\n    /** @type {?} */\n    const cacheKey = format;\n    /** @type {?} */\n    let parts = DATE_FORMATTER_CACHE.get(cacheKey);\n    if (!parts) {\n        parts = [];\n        /** @type {?} */\n        let match;\n        DATE_FORMATS_SPLIT$1.exec(format);\n        /** @type {?} */\n        let _format = format;\n        while (_format) {\n            match = DATE_FORMATS_SPLIT$1.exec(_format);\n            if (match) {\n                parts = parts.concat(match.slice(1));\n                _format = (/** @type {?} */ (parts.pop()));\n            }\n            else {\n                parts.push(_format);\n                _format = null;\n            }\n        }\n        DATE_FORMATTER_CACHE.set(cacheKey, parts);\n    }\n    return parts.reduce((text, part) => {\n        /** @type {?} */\n        const fn = DATE_FORMATS$1[part];\n        return text + (fn ? fn(date, locale) : partToTime(part));\n    }, '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part) {\n    return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nclass DateFormatter {\n    /**\n     * @param {?} date\n     * @param {?} locale\n     * @param {?} pattern\n     * @return {?}\n     */\n    static format(date, locale, pattern) {\n        return dateFormatter(pattern, date, locale);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n *\n *\n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n *\n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n *\n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n *\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n *\n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n *\n * \\@usageNotes\n *\n * ### Examples\n *\n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\n * in the _local_ time and locale is 'en-US':\n *\n * {\\@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedDatePipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} pattern\n     * @return {?}\n     */\n    transform(value, pattern = 'mediumDate') {\n        if (value == null || value === '' || value !== value)\n            return null;\n        /** @type {?} */\n        let date;\n        if (typeof value === 'string') {\n            value = value.trim();\n        }\n        if (isDate$1(value)) {\n            date = value;\n        }\n        else if (!isNaN(value - parseFloat(value))) {\n            date = new Date(parseFloat(value));\n        }\n        else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n            /**\n             * For ISO Strings without time the day, month and year must be extracted from the ISO String\n             * before Date creation to avoid time offset and errors in the new Date.\n             * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n             * date, some browsers (e.g. IE 9) will throw an invalid Date error\n             * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\n             * timeoffset\n             * is applied\n             * Note: ISO months are 0 for January, 1 for February, ...\n             */\n            const [y, m, d] = value.split('-').map((val) => parseInt(val, 10));\n            date = new Date(y, m - 1, d);\n        }\n        else {\n            date = new Date(value);\n        }\n        if (!isDate$1(date)) {\n            /** @type {?} */\n            let match;\n            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n                date = isoStringToDate(match);\n            }\n            else {\n                throw invalidPipeArgumentError(DeprecatedDatePipe, value);\n            }\n        }\n        return DateFormatter.format(date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);\n    }\n}\n/**\n * \\@internal\n */\nDeprecatedDatePipe._ALIASES = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n};\nDeprecatedDatePipe.decorators = [\n    { type: Pipe, args: [{ name: 'date', pure: true },] }\n];\n/** @nocollapse */\nDeprecatedDatePipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDate$1(value) {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber$1(pipe, locale, value, style, digits, currency = null, currencyAsSymbol = false) {\n    if (value == null)\n        return null;\n    // Convert strings to numbers\n    value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n    if (typeof value !== 'number') {\n        throw invalidPipeArgumentError(pipe, value);\n    }\n    /** @type {?} */\n    let minInt;\n    /** @type {?} */\n    let minFraction;\n    /** @type {?} */\n    let maxFraction;\n    if (style !== NumberFormatStyle.Currency) {\n        // rely on Intl default for currency\n        minInt = 1;\n        minFraction = 0;\n        maxFraction = 3;\n    }\n    if (digits) {\n        /** @type {?} */\n        const parts = digits.match(NUMBER_FORMAT_REGEXP);\n        if (parts === null) {\n            throw new Error(`${digits} is not a valid digit info for number pipes`);\n        }\n        if (parts[1] != null) { // min integer digits\n            minInt = parseIntAutoRadix(parts[1]);\n        }\n        if (parts[3] != null) { // min fraction digits\n            minFraction = parseIntAutoRadix(parts[3]);\n        }\n        if (parts[5] != null) { // max fraction digits\n            maxFraction = parseIntAutoRadix(parts[5]);\n        }\n    }\n    return NumberFormatter.format((/** @type {?} */ (value)), locale, style, {\n        minimumIntegerDigits: minInt,\n        minimumFractionDigits: minFraction,\n        maximumFractionDigits: maxFraction,\n        currency: currency,\n        currencyAsSymbol: currencyAsSymbol,\n    });\n}\n/**\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n *\n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *\n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass DeprecatedDecimalPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, digits) {\n        return formatNumber$1(DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n    }\n}\nDeprecatedDecimalPipe.decorators = [\n    { type: Pipe, args: [{ name: 'number' },] }\n];\n/** @nocollapse */\nDeprecatedDecimalPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n *\n * \\@description\n *\n * Formats a number as percentage according to locale rules.\n *\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedPercentPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, digits) {\n        return formatNumber$1(DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n    }\n}\nDeprecatedPercentPipe.decorators = [\n    { type: Pipe, args: [{ name: 'percent' },] }\n];\n/** @nocollapse */\nDeprecatedPercentPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n *\n * \\@publicApi\n */\nclass DeprecatedCurrencyPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} currencyCode\n     * @param {?=} symbolDisplay\n     * @param {?=} digits\n     * @return {?}\n     */\n    transform(value, currencyCode = 'USD', symbolDisplay = false, digits) {\n        return formatNumber$1(DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\n    }\n}\nDeprecatedCurrencyPipe.decorators = [\n    { type: Pipe, args: [{ name: 'currency' },] }\n];\n/** @nocollapse */\nDeprecatedCurrencyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of deprecated i18n pipes that require intl api\n *\n * @deprecated from v5\n * @type {?}\n */\nconst COMMON_DEPRECATED_I18N_PIPES = [DeprecatedDecimalPipe, DeprecatedPercentPipe, DeprecatedCurrencyPipe, DeprecatedDatePipe];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ObservableStrategy {\n    /**\n     * @param {?} async\n     * @param {?} updateLatestValue\n     * @return {?}\n     */\n    createSubscription(async, updateLatestValue) {\n        return async.subscribe({ next: updateLatestValue, error: (e) => { throw e; } });\n    }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    dispose(subscription) { subscription.unsubscribe(); }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    onDestroy(subscription) { subscription.unsubscribe(); }\n}\nclass PromiseStrategy {\n    /**\n     * @param {?} async\n     * @param {?} updateLatestValue\n     * @return {?}\n     */\n    createSubscription(async, updateLatestValue) {\n        return async.then(updateLatestValue, e => { throw e; });\n    }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    dispose(subscription) { }\n    /**\n     * @param {?} subscription\n     * @return {?}\n     */\n    onDestroy(subscription) { }\n}\n/** @type {?} */\nconst _promiseStrategy = new PromiseStrategy();\n/** @type {?} */\nconst _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n * \\@usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * \\@publicApi\n */\nclass AsyncPipe {\n    /**\n     * @param {?} _ref\n     */\n    constructor(_ref) {\n        this._ref = _ref;\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n        this._strategy = (/** @type {?} */ (null));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._dispose();\n        }\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    transform(obj) {\n        if (!this._obj) {\n            if (obj) {\n                this._subscribe(obj);\n            }\n            this._latestReturnedValue = this._latestValue;\n            return this._latestValue;\n        }\n        if (obj !== this._obj) {\n            this._dispose();\n            return this.transform((/** @type {?} */ (obj)));\n        }\n        if (this._latestValue === this._latestReturnedValue) {\n            return this._latestReturnedValue;\n        }\n        this._latestReturnedValue = this._latestValue;\n        return WrappedValue.wrap(this._latestValue);\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    _subscribe(obj) {\n        this._obj = obj;\n        this._strategy = this._selectStrategy(obj);\n        this._subscription = this._strategy.createSubscription(obj, (value) => this._updateLatestValue(obj, value));\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    _selectStrategy(obj) {\n        if (ɵisPromise(obj)) {\n            return _promiseStrategy;\n        }\n        if (ɵisObservable(obj)) {\n            return _observableStrategy;\n        }\n        throw invalidPipeArgumentError(AsyncPipe, obj);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dispose() {\n        this._strategy.dispose((/** @type {?} */ (this._subscription)));\n        this._latestValue = null;\n        this._latestReturnedValue = null;\n        this._subscription = null;\n        this._obj = null;\n    }\n    /**\n     * @private\n     * @param {?} async\n     * @param {?} value\n     * @return {?}\n     */\n    _updateLatestValue(async, value) {\n        if (async === this._obj) {\n            this._latestValue = value;\n            this._ref.markForCheck();\n        }\n    }\n}\nAsyncPipe.decorators = [\n    { type: Pipe, args: [{ name: 'async', pure: false },] }\n];\n/** @nocollapse */\nAsyncPipe.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Transforms text to all lower case.\n *\n * @see `UpperCasePipe`\n * @see `TitleCasePipe`\n * \\@usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * <code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass LowerCasePipe {\n    /**\n     * @param {?} value The string to transform to lower case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(LowerCasePipe, value);\n        }\n        return value.toLowerCase();\n    }\n}\nLowerCasePipe.decorators = [\n    { type: Pipe, args: [{ name: 'lowercase' },] }\n];\n//\n// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result\n// can be achieved by using /\\p{L}\\S*/gu and also known as Unicode Property Escapes\n// (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1\n//\n/** @type {?} */\nconst unicodeWordMatch = /(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])\\S*/g;\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word, and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see `LowerCasePipe`\n * @see `UpperCasePipe`\n *\n * \\@usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * <code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass TitleCasePipe {\n    /**\n     * @param {?} value The string to transform to title case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(TitleCasePipe, value);\n        }\n        return value.replace(unicodeWordMatch, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase()));\n    }\n}\nTitleCasePipe.decorators = [\n    { type: Pipe, args: [{ name: 'titlecase' },] }\n];\n/**\n * Transforms text to all upper case.\n * @see `LowerCasePipe`\n * @see `TitleCasePipe`\n *\n * \\@ngModule CommonModule\n * \\@publicApi\n */\nclass UpperCasePipe {\n    /**\n     * @param {?} value The string to transform to upper case.\n     * @return {?}\n     */\n    transform(value) {\n        if (!value)\n            return value;\n        if (typeof value !== 'string') {\n            throw invalidPipeArgumentError(UpperCasePipe, value);\n        }\n        return value.toUpperCase();\n    }\n}\nUpperCasePipe.decorators = [\n    { type: Pipe, args: [{ name: 'uppercase' },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// clang-format off\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Formats a date value according to locale rules.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n#i18n-pipes) for more information.\n *\n * @see `formatDate()`\n *\n *\n * \\@usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * Examples are given in `en-US` locale.\n *\n * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).\n * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).\n * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM\n * GMT+1`).\n * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`).\n * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).\n * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).\n * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).\n * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).\n * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).\n * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).\n * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).\n * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type         | Format      | Description                                                   | Example Value                                              |\n *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                    | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                    | MMMM        | Wide                                                          | September                                                  |\n *  |                    | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                    | LLLL        | Wide                                                          | September                                                  |\n *  |                    | LLLLL       | Narrow                                                        | S                                                          |\n *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\n *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                    | EEEEE       | Narrow                                                        | T                                                          |\n *  |                    | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n * Note that timezone correction is not applied to an ISO string that has no time component, such as \"2016-09-19\"\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * \\@Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * \\@publicApi\n */\n// clang-format on\nclass DatePipe {\n    /**\n     * @param {?} locale\n     */\n    constructor(locale) {\n        this.locale = locale;\n    }\n    /**\n     * @param {?} value The date expression: a `Date` object,  a number\n     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n     * @param {?=} format The date/time components to include, using predefined options or a\n     * custom format string.\n     * @param {?=} timezone A timezone offset (such as `'+0430'`), or a standard\n     * UTC/GMT or continental US timezone abbreviation. Default is\n     * the local system timezone of the end-user's machine.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?} A date string in the desired format.\n     */\n    transform(value, format = 'mediumDate', timezone, locale) {\n        if (value == null || value === '' || value !== value)\n            return null;\n        try {\n            return formatDate(value, format, locale || this.locale, timezone);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DatePipe, error.message);\n        }\n    }\n}\nDatePipe.decorators = [\n    { type: Pipe, args: [{ name: 'date', pure: true },] }\n];\n/** @nocollapse */\nDatePipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _INTERPOLATION_REGEXP = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * \\@publicApi\n */\nclass I18nPluralPipe {\n    /**\n     * @param {?} _localization\n     */\n    constructor(_localization) {\n        this._localization = _localization;\n    }\n    /**\n     * @param {?} value the number to be formatted\n     * @param {?} pluralMap an object that mimics the ICU format, see\n     * http://userguide.icu-project.org/formatparse/messages.\n     * @param {?=} locale a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\n     * default).\n     * @return {?}\n     */\n    transform(value, pluralMap, locale) {\n        if (value == null)\n            return '';\n        if (typeof pluralMap !== 'object' || pluralMap === null) {\n            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n        }\n        /** @type {?} */\n        const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n    }\n}\nI18nPluralPipe.decorators = [\n    { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] }\n];\n/** @nocollapse */\nI18nPluralPipe.ctorParameters = () => [\n    { type: NgLocalization }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * \\@publicApi\n */\nclass I18nSelectPipe {\n    /**\n     * @param {?} value a string to be internationalized.\n     * @param {?} mapping an object that indicates the text that should be displayed\n     * for different values of the provided `value`.\n     * @return {?}\n     */\n    transform(value, mapping) {\n        if (value == null)\n            return '';\n        if (typeof mapping !== 'object' || typeof value !== 'string') {\n            throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n        }\n        if (mapping.hasOwnProperty(value)) {\n            return mapping[value];\n        }\n        if (mapping.hasOwnProperty('other')) {\n            return mapping['other'];\n        }\n        return '';\n    }\n}\nI18nSelectPipe.decorators = [\n    { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * \\@usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * \\@publicApi\n */\nclass JsonPipe {\n    /**\n     * @param {?} value A value of any type to convert into a JSON-format string.\n     * @return {?}\n     */\n    transform(value) { return JSON.stringify(value, null, 2); }\n}\nJsonPipe.decorators = [\n    { type: Pipe, args: [{ name: 'json', pure: false },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction makeKeyValuePair(key, value) {\n    return { key: key, value: value };\n}\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * \\@usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue\n * pipe.\n *\n * {\\@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * \\@publicApi\n */\nclass KeyValuePipe {\n    /**\n     * @param {?} differs\n     */\n    constructor(differs) {\n        this.differs = differs;\n        this.keyValues = [];\n    }\n    /**\n     * @template K, V\n     * @param {?} input\n     * @param {?=} compareFn\n     * @return {?}\n     */\n    transform(input, compareFn = defaultComparator) {\n        if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n            return null;\n        }\n        if (!this.differ) {\n            // make a differ for whatever type we've been passed in\n            this.differ = this.differs.find(input).create();\n        }\n        /** @type {?} */\n        const differChanges = this.differ.diff((/** @type {?} */ (input)));\n        if (differChanges) {\n            this.keyValues = [];\n            differChanges.forEachItem((r) => {\n                this.keyValues.push(makeKeyValuePair(r.key, (/** @type {?} */ (r.currentValue))));\n            });\n            this.keyValues.sort(compareFn);\n        }\n        return this.keyValues;\n    }\n}\nKeyValuePipe.decorators = [\n    { type: Pipe, args: [{ name: 'keyvalue', pure: false },] }\n];\n/** @nocollapse */\nKeyValuePipe.ctorParameters = () => [\n    { type: KeyValueDiffers }\n];\n/**\n * @template K, V\n * @param {?} keyValueA\n * @param {?} keyValueB\n * @return {?}\n */\nfunction defaultComparator(keyValueA, keyValueB) {\n    /** @type {?} */\n    const a = keyValueA.key;\n    /** @type {?} */\n    const b = keyValueB.key;\n    // if same exit with 0;\n    if (a === b)\n        return 0;\n    // make sure that undefined are at the end of the sort.\n    if (a === undefined)\n        return 1;\n    if (b === undefined)\n        return -1;\n    // make sure that nulls are at the end of the sort.\n    if (a === null)\n        return 1;\n    if (b === null)\n        return -1;\n    if (typeof a == 'string' && typeof b == 'string') {\n        return a < b ? -1 : 1;\n    }\n    if (typeof a == 'number' && typeof b == 'number') {\n        return a - b;\n    }\n    if (typeof a == 'boolean' && typeof b == 'boolean') {\n        return a < b ? -1 : 1;\n    }\n    // `a` and `b` are of different types. Compare their string values.\n    /** @type {?} */\n    const aString = String(a);\n    /** @type {?} */\n    const bString = String(b);\n    return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number into a string,\n * formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * If no parameters are specified, the function rounds off to the nearest value using this\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\n * In the following case for example, the pipe rounds down where\n * ```Math.round()``` rounds up:\n *\n * ```html\n * -2.5 | number:'1.0-0'\n * > -3\n * Math.round(-2.5)\n * > -2\n * ```\n *\n * @see `formatNumber()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * ### Example\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n * \\@publicApi\n */\nclass DecimalPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     * @param {?} value The number to be formatted.\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatNumber(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(DecimalPipe, error.message);\n        }\n    }\n}\nDecimalPipe.decorators = [\n    { type: Pipe, args: [{ name: 'number' },] }\n];\n/** @nocollapse */\nDecimalPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see `formatPercent()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n * \\@publicApi\n */\nclass PercentPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     *\n     * @param {?} value The number to be formatted as a percentage.\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `0`.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatPercent(num, locale, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(PercentPipe, error.message);\n        }\n    }\n}\nPercentPipe.decorators = [\n    { type: Pipe, args: [{ name: 'percent' },] }\n];\n/** @nocollapse */\nPercentPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n * @see `getCurrencySymbol()`\n * @see `formatCurrency()`\n *\n * \\@usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n * \\@publicApi\n */\nclass CurrencyPipe {\n    /**\n     * @param {?} _locale\n     */\n    constructor(_locale) {\n        this._locale = _locale;\n    }\n    /**\n     *\n     * @param {?} value The number to be formatted as currency.\n     * @param {?=} currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n     * such as `USD` for the US dollar and `EUR` for the euro.\n     * @param {?=} display The format for the currency indicator. One of the following:\n     *   - `code`: Show the code (such as `USD`).\n     *   - `symbol`(default): Show the symbol (such as `$`).\n     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n     * currency.\n     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n     * locale has no narrow symbol, uses the standard symbol for the locale.\n     *   - String: Use the given string value instead of a code or a symbol.\n     * For example, an empty string will suppress the currency & symbol.\n     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n     *\n     * @param {?=} digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `2`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `2`.\n     * If not provided, the number will be formatted with the proper amount of digits,\n     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n     * @param {?=} locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n     * @return {?}\n     */\n    transform(value, currencyCode, display = 'symbol', digitsInfo, locale) {\n        if (isEmpty(value))\n            return null;\n        locale = locale || this._locale;\n        if (typeof display === 'boolean') {\n            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n                console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n            }\n            display = display ? 'symbol' : 'code';\n        }\n        /** @type {?} */\n        let currency = currencyCode || 'USD';\n        if (display !== 'code') {\n            if (display === 'symbol' || display === 'symbol-narrow') {\n                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n            }\n            else {\n                currency = display;\n            }\n        }\n        try {\n            /** @type {?} */\n            const num = strToNumber(value);\n            return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n        }\n        catch (error) {\n            throw invalidPipeArgumentError(CurrencyPipe, error.message);\n        }\n    }\n}\nCurrencyPipe.decorators = [\n    { type: Pipe, args: [{ name: 'currency' },] }\n];\n/** @nocollapse */\nCurrencyPipe.ctorParameters = () => [\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmpty(value) {\n    return value == null || value === '' || value !== value;\n}\n/**\n * Transforms a string into a number (if needed).\n * @param {?} value\n * @return {?}\n */\nfunction strToNumber(value) {\n    // Convert strings to numbers\n    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n        return Number(value);\n    }\n    if (typeof value !== 'number') {\n        throw new Error(`${value} is not a number`);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@ngModule CommonModule\n * \\@description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * \\@usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n * \\@publicApi\n */\nclass SlicePipe {\n    /**\n     * @param {?} value a list or a string to be sliced.\n     * @param {?} start the starting index of the subset to return:\n     *   - **a positive integer**: return the item at `start` index and all items after\n     *     in the list or string expression.\n     *   - **a negative integer**: return the item at `start` index from the end and all items after\n     *     in the list or string expression.\n     *   - **if positive and greater than the size of the expression**: return an empty list or\n     * string.\n     *   - **if negative and greater than the size of the expression**: return entire list or string.\n     * @param {?=} end the ending index of the subset to return:\n     *   - **omitted**: return all items until the end.\n     *   - **if positive**: return all items before `end` index of the list or string.\n     *   - **if negative**: return all items before `end` index from the end of the list or string.\n     * @return {?}\n     */\n    transform(value, start, end) {\n        if (value == null)\n            return value;\n        if (!this.supports(value)) {\n            throw invalidPipeArgumentError(SlicePipe, value);\n        }\n        return value.slice(start, end);\n    }\n    /**\n     * @private\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return typeof obj === 'string' || Array.isArray(obj); }\n}\nSlicePipe.decorators = [\n    { type: Pipe, args: [{ name: 'slice', pure: false },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n * @type {?}\n */\nconst COMMON_PIPES = [\n    AsyncPipe,\n    UpperCasePipe,\n    LowerCasePipe,\n    JsonPipe,\n    SlicePipe,\n    DecimalPipe,\n    PercentPipe,\n    TitleCasePipe,\n    CurrencyPipe,\n    DatePipe,\n    I18nPluralPipe,\n    I18nSelectPipe,\n    KeyValuePipe,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * \\@publicApi\n */\nclass CommonModule {\n}\nCommonModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n                exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n                providers: [\n                    { provide: NgLocalization, useClass: NgLocaleLocalization },\n                ],\n            },] }\n];\nconst ɵ0 = getPluralCase;\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n * \\@publicApi\n */\nclass DeprecatedI18NPipesModule {\n}\nDeprecatedI18NPipesModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [COMMON_DEPRECATED_I18N_PIPES],\n                exports: [COMMON_DEPRECATED_I18N_PIPES],\n                providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * \\@publicApi\n * @type {?}\n */\nconst DOCUMENT = new InjectionToken('DocumentToken');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst PLATFORM_BROWSER_ID = 'browser';\n/** @type {?} */\nconst PLATFORM_SERVER_ID = 'server';\n/** @type {?} */\nconst PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\n/** @type {?} */\nconst PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n/**\n * Returns whether a platform id represents a browser platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformBrowser(platformId) {\n    return platformId === PLATFORM_BROWSER_ID;\n}\n/**\n * Returns whether a platform id represents a server platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformServer(platformId) {\n    return platformId === PLATFORM_SERVER_ID;\n}\n/**\n * Returns whether a platform id represents a web worker app platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformWorkerApp(platformId) {\n    return platformId === PLATFORM_WORKER_APP_ID;\n}\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * \\@publicApi\n * @param {?} platformId\n * @return {?}\n */\nfunction isPlatformWorkerUi(platformId) {\n    return platformId === PLATFORM_WORKER_UI_ID;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.7');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewportScroller {\n}\n// De-sugared tree-shakable injection\n// See #23917\n/** @nocollapse */\n/** @nocollapse */ ViewportScroller.ngInjectableDef = defineInjectable({ providedIn: 'root', factory: () => new BrowserViewportScroller(inject(DOCUMENT), window) });\n/**\n * Manages the scroll position for a browser window.\n */\nclass BrowserViewportScroller {\n    /**\n     * @param {?} document\n     * @param {?} window\n     */\n    constructor(document, window) {\n        this.document = document;\n        this.window = window;\n        this.offset = () => [0, 0];\n    }\n    /**\n     * Configures the top offset used when scrolling to an anchor.\n     * @param {?} offset A position in screen coordinates (a tuple with x and y values)\n     * or a function that returns the top offset position.\n     *\n     * @return {?}\n     */\n    setOffset(offset) {\n        if (Array.isArray(offset)) {\n            this.offset = () => offset;\n        }\n        else {\n            this.offset = offset;\n        }\n    }\n    /**\n     * Retrieves the current scroll position.\n     * @return {?} The position in screen coordinates.\n     */\n    getScrollPosition() {\n        if (this.supportScrollRestoration()) {\n            return [this.window.scrollX, this.window.scrollY];\n        }\n        else {\n            return [0, 0];\n        }\n    }\n    /**\n     * Sets the scroll position.\n     * @param {?} position The new position in screen coordinates.\n     * @return {?}\n     */\n    scrollToPosition(position) {\n        if (this.supportScrollRestoration()) {\n            this.window.scrollTo(position[0], position[1]);\n        }\n    }\n    /**\n     * Scrolls to an anchor element.\n     * @param {?} anchor The ID of the anchor element.\n     * @return {?}\n     */\n    scrollToAnchor(anchor) {\n        if (this.supportScrollRestoration()) {\n            /** @type {?} */\n            const elSelectedById = this.document.querySelector(`#${anchor}`);\n            if (elSelectedById) {\n                this.scrollToElement(elSelectedById);\n                return;\n            }\n            /** @type {?} */\n            const elSelectedByName = this.document.querySelector(`[name='${anchor}']`);\n            if (elSelectedByName) {\n                this.scrollToElement(elSelectedByName);\n                return;\n            }\n        }\n    }\n    /**\n     * Disables automatic scroll restoration provided by the browser.\n     * @param {?} scrollRestoration\n     * @return {?}\n     */\n    setHistoryScrollRestoration(scrollRestoration) {\n        if (this.supportScrollRestoration()) {\n            /** @type {?} */\n            const history = this.window.history;\n            if (history && history.scrollRestoration) {\n                history.scrollRestoration = scrollRestoration;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    scrollToElement(el) {\n        /** @type {?} */\n        const rect = el.getBoundingClientRect();\n        /** @type {?} */\n        const left = rect.left + this.window.pageXOffset;\n        /** @type {?} */\n        const top = rect.top + this.window.pageYOffset;\n        /** @type {?} */\n        const offset = this.offset();\n        this.window.scrollTo(left - offset[0], top - offset[1]);\n    }\n    /**\n     * We only support scroll restoration when we can get a hold of window.\n     * This means that we do not support this behavior when running in a web worker.\n     *\n     * Lifting this restriction right now would require more changes in the dom adapter.\n     * Since webworkers aren't widely used, we will lift it once RouterScroller is\n     * battle-tested.\n     * @private\n     * @return {?}\n     */\n    supportScrollRestoration() {\n        try {\n            return !!this.window && !!this.window.scrollTo;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n}\n/**\n * Provides an empty implementation of the viewport scroller. This will\n * live in \\@angular/common as it will be used by both platform-server and platform-webworker.\n */\nclass NullViewportScroller {\n    /**\n     * Empty implementation\n     * @param {?} offset\n     * @return {?}\n     */\n    setOffset(offset) { }\n    /**\n     * Empty implementation\n     * @return {?}\n     */\n    getScrollPosition() { return [0, 0]; }\n    /**\n     * Empty implementation\n     * @param {?} position\n     * @return {?}\n     */\n    scrollToPosition(position) { }\n    /**\n     * Empty implementation\n     * @param {?} anchor\n     * @return {?}\n     */\n    scrollToAnchor(anchor) { }\n    /**\n     * Empty implementation\n     * @param {?} scrollRestoration\n     * @return {?}\n     */\n    setHistoryScrollRestoration(scrollRestoration) { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COMMON_DIRECTIVES as ɵangular_packages_common_common_e, findLocaleData as ɵangular_packages_common_common_d, DEPRECATED_PLURAL_FN as ɵangular_packages_common_common_a, getPluralCase as ɵangular_packages_common_common_b, COMMON_DEPRECATED_I18N_PIPES as ɵangular_packages_common_common_g, COMMON_PIPES as ɵangular_packages_common_common_f, registerLocaleData as ɵregisterLocaleData, registerLocaleData, formatDate, formatCurrency, formatNumber, formatPercent, NgLocaleLocalization, NgLocalization, Plural, NumberFormatStyle, FormStyle, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getNumberOfCurrencyDigits, getCurrencySymbol, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyName, getLocaleCurrencySymbol, parseCookieValue as ɵparseCookieValue, CommonModule, DeprecatedI18NPipesModule, NgClass, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet, DOCUMENT, AsyncPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, KeyValuePipe, DeprecatedDatePipe, DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe, PLATFORM_BROWSER_ID as ɵPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ɵPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as ɵPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as ɵPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, VERSION, ViewportScroller, NullViewportScroller as ɵNullViewportScroller, PlatformLocation, LOCATION_INITIALIZED, LocationStrategy, APP_BASE_HREF, HashLocationStrategy, PathLocationStrategy, Location };\n//# sourceMappingURL=common.js.map\n","import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (result instanceof Observable) {\n        return (subscriber) => {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","\"use strict\";\r\nvar _this = this;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar INIT_ACTION = '@ngrx/store/init';\r\nvar UPDATE_ACTION = '@ngrx/store/update-reducers';\r\nvar detectDate = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})/;\r\n// correctly parse dates from local storage\r\nexports.dateReviver = function (key, value) {\r\n    if (typeof value === 'string' && detectDate.test(value)) {\r\n        return new Date(value);\r\n    }\r\n    return value;\r\n};\r\nvar dummyReviver = function (key, value) { return value; };\r\nvar validateStateKeys = function (keys) {\r\n    return keys.map(function (key) {\r\n        var attr = key;\r\n        if (typeof key === 'object') {\r\n            attr = Object.keys(key)[0];\r\n        }\r\n        if (typeof attr !== 'string') {\r\n            throw new TypeError(\"localStorageSync Unknown Parameter Type: \" +\r\n                (\"Expected type of string, got \" + typeof attr));\r\n        }\r\n        return key;\r\n    });\r\n};\r\nexports.rehydrateApplicationState = function (keys, storage, storageKeySerializer, restoreDates) {\r\n    return keys.reduce(function (acc, curr) {\r\n        var key = curr;\r\n        var reviver = restoreDates ? exports.dateReviver : dummyReviver;\r\n        var deserialize = undefined;\r\n        var decrypt = undefined;\r\n        if (typeof key === 'object') {\r\n            key = Object.keys(key)[0];\r\n            // use the custom reviver function\r\n            if (typeof curr[key] === 'function') {\r\n                reviver = curr[key];\r\n            }\r\n            else {\r\n                // use custom reviver function if available\r\n                if (curr[key].reviver) {\r\n                    reviver = curr[key].reviver;\r\n                }\r\n                // use custom serialize function if available\r\n                if (curr[key].deserialize) {\r\n                    deserialize = curr[key].deserialize;\r\n                }\r\n            }\r\n            // Ensure that encrypt and decrypt functions are both presents\r\n            if (curr[key].encrypt && curr[key].decrypt) {\r\n                if (typeof curr[key].encrypt === 'function' &&\r\n                    typeof curr[key].decrypt === 'function') {\r\n                    decrypt = curr[key].decrypt;\r\n                }\r\n                else {\r\n                    console.error(\"Either encrypt or decrypt is not a function on '\" + curr[key] + \"' key object.\");\r\n                }\r\n            }\r\n            else if (curr[key].encrypt || curr[key].decrypt) {\r\n                // Let know that one of the encryption functions is not provided\r\n                console.error(\"Either encrypt or decrypt function is not present on '\" + curr[key] + \"' key object.\");\r\n            }\r\n        }\r\n        var stateSlice = storage.getItem(storageKeySerializer(key));\r\n        if (stateSlice) {\r\n            // Use provided decrypt function\r\n            if (decrypt) {\r\n                stateSlice = decrypt(stateSlice);\r\n            }\r\n            var isObjectRegex = new RegExp('{|\\\\[');\r\n            var raw = stateSlice;\r\n            if (stateSlice === 'null' || isObjectRegex.test(stateSlice.charAt(0))) {\r\n                raw = JSON.parse(stateSlice, reviver);\r\n            }\r\n            return Object.assign({}, acc, (_a = {},\r\n                _a[key] = deserialize ? deserialize(raw) : raw,\r\n                _a));\r\n        }\r\n        return acc;\r\n        var _a;\r\n    }, {});\r\n};\r\nexports.syncStateUpdate = function (state, keys, storage, storageKeySerializer, removeOnUndefined, syncCondition) {\r\n    if (syncCondition) {\r\n        try {\r\n            if (syncCondition(state) !== true) {\r\n                return;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Treat TypeError as do not sync\r\n            if (e instanceof TypeError) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    keys.forEach(function (key) {\r\n        var stateSlice = state[key];\r\n        var replacer = undefined;\r\n        var space = undefined;\r\n        var encrypt = undefined;\r\n        if (typeof key === 'object') {\r\n            var name_1 = Object.keys(key)[0];\r\n            stateSlice = state[name_1];\r\n            if (typeof stateSlice !== 'undefined' && key[name_1]) {\r\n                // use serialize function if specified.\r\n                if (key[name_1].serialize) {\r\n                    stateSlice = key[name_1].serialize(stateSlice);\r\n                }\r\n                else {\r\n                    // if serialize function is not specified filter on fields if an array has been provided.\r\n                    var filter = undefined;\r\n                    if (key[name_1].reduce) {\r\n                        filter = key[name_1];\r\n                    }\r\n                    else if (key[name_1].filter) {\r\n                        filter = key[name_1].filter;\r\n                    }\r\n                    if (filter) {\r\n                        stateSlice = filter.reduce(function (memo, attr) {\r\n                            memo[attr] = stateSlice[attr];\r\n                            return memo;\r\n                        }, {});\r\n                    }\r\n                    // Check if encrypt and decrypt are present, also checked at this#rehydrateApplicationState()\r\n                    if (key[name_1].encrypt && key[name_1].decrypt) {\r\n                        if (typeof key[name_1].encrypt === 'function') {\r\n                            encrypt = key[name_1].encrypt;\r\n                        }\r\n                    }\r\n                    else if (key[name_1].encrypt || key[name_1].decrypt) {\r\n                        // If one of those is not present, then let know that one is missing\r\n                        console.error(\"Either encrypt or decrypt function is not present on '\" + key[name_1] + \"' key object.\");\r\n                    }\r\n                }\r\n                /*\r\n                            Replacer and space arguments to pass to JSON.stringify.\r\n                            If these fields don't exist, undefined will be passed.\r\n                        */\r\n                replacer = key[name_1].replacer;\r\n                space = key[name_1].space;\r\n            }\r\n            key = name_1;\r\n        }\r\n        if (typeof stateSlice !== 'undefined') {\r\n            try {\r\n                if (encrypt) {\r\n                    // ensure that a string message is passed\r\n                    stateSlice = encrypt(typeof stateSlice === 'string'\r\n                        ? stateSlice\r\n                        : JSON.stringify(stateSlice, replacer, space));\r\n                }\r\n                storage.setItem(storageKeySerializer(key), typeof stateSlice === 'string'\r\n                    ? stateSlice\r\n                    : JSON.stringify(stateSlice, replacer, space));\r\n            }\r\n            catch (e) {\r\n                console.warn('Unable to save state to localStorage:', e);\r\n            }\r\n        }\r\n        else if (typeof stateSlice === 'undefined' && removeOnUndefined) {\r\n            try {\r\n                storage.removeItem(storageKeySerializer(key));\r\n            }\r\n            catch (e) {\r\n                console.warn(\"Exception on removing/cleaning undefined '\" + key + \"' state\", e);\r\n            }\r\n        }\r\n    });\r\n};\r\nexports.localStorageSync = function (config) { return function (reducer) {\r\n    if (config.storage === undefined) {\r\n        config.storage = localStorage || window.localStorage;\r\n    }\r\n    if (config.storageKeySerializer === undefined) {\r\n        config.storageKeySerializer = function (key) { return key; };\r\n    }\r\n    if (config.restoreDates === undefined) {\r\n        config.restoreDates = true;\r\n    }\r\n    var stateKeys = validateStateKeys(config.keys);\r\n    var rehydratedState = config.rehydrate\r\n        ? exports.rehydrateApplicationState(stateKeys, config.storage, config.storageKeySerializer, config.restoreDates)\r\n        : undefined;\r\n    return function (state, action) {\r\n        if (state === void 0) { state = rehydratedState; }\r\n        /*\r\n             Handle case where state is rehydrated AND initial state is supplied.\r\n             Any additional state supplied will override rehydrated state for the given key.\r\n             */\r\n        if ((action.type === INIT_ACTION || action.type === UPDATE_ACTION) &&\r\n            rehydratedState) {\r\n            state = Object.assign({}, state, rehydratedState);\r\n        }\r\n        var nextState = reducer(state, action);\r\n        exports.syncStateUpdate(nextState, stateKeys, config.storage, config.storageKeySerializer, config.removeOnUndefined, config.syncCondition);\r\n        return nextState;\r\n    };\r\n}; };\r\n/*\r\n    @deprecated: Use localStorageSync(LocalStorageConfig)\r\n\r\n    Wraps localStorageSync functionality acepting the removeOnUndefined boolean parameter in order\r\n    to clean/remove the state from the browser on situations like state reset or logout.\r\n    Defines localStorage as default storage.\r\n*/\r\nexports.localStorageSyncAndClean = function (keys, rehydrate, removeOnUndefined) {\r\n    if (rehydrate === void 0) { rehydrate = false; }\r\n    if (removeOnUndefined === void 0) { removeOnUndefined = false; }\r\n    return function (reducer) {\r\n        var config = {\r\n            keys: keys,\r\n            rehydrate: rehydrate,\r\n            storage: localStorage,\r\n            removeOnUndefined: removeOnUndefined\r\n        };\r\n        return _this.localStorageSync(config);\r\n    };\r\n};\r\n//# sourceMappingURL=index.js.map","import { Store, createSelector } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { IAppPlayer } from './app-player.reducer';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\nexport const getPlayer = (state: EchoesState) => state.player;\r\nexport const getCurrentMedia = createSelector(getPlayer, (player: IAppPlayer) => player.media);\r\nexport const getIsPlayerPlaying = createSelector(getPlayer, (player: IAppPlayer) => player.playerState === 1);\r\nexport const getShowPlayer = createSelector(getPlayer, (player: IAppPlayer) => player.showPlayer);\r\nexport const getPlayerFullscreen = createSelector(getPlayer, (player: IAppPlayer) => player.fullscreen);\r\n","export * from './app-player.reducer';\r\nexport * from './app-player.actions';\r\nexport * from './app-player.selectors';\r\n","import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge(...observables) {\n    let concurrent = Number.POSITIVE_INFINITY;\n    let scheduler = null;\n    let last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map","import { Store, select } from '@ngrx/store';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { EchoesState } from '@core/store';\r\nimport * as NowPlaylist from '@core/store/now-playlist';\r\n\r\nimport { ActivatedRoute, Data } from '@angular/router';\r\nimport { UserProfileActions } from '@core/store/user-profile';\r\nimport { AppPlayerApi } from '@api/app-player.api';\r\nimport { AppApi } from '@api/app.api';\r\n\r\nimport * as RouterActions from '@core/store/router-store';\r\n\r\nexport interface PlaylistData {\r\n  videos: GoogleApiYouTubeVideoResource[];\r\n  playlist: GoogleApiYouTubePlaylistResource;\r\n}\r\n\r\n@Injectable()\r\nexport class PlaylistProxy {\r\n  nowPlaylistIds$ = this.store.pipe(select(NowPlaylist.getPlaylistMediaIds));\r\n\r\n  constructor(\r\n    public store: Store<EchoesState>,\r\n    private userProfileActions: UserProfileActions,\r\n    private appPlayerApi: AppPlayerApi,\r\n    private appApi: AppApi\r\n  ) {}\r\n\r\n  goBack() {\r\n    this.appApi.navigateBack();\r\n  }\r\n\r\n  toRouteData(route: ActivatedRoute) {\r\n    return route.data;\r\n  }\r\n\r\n  fetchPlaylist(route: ActivatedRoute) {\r\n    return this.toRouteData(route).pipe(\r\n      map((data: PlaylistData) => data.playlist)\r\n    );\r\n  }\r\n\r\n  fetchPlaylistVideos(route: ActivatedRoute) {\r\n    return this.toRouteData(route).pipe(\r\n      map((data: PlaylistData) => data.videos)\r\n    );\r\n  }\r\n\r\n  fetchPlaylistHeader(route: ActivatedRoute) {\r\n    return this.fetchPlaylist(route).pipe(\r\n      map((playlist: GoogleApiYouTubePlaylistResource) => {\r\n        const { snippet, contentDetails } = playlist;\r\n        return `${snippet.title} (${contentDetails.itemCount} videos)`;\r\n      })\r\n    );\r\n  }\r\n\r\n  playPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.appPlayerApi.playPlaylist(playlist);\r\n  }\r\n\r\n  queuePlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.appPlayerApi.queuePlaylist(playlist);\r\n  }\r\n\r\n  queueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.appPlayerApi.queueVideo(media);\r\n  }\r\n\r\n  playVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.appPlayerApi.playVideo(media);\r\n  }\r\n\r\n  unqueueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.appPlayerApi.removeVideoFromPlaylist(media);\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\r\nimport { IAppError } from './app-core.reducer';\r\n\r\nexport enum ActionTypes {\r\n  SIDEBAR_EXPAND = '[APP CORE] SIDEBAR_EXPAND',\r\n  SIDEBAR_COLLAPSE = '[APP CORE] SIDEBAR_COLLAPSE',\r\n  SIDEBAR_TOGGLE = '[APP CORE] SIDEBAR_TOGGLE',\r\n\r\n  APP_VERSION_RECIEVED = '[APP CORE] APP_VERSION_RECIEVED',\r\n  APP_UPDATE_VERSION = '[APP CORE] APP_UPDATE_VERSION',\r\n  APP_CHECK_VERSION = '[APP CORE] APP_CHECK_VERSION',\r\n\r\n  APP_THEME_CHANGE = '[APP CORE] APP_THEME_CHANGE',\r\n\r\n  ERROR_ADD = '[APP CORE] Error Add',\r\n  ERROR_CLEAN = '[APP CORE] Error Clean',\r\n  TOGGLE_ERROR = '[APP CORE] Error Toggle'\r\n}\r\nexport class RecievedAppVersion implements Action {\r\n  public type = ActionTypes.APP_VERSION_RECIEVED;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class UpdateAppVersion implements Action {\r\n  public type = ActionTypes.APP_UPDATE_VERSION;\r\n  public payload = '';\r\n}\r\nexport class CheckVersion implements Action {\r\n  public type = ActionTypes.APP_CHECK_VERSION;\r\n  public payload = '';\r\n}\r\nexport class ExpandSidebar implements Action {\r\n  public type = ActionTypes.SIDEBAR_EXPAND;\r\n  public payload = true;\r\n}\r\n\r\nexport class CollapseSidebar implements Action {\r\n  public type = ActionTypes.SIDEBAR_COLLAPSE;\r\n  public payload = false;\r\n}\r\n\r\nexport class ToggleSidebar implements Action {\r\n  public type = ActionTypes.SIDEBAR_TOGGLE;\r\n  public payload = '';\r\n}\r\n\r\nexport class ThemeChange implements Action {\r\n  public type = ActionTypes.APP_THEME_CHANGE;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class AddError {\r\n  public type = ActionTypes.ERROR_ADD;\r\n  constructor(public payload: IAppError | any) {}\r\n}\r\n\r\nexport class ToggleError {\r\n  public type = ActionTypes.TOGGLE_ERROR;\r\n  constructor(public payload = {}) {}\r\n}\r\n\r\nexport class CleanError {\r\n  public type = ActionTypes.ERROR_CLEAN;\r\n  constructor(public payload = false) {}\r\n}\r\n\r\nexport type Action =\r\n  | RecievedAppVersion\r\n  | UpdateAppVersion\r\n  | CheckVersion\r\n  | ExpandSidebar\r\n  | CollapseSidebar\r\n  | ToggleSidebar\r\n  | ThemeChange\r\n  | AddError\r\n  | ToggleError;\r\n","import { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nexport var NotificationKind;\n(function (NotificationKind) {\n    NotificationKind[\"NEXT\"] = \"N\";\n    NotificationKind[\"ERROR\"] = \"E\";\n    NotificationKind[\"COMPLETE\"] = \"C\";\n})(NotificationKind || (NotificationKind = {}));\nexport class Notification {\n    constructor(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === \"N\";\n    }\n    observe(observer) {\n        switch (this.kind) {\n            case \"N\":\n                return observer.next && observer.next(this.value);\n            case \"E\":\n                return observer.error && observer.error(this.error);\n            case \"C\":\n                return observer.complete && observer.complete();\n        }\n    }\n    do(next, error, complete) {\n        const kind = this.kind;\n        switch (kind) {\n            case \"N\":\n                return next && next(this.value);\n            case \"E\":\n                return error && error(this.error);\n            case \"C\":\n                return complete && complete();\n        }\n    }\n    accept(nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    }\n    toObservable() {\n        const kind = this.kind;\n        switch (kind) {\n            case \"N\":\n                return of(this.value);\n            case \"E\":\n                return throwError(this.error);\n            case \"C\":\n                return empty();\n        }\n        throw new Error('unexpected notification kind value');\n    }\n    static createNext(value) {\n        if (typeof value !== 'undefined') {\n            return new Notification(\"N\", value);\n        }\n        return Notification.undefinedValueNotification;\n    }\n    static createError(err) {\n        return new Notification(\"E\", undefined, err);\n    }\n    static createComplete() {\n        return Notification.completeNotification;\n    }\n}\nNotification.completeNotification = new Notification(\"C\");\nNotification.undefinedValueNotification = new Notification(\"N\", undefined);\n//# sourceMappingURL=Notification.js.map","import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nexport class SubjectSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n        this.destination = destination;\n    }\n}\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    [rxSubscriberSymbol]() {\n        return new SubjectSubscriber(this);\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    next(value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            const { observers } = this;\n            const len = observers.length;\n            const copy = observers.slice();\n            for (let i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    }\n    error(err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    }\n    complete() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    }\n    unsubscribe() {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    }\n    _trySubscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return super._trySubscribe(subscriber);\n        }\n    }\n    _subscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        const { destination } = this;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    }\n    error(err) {\n        const { destination } = this;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    }\n    complete() {\n        const { destination } = this;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    }\n}\n//# sourceMappingURL=Subject.js.map","import { Observable } from '../Observable';\nexport function scalar(value) {\n    const result = new Observable(subscriber => {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map","export function isObject(x) {\n    return x !== null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { fadeInAnimation } from '@animations/fade-in.animation';\r\n\r\nfunction createIdMap(list: GoogleApiYouTubeVideoResource[]) {\r\n  return list.reduce((acc, cur) => {\r\n    acc[cur.id] = true;\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n@Component({\r\n  selector: 'youtube-list',\r\n  styleUrls: ['./youtube-list.scss'],\r\n  animations: [fadeInAnimation],\r\n  template: `\r\n  <ul class=\"list-unstyled clearfix\">\r\n    <li class=\"youtube-list-item\" [@fadeIn] *ngFor=\"let media of list\">\r\n      <youtube-media\r\n        [media]=\"media\"\r\n        [queued]=\"media | isInQueue:queued\"\r\n        (play)=\"playSelectedVideo(media)\"\r\n        (queue)=\"queueSelectedVideo(media)\"\r\n        (unqueue)=\"unqueueSelectedVideo(media)\"\r\n        (add)=\"addVideo(media)\">\r\n      </youtube-media>\r\n    </li>\r\n  </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YoutubeListComponent implements OnChanges {\r\n  @Input() list: GoogleApiYouTubeVideoResource[] = [];\r\n  @Input() queued: string[] = [];\r\n  @Output() play = new EventEmitter();\r\n  @Output() queue = new EventEmitter();\r\n  @Output() add = new EventEmitter();\r\n  @Output() unqueue = new EventEmitter();\r\n\r\n  queuedMediaIdMap = {};\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges({ queued }: SimpleChanges) {\r\n    // if (queued && queued.currentValue) {\r\n    //   console.log('YoutubeListComponent.createIdMap()');\r\n    //   this.queuedMediaIdMap = createIdMap(queued.currentValue);\r\n    // }\r\n  }\r\n\r\n  playSelectedVideo(media) {\r\n    this.play.emit(media);\r\n  }\r\n\r\n  queueSelectedVideo(media) {\r\n    this.queue.emit(media);\r\n  }\r\n\r\n  addVideo(media) {\r\n    this.add.emit(media);\r\n  }\r\n\r\n  unqueueSelectedVideo(media) {\r\n    this.unqueue.emit(media);\r\n  }\r\n\r\n  getMediaStatus(media: GoogleApiYouTubeVideoResource) {\r\n    return {\r\n      queued: this.queuedMediaIdMap[media.id]\r\n    };\r\n  }\r\n}\r\n","import { Subscription } from './Subscription';\nexport class SubjectSubscription extends Subscription {\n    constructor(subject, subscriber) {\n        super();\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const subject = this.subject;\n        const observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        const subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    }\n}\n//# sourceMappingURL=SubjectSubscription.js.map","import { Subscriber } from '../Subscriber';\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nclass IgnoreElementsOperator {\n    call(subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    }\n}\nclass IgnoreElementsSubscriber extends Subscriber {\n    _next(unused) {\n    }\n}\n//# sourceMappingURL=ignoreElements.js.map","import { Subscriber } from '../Subscriber';\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nclass DeMaterializeOperator {\n    call(subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    }\n}\nclass DeMaterializeSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n    }\n    _next(value) {\n        value.observe(this.destination);\n    }\n}\n//# sourceMappingURL=dematerialize.js.map","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return (source) => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\nclass GroupByOperator {\n    constructor(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n}\nclass GroupBySubscriber extends Subscriber {\n    constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    _next(value) {\n        let key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    }\n    _group(value, key) {\n        let groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        let group = groups.get(key);\n        let element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            const groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                let duration;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    }\n    _error(err) {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    }\n    removeGroup(key) {\n        this.groups.delete(key);\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                super.unsubscribe();\n            }\n        }\n    }\n}\nclass GroupDurationSubscriber extends Subscriber {\n    constructor(key, group, parent) {\n        super(group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    _next(value) {\n        this.complete();\n    }\n    _unsubscribe() {\n        const { parent, key } = this;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    }\n}\nexport class GroupedObservable extends Observable {\n    constructor(key, groupSubject, refCountSubscription) {\n        super();\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    _subscribe(subscriber) {\n        const subscription = new Subscription();\n        const { refCountSubscription, groupSubject } = this;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    }\n}\nclass InnerRefCountSubscription extends Subscription {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        parent.count++;\n    }\n    unsubscribe() {\n        const parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            super.unsubscribe();\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=groupBy.js.map","import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nclass MaterializeOperator {\n    call(subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    }\n}\nclass MaterializeSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n    }\n    _next(value) {\n        this.destination.next(Notification.createNext(value));\n    }\n    _error(err) {\n        const destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    }\n    _complete() {\n        const destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    }\n}\n//# sourceMappingURL=materialize.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        return (source) => source.pipe(exhaustMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new ExhaustMapOperator(project));\n}\nclass ExhaustMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    }\n}\nclass ExhaustMapSubscriber extends OuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    _next(value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    }\n    tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.hasSubscription = true;\n        this._innerSub(result, value, index);\n    }\n    _innerSub(result, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        subscribeToResult(this, result, value, index, innerSubscriber);\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(err) {\n        this.destination.error(err);\n    }\n    notifyComplete(innerSub) {\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=exhaustMap.js.map","/**\n * @license NgRx 7.3.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\nimport { compose, ScannedActionsSubject, Store, StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { ignoreElements, map, materialize, filter, dematerialize, exhaustMap, groupBy, mergeMap } from 'rxjs/operators';\nimport { Inject, Injectable, ErrorHandler, InjectionToken, NgModule, Optional } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst METADATA_KEY = '__@ngrx/effects__';\n/**\n * @template T\n * @param {?} sourceProto\n * @return {?}\n */\nfunction getEffectMetadataEntries(sourceProto) {\n    return sourceProto.constructor.hasOwnProperty(METADATA_KEY)\n        ? (/** @type {?} */ (sourceProto.constructor))[METADATA_KEY]\n        : [];\n}\n/**\n * @template T\n * @param {?} sourceProto\n * @param {?} entries\n * @return {?}\n */\nfunction setEffectMetadataEntries(sourceProto, entries) {\n    /** @type {?} */\n    const constructor = sourceProto.constructor;\n    /** @type {?} */\n    const meta = constructor.hasOwnProperty(METADATA_KEY)\n        ? (/** @type {?} */ (constructor))[METADATA_KEY]\n        : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[METADATA_KEY];\n    Array.prototype.push.apply(meta, entries);\n}\n/**\n * @template T\n * @param {?=} __0\n * @return {?}\n */\nfunction Effect({ dispatch = true } = {}) {\n    return /** @type {?} */ (function (target, propertyName) {\n        /** @type {?} */\n        const metadata = { propertyName, dispatch };\n        setEffectMetadataEntries(target, [metadata]);\n    });\n}\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getSourceForInstance(instance) {\n    return Object.getPrototypeOf(instance);\n}\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getSourceMetadata(instance) {\n    return compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n}\n/**\n * @template T\n * @param {?} instance\n * @return {?}\n */\nfunction getEffectsMetadata(instance) {\n    /** @type {?} */\n    const metadata = {};\n    for (const { propertyName, dispatch } of getSourceMetadata(instance)) {\n        metadata[propertyName] = { dispatch };\n    }\n    return metadata;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nfunction mergeEffects(sourceInstance) {\n    /** @type {?} */\n    const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n    /** @type {?} */\n    const observables = getSourceMetadata(sourceInstance).map(({ propertyName, dispatch }) => {\n        /** @type {?} */\n        const observable = typeof sourceInstance[propertyName] === 'function'\n            ? sourceInstance[propertyName]()\n            : sourceInstance[propertyName];\n        if (dispatch === false) {\n            return observable.pipe(ignoreElements());\n        }\n        /** @type {?} */\n        const materialized$ = observable.pipe(materialize());\n        return materialized$.pipe(map((notification) => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n        })));\n    });\n    return merge(...observables);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template V\n */\nclass Actions extends Observable {\n    /**\n     * @param {?=} source\n     */\n    constructor(source) {\n        super();\n        if (source) {\n            this.source = source;\n        }\n    }\n    /**\n     * @template R\n     * @param {?} operator\n     * @return {?}\n     */\n    lift(operator) {\n        /** @type {?} */\n        const observable = new Actions();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n}\nActions.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nActions.ctorParameters = () => [\n    { type: Observable, decorators: [{ type: Inject, args: [ScannedActionsSubject,] }] }\n];\n/**\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofType(...allowedTypes) {\n    return filter((action) => allowedTypes.some(type => type === action.type));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction verifyOutput(output, reporter) {\n    reportErrorThrown(output, reporter);\n    reportInvalidActions(output, reporter);\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportErrorThrown(output, reporter) {\n    if (output.notification.kind === 'E') {\n        reporter.handleError(output.notification.error);\n    }\n}\n/**\n * @param {?} output\n * @param {?} reporter\n * @return {?}\n */\nfunction reportInvalidActions(output, reporter) {\n    if (output.notification.kind === 'N') {\n        /** @type {?} */\n        const action = output.notification.value;\n        /** @type {?} */\n        const isInvalidAction = !isAction(action);\n        if (isInvalidAction) {\n            reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n        }\n    }\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction isAction(action) {\n    return action && action.type && typeof action.type === 'string';\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction getEffectName({ propertyName, sourceInstance, sourceName, }) {\n    /** @type {?} */\n    const isMethod = typeof sourceInstance[propertyName] === 'function';\n    return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction stringify(action) {\n    try {\n        return JSON.stringify(action);\n    }\n    catch (_a) {\n        return action;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\n/** @type {?} */\nconst onRunEffectsKey = 'ngrxOnRunEffects';\n/** @type {?} */\nconst onInitEffects = 'ngrxOnInitEffects';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass EffectSources extends Subject {\n    /**\n     * @param {?} errorHandler\n     * @param {?} store\n     */\n    constructor(errorHandler, store) {\n        super();\n        this.errorHandler = errorHandler;\n        this.store = store;\n    }\n    /**\n     * @param {?} effectSourceInstance\n     * @return {?}\n     */\n    addEffects(effectSourceInstance) {\n        this.next(effectSourceInstance);\n        if (onInitEffects in effectSourceInstance &&\n            typeof effectSourceInstance[onInitEffects] === 'function') {\n            this.store.dispatch(effectSourceInstance[onInitEffects]());\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    toActions() {\n        return this.pipe(groupBy(getSourceForInstance), mergeMap(source$ => source$.pipe(groupBy(effectsInstance))), mergeMap(source$ => source$.pipe(exhaustMap(resolveEffectSource), map(output => {\n            verifyOutput(output, this.errorHandler);\n            return output.notification;\n        }), filter((notification) => notification.kind === 'N'), dematerialize())));\n    }\n}\nEffectSources.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nEffectSources.ctorParameters = () => [\n    { type: ErrorHandler },\n    { type: Store }\n];\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nfunction effectsInstance(sourceInstance) {\n    if (onIdentifyEffectsKey in sourceInstance &&\n        typeof sourceInstance[onIdentifyEffectsKey] === 'function') {\n        return sourceInstance[onIdentifyEffectsKey]();\n    }\n    return '';\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nfunction resolveEffectSource(sourceInstance) {\n    /** @type {?} */\n    const mergedEffects$ = mergeEffects(sourceInstance);\n    if (isOnRunEffects(sourceInstance)) {\n        return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n    }\n    return mergedEffects$;\n}\n/**\n * @param {?} sourceInstance\n * @return {?}\n */\nfunction isOnRunEffects(sourceInstance) {\n    /** @type {?} */\n    const source = getSourceForInstance(sourceInstance);\n    return (onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst IMMEDIATE_EFFECTS = new InjectionToken('ngrx/effects: Immediate Effects');\n/** @type {?} */\nconst ROOT_EFFECTS = new InjectionToken('ngrx/effects: Root Effects');\n/** @type {?} */\nconst FEATURE_EFFECTS = new InjectionToken('ngrx/effects: Feature Effects');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass EffectsRunner {\n    /**\n     * @param {?} effectSources\n     * @param {?} store\n     */\n    constructor(effectSources, store) {\n        this.effectSources = effectSources;\n        this.store = store;\n        this.effectsSubscription = null;\n    }\n    /**\n     * @return {?}\n     */\n    start() {\n        if (!this.effectsSubscription) {\n            this.effectsSubscription = this.effectSources\n                .toActions()\n                .subscribe(this.store);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.effectsSubscription) {\n            this.effectsSubscription.unsubscribe();\n            this.effectsSubscription = null;\n        }\n    }\n}\nEffectsRunner.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nEffectsRunner.ctorParameters = () => [\n    { type: EffectSources },\n    { type: Store }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nclass EffectsRootModule {\n    /**\n     * @param {?} sources\n     * @param {?} runner\n     * @param {?} store\n     * @param {?} rootEffects\n     * @param {?} storeRootModule\n     * @param {?} storeFeatureModule\n     */\n    constructor(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule) {\n        this.sources = sources;\n        runner.start();\n        rootEffects.forEach(effectSourceInstance => sources.addEffects(effectSourceInstance));\n        store.dispatch({ type: ROOT_EFFECTS_INIT });\n    }\n    /**\n     * @param {?} effectSourceInstance\n     * @return {?}\n     */\n    addEffects(effectSourceInstance) {\n        this.sources.addEffects(effectSourceInstance);\n    }\n}\nEffectsRootModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n/** @nocollapse */\nEffectsRootModule.ctorParameters = () => [\n    { type: EffectSources },\n    { type: EffectsRunner },\n    { type: Store },\n    { type: Array, decorators: [{ type: Inject, args: [ROOT_EFFECTS,] }] },\n    { type: StoreRootModule, decorators: [{ type: Optional }] },\n    { type: StoreFeatureModule, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass EffectsFeatureModule {\n    /**\n     * @param {?} root\n     * @param {?} effectSourceGroups\n     * @param {?} storeRootModule\n     * @param {?} storeFeatureModule\n     */\n    constructor(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n        effectSourceGroups.forEach(group => group.forEach(effectSourceInstance => root.addEffects(effectSourceInstance)));\n    }\n}\nEffectsFeatureModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n/** @nocollapse */\nEffectsFeatureModule.ctorParameters = () => [\n    { type: EffectsRootModule },\n    { type: Array, decorators: [{ type: Inject, args: [FEATURE_EFFECTS,] }] },\n    { type: StoreRootModule, decorators: [{ type: Optional }] },\n    { type: StoreFeatureModule, decorators: [{ type: Optional }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass EffectsModule {\n    /**\n     * @param {?} featureEffects\n     * @return {?}\n     */\n    static forFeature(featureEffects) {\n        return {\n            ngModule: EffectsFeatureModule,\n            providers: [\n                featureEffects,\n                {\n                    provide: FEATURE_EFFECTS,\n                    multi: true,\n                    deps: featureEffects,\n                    useFactory: createSourceInstances,\n                },\n            ],\n        };\n    }\n    /**\n     * @param {?} rootEffects\n     * @return {?}\n     */\n    static forRoot(rootEffects) {\n        return {\n            ngModule: EffectsRootModule,\n            providers: [\n                EffectsRunner,\n                EffectSources,\n                Actions,\n                rootEffects,\n                {\n                    provide: ROOT_EFFECTS,\n                    deps: rootEffects,\n                    useFactory: createSourceInstances,\n                },\n            ],\n        };\n    }\n}\nEffectsModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n/**\n * @param {...?} instances\n * @return {?}\n */\nfunction createSourceInstances(...instances) {\n    return instances;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EffectsFeatureModule as ɵngrx_modules_effects_effects_c, createSourceInstances as ɵngrx_modules_effects_effects_a, EffectsRootModule as ɵngrx_modules_effects_effects_b, EffectsRunner as ɵngrx_modules_effects_effects_f, FEATURE_EFFECTS as ɵngrx_modules_effects_effects_e, ROOT_EFFECTS as ɵngrx_modules_effects_effects_d, Effect, getEffectsMetadata, mergeEffects, Actions, ofType, EffectsModule, EffectSources, ROOT_EFFECTS_INIT };\n//# sourceMappingURL=effects.js.map\n","import { createSelector } from '@ngrx/store';\r\nimport { IAppCore, IAppError } from './app-core.reducer';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\nexport const getAppCore = (state: EchoesState) => state.appCore;\r\nexport const getAppTheme = createSelector(\r\n  getAppCore,\r\n  (state: IAppCore) => state.theme\r\n);\r\nexport const getAllAppThemes = createSelector(\r\n  getAppCore,\r\n  (state: IAppCore) => state.themes\r\n);\r\nexport const getAppThemes = createSelector(\r\n  getAppCore,\r\n  getAppTheme,\r\n  getAllAppThemes,\r\n  (appLayout, theme: string, themes: string[]) => ({\r\n    selected: theme,\r\n    themes: themes.map(_theme => ({ label: _theme, value: _theme }))\r\n  })\r\n);\r\nexport const getAppVersion = createSelector(\r\n  getAppCore,\r\n  (state: IAppCore) => state.version\r\n);\r\nexport const getSidebarCollapsed = createSelector(\r\n  getAppCore,\r\n  (state: IAppCore) => !state.sidebarExpanded\r\n);\r\nexport const selectError = createSelector(\r\n  getAppCore,\r\n  (state: IAppCore) => state.error\r\n);\r\nexport const selectErrorMessage = createSelector(\r\n  selectError,\r\n  (error: IAppError) => error.message\r\n);\r\nexport const selectIsErrorShow = createSelector(\r\n  selectError,\r\n  (error: IAppError) => error.show\r\n);\r\nexport const selectErrorAction = createSelector(\r\n  selectError,\r\n  (error: IAppError) => error.action\r\n);\r\n","export * from './app-core.reducer';\r\nexport * from './app-core.actions';\r\nexport * from './app-core.selectors';\r\n","import { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)) {\n    if (destination.closed) {\n        return;\n    }\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output\r\n} from '@angular/core';\r\nimport { ICON_PREFIX_BRAND } from '@shared/directives/icon';\r\n\r\n@Component({\r\n  selector: 'youtube-media',\r\n  styleUrls: ['./youtube-media.scss'],\r\n  templateUrl: './youtube-media.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YoutubeMediaComponent {\r\n  @Input() media: GoogleApiYouTubeVideoResource;\r\n  @Input() queued = false;\r\n  @Output() play = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output() queue = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output() add = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output() unqueue = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n\r\n  showDesc = false;\r\n  isPlaying = false;\r\n  ICON_PREFIX_BRAND = ICON_PREFIX_BRAND;\r\n\r\n  constructor() {}\r\n\r\n  playVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.play.emit(media);\r\n  }\r\n\r\n  queueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.queue.emit(media);\r\n  }\r\n\r\n  addVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.add.emit(media);\r\n  }\r\n\r\n  toggle(showDesc: Boolean) {\r\n    this.showDesc = !showDesc;\r\n  }\r\n\r\n  removeVideoFromQueue(media: GoogleApiYouTubeVideoResource) {\r\n    this.unqueue.emit(media);\r\n  }\r\n}\r\n","<section\r\n  class=\"youtube-item card ux-maker\"\r\n  [class.show-description]=\"showDesc\">\r\n  <section class=\"media-card\">\r\n\r\n    <div class=\"front face is-rounded-bottom\">\r\n      <div class=\"indicators clearfix\">\r\n\r\n        <span class=\"pull-left item-is-playing\">\r\n\t\t\t\t\t<icon name=\"play\"></icon>Now Playing\r\n\t\t\t\t</span>\r\n\r\n      </div>\r\n\r\n      <div\r\n        rel=\"tooltip\"\r\n        class=\"media-thumb is-rounded-top\"\r\n        [tooltip]=\"media.snippet.title\"\r\n        (click)=\"playVideo(media)\">\r\n\r\n        <div class=\"thumbnail\">\r\n          <img\r\n            name\r\n            class=\"thumb-image\"\r\n            [src]=\"media | videoToThumb\">\r\n        </div>\r\n\r\n        <section class=\"stats is-absolute-bottom is-flex-row\">\r\n          <span class=\"item-duration item-action\">\r\n\t\t\t\t\t\t<icon name=\"clock-o\"></icon> {{ media.contentDetails?.duration | toFriendlyDuration }}\r\n\t\t\t\t\t</span>\r\n\r\n          <span\r\n            class=\"item-likes item-action\"\r\n            rel=\"tooltip\"\r\n            title=\"Likes\">\r\n\t\t\t\t\t\t<icon name=\"thumbs-up\"></icon> {{ media.statistics?.likeCount | number:'2.0'}}\r\n\t\t\t\t\t</span>\r\n\r\n          <span\r\n            class=\"item-views item-action\"\r\n            rel=\"tooltip\"\r\n            title=\"Views\">\r\n\t\t\t\t\t\t<icon name=\"eye\"></icon> {{ media.statistics?.viewCount | number:'2.0'}}\r\n\t\t\t\t\t</span>\r\n        </section>\r\n\r\n        <button class=\"btn btn-transparent text-primary btn-lg ux-maker play-media\">\r\n          <icon name=\"youtube-play 3x\"></icon>\r\n        </button>\r\n      </div>\r\n\r\n      <section class=\"item-actions main-actions is-rounded-bottom\">\r\n        <h4 class=\"title\">\r\n\t\t\t\t\t<a\r\n            href=\"#/video/\"\r\n            rel=\"tooltip\"\r\n            class=\"media-thumb ellipsis\"\r\n            [tooltip]=\"media.snippet.title\">\r\n            {{ media.snippet.title }}\r\n          </a>\r\n\t\t\t\t</h4>\r\n        <section class=\"media-actions is-flex-row is-flex-valign\">\r\n          <button\r\n            *ngIf=\"!queued\"\r\n            class=\"btn btn-transparent text-info first-action\"\r\n            tooltip=\"Queue this video to now playlist\"\r\n            (click)=\"queueVideo(media)\">\r\n            <icon name=\"reply\"></icon>\r\n            Queue To Playlist\r\n          </button>\r\n          <button\r\n            *ngIf=\"queued\"\r\n            class=\"btn btn-transparent text-danger no-padding\"\r\n            tooltip=\"Queue this video to now playlist\"\r\n            (click)=\"removeVideoFromQueue(media)\">\r\n            <icon name=\"trash\"></icon>\r\n            Remove From Queue\r\n          </button>\r\n          <button\r\n            class=\"btn btn-link add-to-playlist\"\r\n            disabled\r\n            tooltip=\"Add this video to a playlist\"\r\n            (click)=\"addVideo(media)\">\r\n            <icon name=\"plus\"></icon>\r\n            Add\r\n          </button>\r\n          <span class=\"is-strechable\"></span>\r\n          <button class=\"btn btn-transparent no-padding\">\r\n            <icon\r\n              name=\"info-circle\"\r\n              class=\"text-info text-md is-media-valign\"\r\n              (click)=\"toggle(showDesc)\"\r\n              tooltip=\"more info about this video\"></icon>\r\n          </button>\r\n        </section>\r\n      </section>\r\n    </div>\r\n\r\n    <div class=\"description back face is-rounded is-absolute-top is-absolute-left\">\r\n      <h4>\r\n\t\t\t\t<a\r\n          href=\"https://youtube.com/watch?v={{ media.id }}\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          tooltip=\"Open in YouTube\"\r\n          class=\"media-thumb\"><icon\r\n            name=\"youtube\"\r\n            [prefix]=\"ICON_PREFIX_BRAND\"></icon>\r\n          {{ media.snippet.title}}\r\n        </a>\r\n\t\t\t</h4>\r\n      <div *ngIf=\"showDesc\">{{ media.snippet.description }}</div>\r\n    </div>\r\n\r\n    <section\r\n      *ngIf=\"showDesc\"\r\n      class=\"close-desc is-absolute-bottom is-absolute-right\">\r\n      <button\r\n        (click)=\"toggle(showDesc)\"\r\n        class=\"btn-transparent btn-xs text-md text-success\"\r\n        tooltip=\"flip back...\">\r\n        <icon name=\"times-circle\"></icon>\r\n      </button>\r\n    </section>\r\n\r\n  </section>\r\n\r\n</section>\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'isInQueue' })\r\nexport class IsInQueuePipe implements PipeTransform {\r\n  transform(media: GoogleApiYouTubeVideoResource, medias: string[]): any {\r\n    return medias.includes(media.id);\r\n  }\r\n}\r\n","\n  <ul class=\"list-unstyled clearfix\">\n    <li class=\"youtube-list-item\" [@fadeIn] *ngFor=\"let media of list\">\n      <youtube-media\n        [media]=\"media\"\n        [queued]=\"media | isInQueue:queued\"\n        (play)=\"playSelectedVideo(media)\"\n        (queue)=\"queueSelectedVideo(media)\"\n        (unqueue)=\"unqueueSelectedVideo(media)\"\n        (add)=\"addVideo(media)\">\n      </youtube-media>\n    </li>\n  </ul>\n  ","import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '@env/environment';\r\nimport { Authorization } from './authorization.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\ninterface YoutubeApiServiceOptions {\r\n  url?: string;\r\n  http?: HttpClient;\r\n  idKey?: string;\r\n  authService?: Authorization;\r\n  config?: any;\r\n  authorize?: boolean;\r\n}\r\n\r\nconst defaultParams = {\r\n  part: 'snippet,contentDetails',\r\n  key: environment.youtube.API_KEY,\r\n  maxResults: '50',\r\n  pageToken: ''\r\n};\r\n\r\n// @Injectable()\r\nexport class YoutubeApiService {\r\n  url: string;\r\n  http: HttpClient;\r\n  idKey: string;\r\n  authorize = false;\r\n  isSearching = false;\r\n  params: HttpParams;\r\n  nextPageToken: string;\r\n\r\n  constructor(options: any, private authService?: Authorization) {\r\n    this.resetConfig();\r\n    if (authService) {\r\n      this.authorize = true;\r\n    }\r\n    if (options) {\r\n      this.url = options.url;\r\n      this.http = options.http;\r\n      this.idKey = options.idKey || '';\r\n      if (options.config) {\r\n        this.setConfig(options.config);\r\n      }\r\n    }\r\n  }\r\n\r\n  setConfig(options) {\r\n    this.params = Object.keys(options).reduce((params, option) => {\r\n      return params.set(option, options[option]);\r\n    }, this.params);\r\n  }\r\n\r\n  hasToken(): boolean {\r\n    return this.authService && this.authService.accessToken.length > 0;\r\n  }\r\n\r\n  resetConfig() {\r\n    this.params = new HttpParams({ fromObject: defaultParams });\r\n  }\r\n\r\n  getList() {\r\n    this.isSearching = true;\r\n    const options = {\r\n      params: this.params,\r\n      headers: this.createHeaders()\r\n    };\r\n    return this.http.get(this.url, options);\r\n  }\r\n\r\n  list(id) {\r\n    if (this.idKey) {\r\n      this.setConfig({ [this.idKey]: id });\r\n      // this.params[this.idKey] = id;\r\n    }\r\n\r\n    this.isSearching = true;\r\n    const options = {\r\n      params: this.params,\r\n      headers: this.createHeaders()\r\n    };\r\n    return this.http.get(this.url, options).pipe(\r\n      map((response: any) => {\r\n        this.nextPageToken = response.nextPageToken;\r\n        this.isSearching = false;\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  fetchNextPage() {\r\n    if (!this.isSearching) {\r\n      // this.params['pageToken'] = this.nextPageToken;\r\n      this.setPageToken(this.nextPageToken);\r\n    }\r\n  }\r\n\r\n  resetPageToken() {\r\n    // this.params['pageToken'] = '';\r\n    this.setPageToken('');\r\n  }\r\n\r\n  setPageToken(pageToken) {\r\n    this.setConfig({ pageToken });\r\n  }\r\n\r\n  deletePageToken() {\r\n    this.params = this.params.delete('pageToken');\r\n  }\r\n\r\n  createHeaders() {\r\n    const accessToken = this.authService && this.authService.accessToken;\r\n    const headers = {};\r\n    if (accessToken && this.authorize) {\r\n      headers['Authorization'] = `Bearer ${accessToken}`;\r\n    }\r\n    return headers;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nconst LINE_WITH_TRACKre = /([a-zA-Z \\S\\d]){0,}(\\d{1,2}:\\d{2}:{0,1}\\d{0,2})+([a-zA-Z \\S]){0,}/;\r\nconst HH_MM_SSre = /(\\d{1,2}):\\d{2}:?\\d{0,2}/;\r\n\r\n@Injectable()\r\nexport class MediaParserService {\r\n  constructor() {}\r\n\r\n  extractTracks(description: string) {\r\n    const hasTracksRegexp = new RegExp(LINE_WITH_TRACKre, 'gmi');\r\n    const tracks = description ? description.match(hasTracksRegexp) : [];\r\n    // make sure there's a first track\r\n    if (tracks && tracks.length && !tracks[0].includes('00:0')) {\r\n      tracks.unshift('00:00');\r\n    }\r\n    return tracks;\r\n  }\r\n\r\n  extractTime(track: string) {\r\n    const title = track.match(HH_MM_SSre);\r\n    return title;\r\n  }\r\n\r\n  verifyTracksCue(tracks: string[]) {\r\n    const isCueValid = tracks\r\n      .map((track: string) => this.extractTime(track))\r\n      .every((track, index, arr) => {\r\n        const prev = index > 0 ? this.toNumber(arr[index - 1][0]) : false;\r\n        const current = this.toNumber(track[0]);\r\n        return prev ? current > prev : true;\r\n      });\r\n    return isCueValid;\r\n  }\r\n\r\n  parseTracks(tracks: string[] = []) {\r\n    let _tracks = [];\r\n    const isFormatValid = this.verifyTracksCue(tracks);\r\n    if (isFormatValid && tracks) {\r\n      _tracks = tracks.filter((track: string) => {\r\n        const isTrack = HH_MM_SSre.test(track);\r\n        return isTrack;\r\n      });\r\n    }\r\n    return _tracks;\r\n  }\r\n\r\n  /**\r\n   * converts time format of HH:MM:SS to seconds\r\n   * @param time string\r\n   */\r\n  toNumber(time: string): number {\r\n    const timeUnitRatio = {\r\n      '3': 60 * 60, // HH\r\n      '2': 60, // MM\r\n      '1': 1\r\n    };\r\n    return time\r\n      .split(':')\r\n      .reverse()\r\n      .map((num: string) => parseInt(num, 10))\r\n      .reduce((acc: number, current: number, index: number, arr: number[]) => {\r\n        return acc + current * +timeUnitRatio[index + 1];\r\n      }, 0);\r\n  }\r\n}\r\n","import { hostReportError } from './hostReportError';\nexport const subscribeToPromise = (promise) => (subscriber) => {\n    promise.then((value) => {\n        if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n        }\n    }, (err) => subscriber.error(err))\n        .then(null, hostReportError);\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToPromise.js.map","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Number.POSITIVE_INFINITY) {\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map","import { mergeMap } from './mergeMap';\nexport function concatMap(project, resultSelector) {\n    return mergeMap(project, resultSelector, 1);\n}\n//# sourceMappingURL=concatMap.js.map","export function isPromise(value) {\n    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵparseCookieValue, DOCUMENT, PlatformLocation, isPlatformServer, ɵPLATFORM_BROWSER_ID, CommonModule } from '@angular/common';\nimport { ɵglobal, Injectable, Inject, InjectionToken, ApplicationInitStatus, APP_INITIALIZER, Injector, setTestabilityGetter, NgProbeToken, Optional, ApplicationRef, NgZone, getDebugNode, ViewEncapsulation, RendererStyleFlags2, PLATFORM_ID, ɵConsole, SecurityContext, ɵ_sanitizeHtml, ɵ_sanitizeStyle, ɵ_sanitizeUrl, PLATFORM_INITIALIZER, Sanitizer, createPlatformFactory, platformCore, ErrorHandler, ɵAPP_ROOT, RendererFactory2, Testability, APP_ID, NgModule, ApplicationModule, SkipSelf, inject, defineInjectable, Version } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nlet _DOM = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nfunction getDOM() {\n    return _DOM;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nfunction setRootDomAdapter(adapter) {\n    if (!_DOM) {\n        _DOM = adapter;\n    }\n}\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nclass DomAdapter {\n    constructor() {\n        this.resourceLoaderType = (/** @type {?} */ (null));\n    }\n    /**\n     * Maps attribute names to their corresponding property names for cases\n     * where attribute name doesn't match property name.\n     * @return {?}\n     */\n    get attrToPropMap() { return this._attrToPropMap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set attrToPropMap(value) { this._attrToPropMap = value; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides DOM operations in any browser environment.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nclass GenericBrowserDomAdapter extends DomAdapter {\n    constructor() {\n        super();\n        this._animationPrefix = null;\n        this._transitionEnd = null;\n        try {\n            /** @type {?} */\n            const element = this.createElement('div', document);\n            if (this.getStyle(element, 'animationName') != null) {\n                this._animationPrefix = '';\n            }\n            else {\n                /** @type {?} */\n                const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n                for (let i = 0; i < domPrefixes.length; i++) {\n                    if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n                        break;\n                    }\n                }\n            }\n            /** @type {?} */\n            const transEndEventNames = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                transition: 'transitionend'\n            };\n            Object.keys(transEndEventNames).forEach((key) => {\n                if (this.getStyle(element, key) != null) {\n                    this._transitionEnd = transEndEventNames[key];\n                }\n            });\n        }\n        catch (_a) {\n            this._animationPrefix = null;\n            this._transitionEnd = null;\n        }\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getDistributedNodes(el) { return ((/** @type {?} */ (el))).getDistributedNodes(); }\n    /**\n     * @param {?} el\n     * @param {?} baseUrl\n     * @param {?} href\n     * @return {?}\n     */\n    resolveAndSetHref(el, baseUrl, href) {\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n    }\n    /**\n     * @return {?}\n     */\n    supportsDOMEvents() { return true; }\n    /**\n     * @return {?}\n     */\n    supportsNativeShadowDOM() {\n        return typeof ((/** @type {?} */ (document.body))).createShadowRoot === 'function';\n    }\n    /**\n     * @return {?}\n     */\n    getAnimationPrefix() { return this._animationPrefix ? this._animationPrefix : ''; }\n    /**\n     * @return {?}\n     */\n    getTransitionEnd() { return this._transitionEnd ? this._transitionEnd : ''; }\n    /**\n     * @return {?}\n     */\n    supportsAnimation() {\n        return this._animationPrefix != null && this._transitionEnd != null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _attrToPropMap = {\n    'class': 'className',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\n/** @type {?} */\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\n/** @type {?} */\nconst _keyMap = {\n    // The following values are here for cross-browser compatibility and to match the W3C standard\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\n/** @type {?} */\nconst _chromeNumKeyPadMap = {\n    'A': '1',\n    'B': '2',\n    'C': '3',\n    'D': '4',\n    'E': '5',\n    'F': '6',\n    'G': '7',\n    'H': '8',\n    'I': '9',\n    'J': '*',\n    'K': '+',\n    'M': '-',\n    'N': '.',\n    'O': '/',\n    '\\x60': '0',\n    '\\x90': 'NumLock'\n};\n/** @type {?} */\nlet nodeContains;\nif (ɵglobal['Node']) {\n    nodeContains = ɵglobal['Node'].prototype.contains || function (node) {\n        return !!(this.compareDocumentPosition(node) & 16);\n    };\n}\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\n    /**\n     * @param {?} templateHtml\n     * @return {?}\n     */\n    parse(templateHtml) { throw new Error('parse not implemented'); }\n    /**\n     * @return {?}\n     */\n    static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    hasProperty(element, name) { return name in element; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) { ((/** @type {?} */ (el)))[name] = value; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    getProperty(el, name) { return ((/** @type {?} */ (el)))[name]; }\n    /**\n     * @param {?} el\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    invoke(el, methodName, args) { ((/** @type {?} */ (el)))[methodName](...args); }\n    // TODO(tbosch): move this into a separate environment class once we have it\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    logError(error) {\n        if (window.console) {\n            if (console.error) {\n                console.error(error);\n            }\n            else {\n                console.log(error);\n            }\n        }\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    log(error) {\n        if (window.console) {\n            window.console.log && window.console.log(error);\n        }\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    logGroup(error) {\n        if (window.console) {\n            window.console.group && window.console.group(error);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    logGroupEnd() {\n        if (window.console) {\n            window.console.groupEnd && window.console.groupEnd();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get attrToPropMap() { return _attrToPropMap; }\n    /**\n     * @param {?} nodeA\n     * @param {?} nodeB\n     * @return {?}\n     */\n    contains(nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); }\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    querySelector(el, selector) { return el.querySelector(selector); }\n    /**\n     * @param {?} el\n     * @param {?} selector\n     * @return {?}\n     */\n    querySelectorAll(el, selector) { return el.querySelectorAll(selector); }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    on(el, evt, listener) { el.addEventListener(evt, listener, false); }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @param {?} listener\n     * @return {?}\n     */\n    onAndCancel(el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return () => { el.removeEventListener(evt, listener, false); };\n    }\n    /**\n     * @param {?} el\n     * @param {?} evt\n     * @return {?}\n     */\n    dispatchEvent(el, evt) { el.dispatchEvent(evt); }\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    createMouseEvent(eventType) {\n        /** @type {?} */\n        const evt = this.getDefaultDocument().createEvent('MouseEvent');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    }\n    /**\n     * @param {?} eventType\n     * @return {?}\n     */\n    createEvent(eventType) {\n        /** @type {?} */\n        const evt = this.getDefaultDocument().createEvent('Event');\n        evt.initEvent(eventType, true, true);\n        return evt;\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    preventDefault(evt) {\n        evt.preventDefault();\n        evt.returnValue = false;\n    }\n    /**\n     * @param {?} evt\n     * @return {?}\n     */\n    isPrevented(evt) {\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getInnerHTML(el) { return el.innerHTML; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getTemplateContent(el) {\n        return 'content' in el && this.isTemplateElement(el) ? ((/** @type {?} */ (el))).content : null;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getOuterHTML(el) { return el.outerHTML; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nodeName(node) { return node.nodeName; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nodeValue(node) { return node.nodeValue; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    type(node) { return node.type; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    content(node) {\n        if (this.hasProperty(node, 'content')) {\n            return ((/** @type {?} */ (node))).content;\n        }\n        else {\n            return node;\n        }\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    firstChild(el) { return el.firstChild; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    nextSibling(el) { return el.nextSibling; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    parentElement(el) { return el.parentNode; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    childNodes(el) { return el.childNodes; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    childNodesAsList(el) {\n        /** @type {?} */\n        const childNodes = el.childNodes;\n        /** @type {?} */\n        const res = new Array(childNodes.length);\n        for (let i = 0; i < childNodes.length; i++) {\n            res[i] = childNodes[i];\n        }\n        return res;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    clearNodes(el) {\n        while (el.firstChild) {\n            el.removeChild(el.firstChild);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    appendChild(el, node) { el.appendChild(node); }\n    /**\n     * @param {?} el\n     * @param {?} node\n     * @return {?}\n     */\n    removeChild(el, node) { el.removeChild(node); }\n    /**\n     * @param {?} el\n     * @param {?} newChild\n     * @param {?} oldChild\n     * @return {?}\n     */\n    replaceChild(el, newChild, oldChild) { el.replaceChild(newChild, oldChild); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    remove(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n        return node;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    insertBefore(parent, ref, node) { parent.insertBefore(node, ref); }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} nodes\n     * @return {?}\n     */\n    insertAllBefore(parent, ref, nodes) {\n        nodes.forEach((n) => parent.insertBefore(n, ref));\n    }\n    /**\n     * @param {?} parent\n     * @param {?} ref\n     * @param {?} node\n     * @return {?}\n     */\n    insertAfter(parent, ref, node) { parent.insertBefore(node, ref.nextSibling); }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setInnerHTML(el, value) { el.innerHTML = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getText(el) { return el.textContent; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setText(el, value) { el.textContent = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getValue(el) { return el.value; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(el, value) { el.value = value; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getChecked(el) { return el.checked; }\n    /**\n     * @param {?} el\n     * @param {?} value\n     * @return {?}\n     */\n    setChecked(el, value) { el.checked = value; }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    createComment(text) { return this.getDefaultDocument().createComment(text); }\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    createTemplate(html) {\n        /** @type {?} */\n        const t = this.getDefaultDocument().createElement('template');\n        t.innerHTML = html;\n        return t;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    createElement(tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElement(tagName);\n    }\n    /**\n     * @param {?} ns\n     * @param {?} tagName\n     * @param {?=} doc\n     * @return {?}\n     */\n    createElementNS(ns, tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElementNS(ns, tagName);\n    }\n    /**\n     * @param {?} text\n     * @param {?=} doc\n     * @return {?}\n     */\n    createTextNode(text, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createTextNode(text);\n    }\n    /**\n     * @param {?} attrName\n     * @param {?} attrValue\n     * @param {?=} doc\n     * @return {?}\n     */\n    createScriptTag(attrName, attrValue, doc) {\n        doc = doc || this.getDefaultDocument();\n        /** @type {?} */\n        const el = (/** @type {?} */ (doc.createElement('SCRIPT')));\n        el.setAttribute(attrName, attrValue);\n        return el;\n    }\n    /**\n     * @param {?} css\n     * @param {?=} doc\n     * @return {?}\n     */\n    createStyleElement(css, doc) {\n        doc = doc || this.getDefaultDocument();\n        /** @type {?} */\n        const style = (/** @type {?} */ (doc.createElement('style')));\n        this.appendChild(style, this.createTextNode(css, doc));\n        return style;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    createShadowRoot(el) { return ((/** @type {?} */ (el))).createShadowRoot(); }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getShadowRoot(el) { return ((/** @type {?} */ (el))).shadowRoot; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getHost(el) { return ((/** @type {?} */ (el))).host; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    clone(node) { return node.cloneNode(true); }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getElementsByClassName(element, name) {\n        return element.getElementsByClassName(name);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getElementsByTagName(element, name) {\n        return element.getElementsByTagName(name);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    classList(element) { return Array.prototype.slice.call(element.classList, 0); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    addClass(element, className) { element.classList.add(className); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    removeClass(element, className) { element.classList.remove(className); }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @return {?}\n     */\n    hasClass(element, className) {\n        return element.classList.contains(className);\n    }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?} styleValue\n     * @return {?}\n     */\n    setStyle(element, styleName, styleValue) {\n        element.style[styleName] = styleValue;\n    }\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    removeStyle(element, stylename) {\n        // IE requires '' instead of null\n        // see https://github.com/angular/angular/issues/7916\n        element.style[stylename] = '';\n    }\n    /**\n     * @param {?} element\n     * @param {?} stylename\n     * @return {?}\n     */\n    getStyle(element, stylename) { return element.style[stylename]; }\n    /**\n     * @param {?} element\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    hasStyle(element, styleName, styleValue) {\n        /** @type {?} */\n        const value = this.getStyle(element, styleName) || '';\n        return styleValue ? value == styleValue : value.length > 0;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    tagName(element) { return element.tagName; }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    attributeMap(element) {\n        /** @type {?} */\n        const res = new Map();\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            res.set(attrib.name, attrib.value);\n        }\n        return res;\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    hasAttribute(element, attribute) {\n        return element.hasAttribute(attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} attribute\n     * @return {?}\n     */\n    hasAttributeNS(element, ns, attribute) {\n        return element.hasAttributeNS(ns, attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    getAttribute(element, attribute) {\n        return element.getAttribute(attribute);\n    }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    getAttributeNS(element, ns, name) {\n        return element.getAttributeNS(ns, name);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setAttribute(element, name, value) { element.setAttribute(name, value); }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setAttributeNS(element, ns, name, value) {\n        element.setAttributeNS(ns, name, value);\n    }\n    /**\n     * @param {?} element\n     * @param {?} attribute\n     * @return {?}\n     */\n    removeAttribute(element, attribute) { element.removeAttribute(attribute); }\n    /**\n     * @param {?} element\n     * @param {?} ns\n     * @param {?} name\n     * @return {?}\n     */\n    removeAttributeNS(element, ns, name) {\n        element.removeAttributeNS(ns, name);\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    templateAwareRoot(el) { return this.isTemplateElement(el) ? this.content(el) : el; }\n    /**\n     * @return {?}\n     */\n    createHtmlDocument() {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    }\n    /**\n     * @return {?}\n     */\n    getDefaultDocument() { return document; }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getBoundingClientRect(el) {\n        try {\n            return el.getBoundingClientRect();\n        }\n        catch (_a) {\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\n        }\n    }\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    getTitle(doc) { return doc.title; }\n    /**\n     * @param {?} doc\n     * @param {?} newTitle\n     * @return {?}\n     */\n    setTitle(doc, newTitle) { doc.title = newTitle || ''; }\n    /**\n     * @param {?} n\n     * @param {?} selector\n     * @return {?}\n     */\n    elementMatches(n, selector) {\n        if (this.isElementNode(n)) {\n            return n.matches && n.matches(selector) ||\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n        }\n        return false;\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    isTemplateElement(el) {\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isTextNode(node) { return node.nodeType === Node.TEXT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isCommentNode(node) { return node.nodeType === Node.COMMENT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isElementNode(node) { return node.nodeType === Node.ELEMENT_NODE; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    hasShadowRoot(node) {\n        return node.shadowRoot != null && node instanceof HTMLElement;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    isShadowRoot(node) { return node instanceof DocumentFragment; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    importIntoDoc(node) { return document.importNode(this.templateAwareRoot(node), true); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    adoptNode(node) { return document.adoptNode(node); }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    getHref(el) { return (/** @type {?} */ (el.getAttribute('href'))); }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    getEventKey(event) {\n        /** @type {?} */\n        let key = event.key;\n        if (key == null) {\n            key = event.keyIdentifier;\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n            // Safari cf\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n            if (key == null) {\n                return 'Unidentified';\n            }\n            if (key.startsWith('U+')) {\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n                    // There is a bug in Chrome for numeric keypad keys:\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\n                    // 1, 2, 3 ... are reported as A, B, C ...\n                    key = ((/** @type {?} */ (_chromeNumKeyPadMap)))[key];\n                }\n            }\n        }\n        return _keyMap[key] || key;\n    }\n    /**\n     * @param {?} doc\n     * @param {?} target\n     * @return {?}\n     */\n    getGlobalEventTarget(doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    getHistory() { return window.history; }\n    /**\n     * @return {?}\n     */\n    getLocation() { return window.location; }\n    /**\n     * @param {?} doc\n     * @return {?}\n     */\n    getBaseHref(doc) {\n        /** @type {?} */\n        const href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    }\n    /**\n     * @return {?}\n     */\n    resetBaseElement() { baseElement = null; }\n    /**\n     * @return {?}\n     */\n    getUserAgent() { return window.navigator.userAgent; }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setData(element, name, value) {\n        this.setAttribute(element, 'data-' + name, value);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @return {?}\n     */\n    getData(element, name) {\n        return this.getAttribute(element, 'data-' + name);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    getComputedStyle(element) { return getComputedStyle(element); }\n    // TODO(tbosch): move this into a separate environment class once we have it\n    /**\n     * @return {?}\n     */\n    supportsWebAnimation() {\n        return typeof ((/** @type {?} */ (Element))).prototype['animate'] === 'function';\n    }\n    /**\n     * @return {?}\n     */\n    performanceNow() {\n        // performance.now() is not available in all browsers, see\n        // http://caniuse.com/#search=performance.now\n        return window.performance && window.performance.now ? window.performance.now() :\n            new Date().getTime();\n    }\n    /**\n     * @return {?}\n     */\n    supportsCookies() { return true; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getCookie(name) { return ɵparseCookieValue(document.cookie, name); }\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setCookie(name, value) {\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n        // not clear other cookies.\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    }\n}\n/** @type {?} */\nlet baseElement = null;\n/**\n * @return {?}\n */\nfunction getBaseElementHref() {\n    if (!baseElement) {\n        baseElement = (/** @type {?} */ (document.querySelector('base')));\n        if (!baseElement) {\n            return null;\n        }\n    }\n    return baseElement.getAttribute('href');\n}\n// based on urlUtils.js in AngularJS 1\n/** @type {?} */\nlet urlParsingNode;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction relativePath(url) {\n    if (!urlParsingNode) {\n        urlParsingNode = document.createElement('a');\n    }\n    urlParsingNode.setAttribute('href', url);\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n        '/' + urlParsingNode.pathname;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `\\@angular/common` instead.\n * \\@publicApi\n * @type {?}\n */\nconst DOCUMENT$1 = DOCUMENT;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction supportsState() {\n    return !!window.history.pushState;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n */\nclass BrowserPlatformLocation extends PlatformLocation {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n        this._init();\n    }\n    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _init() {\n        ((/** @type {?} */ (this))).location = getDOM().getLocation();\n        this._history = getDOM().getHistory();\n    }\n    /**\n     * @return {?}\n     */\n    getBaseHrefFromDOM() { return (/** @type {?} */ (getDOM().getBaseHref(this._doc))); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onPopState(fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onHashChange(fn) {\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n    }\n    /**\n     * @return {?}\n     */\n    get pathname() { return this.location.pathname; }\n    /**\n     * @return {?}\n     */\n    get search() { return this.location.search; }\n    /**\n     * @return {?}\n     */\n    get hash() { return this.location.hash; }\n    /**\n     * @param {?} newPath\n     * @return {?}\n     */\n    set pathname(newPath) { this.location.pathname = newPath; }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    pushState(state, title, url) {\n        if (supportsState()) {\n            this._history.pushState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    }\n    /**\n     * @param {?} state\n     * @param {?} title\n     * @param {?} url\n     * @return {?}\n     */\n    replaceState(state, title, url) {\n        if (supportsState()) {\n            this._history.replaceState(state, title, url);\n        }\n        else {\n            this.location.hash = url;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    forward() { this._history.forward(); }\n    /**\n     * @return {?}\n     */\n    back() { this._history.back(); }\n}\nBrowserPlatformLocation.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserPlatformLocation.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n * @type {?}\n */\nconst TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @param {?} injector\n * @return {?}\n */\nfunction appInitializerFactory(transitionId, document, injector) {\n    return () => {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(ApplicationInitStatus).donePromise.then(() => {\n            /** @type {?} */\n            const dom = getDOM();\n            /** @type {?} */\n            const styles = Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n            styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n                .forEach(el => dom.remove(el));\n        });\n    };\n}\n/** @type {?} */\nconst SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT$1, Injector],\n        multi: true\n    },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BrowserGetTestability {\n    /**\n     * @return {?}\n     */\n    static init() { setTestabilityGetter(new BrowserGetTestability()); }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    addToWindow(registry) {\n        ɵglobal['getAngularTestability'] = (elem, findInAncestors = true) => {\n            /** @type {?} */\n            const testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        };\n        ɵglobal['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n        ɵglobal['getAllAngularRootElements'] = () => registry.getAllRootElements();\n        /** @type {?} */\n        const whenAllStable = (callback /** TODO #9100 */) => {\n            /** @type {?} */\n            const testabilities = ɵglobal['getAllAngularTestabilities']();\n            /** @type {?} */\n            let count = testabilities.length;\n            /** @type {?} */\n            let didWork = false;\n            /** @type {?} */\n            const decrement = function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            };\n            testabilities.forEach(function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            });\n        };\n        if (!ɵglobal['frameworkStabilizers']) {\n            ɵglobal['frameworkStabilizers'] = [];\n        }\n        ɵglobal['frameworkStabilizers'].push(whenAllStable);\n    }\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        /** @type {?} */\n        const t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (getDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n        }\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param {?} value The value to export.\n * @return {?}\n */\nfunction exportNgVar(name, value) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for angularJS (via `goog.provide('ng....')`).\n        /** @type {?} */\n        const ng = ɵglobal['ng'] = ((/** @type {?} */ (ɵglobal['ng']))) || {};\n        ng[name] = value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CORE_TOKENS = {\n    'ApplicationRef': ApplicationRef,\n    'NgZone': NgZone,\n};\n/** @type {?} */\nconst INSPECT_GLOBAL_NAME = 'probe';\n/** @type {?} */\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nfunction inspectNativeElement(element) {\n    return getDebugNode(element);\n}\n/**\n * @param {?} coreTokens\n * @return {?}\n */\nfunction _createNgProbe(coreTokens) {\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\n    return () => inspectNativeElement;\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens) {\n    return tokens.reduce((prev, t) => (prev[t.name] = t.token, prev), {});\n}\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n * @type {?}\n */\nconst ELEMENT_PROBE_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: _createNgProbe,\n        deps: [\n            [NgProbeToken, new Optional()],\n        ],\n        multi: true,\n    },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token for the event-manager plug-in service.\n *\n * \\@publicApi\n * @type {?}\n */\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * \\@publicApi\n */\nclass EventManager {\n    /**\n     * Initializes an instance of the event-manager service.\n     * @param {?} plugins\n     * @param {?} _zone\n     */\n    constructor(plugins, _zone) {\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach(p => p.manager = this);\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param {?} element The HTML element to receive event notifications.\n     * @param {?} eventName The name of the event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} A callback function that can be used to remove the handler.\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    }\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param {?} target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param {?} eventName The name of the event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} A callback function that can be used to remove the handler.\n     */\n    addGlobalEventListener(target, eventName, handler) {\n        /** @type {?} */\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    }\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     * @return {?}\n     */\n    getZone() { return this._zone; }\n    /**\n     * \\@internal\n     * @param {?} eventName\n     * @return {?}\n     */\n    _findPluginFor(eventName) {\n        /** @type {?} */\n        const plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        /** @type {?} */\n        const plugins = this._plugins;\n        for (let i = 0; i < plugins.length; i++) {\n            /** @type {?} */\n            const plugin = plugins[i];\n            if (plugin.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin);\n                return plugin;\n            }\n        }\n        throw new Error(`No event manager plugin found for event ${eventName}`);\n    }\n}\nEventManager.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nEventManager.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] }] },\n    { type: NgZone }\n];\n/**\n * @abstract\n */\nclass EventManagerPlugin {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addGlobalEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const target = getDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n        }\n        return this.addEventListener(target, eventName, handler);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SharedStylesHost {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._stylesSet = new Set();\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    addStyles(styles) {\n        /** @type {?} */\n        const additions = new Set();\n        styles.forEach(style => {\n            if (!this._stylesSet.has(style)) {\n                this._stylesSet.add(style);\n                additions.add(style);\n            }\n        });\n        this.onStylesAdded(additions);\n    }\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    onStylesAdded(additions) { }\n    /**\n     * @return {?}\n     */\n    getAllStyles() { return Array.from(this._stylesSet); }\n}\nSharedStylesHost.decorators = [\n    { type: Injectable }\n];\nclass DomSharedStylesHost extends SharedStylesHost {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n        this._hostNodes = new Set();\n        this._styleNodes = new Set();\n        this._hostNodes.add(_doc.head);\n    }\n    /**\n     * @private\n     * @param {?} styles\n     * @param {?} host\n     * @return {?}\n     */\n    _addStylesToHost(styles, host) {\n        styles.forEach((style) => {\n            /** @type {?} */\n            const styleEl = this._doc.createElement('style');\n            styleEl.textContent = style;\n            this._styleNodes.add(host.appendChild(styleEl));\n        });\n    }\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    addHost(hostNode) {\n        this._addStylesToHost(this._stylesSet, hostNode);\n        this._hostNodes.add(hostNode);\n    }\n    /**\n     * @param {?} hostNode\n     * @return {?}\n     */\n    removeHost(hostNode) { this._hostNodes.delete(hostNode); }\n    /**\n     * @param {?} additions\n     * @return {?}\n     */\n    onStylesAdded(additions) {\n        this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\n}\nDomSharedStylesHost.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomSharedStylesHost.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n/** @type {?} */\nconst COMPONENT_REGEX = /%COMP%/g;\n/** @type {?} */\nconst COMPONENT_VARIABLE = '%COMP%';\n/** @type {?} */\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\n/** @type {?} */\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nfunction shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} compId\n * @param {?} styles\n * @param {?} target\n * @return {?}\n */\nfunction flattenStyles(compId, styles, target) {\n    for (let i = 0; i < styles.length; i++) {\n        /** @type {?} */\n        let style = styles[i];\n        if (Array.isArray(style)) {\n            flattenStyles(compId, style, target);\n        }\n        else {\n            style = style.replace(COMPONENT_REGEX, compId);\n            target.push(style);\n        }\n    }\n    return target;\n}\n/**\n * @param {?} eventHandler\n * @return {?}\n */\nfunction decoratePreventDefault(eventHandler) {\n    return (event) => {\n        /** @type {?} */\n        const allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n    };\n}\nclass DomRendererFactory2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     */\n    constructor(eventManager, sharedStylesHost) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    /**\n     * @param {?} element\n     * @param {?} type\n     * @return {?}\n     */\n    createRenderer(element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        switch (type.encapsulation) {\n            case ViewEncapsulation.Emulated: {\n                /** @type {?} */\n                let renderer = this.rendererByCompId.get(type.id);\n                if (!renderer) {\n                    renderer =\n                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n                    this.rendererByCompId.set(type.id, renderer);\n                }\n                ((/** @type {?} */ (renderer))).applyToHost(element);\n                return renderer;\n            }\n            case ViewEncapsulation.Native:\n            case ViewEncapsulation.ShadowDom:\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n            default: {\n                if (!this.rendererByCompId.has(type.id)) {\n                    /** @type {?} */\n                    const styles = flattenStyles(type.id, type.styles, []);\n                    this.sharedStylesHost.addStyles(styles);\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\n                }\n                return this.defaultRenderer;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    begin() { }\n    /**\n     * @return {?}\n     */\n    end() { }\n}\nDomRendererFactory2.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomRendererFactory2.ctorParameters = () => [\n    { type: EventManager },\n    { type: DomSharedStylesHost }\n];\nclass DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     */\n    constructor(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        if (namespace) {\n            return document.createElementNS(NAMESPACE_URIS[namespace], name);\n        }\n        return document.createElement(name);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) { return document.createComment(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) { return document.createTextNode(value); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) { parent.appendChild(newChild); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        if (parent) {\n            parent.insertBefore(newChild, refChild);\n        }\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        /** @type {?} */\n        let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return node.parentNode; }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return node.nextSibling; }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        if (namespace) {\n            name = `${namespace}:${name}`;\n            /** @type {?} */\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        if (namespace) {\n            /** @type {?} */\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                el.removeAttribute(`${namespace}:${name}`);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) { el.classList.add(name); }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) { el.classList.remove(name); }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            el.style.removeProperty(style);\n        }\n        else {\n            // IE requires '' instead of null\n            // see https://github.com/angular/angular/issues/7916\n            el.style[style] = '';\n        }\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { node.nodeValue = value; }\n    /**\n     * @param {?} target\n     * @param {?} event\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, event, callback) {\n        checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return (/** @type {?} */ (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback))));\n        }\n        return (/** @type {?} */ ((/** @type {?} */ (this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))))));\n    }\n}\n/** @type {?} */\nconst AT_CHARCODE = '@'.charCodeAt(0);\n/**\n * @param {?} name\n * @param {?} nameKind\n * @return {?}\n */\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(`Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n    }\n}\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} component\n     */\n    constructor(eventManager, sharedStylesHost, component) {\n        super(eventManager);\n        this.component = component;\n        /** @type {?} */\n        const styles = flattenStyles(component.id, component.styles, []);\n        sharedStylesHost.addStyles(styles);\n        this.contentAttr = shimContentAttribute(component.id);\n        this.hostAttr = shimHostAttribute(component.id);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    applyToHost(element) { super.setAttribute(element, this.hostAttr, ''); }\n    /**\n     * @param {?} parent\n     * @param {?} name\n     * @return {?}\n     */\n    createElement(parent, name) {\n        /** @type {?} */\n        const el = super.createElement(parent, name);\n        super.setAttribute(el, this.contentAttr, '');\n        return el;\n    }\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n    /**\n     * @param {?} eventManager\n     * @param {?} sharedStylesHost\n     * @param {?} hostEl\n     * @param {?} component\n     */\n    constructor(eventManager, sharedStylesHost, hostEl, component) {\n        super(eventManager);\n        this.sharedStylesHost = sharedStylesHost;\n        this.hostEl = hostEl;\n        this.component = component;\n        if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).attachShadow({ mode: 'open' });\n        }\n        else {\n            this.shadowRoot = ((/** @type {?} */ (hostEl))).createShadowRoot();\n        }\n        this.sharedStylesHost.addHost(this.shadowRoot);\n        /** @type {?} */\n        const styles = flattenStyles(component.id, component.styles, []);\n        for (let i = 0; i < styles.length; i++) {\n            /** @type {?} */\n            const styleEl = document.createElement('style');\n            styleEl.textContent = styles[i];\n            this.shadowRoot.appendChild(styleEl);\n        }\n    }\n    /**\n     * @private\n     * @param {?} node\n     * @return {?}\n     */\n    nodeOrShadowRoot(node) { return node === this.hostEl ? this.shadowRoot : node; }\n    /**\n     * @return {?}\n     */\n    destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) {\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0 = function (v) {\n    return '__zone_symbol__' + v;\n};\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n * @type {?}\n */\nconst __symbol__ = (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))['__symbol__'] || ɵ0;\n/** @type {?} */\nconst ADD_EVENT_LISTENER = __symbol__('addEventListener');\n/** @type {?} */\nconst REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\n/** @type {?} */\nconst symbolNames = {};\n/** @type {?} */\nconst FALSE = 'FALSE';\n/** @type {?} */\nconst ANGULAR = 'ANGULAR';\n/** @type {?} */\nconst NATIVE_ADD_LISTENER = 'addEventListener';\n/** @type {?} */\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\n// use the same symbol string which is used in zone.js\n/** @type {?} */\nconst stopSymbol = '__zone_symbol__propagationStopped';\n/** @type {?} */\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\n/** @type {?} */\nconst blackListedEvents = (typeof Zone !== 'undefined') && ((/** @type {?} */ (Zone)))[__symbol__('BLACK_LISTED_EVENTS')];\n/** @type {?} */\nlet blackListedMap;\nif (blackListedEvents) {\n    blackListedMap = {};\n    blackListedEvents.forEach(eventName => { blackListedMap[eventName] = eventName; });\n}\n/** @type {?} */\nconst isBlackListedEvent = function (eventName) {\n    if (!blackListedMap) {\n        return false;\n    }\n    return blackListedMap.hasOwnProperty(eventName);\n};\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\n/** @type {?} */\nconst globalListener = function (event) {\n    /** @type {?} */\n    const symbolName = symbolNames[event.type];\n    if (!symbolName) {\n        return;\n    }\n    /** @type {?} */\n    const taskDatas = this[symbolName];\n    if (!taskDatas) {\n        return;\n    }\n    /** @type {?} */\n    const args = [event];\n    if (taskDatas.length === 1) {\n        // if taskDatas only have one element, just invoke it\n        /** @type {?} */\n        const taskData = taskDatas[0];\n        if (taskData.zone !== Zone.current) {\n            // only use Zone.run when Zone.current not equals to stored zone\n            return taskData.zone.run(taskData.handler, this, args);\n        }\n        else {\n            return taskData.handler.apply(this, args);\n        }\n    }\n    else {\n        // copy tasks as a snapshot to avoid event handlers remove\n        // itself or others\n        /** @type {?} */\n        const copiedTasks = taskDatas.slice();\n        for (let i = 0; i < copiedTasks.length; i++) {\n            // if other listener call event.stopImmediatePropagation\n            // just break\n            if (((/** @type {?} */ (event)))[stopSymbol] === true) {\n                break;\n            }\n            /** @type {?} */\n            const taskData = copiedTasks[i];\n            if (taskData.zone !== Zone.current) {\n                // only use Zone.run when Zone.current not equals to stored zone\n                taskData.zone.run(taskData.handler, this, args);\n            }\n            else {\n                taskData.handler.apply(this, args);\n            }\n        }\n    }\n};\nclass DomEventsPlugin extends EventManagerPlugin {\n    /**\n     * @param {?} doc\n     * @param {?} ngZone\n     * @param {?} platformId\n     */\n    constructor(doc, ngZone, platformId) {\n        super(doc);\n        this.ngZone = ngZone;\n        if (!platformId || !isPlatformServer(platformId)) {\n            this.patchEvent();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    patchEvent() {\n        if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n            return;\n        }\n        if (((/** @type {?} */ (Event.prototype)))[stopMethodSymbol]) {\n            // already patched by zone.js\n            return;\n        }\n        /** @type {?} */\n        const delegate = ((/** @type {?} */ (Event.prototype)))[stopMethodSymbol] =\n            Event.prototype.stopImmediatePropagation;\n        Event.prototype.stopImmediatePropagation = function () {\n            if (this) {\n                this[stopSymbol] = true;\n            }\n            // should call native delegate in case\n            // in some environment part of the application\n            // will not use the patched Event\n            delegate && delegate.apply(this, arguments);\n        };\n    }\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    supports(eventName) { return true; }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const zoneJsLoaded = element[ADD_EVENT_LISTENER];\n        /** @type {?} */\n        let callback = (/** @type {?} */ (handler));\n        // if zonejs is loaded and current zone is not ngZone\n        // we keep Zone.current on target for later restoration.\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n            /** @type {?} */\n            let symbolName = symbolNames[eventName];\n            if (!symbolName) {\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n            }\n            /** @type {?} */\n            let taskDatas = ((/** @type {?} */ (element)))[symbolName];\n            /** @type {?} */\n            const globalListenerRegistered = taskDatas && taskDatas.length > 0;\n            if (!taskDatas) {\n                taskDatas = ((/** @type {?} */ (element)))[symbolName] = [];\n            }\n            /** @type {?} */\n            const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n            if (taskDatas.length === 0) {\n                taskDatas.push({ zone: zone, handler: callback });\n            }\n            else {\n                /** @type {?} */\n                let callbackRegistered = false;\n                for (let i = 0; i < taskDatas.length; i++) {\n                    if (taskDatas[i].handler === callback) {\n                        callbackRegistered = true;\n                        break;\n                    }\n                }\n                if (!callbackRegistered) {\n                    taskDatas.push({ zone: zone, handler: callback });\n                }\n            }\n            if (!globalListenerRegistered) {\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n            }\n        }\n        else {\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\n        }\n        return () => this.removeEventListener(element, eventName, callback);\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    removeEventListener(target, eventName, callback) {\n        /** @type {?} */\n        let underlyingRemove = target[REMOVE_EVENT_LISTENER];\n        // zone.js not loaded, use native removeEventListener\n        if (!underlyingRemove) {\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        /** @type {?} */\n        let symbolName = symbolNames[eventName];\n        /** @type {?} */\n        let taskDatas = symbolName && target[symbolName];\n        if (!taskDatas) {\n            // addEventListener not using patched version\n            // just call native removeEventListener\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n        // fix issue 20532, should be able to remove\n        // listener which was added inside of ngZone\n        /** @type {?} */\n        let found = false;\n        for (let i = 0; i < taskDatas.length; i++) {\n            // remove listener from taskDatas if the callback equals\n            if (taskDatas[i].handler === callback) {\n                found = true;\n                taskDatas.splice(i, 1);\n                break;\n            }\n        }\n        if (found) {\n            if (taskDatas.length === 0) {\n                // all listeners are removed, we can remove the globalListener from target\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\n            }\n        }\n        else {\n            // not found in taskDatas, the callback may be added inside of ngZone\n            // use native remove listener to remove the callback\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n        }\n    }\n}\nDomEventsPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomEventsPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Supported HammerJS recognizer event names.\n * @type {?}\n */\nconst EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n};\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * \\@publicApi\n * @type {?}\n */\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {\\@link HammerLoader} to Angular.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * \\@publicApi\n */\nclass HammerGestureConfig {\n    constructor() {\n        /**\n         * A set of supported event names for gestures to be used in Angular.\n         * Angular supports all built-in recognizers, as listed in\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         */\n        this.events = [];\n        /**\n         * Maps gesture event names to a set of configuration options\n         * that specify overrides to the default values for specific properties.\n         *\n         * The key is a supported event name to be configured,\n         * and the options object contains a set of properties, with override values\n         * to be applied to the named recognizer event.\n         * For example, to disable recognition of the rotate event, specify\n         *  `{\"rotate\": {\"enable\": false}}`.\n         *\n         * Properties that are not present take the HammerJS default values.\n         * For information about which properties are supported for which events,\n         * and their allowed and default values, see\n         * [HammerJS documentation](http://hammerjs.github.io/).\n         *\n         */\n        this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n     * and attaches it to a given HTML element.\n     * @param {?} element The element that will recognize gestures.\n     * @return {?} A HammerJS event-manager object.\n     */\n    buildHammer(element) {\n        /** @type {?} */\n        const mc = new (/** @type {?} */ (Hammer))(element, this.options);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (const eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    }\n}\nHammerGestureConfig.decorators = [\n    { type: Injectable }\n];\nclass HammerGesturesPlugin extends EventManagerPlugin {\n    /**\n     * @param {?} doc\n     * @param {?} _config\n     * @param {?} console\n     * @param {?=} loader\n     */\n    constructor(doc, _config, console, loader) {\n        super(doc);\n        this._config = _config;\n        this.console = console;\n        this.loader = loader;\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    supports(eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!((/** @type {?} */ (window))).Hammer && !this.loader) {\n            this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n                `loaded and no custom loader has been specified.`);\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} handler\n     * @return {?}\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\n        // until Hammer is loaded.\n        if (!((/** @type {?} */ (window))).Hammer && this.loader) {\n            // This `addEventListener` method returns a function to remove the added listener.\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n            // than remove anything.\n            /** @type {?} */\n            let cancelRegistration = false;\n            /** @type {?} */\n            let deregister = () => { cancelRegistration = true; };\n            this.loader()\n                .then(() => {\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                if (!((/** @type {?} */ (window))).Hammer) {\n                    this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                    deregister = () => { };\n                    return;\n                }\n                if (!cancelRegistration) {\n                    // Now that Hammer is loaded and the listener is being loaded for real,\n                    // the deregistration function changes from canceling registration to removal.\n                    deregister = this.addEventListener(element, eventName, handler);\n                }\n            })\n                .catch(() => {\n                this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` +\n                    `Hammer.JS loader failed.`);\n                deregister = () => { };\n            });\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\n            // this way allows us to avoid any additional data structures to track listener removal.\n            return () => { deregister(); };\n        }\n        return zone.runOutsideAngular(() => {\n            // Creating the manager bind events, must be done outside of angular\n            /** @type {?} */\n            const mc = this._config.buildHammer(element);\n            /** @type {?} */\n            const callback = function (eventObj) {\n                zone.runGuarded(function () { handler(eventObj); });\n            };\n            mc.on(eventName, callback);\n            return () => {\n                mc.off(eventName, callback);\n                // destroy mc to prevent memory leak\n                if (typeof mc.destroy === 'function') {\n                    mc.destroy();\n                }\n            };\n        });\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    isCustomEvent(eventName) { return this._config.events.indexOf(eventName) > -1; }\n}\nHammerGesturesPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nHammerGesturesPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] },\n    { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] }] },\n    { type: ɵConsole },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines supported modifiers for key events.\n * @type {?}\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst ɵ0$1 = (event) => event.altKey, ɵ1$1 = (event) => event.ctrlKey, ɵ2$1 = (event) => event.metaKey, ɵ3 = (event) => event.shiftKey;\n/**\n * Retrieves modifiers from key-event objects.\n * @type {?}\n */\nconst MODIFIER_KEY_GETTERS = {\n    'alt': ɵ0$1,\n    'control': ɵ1$1,\n    'meta': ɵ2$1,\n    'shift': ɵ3\n};\n/**\n * \\@publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nclass KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param {?} doc The document in which key events will be detected.\n     */\n    constructor(doc) { super(doc); }\n    /**\n     * Reports whether a named key event is supported.\n     * @param {?} eventName The event name to query.\n     * @return {?} True if the named key event is supported.\n     */\n    supports(eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; }\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param {?} element The HTML element to receive event notifications.\n     * @param {?} eventName The name of the key event to listen for.\n     * @param {?} handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @return {?} The key event that was registered.\n     */\n    addEventListener(element, eventName, handler) {\n        /** @type {?} */\n        const parsedEvent = (/** @type {?} */ (KeyEventsPlugin.parseEventName(eventName)));\n        /** @type {?} */\n        const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular(() => {\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        });\n    }\n    /**\n     * @param {?} eventName\n     * @return {?}\n     */\n    static parseEventName(eventName) {\n        /** @type {?} */\n        const parts = eventName.toLowerCase().split('.');\n        /** @type {?} */\n        const domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        /** @type {?} */\n        const key = KeyEventsPlugin._normalizeKey((/** @type {?} */ (parts.pop())));\n        /** @type {?} */\n        let fullKey = '';\n        MODIFIER_KEYS.forEach(modifierName => {\n            /** @type {?} */\n            const index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        });\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        /** @type {?} */\n        const result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    static getEventFullKey(event) {\n        /** @type {?} */\n        let fullKey = '';\n        /** @type {?} */\n        let key = getDOM().getEventKey(event);\n        key = key.toLowerCase();\n        if (key === ' ') {\n            key = 'space'; // for readability\n        }\n        else if (key === '.') {\n            key = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach(modifierName => {\n            if (modifierName != key) {\n                /** @type {?} */\n                const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    fullKey += modifierName + '.';\n                }\n            }\n        });\n        fullKey += key;\n        return fullKey;\n    }\n    /**\n     * Configures a handler callback for a key event.\n     * @param {?} fullKey The event name that combines all simultaneous keystrokes.\n     * @param {?} handler The function that responds to the key event.\n     * @param {?} zone The zone in which the event occurred.\n     * @return {?} A callback function.\n     */\n    static eventCallback(fullKey, handler, zone) {\n        return (event /** TODO #9100 */) => {\n            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n                zone.runGuarded(() => handler(event));\n            }\n        };\n    }\n    /**\n     * \\@internal\n     * @param {?} keyName\n     * @return {?}\n     */\n    static _normalizeKey(keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    }\n}\nKeyEventsPlugin.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nKeyEventsPlugin.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @abstract\n */\nclass DomSanitizer {\n}\nclass DomSanitizerImpl extends DomSanitizer {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} value\n     * @return {?}\n     */\n    sanitize(ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case SecurityContext.NONE:\n                return (/** @type {?} */ (value));\n            case SecurityContext.HTML:\n                if (value instanceof SafeHtmlImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'HTML');\n                return ɵ_sanitizeHtml(this._doc, String(value));\n            case SecurityContext.STYLE:\n                if (value instanceof SafeStyleImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Style');\n                return ɵ_sanitizeStyle((/** @type {?} */ (value)));\n            case SecurityContext.SCRIPT:\n                if (value instanceof SafeScriptImpl)\n                    return value.changingThisBreaksApplicationSecurity;\n                this.checkNotSafeValue(value, 'Script');\n                throw new Error('unsafe value used in a script context');\n            case SecurityContext.URL:\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'URL');\n                return ɵ_sanitizeUrl(String(value));\n            case SecurityContext.RESOURCE_URL:\n                if (value instanceof SafeResourceUrlImpl) {\n                    return value.changingThisBreaksApplicationSecurity;\n                }\n                this.checkNotSafeValue(value, 'ResourceURL');\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n            default:\n                throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @param {?} expectedType\n     * @return {?}\n     */\n    checkNotSafeValue(value, expectedType) {\n        if (value instanceof SafeValueImpl) {\n            throw new Error(`Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n                `(see http://g.co/ng/security#xss)`);\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustHtml(value) { return new SafeHtmlImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustStyle(value) { return new SafeStyleImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustScript(value) { return new SafeScriptImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustUrl(value) { return new SafeUrlImpl(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    bypassSecurityTrustResourceUrl(value) {\n        return new SafeResourceUrlImpl(value);\n    }\n}\nDomSanitizerImpl.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nDomSanitizerImpl.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }\n];\n/**\n * @abstract\n */\nclass SafeValueImpl {\n    /**\n     * @param {?} changingThisBreaksApplicationSecurity\n     */\n    constructor(changingThisBreaksApplicationSecurity) {\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n        // empty\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n            ` (see http://g.co/ng/security#xss)`;\n    }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl {\n    /**\n     * @return {?}\n     */\n    getTypeName() { return 'ResourceURL'; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: PLATFORM_ID, useValue: ɵPLATFORM_BROWSER_ID },\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT$1] },\n    { provide: DOCUMENT$1, useFactory: _document, deps: [] },\n];\n/**\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * \\@publicApi\n * @type {?}\n */\nconst BROWSER_SANITIZATION_PROVIDERS = [\n    { provide: Sanitizer, useExisting: DomSanitizer },\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT$1] },\n];\n/**\n * \\@publicApi\n * @type {?}\n */\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nfunction initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n    BrowserGetTestability.init();\n}\n/**\n * @return {?}\n */\nfunction errorHandler() {\n    return new ErrorHandler();\n}\n/**\n * @return {?}\n */\nfunction _document() {\n    return document;\n}\n/** @type {?} */\nconst BROWSER_MODULE_PROVIDERS = [\n    BROWSER_SANITIZATION_PROVIDERS,\n    { provide: ɵAPP_ROOT, useValue: true },\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: DomEventsPlugin,\n        multi: true,\n        deps: [DOCUMENT$1, NgZone, PLATFORM_ID]\n    },\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT$1] },\n    {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT$1, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n    },\n    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n    {\n        provide: DomRendererFactory2,\n        useClass: DomRendererFactory2,\n        deps: [EventManager, DomSharedStylesHost]\n    },\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT$1] },\n    { provide: Testability, useClass: Testability, deps: [NgZone] },\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\n    ELEMENT_PROBE_PROVIDERS,\n];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * \\@publicApi\n */\nclass BrowserModule {\n    /**\n     * @param {?} parentModule\n     */\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error(`BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n        }\n    }\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param {?} params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @return {?} The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params) {\n        return {\n            ngModule: BrowserModule,\n            providers: [\n                { provide: APP_ID, useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: APP_ID },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    }\n}\nBrowserModule.decorators = [\n    { type: NgModule, args: [{ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] },] }\n];\n/** @nocollapse */\nBrowserModule.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [BrowserModule,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Factory to create Meta service.\n * @return {?}\n */\nfunction createMeta() {\n    return new Meta(inject(DOCUMENT$1));\n}\n/**\n * A service that can be used to get and add meta tags.\n *\n * \\@publicApi\n */\nclass Meta {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n        this._dom = getDOM();\n    }\n    /**\n     * @param {?} tag\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    addTag(tag, forceCreation = false) {\n        if (!tag)\n            return null;\n        return this._getOrCreateElement(tag, forceCreation);\n    }\n    /**\n     * @param {?} tags\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    addTags(tags, forceCreation = false) {\n        if (!tags)\n            return [];\n        return tags.reduce((result, tag) => {\n            if (tag) {\n                result.push(this._getOrCreateElement(tag, forceCreation));\n            }\n            return result;\n        }, []);\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    getTag(attrSelector) {\n        if (!attrSelector)\n            return null;\n        return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    getTags(attrSelector) {\n        if (!attrSelector)\n            return [];\n        /** @type {?} */\n        const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n        return list ? [].slice.call(list) : [];\n    }\n    /**\n     * @param {?} tag\n     * @param {?=} selector\n     * @return {?}\n     */\n    updateTag(tag, selector) {\n        if (!tag)\n            return null;\n        selector = selector || this._parseSelector(tag);\n        /** @type {?} */\n        const meta = (/** @type {?} */ (this.getTag(selector)));\n        if (meta) {\n            return this._setMetaElementAttributes(tag, meta);\n        }\n        return this._getOrCreateElement(tag, true);\n    }\n    /**\n     * @param {?} attrSelector\n     * @return {?}\n     */\n    removeTag(attrSelector) { this.removeTagElement((/** @type {?} */ (this.getTag(attrSelector)))); }\n    /**\n     * @param {?} meta\n     * @return {?}\n     */\n    removeTagElement(meta) {\n        if (meta) {\n            this._dom.remove(meta);\n        }\n    }\n    /**\n     * @private\n     * @param {?} meta\n     * @param {?=} forceCreation\n     * @return {?}\n     */\n    _getOrCreateElement(meta, forceCreation = false) {\n        if (!forceCreation) {\n            /** @type {?} */\n            const selector = this._parseSelector(meta);\n            /** @type {?} */\n            const elem = (/** @type {?} */ (this.getTag(selector)));\n            // It's allowed to have multiple elements with the same name so it's not enough to\n            // just check that element with the same name already present on the page. We also need to\n            // check if element has tag attributes\n            if (elem && this._containsAttributes(meta, elem))\n                return elem;\n        }\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._dom.createElement('meta')));\n        this._setMetaElementAttributes(meta, element);\n        /** @type {?} */\n        const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n        this._dom.appendChild(head, element);\n        return element;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @param {?} el\n     * @return {?}\n     */\n    _setMetaElementAttributes(tag, el) {\n        Object.keys(tag).forEach((prop) => this._dom.setAttribute(el, prop, tag[prop]));\n        return el;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @return {?}\n     */\n    _parseSelector(tag) {\n        /** @type {?} */\n        const attr = tag.name ? 'name' : 'property';\n        return `${attr}=\"${tag[attr]}\"`;\n    }\n    /**\n     * @private\n     * @param {?} tag\n     * @param {?} elem\n     * @return {?}\n     */\n    _containsAttributes(tag, elem) {\n        return Object.keys(tag).every((key) => this._dom.getAttribute(elem, key) === tag[key]);\n    }\n}\nMeta.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createMeta, deps: [] },] }\n];\n/** @nocollapse */\nMeta.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }\n];\n/** @nocollapse */ Meta.ngInjectableDef = defineInjectable({ factory: createMeta, token: Meta, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Factory to create Title service.\n * @return {?}\n */\nfunction createTitle() {\n    return new Title(inject(DOCUMENT$1));\n}\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * \\@publicApi\n */\nclass Title {\n    /**\n     * @param {?} _doc\n     */\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     * @return {?}\n     */\n    getTitle() { return getDOM().getTitle(this._doc); }\n    /**\n     * Set the title of the current HTML document.\n     * @param {?} newTitle\n     * @return {?}\n     */\n    setTitle(newTitle) { getDOM().setTitle(this._doc, newTitle); }\n}\nTitle.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root', useFactory: createTitle, deps: [] },] }\n];\n/** @nocollapse */\nTitle.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }\n];\n/** @nocollapse */ Title.ngInjectableDef = defineInjectable({ factory: createTitle, token: Title, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst win = typeof window !== 'undefined' && window || (/** @type {?} */ ({}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ChangeDetectionPerfRecord {\n    /**\n     * @param {?} msPerTick\n     * @param {?} numTicks\n     */\n    constructor(msPerTick, numTicks) {\n        this.msPerTick = msPerTick;\n        this.numTicks = numTicks;\n    }\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nclass AngularProfiler {\n    /**\n     * @param {?} ref\n     */\n    constructor(ref) { this.appRef = ref.injector.get(ApplicationRef); }\n    // tslint:disable:no-console\n    /**\n     * Exercises change detection in a loop and then prints the average amount of\n     * time in milliseconds how long a single round of change detection takes for\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n     * of 500 milliseconds.\n     *\n     * Optionally, a user may pass a `config` parameter containing a map of\n     * options. Supported options are:\n     *\n     * `record` (boolean) - causes the profiler to record a CPU profile while\n     * it exercises the change detector. Example:\n     *\n     * ```\n     * ng.profiler.timeChangeDetection({record: true})\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    timeChangeDetection(config) {\n        /** @type {?} */\n        const record = config && config['record'];\n        /** @type {?} */\n        const profileName = 'Change Detection';\n        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n        /** @type {?} */\n        const isProfilerAvailable = win.console.profile != null;\n        if (record && isProfilerAvailable) {\n            win.console.profile(profileName);\n        }\n        /** @type {?} */\n        const start = getDOM().performanceNow();\n        /** @type {?} */\n        let numTicks = 0;\n        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n            this.appRef.tick();\n            numTicks++;\n        }\n        /** @type {?} */\n        const end = getDOM().performanceNow();\n        if (record && isProfilerAvailable) {\n            win.console.profileEnd(profileName);\n        }\n        /** @type {?} */\n        const msPerTick = (end - start) / numTicks;\n        win.console.log(`ran ${numTicks} change detection cycles`);\n        win.console.log(`${msPerTick.toFixed(2)} ms per check`);\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * \\@publicApi\n * @template T\n * @param {?} ref\n * @return {?}\n */\nfunction enableDebugTools(ref) {\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n    return ref;\n}\n/**\n * Disables Angular tools.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction disableDebugTools() {\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} text\n * @return {?}\n */\nfunction escapeHtml(text) {\n    /** @type {?} */\n    const escapedText = {\n        '&': '&a;',\n        '\"': '&q;',\n        '\\'': '&s;',\n        '<': '&l;',\n        '>': '&g;',\n    };\n    return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction unescapeHtml(text) {\n    /** @type {?} */\n    const unescapedText = {\n        '&a;': '&',\n        '&q;': '\"',\n        '&s;': '\\'',\n        '&l;': '<',\n        '&g;': '>',\n    };\n    return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * \\@publicApi\n * @template T\n * @param {?} key\n * @return {?}\n */\nfunction makeStateKey(key) {\n    return (/** @type {?} */ (key));\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * \\@publicApi\n */\nclass TransferState {\n    constructor() {\n        this.store = {};\n        this.onSerializeCallbacks = {};\n    }\n    /**\n     * \\@internal\n     * @param {?} initState\n     * @return {?}\n     */\n    static init(initState) {\n        /** @type {?} */\n        const transferState = new TransferState();\n        transferState.store = initState;\n        return transferState;\n    }\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     * @template T\n     * @param {?} key\n     * @param {?} defaultValue\n     * @return {?}\n     */\n    get(key, defaultValue) {\n        return this.store[key] !== undefined ? (/** @type {?} */ (this.store[key])) : defaultValue;\n    }\n    /**\n     * Set the value corresponding to a key.\n     * @template T\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    set(key, value) { this.store[key] = value; }\n    /**\n     * Remove a key from the store.\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    remove(key) { delete this.store[key]; }\n    /**\n     * Test whether a key exists in the store.\n     * @template T\n     * @param {?} key\n     * @return {?}\n     */\n    hasKey(key) { return this.store.hasOwnProperty(key); }\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     * @template T\n     * @param {?} key\n     * @param {?} callback\n     * @return {?}\n     */\n    onSerialize(key, callback) {\n        this.onSerializeCallbacks[key] = callback;\n    }\n    /**\n     * Serialize the current state of the store to JSON.\n     * @return {?}\n     */\n    toJson() {\n        // Call the onSerialize callbacks and put those values into the store.\n        for (const key in this.onSerializeCallbacks) {\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n                try {\n                    this.store[key] = this.onSerializeCallbacks[key]();\n                }\n                catch (e) {\n                    console.warn('Exception in onSerialize callback: ', e);\n                }\n            }\n        }\n        return JSON.stringify(this.store);\n    }\n}\nTransferState.decorators = [\n    { type: Injectable }\n];\n/**\n * @param {?} doc\n * @param {?} appId\n * @return {?}\n */\nfunction initTransferState(doc, appId) {\n    // Locate the script tag with the JSON data transferred from the server.\n    // The id of the script tag is set to the Angular appId + 'state'.\n    /** @type {?} */\n    const script = doc.getElementById(appId + '-state');\n    /** @type {?} */\n    let initialState = {};\n    if (script && script.textContent) {\n        try {\n            initialState = JSON.parse(unescapeHtml(script.textContent));\n        }\n        catch (e) {\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\n        }\n    }\n    return TransferState.init(initialState);\n}\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * \\@publicApi\n */\nclass BrowserTransferStateModule {\n}\nBrowserTransferStateModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT$1, APP_ID] }],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Predicates for use with {\\@link DebugElement}'s query functions.\n *\n * \\@publicApi\n */\nclass By {\n    /**\n     * Match all elements.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     * @return {?}\n     */\n    static all() { return (debugElement) => true; }\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     * @param {?} selector\n     * @return {?}\n     */\n    static css(selector) {\n        return (debugElement) => {\n            return debugElement.nativeElement != null ?\n                getDOM().elementMatches(debugElement.nativeElement, selector) :\n                false;\n        };\n    }\n    /**\n     * Match elements that have the given directive present.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     * @param {?} type\n     * @return {?}\n     */\n    static directive(type) {\n        return (debugElement) => (/** @type {?} */ (debugElement.providerTokens)).indexOf(type) !== -1;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.7');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BROWSER_MODULE_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_c, _document as ɵangular_packages_platform_browser_platform_browser_b, errorHandler as ɵangular_packages_platform_browser_platform_browser_a, GenericBrowserDomAdapter as ɵangular_packages_platform_browser_platform_browser_k, createMeta as ɵangular_packages_platform_browser_platform_browser_d, SERVER_TRANSITION_PROVIDERS as ɵangular_packages_platform_browser_platform_browser_i, appInitializerFactory as ɵangular_packages_platform_browser_platform_browser_h, createTitle as ɵangular_packages_platform_browser_platform_browser_e, initTransferState as ɵangular_packages_platform_browser_platform_browser_f, _createNgProbe as ɵangular_packages_platform_browser_platform_browser_j, EventManagerPlugin as ɵangular_packages_platform_browser_platform_browser_g, BrowserModule, platformBrowser, Meta, Title, disableDebugTools, enableDebugTools, BrowserTransferStateModule, TransferState, makeStateKey, By, DOCUMENT$1 as DOCUMENT, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, DomSanitizer, VERSION, BROWSER_SANITIZATION_PROVIDERS as ɵBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ɵinitDomAdapter, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserPlatformLocation as ɵBrowserPlatformLocation, TRANSITION_ID as ɵTRANSITION_ID, BrowserGetTestability as ɵBrowserGetTestability, escapeHtml as ɵescapeHtml, ELEMENT_PROBE_PROVIDERS as ɵELEMENT_PROBE_PROVIDERS, DomAdapter as ɵDomAdapter, getDOM as ɵgetDOM, setRootDomAdapter as ɵsetRootDomAdapter, DomRendererFactory2 as ɵDomRendererFactory2, NAMESPACE_URIS as ɵNAMESPACE_URIS, flattenStyles as ɵflattenStyles, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute, DomEventsPlugin as ɵDomEventsPlugin, HammerGesturesPlugin as ɵHammerGesturesPlugin, KeyEventsPlugin as ɵKeyEventsPlugin, DomSharedStylesHost as ɵDomSharedStylesHost, SharedStylesHost as ɵSharedStylesHost, DomSanitizerImpl as ɵDomSanitizerImpl };\n//# sourceMappingURL=platform-browser.js.map\n","var map = {\n\t\"app/containers/user/index.ngfactory\": [\n\t\t\"3y5d\",\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar module = __webpack_require__(ids[0]);\n\t\treturn module;\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"crnd\";\nmodule.exports = webpackAsyncContext;","import { UserProfile } from './user-profile.service';\r\nimport { YoutubeSearch } from './youtube.search';\r\nimport { YoutubePlayerService } from './youtube-player.service';\r\nimport { NowPlaylistService } from './now-playlist.service';\r\nimport { YoutubeVideosInfo } from './youtube-videos-info.service';\r\nimport { GapiLoader } from './gapi-loader.service';\r\nimport { Authorization } from './authorization.service';\r\nimport { YoutubeDataApi } from './youtube-data-api';\r\nimport { VersionCheckerService } from './version-checker.service';\r\nimport { MediaParserService } from './media-parser.service';\r\nimport { AnalyticsService } from './analytics.service';\r\n\r\nexport * from './user-profile.service';\r\nexport * from './youtube.search';\r\nexport * from './youtube-player.service';\r\nexport * from './now-playlist.service';\r\nexport * from './youtube-videos-info.service';\r\nexport * from './gapi-loader.service';\r\nexport * from './authorization.service';\r\nexport * from './version-checker.service';\r\nexport * from './media-parser.service';\r\n\r\nexport const APP_SERVICES = [\r\n  UserProfile,\r\n  YoutubeSearch,\r\n  YoutubePlayerService,\r\n  NowPlaylistService,\r\n  YoutubeVideosInfo,\r\n  GapiLoader,\r\n  Authorization,\r\n  YoutubeDataApi,\r\n  VersionCheckerService,\r\n  MediaParserService,\r\n  AnalyticsService\r\n];\r\n","/**\n * @license ngx-typeahead\n * MIT license\n */\nimport { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, NgModule, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClient, HttpClientJsonpModule, HttpClientModule, HttpParams } from '@angular/common/http';\nimport { Subject, of } from 'rxjs';\nimport { concat, debounceTime, distinctUntilChanged, filter, map, switchMap, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nconst Key = {\n    Backspace: 8,\n    Tab: 9,\n    Enter: 13,\n    Shift: 16,\n    Escape: 27,\n    ArrowLeft: 37,\n    ArrowRight: 39,\n    ArrowUp: 38,\n    ArrowDown: 40,\n    // http://unixpapa.com/js/key.html\n    MacCommandLeft: 91,\n    MacCommandRight: 93,\n    MacCommandFirefox: 224,\n};\nKey[Key.Backspace] = \"Backspace\";\nKey[Key.Tab] = \"Tab\";\nKey[Key.Enter] = \"Enter\";\nKey[Key.Shift] = \"Shift\";\nKey[Key.Escape] = \"Escape\";\nKey[Key.ArrowLeft] = \"ArrowLeft\";\nKey[Key.ArrowRight] = \"ArrowRight\";\nKey[Key.ArrowUp] = \"ArrowUp\";\nKey[Key.ArrowDown] = \"ArrowDown\";\nKey[Key.MacCommandLeft] = \"MacCommandLeft\";\nKey[Key.MacCommandRight] = \"MacCommandRight\";\nKey[Key.MacCommandFirefox] = \"MacCommandFirefox\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} keyCode\n * @return {?}\n */\nfunction validateNonCharKeyCode(keyCode) {\n    return [\n        Key.Enter,\n        Key.Tab,\n        Key.Shift,\n        Key.ArrowLeft,\n        Key.ArrowUp,\n        Key.ArrowRight,\n        Key.ArrowDown,\n        Key.MacCommandLeft,\n        Key.MacCommandRight,\n        Key.MacCommandFirefox\n    ].every(codeKey => codeKey !== keyCode);\n}\n/**\n * @param {?} keyCode\n * @return {?}\n */\nfunction validateArrowKeys(keyCode) {\n    return keyCode === Key.ArrowDown || keyCode === Key.ArrowUp;\n}\n/**\n * @param {?} index\n * @param {?} currentIndex\n * @return {?}\n */\nfunction isIndexActive(index, currentIndex) {\n    return index === currentIndex;\n}\n/**\n * @param {?} event\n * @return {?}\n */\nfunction isEnterKey(event) {\n    return event.keyCode === Key.Enter;\n}\n/**\n * @param {?} event\n * @return {?}\n */\nfunction isEscapeKey(event) {\n    return event.keyCode === Key.Escape;\n}\n/**\n * @param {?} query\n * @param {?=} queryParamKey\n * @param {?=} customParams\n * @return {?}\n */\nfunction createParamsForQuery(query, queryParamKey = 'q', customParams = {}) {\n    const /** @type {?} */ searchParams = Object.assign({ [queryParamKey]: query }, customParams);\n    // tslint:disable-next-line\n    const /** @type {?} */ setParam = (acc, param) => acc.set(param, searchParams[param]);\n    const /** @type {?} */ params = Object.keys(searchParams).reduce(setParam, new HttpParams());\n    return params;\n}\n/**\n * @param {?=} method\n * @return {?}\n */\nfunction resolveApiMethod(method = '') {\n    const /** @type {?} */ isMethodValid = [\n        'get',\n        'post',\n        'put',\n        'delete',\n        'patch',\n        'request'\n    ].some(methodName => method === methodName);\n    const /** @type {?} */ apiMethod = isMethodValid ? method : 'get';\n    return apiMethod;\n}\nconst NO_INDEX = -1;\n/**\n * @param {?} currentIndex\n * @param {?} stepUp\n * @param {?=} listLength\n * @return {?}\n */\nfunction resolveNextIndex(currentIndex, stepUp, listLength = 10) {\n    const /** @type {?} */ step = stepUp ? 1 : -1;\n    const /** @type {?} */ topLimit = listLength - 1;\n    const /** @type {?} */ bottomLimit = NO_INDEX;\n    const /** @type {?} */ currentResultIndex = currentIndex + step;\n    let /** @type {?} */ resultIndex = currentResultIndex;\n    if (currentResultIndex === topLimit + 1) {\n        resultIndex = bottomLimit;\n    }\n    if (currentResultIndex === bottomLimit - 1) {\n        resultIndex = topLimit;\n    }\n    return resultIndex;\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction toJsonpSingleResult(response) {\n    return response[1];\n}\n/**\n * @param {?} results\n * @return {?}\n */\nfunction toJsonpFinalResults(results) {\n    return results.map((result) => result[0]);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction hasCharacters(query) {\n    return query.length > 0;\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction toFormControlValue(e) {\n    return e.target.value;\n}\n/**\n * @param {?} item\n * @param {?} fieldsToExtract\n * @param {?=} caseSensitive\n * @return {?}\n */\nfunction resolveItemValue(item, fieldsToExtract, caseSensitive = false) {\n    let /** @type {?} */ newItem = item;\n    if (!item.hasOwnProperty('length')) {\n        const /** @type {?} */ fields = !fieldsToExtract.length\n            ? Object.keys(item)\n            : fieldsToExtract;\n        newItem = fields.reduce((acc, cur) => `${acc}${item[cur]}`, '');\n    }\n    return caseSensitive ? newItem : newItem.toLowerCase();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass NgxTypeAheadComponent {\n    /**\n     * @param {?} element\n     * @param {?} viewContainer\n     * @param {?} http\n     * @param {?} cdr\n     */\n    constructor(element, viewContainer, http$$1, cdr) {\n        this.element = element;\n        this.viewContainer = viewContainer;\n        this.http = http$$1;\n        this.cdr = cdr;\n        this.showSuggestions = false;\n        this.results = [];\n        this.taUrl = '';\n        this.taParams = {};\n        this.taQueryParam = 'q';\n        this.taApi = 'jsonp';\n        this.taApiMethod = 'get';\n        this.taList = [];\n        this.taListItemField = [];\n        this.taListItemLabel = '';\n        this.taDebounce = 300;\n        this.taAllowEmpty = false;\n        this.taCaseSensitive = false;\n        this.taDisplayOnFocus = false;\n        this.taSelected = new EventEmitter();\n        this.suggestionIndex = 0;\n        this.subscriptions = [];\n        this.activeResult = '';\n        this.searchQuery = '';\n        this.selectedItem = {};\n        this.resultsAsItems = [];\n        this.keydown$ = new Subject();\n        this.keyup$ = new Subject();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    handleEsc(event) {\n        if (isEscapeKey(event)) {\n            this.hideSuggestions();\n            event.preventDefault();\n        }\n        this.keydown$.next(event);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onkeyup(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.keyup$.next(event);\n    }\n    /**\n     * @return {?}\n     */\n    onClick() {\n        if (this.taDisplayOnFocus) {\n            this.displaySuggestions();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.filterEnterEvent(this.keydown$);\n        this.listenAndSuggest(this.keyup$);\n        this.navigateWithArrows(this.keydown$);\n        this.renderTemplate();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.keydown$.complete();\n        this.keyup$.complete();\n    }\n    /**\n     * @return {?}\n     */\n    renderTemplate() {\n        this.viewContainer.createEmbeddedView(this.suggestionsTplRef);\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} obs\n     * @return {?}\n     */\n    listenAndSuggest(obs) {\n        obs\n            .pipe(filter((e) => validateNonCharKeyCode(e.keyCode)), map(toFormControlValue), debounceTime(this.taDebounce), concat(), distinctUntilChanged(), filter((query) => this.taAllowEmpty || hasCharacters(query)), tap((query) => (this.searchQuery = query)), switchMap((query) => this.suggest(query)))\n            .subscribe((results) => {\n            this.assignResults(results);\n            // this.updateIndex(Key.ArrowDown);\n            this.displaySuggestions();\n        });\n    }\n    /**\n     * @param {?} results\n     * @return {?}\n     */\n    assignResults(results) {\n        const /** @type {?} */ labelForDisplay = this.taListItemLabel;\n        this.resultsAsItems = results;\n        this.results = results.map((item) => (labelForDisplay ? item[labelForDisplay] : item));\n        this.suggestionIndex = NO_INDEX;\n        if (!results || !results.length) {\n            this.activeResult = this.searchQuery;\n        }\n    }\n    /**\n     * @param {?} elementObs\n     * @return {?}\n     */\n    filterEnterEvent(elementObs) {\n        elementObs.pipe(filter(isEnterKey)).subscribe((event) => {\n            this.handleSelectSuggestion(this.activeResult);\n        });\n    }\n    /**\n     * @param {?} elementObs\n     * @return {?}\n     */\n    navigateWithArrows(elementObs) {\n        elementObs\n            .pipe(filter((e) => validateArrowKeys(e.keyCode)), map((e) => e.keyCode))\n            .subscribe((keyCode) => {\n            this.updateIndex(keyCode);\n            this.displaySuggestions();\n        });\n    }\n    /**\n     * @param {?} keyCode\n     * @return {?}\n     */\n    updateIndex(keyCode) {\n        this.suggestionIndex = resolveNextIndex(this.suggestionIndex, keyCode === Key.ArrowDown, this.results.length);\n    }\n    /**\n     * @return {?}\n     */\n    displaySuggestions() {\n        this.showSuggestions = true;\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} query\n     * @return {?}\n     */\n    suggest(query) {\n        return this.taList.length\n            ? this.createListSource(this.taList, query)\n            : this.request(query);\n    }\n    /**\n     * peforms a jsonp/http request to search with query and params\n     * @param {?} query the query to search from the remote source\n     * @return {?}\n     */\n    request(query) {\n        const /** @type {?} */ url = this.taUrl;\n        const /** @type {?} */ searchConfig = createParamsForQuery(query, this.taQueryParam, this.taParams);\n        const /** @type {?} */ options = {\n            params: searchConfig\n        };\n        const /** @type {?} */ isJsonpApi = this.taApi === 'jsonp';\n        return isJsonpApi\n            ? this.requestJsonp(url, options, this.taCallbackParamValue)\n            : this.requestHttp(url, options);\n    }\n    /**\n     * @param {?} url\n     * @param {?} options\n     * @return {?}\n     */\n    requestHttp(url, options) {\n        const /** @type {?} */ apiMethod = resolveApiMethod(this.taApiMethod);\n        return this.http[apiMethod](url, options);\n    }\n    /**\n     * @param {?} url\n     * @param {?} options\n     * @param {?=} callback\n     * @return {?}\n     */\n    requestJsonp(url, options, callback = 'callback') {\n        const /** @type {?} */ params = options.params.toString();\n        return this.http.jsonp(`${url}?${params}`, callback).pipe(map(toJsonpSingleResult), map(toJsonpFinalResults));\n    }\n    /**\n     * @param {?} index\n     * @param {?} result\n     * @return {?}\n     */\n    markIsActive(index, result) {\n        const /** @type {?} */ isActive = isIndexActive(index, this.suggestionIndex);\n        if (isActive) {\n            this.activeResult = result;\n        }\n        return isActive;\n    }\n    /**\n     * @param {?} suggestion\n     * @param {?} index\n     * @return {?}\n     */\n    handleSelectionClick(suggestion, index) {\n        this.suggestionIndex = index;\n        this.handleSelectSuggestion(suggestion);\n    }\n    /**\n     * @param {?} suggestion\n     * @return {?}\n     */\n    handleSelectSuggestion(suggestion) {\n        const /** @type {?} */ result = this.resultsAsItems.length\n            ? this.resultsAsItems[this.suggestionIndex]\n            : suggestion;\n        this.hideSuggestions();\n        const /** @type {?} */ resolvedResult = this.suggestionIndex === NO_INDEX ? this.searchQuery : result;\n        this.taSelected.emit(resolvedResult);\n    }\n    /**\n     * @return {?}\n     */\n    hideSuggestions() {\n        this.showSuggestions = false;\n    }\n    /**\n     * @return {?}\n     */\n    hasItemTemplate() {\n        return this.taItemTpl !== undefined;\n    }\n    /**\n     * @param {?} list\n     * @param {?} query\n     * @return {?}\n     */\n    createListSource(list, query) {\n        const /** @type {?} */ sanitizedQuery = this.taCaseSensitive ? query : query.toLowerCase();\n        const /** @type {?} */ fieldsToExtract = this.taListItemField;\n        return of(list.filter((item) => {\n            return resolveItemValue(item, fieldsToExtract, this.taCaseSensitive).includes(sanitizedQuery);\n        }));\n    }\n}\nNgxTypeAheadComponent.decorators = [\n    { type: Component, args: [{\n                selector: '[ngxTypeahead]',\n                styles: [\n                    `\n      .ta-results {\n        position: absolute;\n      }\n      .ta-backdrop {\n        bottom: 0;\n        left: 0;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 1;\n      }\n      .ta-item {\n        position: relative;\n        z-index: 2;\n        display: block;\n      }\n    `\n                ],\n                template: `\n  <ng-template #suggestionsTplRef>\n  <section class=\"ta-results list-group\" *ngIf=\"showSuggestions\">\n    <div class=\"ta-backdrop\" (click)=\"hideSuggestions()\"></div>\n    <button type=\"button\" class=\"ta-item list-group-item\"\n      *ngFor=\"let result of results; let i = index;\"\n      [class.active]=\"markIsActive(i, result)\"\n      (click)=\"handleSelectionClick(result, i)\">\n      <span *ngIf=\"!taItemTpl\"><i class=\"fa fa-search\"></i> {{ result }}</span>\n      <ng-template\n        [ngTemplateOutlet]=\"taItemTpl\"\n        [ngTemplateOutletContext]=\"{ $implicit: {result: result, index: i} }\"\n      ></ng-template>\n    </button>\n  </section>\n  </ng-template>\n  `\n            },] },\n];\n/** @nocollapse */\nNgxTypeAheadComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: ViewContainerRef, },\n    { type: HttpClient, },\n    { type: ChangeDetectorRef, },\n];\nNgxTypeAheadComponent.propDecorators = {\n    \"taItemTpl\": [{ type: Input },],\n    \"taUrl\": [{ type: Input },],\n    \"taParams\": [{ type: Input },],\n    \"taQueryParam\": [{ type: Input },],\n    \"taCallbackParamValue\": [{ type: Input },],\n    \"taApi\": [{ type: Input },],\n    \"taApiMethod\": [{ type: Input },],\n    \"taList\": [{ type: Input },],\n    \"taListItemField\": [{ type: Input },],\n    \"taListItemLabel\": [{ type: Input },],\n    \"taDebounce\": [{ type: Input },],\n    \"taAllowEmpty\": [{ type: Input },],\n    \"taCaseSensitive\": [{ type: Input },],\n    \"taDisplayOnFocus\": [{ type: Input },],\n    \"taSelected\": [{ type: Output },],\n    \"suggestionsTplRef\": [{ type: ViewChild, args: ['suggestionsTplRef',] },],\n    \"handleEsc\": [{ type: HostListener, args: ['keydown', ['$event'],] },],\n    \"onkeyup\": [{ type: HostListener, args: ['keyup', ['$event'],] },],\n    \"onClick\": [{ type: HostListener, args: ['click',] },],\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass NgxTypeaheadModule {\n}\nNgxTypeaheadModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [NgxTypeAheadComponent],\n                exports: [NgxTypeAheadComponent, CommonModule],\n                imports: [CommonModule, HttpClientModule, HttpClientJsonpModule],\n                providers: []\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking\n * Copyright Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxTypeaheadModule, NgxTypeAheadComponent as ɵa };\n//# sourceMappingURL=ngx-typeahead.js.map\n","import { concat as concatStatic } from '../observable/concat';\nexport function concat(...observables) {\n    return (source) => source.lift.call(concatStatic(source, ...observables));\n}\n//# sourceMappingURL=concat.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new SwitchMapOperator(project));\n}\nclass SwitchMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n}\nclass SwitchMapSubscriber extends OuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.index = 0;\n    }\n    _next(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    }\n    _innerSub(result, value, index) {\n        const innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        this.innerSubscription = subscribeToResult(this, result, value, index, innerSubscriber);\n    }\n    _complete() {\n        const { innerSubscription } = this;\n        if (!innerSubscription || innerSubscription.closed) {\n            super._complete();\n        }\n        this.unsubscribe();\n    }\n    _unsubscribe() {\n        this.innerSubscription = null;\n    }\n    notifyComplete(innerSub) {\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            super._complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=switchMap.js.map","import {\r\n  Component,\r\n  EventEmitter,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  ChangeDetectionStrategy,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { Authorization } from '@core/services';\r\nimport { EchoesState } from '@core/store';\r\nimport { AppApi } from '@api/app.api';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./app-navbar.scss'],\r\n  template: `\r\n    <nav class=\"row navbar navbar-default navbar-fixed-top\">\r\n      <div class=\"navbar-container\">\r\n        <div class=\"navbar__content\">\r\n        <h3 *ngIf=\"header\" class=\"navbar__header navbar-text\">\r\n            <button *ngIf=\"mainIcon\" class=\"navbar-btn__main btn-transparent\"\r\n              (click)=\"handleMainIconClick()\">\r\n              <icon [name]=\"mainIcon\"></icon>\r\n            </button>\r\n            <icon [name]=\"headerIcon\" *ngIf=\"headerIcon\"></icon> {{ header }}\r\n          </h3>\r\n          <ng-content></ng-content>\r\n        </div>\r\n        <section class=\"navbar-text navbar-actions\">\r\n          <app-navbar-user\r\n            [signedIn]=\"isSignIn()\"\r\n            [userImageUrl]=\"(user$ | async).profile.imageUrl\"\r\n            (signIn)=\"signInUser()\"\r\n            ></app-navbar-user>\r\n          <app-navbar-menu\r\n            [appVersion]=\"appVersion$ | async\"\r\n            [theme]=\"themes$ | async\"\r\n            (themeChange)=\"changeTheme($event)\"\r\n            [signedIn]=\"isSignIn()\"\r\n            (signOut)=\"signOutUser()\"\r\n            (versionUpdate)=\"updateVersion()\"\r\n            (versionCheck)=\"checkVersion()\"\r\n          ></app-navbar-menu>\r\n        </section>\r\n      </div>\r\n    </nav>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppNavbarComponent implements OnInit {\r\n  user$ = this.appApi.user$;\r\n  appVersion$ = this.appApi.appVersion$;\r\n  themes$ = this.appApi.themes$;\r\n\r\n  @Input() header: string;\r\n  @Input() headerIcon = '';\r\n  @Input() mainIcon = '';\r\n\r\n  @Output() signIn = new EventEmitter();\r\n  @Output() signOut = new EventEmitter();\r\n  @Output() headerMainIconClick = new EventEmitter();\r\n\r\n  constructor(private authorization: Authorization, private appApi: AppApi) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  signInUser() {\r\n    this.appApi.signinUser();\r\n    this.signIn.next();\r\n  }\r\n\r\n  signOutUser() {\r\n    this.appApi.signoutUser();\r\n    this.signOut.next();\r\n  }\r\n\r\n  isSignIn() {\r\n    return this.authorization.isSignIn();\r\n  }\r\n\r\n  updateVersion() {\r\n    this.appApi.updateVersion();\r\n  }\r\n\r\n  checkVersion() {\r\n    this.appApi.checkVersion();\r\n  }\r\n\r\n  handleMainIconClick() {\r\n    this.headerMainIconClick.emit();\r\n  }\r\n\r\n  changeTheme(theme) {\r\n    this.appApi.changeTheme(theme.value);\r\n  }\r\n}\r\n","import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { YoutubeApiService } from './youtube-api.service';\r\nimport { Authorization } from './authorization.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\ninterface IYoutubeVideosInfo {\r\n  items: GoogleApiYouTubeVideoResource[];\r\n}\r\n@Injectable()\r\nexport class YoutubeVideosInfo {\r\n  public api: YoutubeApiService;\r\n\r\n  constructor(private http: HttpClient, auth: Authorization) {\r\n    this.api = new YoutubeApiService(\r\n      {\r\n        url: 'https://www.googleapis.com/youtube/v3/videos',\r\n        http: this.http,\r\n        idKey: 'id',\r\n        config: {\r\n          part: 'snippet,contentDetails,statistics'\r\n        }\r\n      },\r\n      auth\r\n    );\r\n  }\r\n\r\n  fetchVideoData(mediaId: string) {\r\n    return this.api.list(mediaId).pipe(map(response => response.items[0]));\r\n  }\r\n\r\n  fetchVideosData(mediaIds: string) {\r\n    return this.api.list(mediaIds).pipe(map(response => response.items));\r\n  }\r\n}\r\n","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport const empty = {\n    closed: true,\n    next(value) { },\n    error(err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete() { }\n};\n//# sourceMappingURL=Observer.js.map","import { MediaParserService, YoutubePlayerService } from '@core/services';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport * as fromNowPlaylist from '@store/now-playlist';\r\nimport { UserProfile } from '@core/services/user-profile.service';\r\nimport { toPayload } from '@utils/data.utils';\r\nimport { map, switchMap, withLatestFrom, filter, tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class NowPlaylistEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    public store: Store<EchoesState>,\r\n    private mediaParser: MediaParserService,\r\n    private playerService: YoutubePlayerService,\r\n    private userProfile: UserProfile\r\n  ) {}\r\n\r\n  @Effect()\r\n  queueVideo$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.SELECT),\r\n    map(toPayload),\r\n    map(\r\n      (media: GoogleApiYouTubeVideoResource) =>\r\n        new fromNowPlaylist.QueueVideo(media)\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  playerStateChange$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.PLAYER_STATE_CHANGE),\r\n    map(toPayload),\r\n    filter((data: YT.PlayerState) => data === YT.PlayerState.ENDED),\r\n    map(() => new fromNowPlaylist.MediaEnded())\r\n  );\r\n\r\n  /* if it's the last track\r\n   * AND repeat is on\r\n   * THEN play the first track\r\n  **/\r\n  @Effect()\r\n  loadNextTrack$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.MEDIA_ENDED),\r\n    map(toPayload),\r\n    withLatestFrom(this.store.select(fromNowPlaylist.getSelectedMedia)),\r\n    filter(\r\n      (states: [any, GoogleApiYouTubeVideoResource]) =>\r\n        states[1] && states[1].hasOwnProperty('id')\r\n    ),\r\n    map(\r\n      (states: [any, GoogleApiYouTubeVideoResource]) =>\r\n        new fromNowPlaylist.SelectVideo(states[1])\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  selectBeforeSeekToTime$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.SELECT_AND_SEEK_TO_TIME),\r\n    map(toPayload),\r\n    map(\r\n      trackEvent => new fromNowPlaylist.UpdateIndexByMedia(trackEvent.media.id)\r\n    )\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  seekToTime$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.SELECT_AND_SEEK_TO_TIME),\r\n    map(toPayload),\r\n    tap(trackEvent =>\r\n      this.playerService.seekTo(this.mediaParser.toNumber(trackEvent.time))\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  loadPlaylist$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.LOAD_PLAYLIST_START),\r\n    map(toPayload),\r\n    switchMap((id: string) => this.userProfile.fetchAllPlaylistItems(id)),\r\n    map(\r\n      (playlistItems: GoogleApiYouTubeVideoResource[]) =>\r\n        new fromNowPlaylist.LoadPlaylistEndAction(playlistItems)\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  addPlaylistItems$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.LOAD_PLAYLIST_END),\r\n    map(toPayload),\r\n    map(\r\n      (playlistItems: GoogleApiYouTubeVideoResource[]) =>\r\n        new fromNowPlaylist.QueueVideos(playlistItems)\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  playPlaylistFirstTrack$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.LOAD_PLAYLIST_END),\r\n    map(toPayload),\r\n    map(\r\n      (playlistItems: GoogleApiYouTubeVideoResource[]) =>\r\n        new fromNowPlaylist.SelectVideo(playlistItems[0])\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  playPlaylist$ = this.actions$.pipe(\r\n    ofType(fromNowPlaylist.ActionTypes.PLAY_PLAYLIST),\r\n    map(toPayload),\r\n    map((id: string) => new fromNowPlaylist.LoadPlaylistAction(id))\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class GapiLoader {\r\n  private _api: Observable<any>;\r\n  private api: Subject<any>;\r\n\r\n  constructor() {}\r\n\r\n  loadGoogleApi(api, api$) {\r\n    const gapi = 'https://apis.google.com/js/api.js';\r\n    const script = document.createElement('script');\r\n    script.addEventListener('load', () => this._loadApi(api, api$));\r\n    script.setAttribute('src', gapi);\r\n    document.body.appendChild(script);\r\n  }\r\n\r\n  load(api: string) {\r\n    const api$ = this.createApi(api);\r\n    this.loadGoogleApi(api, api$);\r\n    return api$;\r\n  }\r\n\r\n  _loadApi(api: string, api$) {\r\n    const gapi = window['gapi'];\r\n    const gapiAuthLoaded = gapi && gapi.auth2 && gapi.auth2.getAuthInstance();\r\n    if (gapiAuthLoaded && gapiAuthLoaded.currentUser) {\r\n      api$.complete(gapiAuthLoaded);\r\n    } else {\r\n      gapi.load(api, response => api$.next(response));\r\n    }\r\n  }\r\n\r\n  createApi(api: string) {\r\n    const api$ = new Subject();\r\n    return api$;\r\n  }\r\n}\r\n","\n    <div class=\"btn-group btn-group-sm navbar-btn\">\n      <button class=\"btn btn-default\"\n        *ngFor=\"let button of buttons\"\n        [class.active]=\"isSelectedButton(button.value)\"\n        (click)=\"buttonClick.next(button)\">\n        {{ button.label }}\n      </button>\n    </div>\n  ","import {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n  Renderer2,\r\n  Component\r\n} from '@angular/core';\r\nimport { isNewChange } from '@utils/data.utils';\r\n\r\nconst ICON_PREFIX_STANDARD = 'fa';\r\nexport const ICON_PREFIX_BRAND = 'fa';\r\nconst ICON_LIB_PREFIX = 'fa';\r\n@Component({\r\n  selector: 'icon',\r\n  template: `<ng-content></ng-content>`\r\n})\r\nexport class IconComponent implements OnInit, OnChanges {\r\n  @Input() name = '';\r\n  @Input() prefix = ICON_PREFIX_STANDARD;\r\n\r\n  icons = {\r\n    fa: true\r\n  };\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngOnInit() {\r\n    const { name } = this;\r\n    let classes = [this.prefix];\r\n    if (name) {\r\n      classes = [...classes, ...this.createIconStyles(name)];\r\n    }\r\n    this.setClasses(classes);\r\n  }\r\n\r\n  ngOnChanges({ name }: SimpleChanges) {\r\n    if (name && isNewChange(name)) {\r\n      this.createIconStyles(name.currentValue);\r\n    }\r\n  }\r\n\r\n  createIconStyles(names: string): string[] {\r\n    return names.split(' ').map(name => `${ICON_LIB_PREFIX}-${name}`);\r\n  }\r\n\r\n  setClasses(names: string[]) {\r\n    names.forEach(name => this.renderer.addClass(this.el.nativeElement, name));\r\n  }\r\n}\r\n","import { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nconst NONE = {};\nexport function combineLatest(...observables) {\n    let resultSelector = null;\n    let scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nexport class CombineLatestOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class CombineLatestSubscriber extends OuterSubscriber {\n    constructor(destination, resultSelector) {\n        super(destination);\n        this.resultSelector = resultSelector;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    _next(observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    }\n    _complete() {\n        const observables = this.observables;\n        const len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (let i = 0; i < len; i++) {\n                const observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    }\n    notifyComplete(unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        const values = this.values;\n        const oldVal = values[outerIndex];\n        const toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    }\n    _tryResultSelector(values) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=combineLatest.js.map","function EmptyErrorImpl() {\n    Error.call(this);\n    this.message = 'no elements in sequence';\n    this.name = 'EmptyError';\n    return this;\n}\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\nexport const EmptyError = EmptyErrorImpl;\n//# sourceMappingURL=EmptyError.js.map","import { Subscriber } from '../Subscriber';\nexport function defaultIfEmpty(defaultValue = null) {\n    return (source) => source.lift(new DefaultIfEmptyOperator(defaultValue));\n}\nclass DefaultIfEmptyOperator {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    }\n}\nclass DefaultIfEmptySubscriber extends Subscriber {\n    constructor(destination, defaultValue) {\n        super(destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    _next(value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    }\n    _complete() {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=defaultIfEmpty.js.map","import { tap } from './tap';\nimport { EmptyError } from '../util/EmptyError';\nexport const throwIfEmpty = (errorFactory = defaultErrorFactory) => tap({\n    hasValue: false,\n    next() { this.hasValue = true; },\n    complete() {\n        if (!this.hasValue) {\n            throw errorFactory();\n        }\n    }\n});\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n//# sourceMappingURL=throwIfEmpty.js.map","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n//# sourceMappingURL=first.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nclass TakeLastOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    }\n}\nclass TakeLastSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    _next(value) {\n        const ring = this.ring;\n        const total = this.total;\n        const count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            const index = count % total;\n            ring[index] = value;\n        }\n    }\n    _complete() {\n        const destination = this.destination;\n        let count = this.count;\n        if (count > 0) {\n            const total = this.count >= this.total ? this.total : this.count;\n            const ring = this.ring;\n            for (let i = 0; i < total; i++) {\n                const idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=takeLast.js.map","import { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\nclass EveryOperator {\n    constructor(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    call(observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    }\n}\nclass EverySubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    notifyComplete(everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    }\n    _next(value) {\n        let result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    }\n    _complete() {\n        this.notifyComplete(true);\n    }\n}\n//# sourceMappingURL=every.js.map","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nexport function finalize(callback) {\n    return (source) => source.lift(new FinallyOperator(callback));\n}\nclass FinallyOperator {\n    constructor(callback) {\n        this.callback = callback;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    }\n}\nclass FinallySubscriber extends Subscriber {\n    constructor(destination, callback) {\n        super(destination);\n        this.add(new Subscription(callback));\n    }\n}\n//# sourceMappingURL=finalize.js.map","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\nexport function last(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n//# sourceMappingURL=last.js.map","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { LocationStrategy, Location, PlatformLocation, APP_BASE_HREF, ViewportScroller, HashLocationStrategy, PathLocationStrategy, LOCATION_INITIALIZED } from '@angular/common';\nimport { Component, ɵisObservable, ɵisPromise, NgModuleRef, InjectionToken, NgModuleFactory, ɵConsole, NgZone, isDevMode, Directive, Attribute, Renderer2, ElementRef, Input, HostListener, HostBinding, ChangeDetectorRef, ContentChildren, EventEmitter, ViewContainerRef, ComponentFactoryResolver, Output, Injectable, NgModuleFactoryLoader, Compiler, Injector, ApplicationRef, Optional, SystemJsNgModuleLoader, NgProbeToken, ANALYZE_FOR_ENTRY_COMPONENTS, SkipSelf, Inject, APP_INITIALIZER, APP_BOOTSTRAP_LISTENER, NgModule, Version } from '@angular/core';\nimport { of, from, BehaviorSubject, EmptyError, Observable, combineLatest, defer, Subject, EMPTY } from 'rxjs';\nimport { map, concatAll, last, catchError, first, mergeMap, every, switchMap, take, startWith, scan, filter, concatMap, reduce, tap, finalize, mergeAll } from 'rxjs/operators';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Base for events the Router goes through, as opposed to events tied to a specific\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\n *\n * Example:\n *\n * ```\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.pipe(\n *       filter(e => e instanceof RouterEvent)\n *     ).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     */\n    constructor(id, url) {\n        this.id = id;\n        this.url = url;\n    }\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation starts.\n *\n * \\@publicApi\n */\nclass NavigationStart extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?=} navigationTrigger\n     * @param {?=} restoredState\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    navigationTrigger = 'imperative', \n    /** @docsNotRequired */\n    restoredState = null) {\n        super(id, url);\n        this.navigationTrigger = navigationTrigger;\n        this.restoredState = restoredState;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation ends successfully.\n *\n * \\@publicApi\n */\nclass NavigationEnd extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() {\n        return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n    }\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation is canceled.\n *\n * \\@publicApi\n */\nclass NavigationCancel extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} reason\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, reason) {\n        super(id, url);\n        this.reason = reason;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a navigation fails due to an unexpected error.\n *\n * \\@publicApi\n */\nclass NavigationError extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} error\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, error) {\n        super(id, url);\n        this.error = error;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() {\n        return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n    }\n}\n/**\n * \\@description\n *\n * Represents an event triggered when routes are recognized.\n *\n * \\@publicApi\n */\nclass RoutesRecognized extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() {\n        return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the start of the Guard phase of routing.\n *\n * \\@publicApi\n */\nclass GuardsCheckStart extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the end of the Guard phase of routing.\n *\n * \\@publicApi\n */\nclass GuardsCheckEnd extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     * @param {?} shouldActivate\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state, shouldActivate) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n        this.shouldActivate = shouldActivate;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the start of the Resolve phase of routing. The timing of this\n * event may change, thus it's experimental. In the current iteration it will run\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\n * behavior may change to only run when there are things to be resolved.\n *\n * \\@publicApi\n */\nclass ResolveStart extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the end of the Resolve phase of routing. See note on\n * `ResolveStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nclass ResolveEnd extends RouterEvent {\n    /**\n     * @param {?} id\n     * @param {?} url\n     * @param {?} urlAfterRedirects\n     * @param {?} state\n     */\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, urlAfterRedirects, state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * \\@description\n *\n * Represents an event triggered before lazy loading a route config.\n *\n * \\@publicApi\n */\nclass RouteConfigLoadStart {\n    /**\n     * @param {?} route\n     */\n    constructor(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n/**\n * \\@description\n *\n * Represents an event triggered when a route has been lazy loaded.\n *\n * \\@publicApi\n */\nclass RouteConfigLoadEnd {\n    /**\n     * @param {?} route\n     */\n    constructor(route) {\n        this.route = route;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nclass ChildActivationStart {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ChildActivationStart(path: '${path}')`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ChildActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nclass ChildActivationEnd {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ChildActivationEnd(path: '${path}')`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationEnd` for use of this experimental API.\n *\n * \\@publicApi\n */\nclass ActivationStart {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ActivationStart(path: '${path}')`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the start of end of the Resolve phase of routing. See note on\n * `ActivationStart` for use of this experimental API.\n *\n * \\@publicApi\n */\nclass ActivationEnd {\n    /**\n     * @param {?} snapshot\n     */\n    constructor(snapshot) {\n        this.snapshot = snapshot;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ActivationEnd(path: '${path}')`;\n    }\n}\n/**\n * \\@description\n *\n * Represents a scrolling event.\n *\n * \\@publicApi\n */\nclass Scroll {\n    /**\n     * @param {?} routerEvent\n     * @param {?} position\n     * @param {?} anchor\n     */\n    constructor(routerEvent, position, anchor) {\n        this.routerEvent = routerEvent;\n        this.position = position;\n        this.anchor = anchor;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n        return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nclass EmptyOutletComponent {\n}\nEmptyOutletComponent.decorators = [\n    { type: Component, args: [{ template: `<router-outlet></router-outlet>` }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Name of the primary outlet.\n *\n * \\@publicApi\n * @type {?}\n */\nconst PRIMARY_OUTLET = 'primary';\nclass ParamsAsMap {\n    /**\n     * @param {?} params\n     */\n    constructor(params) { this.params = params || {}; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    has(name) { return this.params.hasOwnProperty(name); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    get(name) {\n        if (this.has(name)) {\n            /** @type {?} */\n            const v = this.params[name];\n            return Array.isArray(v) ? v[0] : v;\n        }\n        return null;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getAll(name) {\n        if (this.has(name)) {\n            /** @type {?} */\n            const v = this.params[name];\n            return Array.isArray(v) ? v : [v];\n        }\n        return [];\n    }\n    /**\n     * @return {?}\n     */\n    get keys() { return Object.keys(this.params); }\n}\n/**\n * Convert a `Params` instance to a `ParamMap`.\n *\n * \\@publicApi\n * @param {?} params\n * @return {?}\n */\nfunction convertToParamMap(params) {\n    return new ParamsAsMap(params);\n}\n/** @type {?} */\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\nfunction navigationCancelingError(message) {\n    /** @type {?} */\n    const error = Error('NavigationCancelingError: ' + message);\n    ((/** @type {?} */ (error)))[NAVIGATION_CANCELING_ERROR] = true;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction isNavigationCancelingError(error) {\n    return error && ((/** @type {?} */ (error)))[NAVIGATION_CANCELING_ERROR];\n}\n// Matches the route configuration (`route`) against the actual URL (`segments`).\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n    /** @type {?} */\n    const parts = (/** @type {?} */ (route.path)).split('/');\n    if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n    }\n    if (route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n    }\n    /** @type {?} */\n    const posParams = {};\n    // Check each config part against the actual URL\n    for (let index = 0; index < parts.length; index++) {\n        /** @type {?} */\n        const part = parts[index];\n        /** @type {?} */\n        const segment = segments[index];\n        /** @type {?} */\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n            posParams[part.substring(1)] = segment;\n        }\n        else if (part !== segment.path) {\n            // The actual URL part does not match the config, no match\n            return null;\n        }\n    }\n    return { consumed: segments.slice(0, parts.length), posParams };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LoadedRouterConfig {\n    /**\n     * @param {?} routes\n     * @param {?} module\n     */\n    constructor(routes, module) {\n        this.routes = routes;\n        this.module = module;\n    }\n}\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\nfunction validateConfig(config, parentPath = '') {\n    // forEach doesn't iterate undefined values\n    for (let i = 0; i < config.length; i++) {\n        /** @type {?} */\n        const route = config[i];\n        /** @type {?} */\n        const fullPath = getFullPath(parentPath, route);\n        validateNode(route, fullPath);\n    }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\nfunction validateNode(route, fullPath) {\n    if (!route) {\n        throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n        throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.component && !route.children && !route.loadChildren &&\n        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n        throw new Error(`Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.redirectTo && route.component) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n    }\n    if (route.path && route.matcher) {\n        throw new Error(`Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n        throw new Error(`Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n        throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n        /** @type {?} */\n        const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n        throw new Error(`Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n        throw new Error(`Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n    }\n    if (route.children) {\n        validateConfig(route.children, fullPath);\n    }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\nfunction getFullPath(parentPath, currentRoute) {\n    if (!currentRoute) {\n        return parentPath;\n    }\n    if (!parentPath && !currentRoute.path) {\n        return '';\n    }\n    else if (parentPath && !currentRoute.path) {\n        return `${parentPath}/`;\n    }\n    else if (!parentPath && currentRoute.path) {\n        return currentRoute.path;\n    }\n    else {\n        return `${parentPath}/${currentRoute.path}`;\n    }\n}\n/**\n * Makes a copy of the config and adds any default required properties.\n * @param {?} r\n * @return {?}\n */\nfunction standardizeConfig(r) {\n    /** @type {?} */\n    const children = r.children && r.children.map(standardizeConfig);\n    /** @type {?} */\n    const c = children ? Object.assign({}, r, { children }) : Object.assign({}, r);\n    if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\n        c.component = EmptyOutletComponent;\n    }\n    return c;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction shallowEqualArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction shallowEqual(a, b) {\n    /** @type {?} */\n    const k1 = Object.keys(a);\n    /** @type {?} */\n    const k2 = Object.keys(b);\n    if (k1.length != k2.length) {\n        return false;\n    }\n    /** @type {?} */\n    let key;\n    for (let i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Flattens single-level nested arrays.\n * @template T\n * @param {?} arr\n * @return {?}\n */\nfunction flatten(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\n/**\n * Return the last element of an array.\n * @template T\n * @param {?} a\n * @return {?}\n */\nfunction last$1(a) {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\nfunction forEach(map$$1, callback) {\n    for (const prop in map$$1) {\n        if (map$$1.hasOwnProperty(prop)) {\n            callback(map$$1[prop], prop);\n        }\n    }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction waitForMap(obj, fn) {\n    if (Object.keys(obj).length === 0) {\n        return of({});\n    }\n    /** @type {?} */\n    const waitHead = [];\n    /** @type {?} */\n    const waitTail = [];\n    /** @type {?} */\n    const res = {};\n    forEach(obj, (a, k) => {\n        /** @type {?} */\n        const mapped = fn(k, a).pipe(map((r) => res[k] = r));\n        if (k === PRIMARY_OUTLET) {\n            waitHead.push(mapped);\n        }\n        else {\n            waitTail.push(mapped);\n        }\n    });\n    // Closure compiler has problem with using spread operator here. So just using Array.concat.\n    return of.apply(null, waitHead.concat(waitTail)).pipe(concatAll(), last(), map(() => res));\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction wrapIntoObservable(value) {\n    if (ɵisObservable(value)) {\n        return value;\n    }\n    if (ɵisPromise(value)) {\n        // Use `Promise.resolve()` to wrap promise-like instances.\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n        // change detection.\n        return from(Promise.resolve(value));\n    }\n    return of(value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction createEmptyUrlTree() {\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\nfunction containsTree(container, containee, exact) {\n    if (exact) {\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\n            equalSegmentGroups(container.root, containee.root);\n    }\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction equalSegmentGroups(container, containee) {\n    if (!equalPath(container.segments, containee.segments))\n        return false;\n    if (container.numberOfChildren !== containee.numberOfChildren)\n        return false;\n    for (const c in containee.children) {\n        if (!container.children[c])\n            return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(key => containee[key] === container[key]);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\nfunction containsSegmentGroup(container, containee) {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        /** @type {?} */\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        for (const c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    else {\n        /** @type {?} */\n        const current = containeePaths.slice(0, container.segments.length);\n        /** @type {?} */\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\n/**\n * \\@description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass UrlTree {\n    /**\n     * \\@internal\n     * @param {?} root\n     * @param {?} queryParams\n     * @param {?} fragment\n     */\n    constructor(root, queryParams, fragment) {\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    /**\n     * @return {?}\n     */\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return DEFAULT_SERIALIZER.serialize(this); }\n}\n/**\n * \\@description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * \\@publicApi\n */\nclass UrlSegmentGroup {\n    /**\n     * @param {?} segments\n     * @param {?} children\n     */\n    constructor(segments, children) {\n        this.segments = segments;\n        this.children = children;\n        /**\n         * The parent node in the url tree\n         */\n        this.parent = null;\n        forEach(children, (v, k) => v.parent = this);\n    }\n    /**\n     * Whether the segment has child segments\n     * @return {?}\n     */\n    hasChildren() { return this.numberOfChildren > 0; }\n    /**\n     * Number of child segments\n     * @return {?}\n     */\n    get numberOfChildren() { return Object.keys(this.children).length; }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return serializePaths(this); }\n}\n/**\n * \\@description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@usageNotes\n *  ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass UrlSegment {\n    /**\n     * @param {?} path\n     * @param {?} parameters\n     */\n    constructor(path, parameters) {\n        this.path = path;\n        this.parameters = parameters;\n    }\n    /**\n     * @return {?}\n     */\n    get parameterMap() {\n        if (!this._parameterMap) {\n            this._parameterMap = convertToParamMap(this.parameters);\n        }\n        return this._parameterMap;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    toString() { return serializePath(this); }\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nfunction equalSegments(as, bs) {\n    return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every((a, i) => a.path === bs[i].path);\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\nfunction mapChildrenIntoArray(segment, fn) {\n    /** @type {?} */\n    let res = [];\n    forEach(segment.children, (child, childOutlet) => {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    forEach(segment.children, (child, childOutlet) => {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    return res;\n}\n/**\n * \\@description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * \\@publicApi\n * @abstract\n */\nclass UrlSerializer {\n}\n/**\n * \\@description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@publicApi\n */\nclass DefaultUrlSerializer {\n    /**\n     * Parses a url into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    parse(url) {\n        /** @type {?} */\n        const p = new UrlParser(url);\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n    }\n    /**\n     * Converts a `UrlTree` into a url\n     * @param {?} tree\n     * @return {?}\n     */\n    serialize(tree) {\n        /** @type {?} */\n        const segment = `/${serializeSegment(tree.root, true)}`;\n        /** @type {?} */\n        const query = serializeQueryParams(tree.queryParams);\n        /** @type {?} */\n        const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment((/** @type {?} */ (tree.fragment)))}` : '';\n        return `${segment}${query}${fragment}`;\n    }\n}\n/** @type {?} */\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\nfunction serializePaths(segment) {\n    return segment.segments.map(p => serializePath(p)).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\nfunction serializeSegment(segment, root) {\n    if (!segment.hasChildren()) {\n        return serializePaths(segment);\n    }\n    if (root) {\n        /** @type {?} */\n        const primary = segment.children[PRIMARY_OUTLET] ?\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n            '';\n        /** @type {?} */\n        const children = [];\n        forEach(segment.children, (v, k) => {\n            if (k !== PRIMARY_OUTLET) {\n                children.push(`${k}:${serializeSegment(v, false)}`);\n            }\n        });\n        return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n    }\n    else {\n        /** @type {?} */\n        const children = mapChildrenIntoArray(segment, (v, k) => {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n            }\n            return [`${k}:${serializeSegment(v, false)}`];\n        });\n        return `${serializePaths(segment)}/(${children.join('//')})`;\n    }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriString(s) {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriQuery(s) {\n    return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriFragment(s) {\n    return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\nfunction encodeUriSegment(s) {\n    return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction decode(s) {\n    return decodeURIComponent(s);\n}\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\n/**\n * @param {?} s\n * @return {?}\n */\nfunction decodeQuery(s) {\n    return decode(s.replace(/\\+/g, '%20'));\n}\n/**\n * @param {?} path\n * @return {?}\n */\nfunction serializePath(path) {\n    return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeMatrixParams(params) {\n    return Object.keys(params)\n        .map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`)\n        .join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction serializeQueryParams(params) {\n    /** @type {?} */\n    const strParams = Object.keys(params).map((name) => {\n        /** @type {?} */\n        const value = params[name];\n        return Array.isArray(value) ?\n            value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') :\n            `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n    });\n    return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\n/** @type {?} */\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchSegments(str) {\n    /** @type {?} */\n    const match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\n/** @type {?} */\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchQueryParams(str) {\n    /** @type {?} */\n    const match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\n/** @type {?} */\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n// Return the value of the query param at the start of the string or an empty string\n/**\n * @param {?} str\n * @return {?}\n */\nfunction matchUrlQueryParamValue(str) {\n    /** @type {?} */\n    const match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\nclass UrlParser {\n    /**\n     * @param {?} url\n     */\n    constructor(url) {\n        this.url = url;\n        this.remaining = url;\n    }\n    /**\n     * @return {?}\n     */\n    parseRootSegment() {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        // The root segment group never has segments\n        return new UrlSegmentGroup([], this.parseChildren());\n    }\n    /**\n     * @return {?}\n     */\n    parseQueryParams() {\n        /** @type {?} */\n        const params = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    }\n    /**\n     * @return {?}\n     */\n    parseFragment() {\n        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    parseChildren() {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        /** @type {?} */\n        const segments = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        /** @type {?} */\n        let children = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        /** @type {?} */\n        let res = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    }\n    // parse a segment with its matrix parameters\n    // ie `name;k1=v1;k2`\n    /**\n     * @private\n     * @return {?}\n     */\n    parseSegment() {\n        /** @type {?} */\n        const path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    parseMatrixParams() {\n        /** @type {?} */\n        const params = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    }\n    /**\n     * @private\n     * @param {?} params\n     * @return {?}\n     */\n    parseParam(params) {\n        /** @type {?} */\n        const key = matchSegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        /** @type {?} */\n        let value = '';\n        if (this.consumeOptional('=')) {\n            /** @type {?} */\n            const valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    }\n    // Parse a single query parameter `name[=value]`\n    /**\n     * @private\n     * @param {?} params\n     * @return {?}\n     */\n    parseQueryParam(params) {\n        /** @type {?} */\n        const key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        /** @type {?} */\n        let value = '';\n        if (this.consumeOptional('=')) {\n            /** @type {?} */\n            const valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        /** @type {?} */\n        const decodedKey = decodeQuery(key);\n        /** @type {?} */\n        const decodedVal = decodeQuery(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            // Append to existing values\n            /** @type {?} */\n            let currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        }\n        else {\n            // Create a new value\n            params[decodedKey] = decodedVal;\n        }\n    }\n    // parse `(a/b//outlet_name:c/d)`\n    /**\n     * @private\n     * @param {?} allowPrimary\n     * @return {?}\n     */\n    parseParens(allowPrimary) {\n        /** @type {?} */\n        const segments = {};\n        this.capture('(');\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            /** @type {?} */\n            const path = matchSegments(this.remaining);\n            /** @type {?} */\n            const next = this.remaining[path.length];\n            // if is is not one of these characters, then the segment was unescaped\n            // or the group was not closed\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new Error(`Cannot parse url '${this.url}'`);\n            }\n            /** @type {?} */\n            let outletName = (/** @type {?} */ (undefined));\n            if (path.indexOf(':') > -1) {\n                outletName = path.substr(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            }\n            else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            /** @type {?} */\n            const children = this.parseChildren();\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    }\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    peekStartsWith(str) { return this.remaining.startsWith(str); }\n    // Consumes the prefix when it is present and returns whether it has been consumed\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    consumeOptional(str) {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    capture(str) {\n        if (!this.consumeOptional(str)) {\n            throw new Error(`Expected \"${str}\".`);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n */\nclass Tree {\n    /**\n     * @param {?} root\n     */\n    constructor(root) { this._root = root; }\n    /**\n     * @return {?}\n     */\n    get root() { return this._root.value; }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    parent(t) {\n        /** @type {?} */\n        const p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    children(t) {\n        /** @type {?} */\n        const n = findNode(t, this._root);\n        return n ? n.children.map(t => t.value) : [];\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    firstChild(t) {\n        /** @type {?} */\n        const n = findNode(t, this._root);\n        return n && n.children.length > 0 ? n.children[0].value : null;\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    siblings(t) {\n        /** @type {?} */\n        const p = findPath(t, this._root);\n        if (p.length < 2)\n            return [];\n        /** @type {?} */\n        const c = p[p.length - 2].children.map(c => c.value);\n        return c.filter(cc => cc !== t);\n    }\n    /**\n     * \\@internal\n     * @param {?} t\n     * @return {?}\n     */\n    pathFromRoot(t) { return findPath(t, this._root).map(s => s.value); }\n}\n// DFS for the node matching the value\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findNode(value, node) {\n    if (value === node.value)\n        return node;\n    for (const child of node.children) {\n        /** @type {?} */\n        const node = findNode(value, child);\n        if (node)\n            return node;\n    }\n    return null;\n}\n// Return the path to the node with the given value using DFS\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\nfunction findPath(value, node) {\n    if (value === node.value)\n        return [node];\n    for (const child of node.children) {\n        /** @type {?} */\n        const path = findPath(value, child);\n        if (path.length) {\n            path.unshift(node);\n            return path;\n        }\n    }\n    return [];\n}\n/**\n * @template T\n */\nclass TreeNode {\n    /**\n     * @param {?} value\n     * @param {?} children\n     */\n    constructor(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `TreeNode(${this.value})`; }\n}\n// Return the list of T indexed by outlet name\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\nfunction nodeChildrenAsMap(node) {\n    /** @type {?} */\n    const map$$1 = {};\n    if (node) {\n        node.children.forEach(child => map$$1[child.value.outlet] = child);\n    }\n    return map$$1;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Represents the state of the router.\n *\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * See `ActivatedRoute` for more information.\n *\n * \\@publicApi\n */\nclass RouterState extends Tree {\n    /**\n     * \\@internal\n     * @param {?} root\n     * @param {?} snapshot\n     */\n    constructor(root, snapshot) {\n        super(root);\n        this.snapshot = snapshot;\n        setRouterState((/** @type {?} */ (this)), root);\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return this.snapshot.toString(); }\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nfunction createEmptyState(urlTree, rootComponent) {\n    /** @type {?} */\n    const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n    /** @type {?} */\n    const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n    /** @type {?} */\n    const emptyParams = new BehaviorSubject({});\n    /** @type {?} */\n    const emptyData = new BehaviorSubject({});\n    /** @type {?} */\n    const emptyQueryParams = new BehaviorSubject({});\n    /** @type {?} */\n    const fragment = new BehaviorSubject('');\n    /** @type {?} */\n    const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n    activated.snapshot = snapshot.root;\n    return new RouterState(new TreeNode(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nfunction createEmptyStateSnapshot(urlTree, rootComponent) {\n    /** @type {?} */\n    const emptyParams = {};\n    /** @type {?} */\n    const emptyData = {};\n    /** @type {?} */\n    const emptyQueryParams = {};\n    /** @type {?} */\n    const fragment = '';\n    /** @type {?} */\n    const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet.  An `ActivatedRoute` can also be used to traverse the router state tree.\n *\n * ```\n * \\@Component({...})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ActivatedRoute {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} params\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @param {?} data\n     * @param {?} outlet\n     * @param {?} component\n     * @param {?} futureSnapshot\n     */\n    constructor(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this._futureSnapshot = futureSnapshot;\n    }\n    /**\n     * The configuration used to match this route\n     * @return {?}\n     */\n    get routeConfig() { return this._futureSnapshot.routeConfig; }\n    /**\n     * The root of the router state\n     * @return {?}\n     */\n    get root() { return this._routerState.root; }\n    /**\n     * The parent of this route in the router state tree\n     * @return {?}\n     */\n    get parent() { return this._routerState.parent(this); }\n    /**\n     * The first child of this route in the router state tree\n     * @return {?}\n     */\n    get firstChild() { return this._routerState.firstChild(this); }\n    /**\n     * The children of this route in the router state tree\n     * @return {?}\n     */\n    get children() { return this._routerState.children(this); }\n    /**\n     * The path from the root of the router state tree to this route\n     * @return {?}\n     */\n    get pathFromRoot() { return this._routerState.pathFromRoot(this); }\n    /**\n     * @return {?}\n     */\n    get paramMap() {\n        if (!this._paramMap) {\n            this._paramMap = this.params.pipe(map((p) => convertToParamMap(p)));\n        }\n        return this._paramMap;\n    }\n    /**\n     * @return {?}\n     */\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap =\n                this.queryParams.pipe(map((p) => convertToParamMap(p)));\n        }\n        return this._queryParamMap;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n    }\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * \\@internal\n * @param {?} route\n * @param {?=} paramsInheritanceStrategy\n * @return {?}\n */\nfunction inheritedParamsDataResolve(route, paramsInheritanceStrategy = 'emptyOnly') {\n    /** @type {?} */\n    const pathFromRoot = route.pathFromRoot;\n    /** @type {?} */\n    let inheritingStartingFrom = 0;\n    if (paramsInheritanceStrategy !== 'always') {\n        inheritingStartingFrom = pathFromRoot.length - 1;\n        while (inheritingStartingFrom >= 1) {\n            /** @type {?} */\n            const current = pathFromRoot[inheritingStartingFrom];\n            /** @type {?} */\n            const parent = pathFromRoot[inheritingStartingFrom - 1];\n            // current route is an empty path => inherits its parent's params and data\n            if (current.routeConfig && current.routeConfig.path === '') {\n                inheritingStartingFrom--;\n                // parent is componentless => current route should inherit its params and data\n            }\n            else if (!parent.component) {\n                inheritingStartingFrom--;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n/**\n * \\@internal\n * @param {?} pathFromRoot\n * @return {?}\n */\nfunction flattenInherited(pathFromRoot) {\n    return pathFromRoot.reduce((res, curr) => {\n        /** @type {?} */\n        const params = Object.assign({}, res.params, curr.params);\n        /** @type {?} */\n        const data = Object.assign({}, res.data, curr.data);\n        /** @type {?} */\n        const resolve = Object.assign({}, res.resolve, curr._resolvedData);\n        return { params, data, resolve };\n    }, (/** @type {?} */ ({ params: {}, data: {}, resolve: {} })));\n}\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ActivatedRouteSnapshot {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} params\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @param {?} data\n     * @param {?} outlet\n     * @param {?} component\n     * @param {?} routeConfig\n     * @param {?} urlSegment\n     * @param {?} lastPathIndex\n     * @param {?} resolve\n     */\n    constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this.routeConfig = routeConfig;\n        this._urlSegment = urlSegment;\n        this._lastPathIndex = lastPathIndex;\n        this._resolve = resolve;\n    }\n    /**\n     * The root of the router state\n     * @return {?}\n     */\n    get root() { return this._routerState.root; }\n    /**\n     * The parent of this route in the router state tree\n     * @return {?}\n     */\n    get parent() { return this._routerState.parent(this); }\n    /**\n     * The first child of this route in the router state tree\n     * @return {?}\n     */\n    get firstChild() { return this._routerState.firstChild(this); }\n    /**\n     * The children of this route in the router state tree\n     * @return {?}\n     */\n    get children() { return this._routerState.children(this); }\n    /**\n     * The path from the root of the router state tree to this route\n     * @return {?}\n     */\n    get pathFromRoot() { return this._routerState.pathFromRoot(this); }\n    /**\n     * @return {?}\n     */\n    get paramMap() {\n        if (!this._paramMap) {\n            this._paramMap = convertToParamMap(this.params);\n        }\n        return this._paramMap;\n    }\n    /**\n     * @return {?}\n     */\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const url = this.url.map(segment => segment.toString()).join('/');\n        /** @type {?} */\n        const matched = this.routeConfig ? this.routeConfig.path : '';\n        return `Route(url:'${url}', path:'${matched}')`;\n    }\n}\n/**\n * \\@description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass RouterStateSnapshot extends Tree {\n    /**\n     * \\@internal\n     * @param {?} url\n     * @param {?} root\n     */\n    constructor(url, root) {\n        super(root);\n        this.url = url;\n        setRouterState((/** @type {?} */ (this)), root);\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return serializeNode(this._root); }\n}\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterState(state, node) {\n    node.value._routerState = state;\n    node.children.forEach(c => setRouterState(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node) {\n    /** @type {?} */\n    const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n    return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nfunction advanceActivatedRoute(route) {\n    if (route.snapshot) {\n        /** @type {?} */\n        const currentSnapshot = route.snapshot;\n        /** @type {?} */\n        const nextSnapshot = route._futureSnapshot;\n        route.snapshot = nextSnapshot;\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n            ((/** @type {?} */ (route.queryParams))).next(nextSnapshot.queryParams);\n        }\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n            ((/** @type {?} */ (route.fragment))).next(nextSnapshot.fragment);\n        }\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n            ((/** @type {?} */ (route.params))).next(nextSnapshot.params);\n        }\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n            ((/** @type {?} */ (route.url))).next(nextSnapshot.url);\n        }\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n            ((/** @type {?} */ (route.data))).next(nextSnapshot.data);\n        }\n    }\n    else {\n        route.snapshot = route._futureSnapshot;\n        // this is for resolved data\n        ((/** @type {?} */ (route.data))).next(route._futureSnapshot.data);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction equalParamsAndUrlSegments(a, b) {\n    /** @type {?} */\n    const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    /** @type {?} */\n    const parentsMismatch = !a.parent !== !b.parent;\n    return equalUrlParams && !parentsMismatch &&\n        (!a.parent || equalParamsAndUrlSegments(a.parent, (/** @type {?} */ (b.parent))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n    /** @type {?} */\n    const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n    return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\nfunction createNode(routeReuseStrategy, curr, prevState) {\n    // reuse an activated route that is currently displayed on the screen\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n        /** @type {?} */\n        const value = prevState.value;\n        value._futureSnapshot = curr.value;\n        /** @type {?} */\n        const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n        return new TreeNode(value, children);\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\n    }\n    else {\n        /** @type {?} */\n        const detachedRouteHandle = (/** @type {?} */ (routeReuseStrategy.retrieve(curr.value)));\n        if (detachedRouteHandle) {\n            /** @type {?} */\n            const tree = detachedRouteHandle.route;\n            setFutureSnapshotsOfActivatedRoutes(curr, tree);\n            return tree;\n        }\n        else {\n            /** @type {?} */\n            const value = createActivatedRoute(curr.value);\n            /** @type {?} */\n            const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n            return new TreeNode(value, children);\n        }\n    }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\n    if (curr.value.routeConfig !== result.value.routeConfig) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n    }\n    if (curr.children.length !== result.children.length) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n    }\n    result.value._futureSnapshot = curr.value;\n    for (let i = 0; i < curr.children.length; ++i) {\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n    }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n    return curr.children.map(child => {\n        for (const p of prevState.children) {\n            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                return createNode(routeReuseStrategy, child, p);\n            }\n        }\n        return createNode(routeReuseStrategy, child);\n    });\n}\n/**\n * @param {?} c\n * @return {?}\n */\nfunction createActivatedRoute(c) {\n    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction createUrlTree(route, urlTree, commands, queryParams, fragment) {\n    if (commands.length === 0) {\n        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n    }\n    /** @type {?} */\n    const nav = computeNavigation(commands);\n    if (nav.toRoot()) {\n        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n    }\n    /** @type {?} */\n    const startingPosition = findStartingPosition(nav, urlTree, route);\n    /** @type {?} */\n    const segmentGroup = startingPosition.processChildren ?\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction isMatrixParams(command) {\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n    /** @type {?} */\n    let qp = {};\n    if (queryParams) {\n        forEach(queryParams, (value, name) => {\n            qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;\n        });\n    }\n    if (urlTree.root === oldSegmentGroup) {\n        return new UrlTree(newSegmentGroup, qp, fragment);\n    }\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\nfunction replaceSegment(current, oldSegment, newSegment) {\n    /** @type {?} */\n    const children = {};\n    forEach(current.children, (c, outletName) => {\n        if (c === oldSegment) {\n            children[outletName] = newSegment;\n        }\n        else {\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\n        }\n    });\n    return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n    /**\n     * @param {?} isAbsolute\n     * @param {?} numberOfDoubleDots\n     * @param {?} commands\n     */\n    constructor(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n            throw new Error('Root segment cannot have matrix parameters');\n        }\n        /** @type {?} */\n        const cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n        if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {\n            throw new Error('{outlets:{}} has to be the last command');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toRoot() {\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n    }\n}\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\nfunction computeNavigation(commands) {\n    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n        return new Navigation(true, 0, commands);\n    }\n    /** @type {?} */\n    let numberOfDoubleDots = 0;\n    /** @type {?} */\n    let isAbsolute = false;\n    /** @type {?} */\n    const res = commands.reduce((res, cmd, cmdIdx) => {\n        if (typeof cmd === 'object' && cmd != null) {\n            if (cmd.outlets) {\n                /** @type {?} */\n                const outlets = {};\n                forEach(cmd.outlets, (commands, name) => {\n                    outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                });\n                return [...res, { outlets }];\n            }\n            if (cmd.segmentPath) {\n                return [...res, cmd.segmentPath];\n            }\n        }\n        if (!(typeof cmd === 'string')) {\n            return [...res, cmd];\n        }\n        if (cmdIdx === 0) {\n            cmd.split('/').forEach((urlPart, partIndex) => {\n                if (partIndex == 0 && urlPart === '.') ;\n                else if (partIndex == 0 && urlPart === '') { //  '/a'\n                    isAbsolute = true;\n                }\n                else if (urlPart === '..') { //  '../a'\n                    numberOfDoubleDots++;\n                }\n                else if (urlPart != '') {\n                    res.push(urlPart);\n                }\n            });\n            return res;\n        }\n        return [...res, cmd];\n    }, []);\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n    /**\n     * @param {?} segmentGroup\n     * @param {?} processChildren\n     * @param {?} index\n     */\n    constructor(segmentGroup, processChildren, index) {\n        this.segmentGroup = segmentGroup;\n        this.processChildren = processChildren;\n        this.index = index;\n    }\n}\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\nfunction findStartingPosition(nav, tree, route) {\n    if (nav.isAbsolute) {\n        return new Position(tree.root, true, 0);\n    }\n    if (route.snapshot._lastPathIndex === -1) {\n        return new Position(route.snapshot._urlSegment, true, 0);\n    }\n    /** @type {?} */\n    const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n    /** @type {?} */\n    const index = route.snapshot._lastPathIndex + modifier;\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n    /** @type {?} */\n    let g = group;\n    /** @type {?} */\n    let ci = index;\n    /** @type {?} */\n    let dd = numberOfDoubleDots;\n    while (dd > ci) {\n        dd -= ci;\n        g = (/** @type {?} */ (g.parent));\n        if (!g) {\n            throw new Error('Invalid number of \\'../\\'');\n        }\n        ci = g.segments.length;\n    }\n    return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction getPath(command) {\n    if (typeof command === 'object' && command != null && command.outlets) {\n        return command.outlets[PRIMARY_OUTLET];\n    }\n    return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction getOutlets(commands) {\n    if (!(typeof commands[0] === 'object'))\n        return { [PRIMARY_OUTLET]: commands };\n    if (commands[0].outlets === undefined)\n        return { [PRIMARY_OUTLET]: commands };\n    return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n    if (!segmentGroup) {\n        segmentGroup = new UrlSegmentGroup([], {});\n    }\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n    }\n    /** @type {?} */\n    const m = prefixedWith(segmentGroup, startIndex, commands);\n    /** @type {?} */\n    const slicedCommands = commands.slice(m.commandIndex);\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\n        /** @type {?} */\n        const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n        g.children[PRIMARY_OUTLET] =\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\n    }\n    else if (m.match && slicedCommands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else if (m.match && !segmentGroup.hasChildren()) {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n    else if (m.match) {\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n    }\n    else {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n    if (commands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else {\n        /** @type {?} */\n        const outlets = getOutlets(commands);\n        /** @type {?} */\n        const children = {};\n        forEach(outlets, (commands, outlet) => {\n            if (commands !== null) {\n                children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n            }\n        });\n        forEach(segmentGroup.children, (child, childOutlet) => {\n            if (outlets[childOutlet] === undefined) {\n                children[childOutlet] = child;\n            }\n        });\n        return new UrlSegmentGroup(segmentGroup.segments, children);\n    }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n    /** @type {?} */\n    let currentCommandIndex = 0;\n    /** @type {?} */\n    let currentPathIndex = startIndex;\n    /** @type {?} */\n    const noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n    while (currentPathIndex < segmentGroup.segments.length) {\n        if (currentCommandIndex >= commands.length)\n            return noMatch;\n        /** @type {?} */\n        const path = segmentGroup.segments[currentPathIndex];\n        /** @type {?} */\n        const curr = getPath(commands[currentCommandIndex]);\n        /** @type {?} */\n        const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n        if (currentPathIndex > 0 && curr === undefined)\n            break;\n        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n            if (!compare(curr, next, path))\n                return noMatch;\n            currentCommandIndex += 2;\n        }\n        else {\n            if (!compare(curr, {}, path))\n                return noMatch;\n            currentCommandIndex++;\n        }\n        currentPathIndex++;\n    }\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n    /** @type {?} */\n    const paths = segmentGroup.segments.slice(0, startIndex);\n    /** @type {?} */\n    let i = 0;\n    while (i < commands.length) {\n        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n            /** @type {?} */\n            const children = createNewSegmentChildren(commands[i].outlets);\n            return new UrlSegmentGroup(paths, children);\n        }\n        // if we start with an object literal, we need to reuse the path part from the segment\n        if (i === 0 && isMatrixParams(commands[0])) {\n            /** @type {?} */\n            const p = segmentGroup.segments[startIndex];\n            paths.push(new UrlSegment(p.path, commands[0]));\n            i++;\n            continue;\n        }\n        /** @type {?} */\n        const curr = getPath(commands[i]);\n        /** @type {?} */\n        const next = (i < commands.length - 1) ? commands[i + 1] : null;\n        if (curr && next && isMatrixParams(next)) {\n            paths.push(new UrlSegment(curr, stringify(next)));\n            i += 2;\n        }\n        else {\n            paths.push(new UrlSegment(curr, {}));\n            i++;\n        }\n    }\n    return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\nfunction createNewSegmentChildren(outlets) {\n    /** @type {?} */\n    const children = {};\n    forEach(outlets, (commands, outlet) => {\n        if (commands !== null) {\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n        }\n    });\n    return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction stringify(params) {\n    /** @type {?} */\n    const res = {};\n    forEach(params, (v, k) => res[k] = `${v}`);\n    return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\nfunction compare(path, params, segment) {\n    return path == segment.path && shallowEqual(params, segment.parameters);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent) => map(t => {\n    new ActivateRoutes(routeReuseStrategy, (/** @type {?} */ (t.targetRouterState)), t.currentRouterState, forwardEvent)\n        .activate(rootContexts);\n    return t;\n});\nclass ActivateRoutes {\n    /**\n     * @param {?} routeReuseStrategy\n     * @param {?} futureState\n     * @param {?} currState\n     * @param {?} forwardEvent\n     */\n    constructor(routeReuseStrategy, futureState, currState, forwardEvent) {\n        this.routeReuseStrategy = routeReuseStrategy;\n        this.futureState = futureState;\n        this.currState = currState;\n        this.forwardEvent = forwardEvent;\n    }\n    /**\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    activate(parentContexts) {\n        /** @type {?} */\n        const futureRoot = this.futureState._root;\n        /** @type {?} */\n        const currRoot = this.currState ? this.currState._root : null;\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n        advanceActivatedRoute(this.futureState.root);\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n    }\n    // De-activate the child route that are not re-used for the future state\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    deactivateChildRoutes(futureNode, currNode, contexts) {\n        /** @type {?} */\n        const children = nodeChildrenAsMap(currNode);\n        // Recurse on the routes active in the future state to de-activate deeper children\n        futureNode.children.forEach(futureChild => {\n            /** @type {?} */\n            const childOutletName = futureChild.value.outlet;\n            this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n            delete children[childOutletName];\n        });\n        // De-activate the routes that will not be re-used\n        forEach(children, (v, childName) => {\n            this.deactivateRouteAndItsChildren(v, contexts);\n        });\n    }\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContext\n     * @return {?}\n     */\n    deactivateRoutes(futureNode, currNode, parentContext) {\n        /** @type {?} */\n        const future = futureNode.value;\n        /** @type {?} */\n        const curr = currNode ? currNode.value : null;\n        if (future === curr) {\n            // Reusing the node, check to see if the children need to be de-activated\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                /** @type {?} */\n                const context = parentContext.getContext(future.outlet);\n                if (context) {\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\n            }\n        }\n        else {\n            if (curr) {\n                // Deactivate the current route which will not be re-used\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    deactivateRouteAndItsChildren(route, parentContexts) {\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n            this.detachAndStoreRouteSubtree(route, parentContexts);\n        }\n        else {\n            this.deactivateRouteAndOutlet(route, parentContexts);\n        }\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    detachAndStoreRouteSubtree(route, parentContexts) {\n        /** @type {?} */\n        const context = parentContexts.getContext(route.value.outlet);\n        if (context && context.outlet) {\n            /** @type {?} */\n            const componentRef = context.outlet.detach();\n            /** @type {?} */\n            const contexts = context.children.onOutletDeactivated();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef, route, contexts });\n        }\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    deactivateRouteAndOutlet(route, parentContexts) {\n        /** @type {?} */\n        const context = parentContexts.getContext(route.value.outlet);\n        if (context) {\n            /** @type {?} */\n            const children = nodeChildrenAsMap(route);\n            /** @type {?} */\n            const contexts = route.value.component ? context.children : parentContexts;\n            forEach(children, (v, k) => this.deactivateRouteAndItsChildren(v, contexts));\n            if (context.outlet) {\n                // Destroy the component\n                context.outlet.deactivate();\n                // Destroy the contexts for all the outlets that were in the component\n                context.children.onOutletDeactivated();\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} contexts\n     * @return {?}\n     */\n    activateChildRoutes(futureNode, currNode, contexts) {\n        /** @type {?} */\n        const children = nodeChildrenAsMap(currNode);\n        futureNode.children.forEach(c => {\n            this.activateRoutes(c, children[c.value.outlet], contexts);\n            this.forwardEvent(new ActivationEnd(c.value.snapshot));\n        });\n        if (futureNode.children.length) {\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n        }\n    }\n    /**\n     * @private\n     * @param {?} futureNode\n     * @param {?} currNode\n     * @param {?} parentContexts\n     * @return {?}\n     */\n    activateRoutes(futureNode, currNode, parentContexts) {\n        /** @type {?} */\n        const future = futureNode.value;\n        /** @type {?} */\n        const curr = currNode ? currNode.value : null;\n        advanceActivatedRoute(future);\n        // reusing the node\n        if (future === curr) {\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                /** @type {?} */\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                this.activateChildRoutes(futureNode, currNode, context.children);\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\n            }\n        }\n        else {\n            if (future.component) {\n                // if we have a normal route, we need to place the component into the outlet and recurse.\n                /** @type {?} */\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                    /** @type {?} */\n                    const stored = ((/** @type {?} */ (this.routeReuseStrategy.retrieve(future.snapshot))));\n                    this.routeReuseStrategy.store(future.snapshot, null);\n                    context.children.onOutletReAttached(stored.contexts);\n                    context.attachRef = stored.componentRef;\n                    context.route = stored.route.value;\n                    if (context.outlet) {\n                        // Attach right away when the outlet has already been instantiated\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n                        context.outlet.attach(stored.componentRef, stored.route.value);\n                    }\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\n                }\n                else {\n                    /** @type {?} */\n                    const config = parentLoadedConfig(future.snapshot);\n                    /** @type {?} */\n                    const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n                    context.attachRef = null;\n                    context.route = future;\n                    context.resolver = cmpFactoryResolver;\n                    if (context.outlet) {\n                        // Activate the outlet when it has already been instantiated\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\n                        context.outlet.activateWith(future, cmpFactoryResolver);\n                    }\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, null, parentContexts);\n            }\n        }\n    }\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\n    advanceActivatedRoute(node.value);\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction parentLoadedConfig(snapshot) {\n    for (let s = snapshot.parent; s; s = s.parent) {\n        /** @type {?} */\n        const route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n        if (route && route.component)\n            return null;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n * @template T\n * @param {?} v\n * @return {?}\n */\nfunction isFunction(v) {\n    return typeof v === 'function';\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isUrlTree(v) {\n    return v instanceof UrlTree;\n}\n/**\n * @param {?} guard\n * @return {?}\n */\nfunction isCanLoad(guard) {\n    return guard && isFunction(guard.canLoad);\n}\n/**\n * @param {?} guard\n * @return {?}\n */\nfunction isCanActivate(guard) {\n    return guard && isFunction(guard.canActivate);\n}\n/**\n * @param {?} guard\n * @return {?}\n */\nfunction isCanActivateChild(guard) {\n    return guard && isFunction(guard.canActivateChild);\n}\n/**\n * @template T\n * @param {?} guard\n * @return {?}\n */\nfunction isCanDeactivate(guard) {\n    return guard && isFunction(guard.canDeactivate);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NoMatch {\n    /**\n     * @param {?=} segmentGroup\n     */\n    constructor(segmentGroup) { this.segmentGroup = segmentGroup || null; }\n}\nclass AbsoluteRedirect {\n    /**\n     * @param {?} urlTree\n     */\n    constructor(urlTree) {\n        this.urlTree = urlTree;\n    }\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction noMatch(segmentGroup) {\n    return new Observable((obs) => obs.error(new NoMatch(segmentGroup)));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\nfunction absoluteRedirect(newTree) {\n    return new Observable((obs) => obs.error(new AbsoluteRedirect(newTree)));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\nfunction namedOutletsRedirect(redirectTo) {\n    return new Observable((obs) => obs.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction canLoadFails(route) {\n    return new Observable((obs) => obs.error(navigationCancelingError(`Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\nfunction applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\n    /**\n     * @param {?} moduleInjector\n     * @param {?} configLoader\n     * @param {?} urlSerializer\n     * @param {?} urlTree\n     * @param {?} config\n     */\n    constructor(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n        this.configLoader = configLoader;\n        this.urlSerializer = urlSerializer;\n        this.urlTree = urlTree;\n        this.config = config;\n        this.allowRedirects = true;\n        this.ngModule = moduleInjector.get(NgModuleRef);\n    }\n    /**\n     * @return {?}\n     */\n    apply() {\n        /** @type {?} */\n        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n        /** @type {?} */\n        const urlTrees$ = expanded$.pipe(map((rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, this.urlTree.queryParams, (/** @type {?} */ (this.urlTree.fragment)))));\n        return urlTrees$.pipe(catchError((e) => {\n            if (e instanceof AbsoluteRedirect) {\n                // after an absolute redirect we do not apply any more redirects!\n                this.allowRedirects = false;\n                // we need to run matching, so we can fetch all lazy-loaded modules\n                return this.match(e.urlTree);\n            }\n            if (e instanceof NoMatch) {\n                throw this.noMatchError(e);\n            }\n            throw e;\n        }));\n    }\n    /**\n     * @private\n     * @param {?} tree\n     * @return {?}\n     */\n    match(tree) {\n        /** @type {?} */\n        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n        /** @type {?} */\n        const mapped$ = expanded$.pipe(map((rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, tree.queryParams, (/** @type {?} */ (tree.fragment)))));\n        return mapped$.pipe(catchError((e) => {\n            if (e instanceof NoMatch) {\n                throw this.noMatchError(e);\n            }\n            throw e;\n        }));\n    }\n    /**\n     * @private\n     * @param {?} e\n     * @return {?}\n     */\n    noMatchError(e) {\n        return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n    }\n    /**\n     * @private\n     * @param {?} rootCandidate\n     * @param {?} queryParams\n     * @param {?} fragment\n     * @return {?}\n     */\n    createUrlTree(rootCandidate, queryParams, fragment) {\n        /** @type {?} */\n        const root = rootCandidate.segments.length > 0 ?\n            new UrlSegmentGroup([], { [PRIMARY_OUTLET]: rootCandidate }) :\n            rootCandidate;\n        return new UrlTree(root, queryParams, fragment);\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.expandChildren(ngModule, routes, segmentGroup)\n                .pipe(map((children) => new UrlSegmentGroup([], children)));\n        }\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    }\n    // Recursively expand segment groups for all the child outlets\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    expandChildren(ngModule, routes, segmentGroup) {\n        return waitForMap(segmentGroup.children, (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} segments\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\n        return of(...routes).pipe(map((r) => {\n            /** @type {?} */\n            const expanded$ = this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n            return expanded$.pipe(catchError((e) => {\n                if (e instanceof NoMatch) {\n                    // TODO(i): this return type doesn't match the declared Observable<UrlSegmentGroup> -\n                    // talk to Jason\n                    return (/** @type {?} */ (of(null)));\n                }\n                throw e;\n            }));\n        }), concatAll(), first((s) => !!s), catchError((e, _) => {\n            if (e instanceof EmptyError || e.name === 'EmptyError') {\n                if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                    return of(new UrlSegmentGroup([], {}));\n                }\n                throw new NoMatch(segmentGroup);\n            }\n            throw e;\n        }));\n    }\n    /**\n     * @private\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} paths\n     * @param {?} outlet\n     * @param {?} allowRedirects\n     * @return {?}\n     */\n    expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n        if (getOutlet(route) !== outlet) {\n            return noMatch(segmentGroup);\n        }\n        if (route.redirectTo === undefined) {\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n        }\n        if (allowRedirects && this.allowRedirects) {\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\n        }\n        return noMatch(segmentGroup);\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n        if (route.path === '**') {\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\n        }\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {\n        /** @type {?} */\n        const newTree = this.applyRedirectCommands([], (/** @type {?} */ (route.redirectTo)), {});\n        if ((/** @type {?} */ (route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {\n            /** @type {?} */\n            const group = new UrlSegmentGroup(newSegments, {});\n            return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} segmentGroup\n     * @param {?} routes\n     * @param {?} route\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n        const { matched, consumedSegments, lastChild, positionalParamSegments } = match(segmentGroup, route, segments);\n        if (!matched)\n            return noMatch(segmentGroup);\n        /** @type {?} */\n        const newTree = this.applyRedirectCommands(consumedSegments, (/** @type {?} */ (route.redirectTo)), (/** @type {?} */ (positionalParamSegments)));\n        if ((/** @type {?} */ (route.redirectTo)).startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {\n            return this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} rawSegmentGroup\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments) {\n        if (route.path === '**') {\n            if (route.loadChildren) {\n                return this.configLoader.load(ngModule.injector, route)\n                    .pipe(map((cfg) => {\n                    route._loadedConfig = cfg;\n                    return new UrlSegmentGroup(segments, {});\n                }));\n            }\n            return of(new UrlSegmentGroup(segments, {}));\n        }\n        const { matched, consumedSegments, lastChild } = match(rawSegmentGroup, route, segments);\n        if (!matched)\n            return noMatch(rawSegmentGroup);\n        /** @type {?} */\n        const rawSlicedSegments = segments.slice(lastChild);\n        /** @type {?} */\n        const childConfig$ = this.getChildConfig(ngModule, route, segments);\n        return childConfig$.pipe(mergeMap((routerConfig) => {\n            /** @type {?} */\n            const childModule = routerConfig.module;\n            /** @type {?} */\n            const childConfig = routerConfig.routes;\n            const { segmentGroup, slicedSegments } = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                /** @type {?} */\n                const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n                return expanded$.pipe(map((children) => new UrlSegmentGroup(consumedSegments, children)));\n            }\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return of(new UrlSegmentGroup(consumedSegments, {}));\n            }\n            /** @type {?} */\n            const expanded$ = this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n            return expanded$.pipe(map((cs) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children)));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} route\n     * @param {?} segments\n     * @return {?}\n     */\n    getChildConfig(ngModule, route, segments) {\n        if (route.children) {\n            // The children belong to the same module\n            return of(new LoadedRouterConfig(route.children, ngModule));\n        }\n        if (route.loadChildren) {\n            // lazy children belong to the loaded module\n            if (route._loadedConfig !== undefined) {\n                return of(route._loadedConfig);\n            }\n            return runCanLoadGuard(ngModule.injector, route, segments)\n                .pipe(mergeMap((shouldLoad) => {\n                if (shouldLoad) {\n                    return this.configLoader.load(ngModule.injector, route)\n                        .pipe(map((cfg) => {\n                        route._loadedConfig = cfg;\n                        return cfg;\n                    }));\n                }\n                return canLoadFails(route);\n            }));\n        }\n        return of(new LoadedRouterConfig([], ngModule));\n    }\n    /**\n     * @private\n     * @param {?} route\n     * @param {?} urlTree\n     * @return {?}\n     */\n    lineralizeSegments(route, urlTree) {\n        /** @type {?} */\n        let res = [];\n        /** @type {?} */\n        let c = urlTree.root;\n        while (true) {\n            res = res.concat(c.segments);\n            if (c.numberOfChildren === 0) {\n                return of(res);\n            }\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                return namedOutletsRedirect((/** @type {?} */ (route.redirectTo)));\n            }\n            c = c.children[PRIMARY_OUTLET];\n        }\n    }\n    /**\n     * @private\n     * @param {?} segments\n     * @param {?} redirectTo\n     * @param {?} posParams\n     * @return {?}\n     */\n    applyRedirectCommands(segments, redirectTo, posParams) {\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} urlTree\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {\n        /** @type {?} */\n        const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n    }\n    /**\n     * @private\n     * @param {?} redirectToParams\n     * @param {?} actualParams\n     * @return {?}\n     */\n    createQueryParams(redirectToParams, actualParams) {\n        /** @type {?} */\n        const res = {};\n        forEach(redirectToParams, (v, k) => {\n            /** @type {?} */\n            const copySourceValue = typeof v === 'string' && v.startsWith(':');\n            if (copySourceValue) {\n                /** @type {?} */\n                const sourceName = v.substring(1);\n                res[k] = actualParams[sourceName];\n            }\n            else {\n                res[k] = v;\n            }\n        });\n        return res;\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} group\n     * @param {?} segments\n     * @param {?} posParams\n     * @return {?}\n     */\n    createSegmentGroup(redirectTo, group, segments, posParams) {\n        /** @type {?} */\n        const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n        /** @type {?} */\n        let children = {};\n        forEach(group.children, (child, name) => {\n            children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n        });\n        return new UrlSegmentGroup(updatedSegments, children);\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} redirectToSegments\n     * @param {?} actualSegments\n     * @param {?} posParams\n     * @return {?}\n     */\n    createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n        return redirectToSegments.map(s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n            this.findOrReturn(s, actualSegments));\n    }\n    /**\n     * @private\n     * @param {?} redirectTo\n     * @param {?} redirectToUrlSegment\n     * @param {?} posParams\n     * @return {?}\n     */\n    findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n        /** @type {?} */\n        const pos = posParams[redirectToUrlSegment.path.substring(1)];\n        if (!pos)\n            throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n        return pos;\n    }\n    /**\n     * @private\n     * @param {?} redirectToUrlSegment\n     * @param {?} actualSegments\n     * @return {?}\n     */\n    findOrReturn(redirectToUrlSegment, actualSegments) {\n        /** @type {?} */\n        let idx = 0;\n        for (const s of actualSegments) {\n            if (s.path === redirectToUrlSegment.path) {\n                actualSegments.splice(idx);\n                return s;\n            }\n            idx++;\n        }\n        return redirectToUrlSegment;\n    }\n}\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction runCanLoadGuard(moduleInjector, route, segments) {\n    /** @type {?} */\n    const canLoad = route.canLoad;\n    if (!canLoad || canLoad.length === 0)\n        return of(true);\n    /** @type {?} */\n    const obs = from(canLoad).pipe(map((injectionToken) => {\n        /** @type {?} */\n        const guard = moduleInjector.get(injectionToken);\n        /** @type {?} */\n        let guardVal;\n        if (isCanLoad(guard)) {\n            guardVal = guard.canLoad(route, segments);\n        }\n        else if (isFunction(guard)) {\n            guardVal = guard(route, segments);\n        }\n        else {\n            throw new Error('Invalid CanLoad guard');\n        }\n        return wrapIntoObservable(guardVal);\n    }));\n    return obs.pipe(concatAll(), every(result => result === true));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n        }\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n    }\n    /** @type {?} */\n    const matcher = route.matcher || defaultUrlMatcher;\n    /** @type {?} */\n    const res = matcher(segments, segmentGroup, route);\n    if (!res) {\n        return {\n            matched: false,\n            consumedSegments: (/** @type {?} */ ([])),\n            lastChild: 0,\n            positionalParamSegments: {},\n        };\n    }\n    return {\n        matched: true,\n        consumedSegments: (/** @type {?} */ (res.consumed)),\n        lastChild: (/** @type {?} */ (res.consumed.length)),\n        positionalParamSegments: (/** @type {?} */ (res.posParams)),\n    };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments };\n    }\n    return { segmentGroup, slicedSegments };\n}\n/**\n * @param {?} s\n * @return {?}\n */\nfunction mergeTrivialChildren(s) {\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n        /** @type {?} */\n        const c = s.children[PRIMARY_OUTLET];\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    /** @type {?} */\n    const res = {};\n    for (const r of routes) {\n        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return Object.assign({}, children, res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\n    /** @type {?} */\n    const res = {};\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\n    for (const r of routes) {\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\n    return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\n    return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} config\n * @return {?}\n */\nfunction applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {\n    return function (source) {\n        return source.pipe(switchMap(t => applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\n            .pipe(map(urlAfterRedirects => (Object.assign({}, t, { urlAfterRedirects }))))));\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CanActivate {\n    /**\n     * @param {?} path\n     */\n    constructor(path) {\n        this.path = path;\n        this.route = this.path[this.path.length - 1];\n    }\n}\nclass CanDeactivate {\n    /**\n     * @param {?} component\n     * @param {?} route\n     */\n    constructor(component, route) {\n        this.component = component;\n        this.route = route;\n    }\n}\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} parentContexts\n * @return {?}\n */\nfunction getAllRouteGuards(future, curr, parentContexts) {\n    /** @type {?} */\n    const futureRoot = future._root;\n    /** @type {?} */\n    const currRoot = curr ? curr._root : null;\n    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n/**\n * @param {?} p\n * @return {?}\n */\nfunction getCanActivateChild(p) {\n    /** @type {?} */\n    const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0)\n        return null;\n    return { node: p, guards: canActivateChild };\n}\n/**\n * @param {?} token\n * @param {?} snapshot\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction getToken(token, snapshot, moduleInjector) {\n    /** @type {?} */\n    const config = getClosestLoadedConfig(snapshot);\n    /** @type {?} */\n    const injector = config ? config.module.injector : moduleInjector;\n    return injector.get(token);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\nfunction getClosestLoadedConfig(snapshot) {\n    if (!snapshot)\n        return null;\n    for (let s = snapshot.parent; s; s = s.parent) {\n        /** @type {?} */\n        const route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n    }\n    return null;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: []\n}) {\n    /** @type {?} */\n    const prevChildren = nodeChildrenAsMap(currNode);\n    // Process the children of the future route\n    futureNode.children.forEach(c => {\n        getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n        delete prevChildren[c.value.outlet];\n    });\n    // Process any children left from the current route (not active for the future route)\n    forEach(prevChildren, (v, k) => deactivateRouteAndItsChildren(v, (/** @type {?} */ (contexts)).getContext(k), checks));\n    return checks;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: []\n}) {\n    /** @type {?} */\n    const future = futureNode.value;\n    /** @type {?} */\n    const curr = currNode ? currNode.value : null;\n    /** @type {?} */\n    const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n    // reusing the node\n    if (curr && future.routeConfig === curr.routeConfig) {\n        /** @type {?} */\n        const shouldRun = shouldRunGuardsAndResolvers(curr, future, (/** @type {?} */ (future.routeConfig)).runGuardsAndResolvers);\n        if (shouldRun) {\n            checks.canActivateChecks.push(new CanActivate(futurePath));\n        }\n        else {\n            // we need to set the data\n            future.data = curr.data;\n            future._resolvedData = curr._resolvedData;\n        }\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n        }\n        if (shouldRun) {\n            /** @type {?} */\n            const component = context && context.outlet && context.outlet.component || null;\n            checks.canDeactivateChecks.push(new CanDeactivate(component, curr));\n        }\n    }\n    else {\n        if (curr) {\n            deactivateRouteAndItsChildren(currNode, context, checks);\n        }\n        checks.canActivateChecks.push(new CanActivate(futurePath));\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n        }\n    }\n    return checks;\n}\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n    if (typeof mode === 'function') {\n        return mode(curr, future);\n    }\n    switch (mode) {\n        case 'pathParamsChange':\n            return !equalPath(curr.url, future.url);\n        case 'pathParamsOrQueryParamsChange':\n            return !equalPath(curr.url, future.url) ||\n                !shallowEqual(curr.queryParams, future.queryParams);\n        case 'always':\n            return true;\n        case 'paramsOrQueryParamsChange':\n            return !equalParamsAndUrlSegments(curr, future) ||\n                !shallowEqual(curr.queryParams, future.queryParams);\n        case 'paramsChange':\n        default:\n            return !equalParamsAndUrlSegments(curr, future);\n    }\n}\n/**\n * @param {?} route\n * @param {?} context\n * @param {?} checks\n * @return {?}\n */\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n    /** @type {?} */\n    const children = nodeChildrenAsMap(route);\n    /** @type {?} */\n    const r = route.value;\n    forEach(children, (node, childName) => {\n        if (!r.component) {\n            deactivateRouteAndItsChildren(node, context, checks);\n        }\n        else if (context) {\n            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n        }\n        else {\n            deactivateRouteAndItsChildren(node, null, checks);\n        }\n    });\n    if (!r.component) {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n    else if (context && context.outlet && context.outlet.isActivated) {\n        checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n    }\n    else {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\n/**\n * @return {?}\n */\nfunction prioritizedGuardValue() {\n    return switchMap(obs => {\n        return (/** @type {?} */ (combineLatest(...obs.map(o => o.pipe(take(1), startWith((/** @type {?} */ (INITIAL_VALUE))))))\n            .pipe(scan((acc, list) => {\n            /** @type {?} */\n            let isPending = false;\n            return list.reduce((innerAcc, val, i) => {\n                if (innerAcc !== INITIAL_VALUE)\n                    return innerAcc;\n                // Toggle pending flag if any values haven't been set yet\n                if (val === INITIAL_VALUE)\n                    isPending = true;\n                // Any other return values are only valid if we haven't yet hit a pending call.\n                // This guarantees that in the case of a guard at the bottom of the tree that\n                // returns a redirect, we will wait for the higher priority guard at the top to\n                // finish before performing the redirect.\n                if (!isPending) {\n                    // Early return when we hit a `false` value as that should always cancel\n                    // navigation\n                    if (val === false)\n                        return val;\n                    if (i === list.length - 1 || isUrlTree(val)) {\n                        return val;\n                    }\n                }\n                return innerAcc;\n            }, acc);\n        }, INITIAL_VALUE), filter(item => item !== INITIAL_VALUE), map(item => isUrlTree(item) ? item : item === true), //\n        take(1))));\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction checkGuards(moduleInjector, forwardEvent) {\n    return function (source) {\n        return source.pipe(mergeMap(t => {\n            const { targetSnapshot, currentSnapshot, guards: { canActivateChecks, canDeactivateChecks } } = t;\n            if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n                return of(Object.assign({}, t, { guardsResult: true }));\n            }\n            return runCanDeactivateChecks(canDeactivateChecks, (/** @type {?} */ (targetSnapshot)), currentSnapshot, moduleInjector)\n                .pipe(mergeMap(canDeactivate => {\n                return canDeactivate && isBoolean(canDeactivate) ?\n                    runCanActivateChecks((/** @type {?} */ (targetSnapshot)), canActivateChecks, moduleInjector, forwardEvent) :\n                    of(canDeactivate);\n            }), map(guardsResult => (Object.assign({}, t, { guardsResult }))));\n        }));\n    };\n}\n/**\n * @param {?} checks\n * @param {?} futureRSS\n * @param {?} currRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {\n    return from(checks).pipe(mergeMap(check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector)), first(result => { return result !== true; }, (/** @type {?} */ (true))));\n}\n/**\n * @param {?} futureSnapshot\n * @param {?} checks\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {\n    return from(checks).pipe(concatMap((check) => {\n        return from([\n            fireChildActivationStart(check.route.parent, forwardEvent),\n            fireActivationStart(check.route, forwardEvent),\n            runCanActivateChild(futureSnapshot, check.path, moduleInjector),\n            runCanActivate(futureSnapshot, check.route, moduleInjector)\n        ])\n            .pipe(concatAll(), first(result => {\n            return result !== true;\n        }, (/** @type {?} */ (true))));\n    }), first(result => { return result !== true; }, (/** @type {?} */ (true))));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ChildActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * @param {?} futureRSS\n * @param {?} futureARS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanActivate(futureRSS, futureARS, moduleInjector) {\n    /** @type {?} */\n    const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0)\n        return of(true);\n    /** @type {?} */\n    const canActivateObservables = canActivate.map((c) => {\n        return defer(() => {\n            /** @type {?} */\n            const guard = getToken(c, futureARS, moduleInjector);\n            /** @type {?} */\n            let observable;\n            if (isCanActivate(guard)) {\n                observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n            }\n            else if (isFunction(guard)) {\n                observable = wrapIntoObservable(guard(futureARS, futureRSS));\n            }\n            else {\n                throw new Error('Invalid CanActivate guard');\n            }\n            return observable.pipe(first());\n        });\n    });\n    return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} futureRSS\n * @param {?} path\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanActivateChild(futureRSS, path, moduleInjector) {\n    /** @type {?} */\n    const futureARS = path[path.length - 1];\n    /** @type {?} */\n    const canActivateChildGuards = path.slice(0, path.length - 1)\n        .reverse()\n        .map(p => getCanActivateChild(p))\n        .filter(_ => _ !== null);\n    /** @type {?} */\n    const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {\n        return defer(() => {\n            /** @type {?} */\n            const guardsMapped = d.guards.map((c) => {\n                /** @type {?} */\n                const guard = getToken(c, d.node, moduleInjector);\n                /** @type {?} */\n                let observable;\n                if (isCanActivateChild(guard)) {\n                    observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n                }\n                else if (isFunction(guard)) {\n                    observable = wrapIntoObservable(guard(futureARS, futureRSS));\n                }\n                else {\n                    throw new Error('Invalid CanActivateChild guard');\n                }\n                return observable.pipe(first());\n            });\n            return of(guardsMapped).pipe(prioritizedGuardValue());\n        });\n    });\n    return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} component\n * @param {?} currARS\n * @param {?} currRSS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0)\n        return of(true);\n    /** @type {?} */\n    const canDeactivateObservables = canDeactivate.map((c) => {\n        /** @type {?} */\n        const guard = getToken(c, currARS, moduleInjector);\n        /** @type {?} */\n        let observable;\n        if (isCanDeactivate(guard)) {\n            observable =\n                wrapIntoObservable(guard.canDeactivate((/** @type {?} */ (component)), currARS, currRSS, futureRSS));\n        }\n        else if (isFunction(guard)) {\n            observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n        }\n        else {\n            throw new Error('Invalid CanDeactivate guard');\n        }\n        return observable.pipe(first());\n    });\n    return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NoMatch$1 {\n}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @param {?=} paramsInheritanceStrategy\n * @param {?=} relativeLinkResolution\n * @return {?}\n */\nfunction recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy = 'emptyOnly', relativeLinkResolution = 'legacy') {\n    return new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution)\n        .recognize();\n}\nclass Recognizer {\n    /**\n     * @param {?} rootComponentType\n     * @param {?} config\n     * @param {?} urlTree\n     * @param {?} url\n     * @param {?} paramsInheritanceStrategy\n     * @param {?} relativeLinkResolution\n     */\n    constructor(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\n        this.rootComponentType = rootComponentType;\n        this.config = config;\n        this.urlTree = urlTree;\n        this.url = url;\n        this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n        this.relativeLinkResolution = relativeLinkResolution;\n    }\n    /**\n     * @return {?}\n     */\n    recognize() {\n        try {\n            /** @type {?} */\n            const rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\n            /** @type {?} */\n            const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n            /** @type {?} */\n            const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n            /** @type {?} */\n            const rootNode = new TreeNode(root, children);\n            /** @type {?} */\n            const routeState = new RouterStateSnapshot(this.url, rootNode);\n            this.inheritParamsAndData(routeState._root);\n            return of(routeState);\n        }\n        catch (e) {\n            return new Observable((obs) => obs.error(e));\n        }\n    }\n    /**\n     * @param {?} routeNode\n     * @return {?}\n     */\n    inheritParamsAndData(routeNode) {\n        /** @type {?} */\n        const route = routeNode.value;\n        /** @type {?} */\n        const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n        route.params = Object.freeze(i.params);\n        route.data = Object.freeze(i.data);\n        routeNode.children.forEach(n => this.inheritParamsAndData(n));\n    }\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} outlet\n     * @return {?}\n     */\n    processSegmentGroup(config, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.processChildren(config, segmentGroup);\n        }\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    }\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @return {?}\n     */\n    processChildren(config, segmentGroup) {\n        /** @type {?} */\n        const children = mapChildrenIntoArray(segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n        checkOutletNameUniqueness(children);\n        sortActivatedRouteSnapshots(children);\n        return children;\n    }\n    /**\n     * @param {?} config\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    processSegment(config, segmentGroup, segments, outlet) {\n        for (const r of config) {\n            try {\n                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n            }\n            catch (e) {\n                if (!(e instanceof NoMatch$1))\n                    throw e;\n            }\n        }\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n            return [];\n        }\n        throw new NoMatch$1();\n    }\n    /**\n     * @private\n     * @param {?} segmentGroup\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    }\n    /**\n     * @param {?} route\n     * @param {?} rawSegment\n     * @param {?} segments\n     * @param {?} outlet\n     * @return {?}\n     */\n    processSegmentAgainstRoute(route, rawSegment, segments, outlet) {\n        if (route.redirectTo)\n            throw new NoMatch$1();\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\n            throw new NoMatch$1();\n        /** @type {?} */\n        let snapshot;\n        /** @type {?} */\n        let consumedSegments = [];\n        /** @type {?} */\n        let rawSlicedSegments = [];\n        if (route.path === '**') {\n            /** @type {?} */\n            const params = segments.length > 0 ? (/** @type {?} */ (last$1(segments))).parameters : {};\n            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), getData(route), outlet, (/** @type {?} */ (route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n        }\n        else {\n            /** @type {?} */\n            const result = match$1(rawSegment, route, segments);\n            consumedSegments = result.consumedSegments;\n            rawSlicedSegments = segments.slice(result.lastChild);\n            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), getData(route), outlet, (/** @type {?} */ (route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n        }\n        /** @type {?} */\n        const childConfig = getChildConfig(route);\n        const { segmentGroup, slicedSegments } = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution);\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n            /** @type {?} */\n            const children = this.processChildren(childConfig, segmentGroup);\n            return [new TreeNode(snapshot, children)];\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n            return [new TreeNode(snapshot, [])];\n        }\n        /** @type {?} */\n        const children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n        return [new TreeNode(snapshot, children)];\n    }\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction sortActivatedRouteSnapshots(nodes) {\n    nodes.sort((a, b) => {\n        if (a.value.outlet === PRIMARY_OUTLET)\n            return -1;\n        if (b.value.outlet === PRIMARY_OUTLET)\n            return 1;\n        return a.value.outlet.localeCompare(b.value.outlet);\n    });\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getChildConfig(route) {\n    if (route.children) {\n        return route.children;\n    }\n    if (route.loadChildren) {\n        return (/** @type {?} */ (route._loadedConfig)).routes;\n    }\n    return [];\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\nfunction match$1(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n            throw new NoMatch$1();\n        }\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\n    }\n    /** @type {?} */\n    const matcher = route.matcher || defaultUrlMatcher;\n    /** @type {?} */\n    const res = matcher(segments, segmentGroup, route);\n    if (!res)\n        throw new NoMatch$1();\n    /** @type {?} */\n    const posParams = {};\n    forEach((/** @type {?} */ (res.posParams)), (v, k) => { posParams[k] = v.path; });\n    /** @type {?} */\n    const parameters = res.consumed.length > 0 ? Object.assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :\n        posParams;\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters };\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\nfunction checkOutletNameUniqueness(nodes) {\n    /** @type {?} */\n    const names = {};\n    nodes.forEach(n => {\n        /** @type {?} */\n        const routeWithSameOutletName = names[n.value.outlet];\n        if (routeWithSameOutletName) {\n            /** @type {?} */\n            const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n            /** @type {?} */\n            const c = n.value.url.map(s => s.toString()).join('/');\n            throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n        }\n        names[n.value.outlet] = n.value;\n    });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getSourceSegmentGroup(segmentGroup) {\n    /** @type {?} */\n    let s = segmentGroup;\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n    }\n    return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\nfunction getPathIndexShift(segmentGroup) {\n    /** @type {?} */\n    let s = segmentGroup;\n    /** @type {?} */\n    let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    }\n    return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction split$1(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        s._sourceSegment = segmentGroup;\n        s._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s, slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n        /** @type {?} */\n        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));\n        s._sourceSegment = segmentGroup;\n        s._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s, slicedSegments };\n    }\n    /** @type {?} */\n    const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return { segmentGroup: s, slicedSegments };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {\n    /** @type {?} */\n    const res = {};\n    for (const r of routes) {\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n            /** @type {?} */\n            const s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            if (relativeLinkResolution === 'legacy') {\n                s._segmentIndexShift = segmentGroup.segments.length;\n            }\n            else {\n                s._segmentIndexShift = consumedSegments.length;\n            }\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return Object.assign({}, children, res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n    /** @type {?} */\n    const res = {};\n    res[PRIMARY_OUTLET] = primarySegment;\n    primarySegment._sourceSegment = segmentGroup;\n    primarySegment._segmentIndexShift = consumedSegments.length;\n    for (const r of routes) {\n        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n            /** @type {?} */\n            const s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n    return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n    return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getOutlet$1(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getData(route) {\n    return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\nfunction getResolve(route) {\n    return route.resolve || {};\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} serializer\n * @param {?} paramsInheritanceStrategy\n * @param {?} relativeLinkResolution\n * @return {?}\n */\nfunction recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {\n    return function (source) {\n        return source.pipe(mergeMap(t => recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution)\n            .pipe(map(targetSnapshot => (Object.assign({}, t, { targetSnapshot }))))));\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction resolveData(paramsInheritanceStrategy, moduleInjector) {\n    return function (source) {\n        return source.pipe(mergeMap(t => {\n            const { targetSnapshot, guards: { canActivateChecks } } = t;\n            if (!canActivateChecks.length) {\n                return of(t);\n            }\n            return from(canActivateChecks)\n                .pipe(concatMap(check => runResolve(check.route, (/** @type {?} */ (targetSnapshot)), paramsInheritanceStrategy, moduleInjector)), reduce((_, __) => _), map(_ => t));\n        }));\n    };\n}\n/**\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {\n    /** @type {?} */\n    const resolve = futureARS._resolve;\n    return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\n        .pipe(map((resolvedData) => {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = Object.assign({}, futureARS.data, inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);\n        return null;\n    }));\n}\n/**\n * @param {?} resolve\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction resolveNode(resolve, futureARS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    const keys = Object.keys(resolve);\n    if (keys.length === 0) {\n        return of({});\n    }\n    if (keys.length === 1) {\n        /** @type {?} */\n        const key = keys[0];\n        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n            .pipe(map((value) => { return { [key]: value }; }));\n    }\n    /** @type {?} */\n    const data = {};\n    /** @type {?} */\n    const runningResolvers$ = from(keys).pipe(mergeMap((key) => {\n        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n            .pipe(map((value) => {\n            data[key] = value;\n            return value;\n        }));\n    }));\n    return runningResolvers$.pipe(last(), map(() => data));\n}\n/**\n * @param {?} injectionToken\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {\n    /** @type {?} */\n    const resolver = getToken(injectionToken, futureARS, moduleInjector);\n    return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\n        wrapIntoObservable(resolver(futureARS, futureRSS));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n * @template T\n * @param {?} next\n * @return {?}\n */\nfunction switchTap(next) {\n    return function (source) {\n        return source.pipe(switchMap(v => {\n            /** @type {?} */\n            const nextResult = next(v);\n            if (nextResult) {\n                return from(nextResult).pipe(map(() => v));\n            }\n            return from([v]);\n        }));\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * \\@publicApi\n * @abstract\n */\nclass RouteReuseStrategy {\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nclass DefaultRouteReuseStrategy {\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    shouldDetach(route) { return false; }\n    /**\n     * @param {?} route\n     * @param {?} detachedTree\n     * @return {?}\n     */\n    store(route, detachedTree) { }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    shouldAttach(route) { return false; }\n    /**\n     * @param {?} route\n     * @return {?}\n     */\n    retrieve(route) { return null; }\n    /**\n     * @param {?} future\n     * @param {?} curr\n     * @return {?}\n     */\n    shouldReuseRoute(future, curr) {\n        return future.routeConfig === curr.routeConfig;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docsNotRequired\n * \\@publicApi\n * @type {?}\n */\nconst ROUTES = new InjectionToken('ROUTES');\nclass RouterConfigLoader {\n    /**\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?=} onLoadStartListener\n     * @param {?=} onLoadEndListener\n     */\n    constructor(loader, compiler, onLoadStartListener, onLoadEndListener) {\n        this.loader = loader;\n        this.compiler = compiler;\n        this.onLoadStartListener = onLoadStartListener;\n        this.onLoadEndListener = onLoadEndListener;\n    }\n    /**\n     * @param {?} parentInjector\n     * @param {?} route\n     * @return {?}\n     */\n    load(parentInjector, route) {\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        /** @type {?} */\n        const moduleFactory$ = this.loadModuleFactory((/** @type {?} */ (route.loadChildren)));\n        return moduleFactory$.pipe(map((factory) => {\n            if (this.onLoadEndListener) {\n                this.onLoadEndListener(route);\n            }\n            /** @type {?} */\n            const module = factory.create(parentInjector);\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} loadChildren\n     * @return {?}\n     */\n    loadModuleFactory(loadChildren) {\n        if (typeof loadChildren === 'string') {\n            return from(this.loader.load(loadChildren));\n        }\n        else {\n            return wrapIntoObservable(loadChildren()).pipe(mergeMap((t) => {\n                if (t instanceof NgModuleFactory) {\n                    return of(t);\n                }\n                else {\n                    return from(this.compiler.compileModuleAsync(t));\n                }\n            }));\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@publicApi\n * @abstract\n */\nclass UrlHandlingStrategy {\n}\n/**\n * \\@publicApi\n */\nclass DefaultUrlHandlingStrategy {\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    shouldProcessUrl(url) { return true; }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    extract(url) { return url; }\n    /**\n     * @param {?} newUrlPart\n     * @param {?} wholeUrl\n     * @return {?}\n     */\n    merge(newUrlPart, wholeUrl) { return newUrlPart; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} error\n * @return {?}\n */\nfunction defaultErrorHandler(error) {\n    throw error;\n}\n/**\n * @param {?} error\n * @param {?} urlSerializer\n * @param {?} url\n * @return {?}\n */\nfunction defaultMalformedUriErrorHandler(error, urlSerializer, url) {\n    return urlSerializer.parse('/');\n}\n/**\n * \\@internal\n * @param {?} snapshot\n * @param {?} runExtras\n * @return {?}\n */\nfunction defaultRouterHook(snapshot, runExtras) {\n    return (/** @type {?} */ (of(null)));\n}\n/**\n * \\@description\n *\n * Provides the navigation and url manipulation capabilities.\n *\n * See `Routes` for more details and examples.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass Router {\n    /**\n     * Creates the router service.\n     * @param {?} rootComponentType\n     * @param {?} urlSerializer\n     * @param {?} rootContexts\n     * @param {?} location\n     * @param {?} injector\n     * @param {?} loader\n     * @param {?} compiler\n     * @param {?} config\n     */\n    // TODO: vsavkin make internal after the final is out.\n    constructor(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\n        this.rootComponentType = rootComponentType;\n        this.urlSerializer = urlSerializer;\n        this.rootContexts = rootContexts;\n        this.location = location;\n        this.config = config;\n        this.lastSuccessfulNavigation = null;\n        this.currentNavigation = null;\n        this.navigationId = 0;\n        this.isNgZoneEnabled = false;\n        this.events = new Subject();\n        /**\n         * Error handler that is invoked when a navigation errors.\n         *\n         * See `ErrorHandler` for more information.\n         */\n        this.errorHandler = defaultErrorHandler;\n        /**\n         * Malformed uri error handler is invoked when `Router.parseUrl(url)` throws an\n         * error due to containing an invalid character. The most common case would be a `%` sign\n         * that's not encoded and is not part of a percent encoded sequence.\n         */\n        this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;\n        /**\n         * Indicates if at least one navigation happened.\n         */\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n        /**\n         * Used by RouterModule. This allows us to\n         * pause the navigation either before preactivation or after it.\n         * \\@internal\n         */\n        this.hooks = {\n            beforePreactivation: defaultRouterHook,\n            afterPreactivation: defaultRouterHook\n        };\n        /**\n         * Extracts and merges URLs. Used for AngularJS to Angular migrations.\n         */\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n        /**\n         * Define what the router should do if it receives a navigation request to the current URL.\n         * By default, the router will ignore this navigation. However, this prevents features such\n         * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\n         * current URL. Default is 'ignore'.\n         */\n        this.onSameUrlNavigation = 'ignore';\n        /**\n         * Defines how the router merges params, data and resolved data from parent to child\n         * routes. Available options are:\n         *\n         * - `'emptyOnly'`, the default, only inherits parent params for path-less or component-less\n         *   routes.\n         * - `'always'`, enables unconditional inheritance of parent params.\n         */\n        this.paramsInheritanceStrategy = 'emptyOnly';\n        /**\n         * Defines when the router updates the browser URL. The default behavior is to update after\n         * successful navigation. However, some applications may prefer a mode where the URL gets\n         * updated at the beginning of navigation. The most common use case would be updating the\n         * URL early so if navigation fails, you can show an error message with the URL that failed.\n         * Available options are:\n         *\n         * - `'deferred'`, the default, updates the browser URL after navigation has finished.\n         * - `'eager'`, updates browser URL at the beginning of navigation.\n         */\n        this.urlUpdateStrategy = 'deferred';\n        /**\n         * See {\\@link RouterModule} for more information.\n         */\n        this.relativeLinkResolution = 'legacy';\n        /** @type {?} */\n        const onLoadStart = (r) => this.triggerEvent(new RouteConfigLoadStart(r));\n        /** @type {?} */\n        const onLoadEnd = (r) => this.triggerEvent(new RouteConfigLoadEnd(r));\n        this.ngModule = injector.get(NgModuleRef);\n        this.console = injector.get(ɵConsole);\n        /** @type {?} */\n        const ngZone = injector.get(NgZone);\n        this.isNgZoneEnabled = ngZone instanceof NgZone;\n        this.resetConfig(config);\n        this.currentUrlTree = createEmptyUrlTree();\n        this.rawUrlTree = this.currentUrlTree;\n        this.browserUrlTree = this.currentUrlTree;\n        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n        this.transitions = new BehaviorSubject({\n            id: 0,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.currentUrlTree,\n            extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            rawUrl: this.currentUrlTree,\n            extras: {},\n            resolve: null,\n            reject: null,\n            promise: Promise.resolve(true),\n            source: 'imperative',\n            restoredState: null,\n            currentSnapshot: this.routerState.snapshot,\n            targetSnapshot: null,\n            currentRouterState: this.routerState,\n            targetRouterState: null,\n            guards: { canActivateChecks: [], canDeactivateChecks: [] },\n            guardsResult: null,\n        });\n        this.navigations = this.setupNavigations(this.transitions);\n        this.processNavigations();\n    }\n    /**\n     * @private\n     * @param {?} transitions\n     * @return {?}\n     */\n    setupNavigations(transitions) {\n        /** @type {?} */\n        const eventsSubject = ((/** @type {?} */ (this.events)));\n        return (/** @type {?} */ ((/** @type {?} */ (transitions.pipe(filter(t => t.id !== 0), \n        // Extract URL\n        map(t => ((/** @type {?} */ (Object.assign({}, t, { extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl) }))))), \n        // Store the Navigation object\n        tap(t => {\n            this.currentNavigation = {\n                id: t.id,\n                initialUrl: t.currentRawUrl,\n                extractedUrl: t.extractedUrl,\n                trigger: t.source,\n                extras: t.extras,\n                previousNavigation: this.lastSuccessfulNavigation ? Object.assign({}, this.lastSuccessfulNavigation, { previousNavigation: null }) :\n                    null\n            };\n        }), \n        // Using switchMap so we cancel executing navigations when a new one comes in\n        switchMap(t => {\n            /** @type {?} */\n            let completed = false;\n            /** @type {?} */\n            let errored = false;\n            return of(t).pipe(switchMap(t => {\n                /** @type {?} */\n                const urlTransition = !this.navigated || t.extractedUrl.toString() !== this.browserUrlTree.toString();\n                /** @type {?} */\n                const processCurrentUrl = (this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n                    this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n                if (processCurrentUrl) {\n                    return of(t).pipe(\n                    // Fire NavigationStart event\n                    switchMap(t => {\n                        /** @type {?} */\n                        const transition = this.transitions.getValue();\n                        eventsSubject.next(new NavigationStart(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState));\n                        if (transition !== this.transitions.getValue()) {\n                            return EMPTY;\n                        }\n                        return [t];\n                    }), \n                    // This delay is required to match old behavior that forced navigation to\n                    // always be async\n                    switchMap(t => Promise.resolve(t)), \n                    // ApplyRedirects\n                    applyRedirects$1(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config), \n                    // Update the currentNavigation\n                    tap(t => {\n                        this.currentNavigation = Object.assign({}, (/** @type {?} */ (this.currentNavigation)), { finalUrl: t.urlAfterRedirects });\n                    }), \n                    // Recognize\n                    recognize$1(this.rootComponentType, this.config, (url) => this.serializeUrl(url), this.paramsInheritanceStrategy, this.relativeLinkResolution), \n                    // Update URL if in `eager` update mode\n                    tap(t => {\n                        if (this.urlUpdateStrategy === 'eager') {\n                            if (!t.extras.skipLocationChange) {\n                                this.setBrowserUrl(t.urlAfterRedirects, !!t.extras.replaceUrl, t.id);\n                            }\n                            this.browserUrlTree = t.urlAfterRedirects;\n                        }\n                    }), \n                    // Fire RoutesRecognized\n                    tap(t => {\n                        /** @type {?} */\n                        const routesRecognized = new RoutesRecognized(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                        eventsSubject.next(routesRecognized);\n                    }));\n                }\n                else {\n                    /** @type {?} */\n                    const processPreviousUrl = urlTransition && this.rawUrlTree &&\n                        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);\n                    /* When the current URL shouldn't be processed, but the previous one was, we\n                     * handle this \"error condition\" by navigating to the previously successful URL,\n                     * but leaving the URL intact.*/\n                    if (processPreviousUrl) {\n                        const { id, extractedUrl, source, restoredState, extras } = t;\n                        /** @type {?} */\n                        const navStart = new NavigationStart(id, this.serializeUrl(extractedUrl), source, restoredState);\n                        eventsSubject.next(navStart);\n                        /** @type {?} */\n                        const targetSnapshot = createEmptyState(extractedUrl, this.rootComponentType).snapshot;\n                        return of(Object.assign({}, t, { targetSnapshot, urlAfterRedirects: extractedUrl, extras: Object.assign({}, extras, { skipLocationChange: false, replaceUrl: false }) }));\n                    }\n                    else {\n                        /* When neither the current or previous URL can be processed, do nothing other\n                         * than update router's internal reference to the current \"settled\" URL. This\n                         * way the next navigation will be coming from the current URL in the browser.\n                         */\n                        this.rawUrlTree = t.rawUrl;\n                        t.resolve(null);\n                        return EMPTY;\n                    }\n                }\n            }), \n            // Before Preactivation\n            switchTap(t => {\n                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;\n                return this.hooks.beforePreactivation((/** @type {?} */ (targetSnapshot)), {\n                    navigationId,\n                    appliedUrlTree,\n                    rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            }), \n            // --- GUARDS ---\n            tap(t => {\n                /** @type {?} */\n                const guardsStart = new GuardsCheckStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                this.triggerEvent(guardsStart);\n            }), map(t => (Object.assign({}, t, { guards: getAllRouteGuards((/** @type {?} */ (t.targetSnapshot)), t.currentSnapshot, this.rootContexts) }))), checkGuards(this.ngModule.injector, (evt) => this.triggerEvent(evt)), tap(t => {\n                if (isUrlTree(t.guardsResult)) {\n                    /** @type {?} */\n                    const error = navigationCancelingError(`Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);\n                    error.url = t.guardsResult;\n                    throw error;\n                }\n            }), tap(t => {\n                /** @type {?} */\n                const guardsEnd = new GuardsCheckEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)), !!t.guardsResult);\n                this.triggerEvent(guardsEnd);\n            }), filter(t => {\n                if (!t.guardsResult) {\n                    this.resetUrlToCurrentUrlTree();\n                    /** @type {?} */\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), '');\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                    return false;\n                }\n                return true;\n            }), \n            // --- RESOLVE ---\n            switchTap(t => {\n                if (t.guards.canActivateChecks.length) {\n                    return of(t).pipe(tap(t => {\n                        /** @type {?} */\n                        const resolveStart = new ResolveStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                        this.triggerEvent(resolveStart);\n                    }), resolveData(this.paramsInheritanceStrategy, this.ngModule.injector), //\n                    tap(t => {\n                        /** @type {?} */\n                        const resolveEnd = new ResolveEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));\n                        this.triggerEvent(resolveEnd);\n                    }));\n                }\n                return undefined;\n            }), \n            // --- AFTER PREACTIVATION ---\n            switchTap((t) => {\n                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;\n                return this.hooks.afterPreactivation((/** @type {?} */ (targetSnapshot)), {\n                    navigationId,\n                    appliedUrlTree,\n                    rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            }), map((t) => {\n                /** @type {?} */\n                const targetRouterState = createRouterState(this.routeReuseStrategy, (/** @type {?} */ (t.targetSnapshot)), t.currentRouterState);\n                return (Object.assign({}, t, { targetRouterState }));\n            }), \n            /* Once here, we are about to activate syncronously. The assumption is this will\n               succeed, and user code may read from the Router service. Therefore before\n               activation, we need to update router properties storing the current URL and the\n               RouterState, as well as updated the browser URL. All this should happen *before*\n               activating. */\n            tap((t) => {\n                this.currentUrlTree = t.urlAfterRedirects;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);\n                ((/** @type {?} */ (this))).routerState = (/** @type {?} */ (t.targetRouterState));\n                if (this.urlUpdateStrategy === 'deferred') {\n                    if (!t.extras.skipLocationChange) {\n                        this.setBrowserUrl(this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);\n                    }\n                    this.browserUrlTree = t.urlAfterRedirects;\n                }\n            }), activateRoutes(this.rootContexts, this.routeReuseStrategy, (evt) => this.triggerEvent(evt)), tap({ /**\n                 * @return {?}\n                 */\n                next() { completed = true; }, /**\n                 * @return {?}\n                 */\n                complete() { completed = true; } }), finalize(() => {\n                /* When the navigation stream finishes either through error or success, we set the\n                 * `completed` or `errored` flag. However, there are some situations where we could\n                 * get here without either of those being set. For instance, a redirect during\n                 * NavigationStart. Therefore, this is a catch-all to make sure the NavigationCancel\n                 * event is fired when a navigation gets cancelled but not caught by other means. */\n                if (!completed && !errored) {\n                    // Must reset to current URL tree here to ensure history.state is set. On a fresh\n                    // page load, if a new navigation comes in before a successful navigation\n                    // completes, there will be nothing in history.state.navigationId. This can cause\n                    // sync problems with AngularJS sync code which looks for a value here in order\n                    // to determine whether or not to handle a given popstate event or to leave it\n                    // to the Angualr router.\n                    this.resetUrlToCurrentUrlTree();\n                    /** @type {?} */\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                }\n                // currentNavigation should always be reset to null here. If navigation was\n                // successful, lastSuccessfulTransition will have already been set. Therefore we\n                // can safely set currentNavigation to null here.\n                this.currentNavigation = null;\n            }), catchError((e) => {\n                errored = true;\n                /* This error type is issued during Redirect, and is handled as a cancellation\n                 * rather than an error. */\n                if (isNavigationCancelingError(e)) {\n                    /** @type {?} */\n                    const redirecting = isUrlTree(e.url);\n                    if (!redirecting) {\n                        // Set property only if we're not redirecting. If we landed on a page and\n                        // redirect to `/` route, the new navigation is going to see the `/` isn't\n                        // a change from the default currentUrlTree and won't navigate. This is\n                        // only applicable with initial navigation, so setting `navigated` only when\n                        // not redirecting resolves this scenario.\n                        this.navigated = true;\n                        this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    }\n                    /** @type {?} */\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), e.message);\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                    if (redirecting) {\n                        this.navigateByUrl(e.url);\n                    }\n                    /* All other errors should reset to the router's internal URL reference to the\n                     * pre-error state. */\n                }\n                else {\n                    this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    /** @type {?} */\n                    const navError = new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);\n                    eventsSubject.next(navError);\n                    try {\n                        t.resolve(this.errorHandler(e));\n                    }\n                    catch (ee) {\n                        t.reject(ee);\n                    }\n                }\n                return EMPTY;\n            }));\n            // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n        }))))));\n    }\n    /**\n     * \\@internal\n     * TODO: this should be removed once the constructor of the router made internal\n     * @param {?} rootComponentType\n     * @return {?}\n     */\n    resetRootComponentType(rootComponentType) {\n        this.rootComponentType = rootComponentType;\n        // TODO: vsavkin router 4.0 should make the root component set to null\n        // this will simplify the lifecycle of the router.\n        this.routerState.root.component = this.rootComponentType;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getTransition() { return this.transitions.value; }\n    /**\n     * @private\n     * @param {?} t\n     * @return {?}\n     */\n    setTransition(t) {\n        this.transitions.next(Object.assign({}, this.getTransition(), t));\n    }\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     * @return {?}\n     */\n    initialNavigation() {\n        this.setUpLocationChangeListener();\n        if (this.navigationId === 0) {\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        }\n    }\n    /**\n     * Sets up the location change listener.\n     * @return {?}\n     */\n    setUpLocationChangeListener() {\n        // Don't need to use Zone.wrap any more, because zone.js\n        // already patch onPopState, so location change callback will\n        // run into ngZone\n        if (!this.locationSubscription) {\n            this.locationSubscription = (/** @type {?} */ (this.location.subscribe((change) => {\n                /** @type {?} */\n                let rawUrlTree = this.parseUrl(change['url']);\n                /** @type {?} */\n                const source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                // Navigations coming from Angular router have a navigationId state property. When this\n                // exists, restore the state.\n                /** @type {?} */\n                const state = change.state && change.state.navigationId ? change.state : null;\n                setTimeout(() => { this.scheduleNavigation(rawUrlTree, source, state, { replaceUrl: true }); }, 0);\n            })));\n        }\n    }\n    /**\n     * The current url\n     * @return {?}\n     */\n    get url() { return this.serializeUrl(this.currentUrlTree); }\n    /**\n     * The current Navigation object if one exists\n     * @return {?}\n     */\n    getCurrentNavigation() { return this.currentNavigation; }\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    triggerEvent(event) { ((/** @type {?} */ (this.events))).next(event); }\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     * @param {?} config\n     * @return {?}\n     */\n    resetConfig(config) {\n        validateConfig(config);\n        this.config = config.map(standardizeConfig);\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n    }\n    /**\n     * \\@docsNotRequired\n     * @return {?}\n     */\n    ngOnDestroy() { this.dispose(); }\n    /**\n     * Disposes of the router\n     * @return {?}\n     */\n    dispose() {\n        if (this.locationSubscription) {\n            this.locationSubscription.unsubscribe();\n            this.locationSubscription = (/** @type {?} */ (null));\n        }\n    }\n    /**\n     * Applies an array of commands to the current url tree and creates a new url tree.\n     *\n     * When given an activate route, applies the given commands starting from the route.\n     * When not given a route, applies the given command starting from the root.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\n     * // can do the following:\n     *\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     * @param {?} commands\n     * @param {?=} navigationExtras\n     * @return {?}\n     */\n    createUrlTree(commands, navigationExtras = {}) {\n        const { relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling, preserveFragment } = navigationExtras;\n        if (isDevMode() && preserveQueryParams && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        /** @type {?} */\n        const a = relativeTo || this.routerState.root;\n        /** @type {?} */\n        const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n        /** @type {?} */\n        let q = null;\n        if (queryParamsHandling) {\n            switch (queryParamsHandling) {\n                case 'merge':\n                    q = Object.assign({}, this.currentUrlTree.queryParams, queryParams);\n                    break;\n                case 'preserve':\n                    q = this.currentUrlTree.queryParams;\n                    break;\n                default:\n                    q = queryParams || null;\n            }\n        }\n        else {\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n        }\n        if (q !== null) {\n            q = this.removeEmptyProps(q);\n        }\n        return createUrlTree(a, this.currentUrlTree, commands, (/** @type {?} */ (q)), (/** @type {?} */ (f)));\n    }\n    /**\n     * Navigate based on the provided url. This navigation is always absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     * Since `navigateByUrl()` takes an absolute URL as the first parameter,\n     * it will not apply any delta to the current URL and ignores any properties\n     * in the second parameter (the `NavigationExtras`) that would change the\n     * provided URL.\n     * @param {?} url\n     * @param {?=} extras\n     * @return {?}\n     */\n    navigateByUrl(url, extras = { skipLocationChange: false }) {\n        if (isDevMode() && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n            this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n        }\n        /** @type {?} */\n        const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n        /** @type {?} */\n        const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n        return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n    }\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * \\@usageNotes\n     *\n     * ### Example\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     *\n     * In order to affect this browser's `history.state` entry, the `state`\n     * parameter can be passed. This must be an object because the router\n     * will add the `navigationId` property to this object before creating\n     * the new history item.\n     * @param {?} commands\n     * @param {?=} extras\n     * @return {?}\n     */\n    navigate(commands, extras = { skipLocationChange: false }) {\n        validateCommands(commands);\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    }\n    /**\n     * Serializes a `UrlTree` into a string\n     * @param {?} url\n     * @return {?}\n     */\n    serializeUrl(url) { return this.urlSerializer.serialize(url); }\n    /**\n     * Parses a string into a `UrlTree`\n     * @param {?} url\n     * @return {?}\n     */\n    parseUrl(url) {\n        /** @type {?} */\n        let urlTree;\n        try {\n            urlTree = this.urlSerializer.parse(url);\n        }\n        catch (e) {\n            urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n        }\n        return urlTree;\n    }\n    /**\n     * Returns whether the url is activated\n     * @param {?} url\n     * @param {?} exact\n     * @return {?}\n     */\n    isActive(url, exact) {\n        if (isUrlTree(url)) {\n            return containsTree(this.currentUrlTree, url, exact);\n        }\n        /** @type {?} */\n        const urlTree = this.parseUrl(url);\n        return containsTree(this.currentUrlTree, urlTree, exact);\n    }\n    /**\n     * @private\n     * @param {?} params\n     * @return {?}\n     */\n    removeEmptyProps(params) {\n        return Object.keys(params).reduce((result, key) => {\n            /** @type {?} */\n            const value = params[key];\n            if (value !== null && value !== undefined) {\n                result[key] = value;\n            }\n            return result;\n        }, {});\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    processNavigations() {\n        this.navigations.subscribe(t => {\n            this.navigated = true;\n            this.lastSuccessfulId = t.id;\n            ((/** @type {?} */ (this.events)))\n                .next(new NavigationEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));\n            this.lastSuccessfulNavigation = this.currentNavigation;\n            this.currentNavigation = null;\n            t.resolve(true);\n        }, e => { this.console.warn(`Unhandled Navigation Error: `); });\n    }\n    /**\n     * @private\n     * @param {?} rawUrl\n     * @param {?} source\n     * @param {?} restoredState\n     * @param {?} extras\n     * @return {?}\n     */\n    scheduleNavigation(rawUrl, source, restoredState, extras) {\n        /** @type {?} */\n        const lastNavigation = this.getTransition();\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n        // and that navigation results in 'replaceState' that leads to the same URL,\n        // we should skip those.\n        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a popstate was emitted first.\n        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a hashchange was emitted first.\n        if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        /** @type {?} */\n        let resolve = null;\n        /** @type {?} */\n        let reject = null;\n        /** @type {?} */\n        const promise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        /** @type {?} */\n        const id = ++this.navigationId;\n        this.setTransition({\n            id,\n            source,\n            restoredState,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.rawUrlTree, rawUrl, extras, resolve, reject, promise,\n            currentSnapshot: this.routerState.snapshot,\n            currentRouterState: this.routerState\n        });\n        // Make sure that the error is propagated even though `processNavigations` catch\n        // handler does not rethrow\n        return promise.catch((e) => { return Promise.reject(e); });\n    }\n    /**\n     * @private\n     * @param {?} url\n     * @param {?} replaceUrl\n     * @param {?} id\n     * @param {?=} state\n     * @return {?}\n     */\n    setBrowserUrl(url, replaceUrl, id, state) {\n        /** @type {?} */\n        const path = this.urlSerializer.serialize(url);\n        state = state || {};\n        if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n            // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.\n            this.location.replaceState(path, '', Object.assign({}, state, { navigationId: id }));\n        }\n        else {\n            this.location.go(path, '', Object.assign({}, state, { navigationId: id }));\n        }\n    }\n    /**\n     * @private\n     * @param {?} storedState\n     * @param {?} storedUrl\n     * @param {?} rawUrl\n     * @return {?}\n     */\n    resetStateAndUrl(storedState, storedUrl, rawUrl) {\n        ((/** @type {?} */ (this))).routerState = storedState;\n        this.currentUrlTree = storedUrl;\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n        this.resetUrlToCurrentUrlTree();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    resetUrlToCurrentUrlTree() {\n        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', { navigationId: this.lastSuccessfulId });\n    }\n}\n/**\n * @param {?} commands\n * @return {?}\n */\nfunction validateCommands(commands) {\n    for (let i = 0; i < commands.length; i++) {\n        /** @type {?} */\n        const cmd = commands[i];\n        if (cmd == null) {\n            throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive how to handle queryParams. Available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {\\@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * You can provide a `state` value to be persisted to the browser's History.state\n * property (See https://developer.mozilla.org/en-US/docs/Web/API/History#Properties). It's\n * used as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * And later the value can be read from the router through `router.getCurrentNavigation`.\n * For example, to capture the `tracingId` above during the `NavigationStart` event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {\\@link Router#createUrlTree createUrlTree} for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterLink {\n    /**\n     * @param {?} router\n     * @param {?} route\n     * @param {?} tabIndex\n     * @param {?} renderer\n     * @param {?} el\n     */\n    constructor(router, route, tabIndex, renderer, el) {\n        this.router = router;\n        this.route = route;\n        this.commands = [];\n        if (tabIndex == null) {\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n        }\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    set routerLink(commands) {\n        if (commands != null) {\n            this.commands = Array.isArray(commands) ? commands : [commands];\n        }\n        else {\n            this.commands = [];\n        }\n    }\n    /**\n     * @deprecated 4.0.0 use `queryParamsHandling` instead.\n     * @param {?} value\n     * @return {?}\n     */\n    set preserveQueryParams(value) {\n        if (isDevMode() && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n            console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n        }\n        this.preserve = value;\n    }\n    /**\n     * @return {?}\n     */\n    onClick() {\n        /** @type {?} */\n        const extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return true;\n    }\n    /**\n     * @return {?}\n     */\n    get urlTree() {\n        return this.router.createUrlTree(this.commands, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: attrBoolValue(this.preserve),\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: attrBoolValue(this.preserveFragment),\n        });\n    }\n}\nRouterLink.decorators = [\n    { type: Directive, args: [{ selector: ':not(a):not(area)[routerLink]' },] }\n];\n/** @nocollapse */\nRouterLink.ctorParameters = () => [\n    { type: Router },\n    { type: ActivatedRoute },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nRouterLink.propDecorators = {\n    queryParams: [{ type: Input }],\n    fragment: [{ type: Input }],\n    queryParamsHandling: [{ type: Input }],\n    preserveFragment: [{ type: Input }],\n    skipLocationChange: [{ type: Input }],\n    replaceUrl: [{ type: Input }],\n    state: [{ type: Input }],\n    routerLink: [{ type: Input }],\n    preserveQueryParams: [{ type: Input }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterLinkWithHref {\n    /**\n     * @param {?} router\n     * @param {?} route\n     * @param {?} locationStrategy\n     */\n    constructor(router, route, locationStrategy) {\n        this.router = router;\n        this.route = route;\n        this.locationStrategy = locationStrategy;\n        this.commands = [];\n        this.subscription = router.events.subscribe((s) => {\n            if (s instanceof NavigationEnd) {\n                this.updateTargetUrlAndHref();\n            }\n        });\n    }\n    /**\n     * @param {?} commands\n     * @return {?}\n     */\n    set routerLink(commands) {\n        if (commands != null) {\n            this.commands = Array.isArray(commands) ? commands : [commands];\n        }\n        else {\n            this.commands = [];\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set preserveQueryParams(value) {\n        if (isDevMode() && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        this.preserve = value;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) { this.updateTargetUrlAndHref(); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.subscription.unsubscribe(); }\n    /**\n     * @param {?} button\n     * @param {?} ctrlKey\n     * @param {?} metaKey\n     * @param {?} shiftKey\n     * @return {?}\n     */\n    onClick(button, ctrlKey, metaKey, shiftKey) {\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n            return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n            return true;\n        }\n        /** @type {?} */\n        const extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n            state: this.state\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    updateTargetUrlAndHref() {\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n    }\n    /**\n     * @return {?}\n     */\n    get urlTree() {\n        return this.router.createUrlTree(this.commands, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: attrBoolValue(this.preserve),\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: attrBoolValue(this.preserveFragment),\n        });\n    }\n}\nRouterLinkWithHref.decorators = [\n    { type: Directive, args: [{ selector: 'a[routerLink],area[routerLink]' },] }\n];\n/** @nocollapse */\nRouterLinkWithHref.ctorParameters = () => [\n    { type: Router },\n    { type: ActivatedRoute },\n    { type: LocationStrategy }\n];\nRouterLinkWithHref.propDecorators = {\n    target: [{ type: HostBinding, args: ['attr.target',] }, { type: Input }],\n    queryParams: [{ type: Input }],\n    fragment: [{ type: Input }],\n    queryParamsHandling: [{ type: Input }],\n    preserveFragment: [{ type: Input }],\n    skipLocationChange: [{ type: Input }],\n    replaceUrl: [{ type: Input }],\n    state: [{ type: Input }],\n    href: [{ type: HostBinding }],\n    routerLink: [{ type: Input }],\n    preserveQueryParams: [{ type: Input }],\n    onClick: [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] }]\n};\n/**\n * @param {?} s\n * @return {?}\n */\nfunction attrBoolValue(s) {\n    return s === '' || !!s;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n *\n * \\@description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterLinkActive {\n    /**\n     * @param {?} router\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?} cdr\n     */\n    constructor(router, element, renderer, cdr) {\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.classes = [];\n        this.isActive = false;\n        this.routerLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe((s) => {\n            if (s instanceof NavigationEnd) {\n                this.update();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.links.changes.subscribe(_ => this.update());\n        this.linksWithHrefs.changes.subscribe(_ => this.update());\n        this.update();\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set routerLinkActive(data) {\n        /** @type {?} */\n        const classes = Array.isArray(data) ? data : data.split(' ');\n        this.classes = classes.filter(c => !!c);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) { this.update(); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.subscription.unsubscribe(); }\n    /**\n     * @private\n     * @return {?}\n     */\n    update() {\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n            return;\n        Promise.resolve().then(() => {\n            /** @type {?} */\n            const hasActiveLinks = this.hasActiveLinks();\n            if (this.isActive !== hasActiveLinks) {\n                ((/** @type {?} */ (this))).isActive = hasActiveLinks;\n                this.classes.forEach((c) => {\n                    if (hasActiveLinks) {\n                        this.renderer.addClass(this.element.nativeElement, c);\n                    }\n                    else {\n                        this.renderer.removeClass(this.element.nativeElement, c);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * @private\n     * @param {?} router\n     * @return {?}\n     */\n    isLinkActive(router) {\n        return (link) => router.isActive(link.urlTree, this.routerLinkActiveOptions.exact);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    hasActiveLinks() {\n        return this.links.some(this.isLinkActive(this.router)) ||\n            this.linksWithHrefs.some(this.isLinkActive(this.router));\n    }\n}\nRouterLinkActive.decorators = [\n    { type: Directive, args: [{\n                selector: '[routerLinkActive]',\n                exportAs: 'routerLinkActive',\n            },] }\n];\n/** @nocollapse */\nRouterLinkActive.ctorParameters = () => [\n    { type: Router },\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: ChangeDetectorRef }\n];\nRouterLinkActive.propDecorators = {\n    links: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],\n    linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],\n    routerLinkActiveOptions: [{ type: Input }],\n    routerLinkActive: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * \\@publicApi\n */\nclass OutletContext {\n    constructor() {\n        this.outlet = null;\n        this.route = null;\n        this.resolver = null;\n        this.children = new ChildrenOutletContexts();\n        this.attachRef = null;\n    }\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * \\@publicApi\n */\nclass ChildrenOutletContexts {\n    constructor() {\n        // contexts for child outlets, by name.\n        this.contexts = new Map();\n    }\n    /**\n     * Called when a `RouterOutlet` directive is instantiated\n     * @param {?} childName\n     * @param {?} outlet\n     * @return {?}\n     */\n    onChildOutletCreated(childName, outlet) {\n        /** @type {?} */\n        const context = this.getOrCreateContext(childName);\n        context.outlet = outlet;\n        this.contexts.set(childName, context);\n    }\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     * @param {?} childName\n     * @return {?}\n     */\n    onChildOutletDestroyed(childName) {\n        /** @type {?} */\n        const context = this.getContext(childName);\n        if (context) {\n            context.outlet = null;\n        }\n    }\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     * @return {?}\n     */\n    onOutletDeactivated() {\n        /** @type {?} */\n        const contexts = this.contexts;\n        this.contexts = new Map();\n        return contexts;\n    }\n    /**\n     * @param {?} contexts\n     * @return {?}\n     */\n    onOutletReAttached(contexts) { this.contexts = contexts; }\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    getOrCreateContext(childName) {\n        /** @type {?} */\n        let context = this.getContext(childName);\n        if (!context) {\n            context = new OutletContext();\n            this.contexts.set(childName, context);\n        }\n        return context;\n    }\n    /**\n     * @param {?} childName\n     * @return {?}\n     */\n    getContext(childName) { return this.contexts.get(childName) || null; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet will emit an activate event any time a new component is being instantiated,\n * and a deactivate event when it is being destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\nclass RouterOutlet {\n    /**\n     * @param {?} parentContexts\n     * @param {?} location\n     * @param {?} resolver\n     * @param {?} name\n     * @param {?} changeDetector\n     */\n    constructor(parentContexts, location, resolver, name, changeDetector) {\n        this.parentContexts = parentContexts;\n        this.location = location;\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.activated = null;\n        this._activatedRoute = null;\n        this.activateEvents = new EventEmitter();\n        this.deactivateEvents = new EventEmitter();\n        this.name = name || PRIMARY_OUTLET;\n        parentContexts.onChildOutletCreated(this.name, this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.parentContexts.onChildOutletDestroyed(this.name); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.activated) {\n            // If the outlet was not instantiated at the time the route got activated we need to populate\n            // the outlet when it is initialized (ie inside a NgIf)\n            /** @type {?} */\n            const context = this.parentContexts.getContext(this.name);\n            if (context && context.route) {\n                if (context.attachRef) {\n                    // `attachRef` is populated when there is an existing component to mount\n                    this.attach(context.attachRef, context.route);\n                }\n                else {\n                    // otherwise the component defined in the configuration is created\n                    this.activateWith(context.route, context.resolver || null);\n                }\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isActivated() { return !!this.activated; }\n    /**\n     * @return {?}\n     */\n    get component() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        return this.activated.instance;\n    }\n    /**\n     * @return {?}\n     */\n    get activatedRoute() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        return (/** @type {?} */ (this._activatedRoute));\n    }\n    /**\n     * @return {?}\n     */\n    get activatedRouteData() {\n        if (this._activatedRoute) {\n            return this._activatedRoute.snapshot.data;\n        }\n        return {};\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     * @return {?}\n     */\n    detach() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        this.location.detach();\n        /** @type {?} */\n        const cmp = this.activated;\n        this.activated = null;\n        this._activatedRoute = null;\n        return cmp;\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     * @param {?} ref\n     * @param {?} activatedRoute\n     * @return {?}\n     */\n    attach(ref, activatedRoute) {\n        this.activated = ref;\n        this._activatedRoute = activatedRoute;\n        this.location.insert(ref.hostView);\n    }\n    /**\n     * @return {?}\n     */\n    deactivate() {\n        if (this.activated) {\n            /** @type {?} */\n            const c = this.component;\n            this.activated.destroy();\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    }\n    /**\n     * @param {?} activatedRoute\n     * @param {?} resolver\n     * @return {?}\n     */\n    activateWith(activatedRoute, resolver) {\n        if (this.isActivated) {\n            throw new Error('Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        /** @type {?} */\n        const snapshot = activatedRoute._futureSnapshot;\n        /** @type {?} */\n        const component = (/** @type {?} */ ((/** @type {?} */ (snapshot.routeConfig)).component));\n        resolver = resolver || this.resolver;\n        /** @type {?} */\n        const factory = resolver.resolveComponentFactory(component);\n        /** @type {?} */\n        const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n        /** @type {?} */\n        const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\n        // Calling `markForCheck` to make sure we will run the change detection when the\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n        this.changeDetector.markForCheck();\n        this.activateEvents.emit(this.activated.instance);\n    }\n}\nRouterOutlet.decorators = [\n    { type: Directive, args: [{ selector: 'router-outlet', exportAs: 'outlet' },] }\n];\n/** @nocollapse */\nRouterOutlet.ctorParameters = () => [\n    { type: ChildrenOutletContexts },\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver },\n    { type: String, decorators: [{ type: Attribute, args: ['name',] }] },\n    { type: ChangeDetectorRef }\n];\nRouterOutlet.propDecorators = {\n    activateEvents: [{ type: Output, args: ['activate',] }],\n    deactivateEvents: [{ type: Output, args: ['deactivate',] }]\n};\nclass OutletInjector {\n    /**\n     * @param {?} route\n     * @param {?} childContexts\n     * @param {?} parent\n     */\n    constructor(route, childContexts, parent) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        if (token === ActivatedRoute) {\n            return this.route;\n        }\n        if (token === ChildrenOutletContexts) {\n            return this.childContexts;\n        }\n        return this.parent.get(token, notFoundValue);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Provides a preloading strategy.\n *\n * \\@publicApi\n * @abstract\n */\nclass PreloadingStrategy {\n}\n/**\n * \\@description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@publicApi\n */\nclass PreloadAllModules {\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    preload(route, fn) {\n        return fn().pipe(catchError(() => of(null)));\n    }\n}\n/**\n * \\@description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * \\@publicApi\n */\nclass NoPreloading {\n    /**\n     * @param {?} route\n     * @param {?} fn\n     * @return {?}\n     */\n    preload(route, fn) { return of(null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * \\@publicApi\n */\nclass RouterPreloader {\n    /**\n     * @param {?} router\n     * @param {?} moduleLoader\n     * @param {?} compiler\n     * @param {?} injector\n     * @param {?} preloadingStrategy\n     */\n    constructor(router, moduleLoader, compiler, injector, preloadingStrategy) {\n        this.router = router;\n        this.injector = injector;\n        this.preloadingStrategy = preloadingStrategy;\n        /** @type {?} */\n        const onStartLoad = (r) => router.triggerEvent(new RouteConfigLoadStart(r));\n        /** @type {?} */\n        const onEndLoad = (r) => router.triggerEvent(new RouteConfigLoadEnd(r));\n        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n    }\n    /**\n     * @return {?}\n     */\n    setUpPreloading() {\n        this.subscription =\n            this.router.events\n                .pipe(filter((e) => e instanceof NavigationEnd), concatMap(() => this.preload()))\n                .subscribe(() => { });\n    }\n    /**\n     * @return {?}\n     */\n    preload() {\n        /** @type {?} */\n        const ngModule = this.injector.get(NgModuleRef);\n        return this.processRoutes(ngModule, this.router.config);\n    }\n    // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n    // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n    // should be refactored.\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() { this.subscription.unsubscribe(); }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} routes\n     * @return {?}\n     */\n    processRoutes(ngModule, routes) {\n        /** @type {?} */\n        const res = [];\n        for (const route of routes) {\n            // we already have the config loaded, just recurse\n            if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n                /** @type {?} */\n                const childConfig = route._loadedConfig;\n                res.push(this.processRoutes(childConfig.module, childConfig.routes));\n                // no config loaded, fetch the config\n            }\n            else if (route.loadChildren && !route.canLoad) {\n                res.push(this.preloadConfig(ngModule, route));\n                // recurse into children\n            }\n            else if (route.children) {\n                res.push(this.processRoutes(ngModule, route.children));\n            }\n        }\n        return from(res).pipe(mergeAll(), map((_) => void 0));\n    }\n    /**\n     * @private\n     * @param {?} ngModule\n     * @param {?} route\n     * @return {?}\n     */\n    preloadConfig(ngModule, route) {\n        return this.preloadingStrategy.preload(route, () => {\n            /** @type {?} */\n            const loaded$ = this.loader.load(ngModule.injector, route);\n            return loaded$.pipe(mergeMap((config) => {\n                route._loadedConfig = config;\n                return this.processRoutes(config.module, config.routes);\n            }));\n        });\n    }\n}\nRouterPreloader.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nRouterPreloader.ctorParameters = () => [\n    { type: Router },\n    { type: NgModuleFactoryLoader },\n    { type: Compiler },\n    { type: Injector },\n    { type: PreloadingStrategy }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass RouterScroller {\n    /**\n     * @param {?} router\n     * @param {?} viewportScroller\n     * @param {?=} options\n     */\n    constructor(router, viewportScroller, options = {}) {\n        this.router = router;\n        this.viewportScroller = viewportScroller;\n        this.options = options;\n        this.lastId = 0;\n        this.lastSource = 'imperative';\n        this.restoredId = 0;\n        this.store = {};\n        // Default both options to 'disabled'\n        options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n        options.anchorScrolling = options.anchorScrolling || 'disabled';\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        // we want to disable the automatic scrolling because having two places\n        // responsible for scrolling results race conditions, especially given\n        // that browser don't implement this behavior consistently\n        if (this.options.scrollPositionRestoration !== 'disabled') {\n            this.viewportScroller.setHistoryScrollRestoration('manual');\n        }\n        this.routerEventsSubscription = this.createScrollEvents();\n        this.scrollEventsSubscription = this.consumeScrollEvents();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createScrollEvents() {\n        return this.router.events.subscribe(e => {\n            if (e instanceof NavigationStart) {\n                // store the scroll position of the current stable navigations.\n                this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n                this.lastSource = e.navigationTrigger;\n                this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n            }\n            else if (e instanceof NavigationEnd) {\n                this.lastId = e.id;\n                this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);\n            }\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    consumeScrollEvents() {\n        return this.router.events.subscribe(e => {\n            if (!(e instanceof Scroll))\n                return;\n            // a popstate event. The pop state event will always ignore anchor scrolling.\n            if (e.position) {\n                if (this.options.scrollPositionRestoration === 'top') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n                else if (this.options.scrollPositionRestoration === 'enabled') {\n                    this.viewportScroller.scrollToPosition(e.position);\n                }\n                // imperative navigation \"forward\"\n            }\n            else {\n                if (e.anchor && this.options.anchorScrolling === 'enabled') {\n                    this.viewportScroller.scrollToAnchor(e.anchor);\n                }\n                else if (this.options.scrollPositionRestoration !== 'disabled') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n            }\n        });\n    }\n    /**\n     * @private\n     * @param {?} routerEvent\n     * @param {?} anchor\n     * @return {?}\n     */\n    scheduleScrollEvent(routerEvent, anchor) {\n        this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.routerEventsSubscription) {\n            this.routerEventsSubscription.unsubscribe();\n        }\n        if (this.scrollEventsSubscription) {\n            this.scrollEventsSubscription.unsubscribe();\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Contains a list of directives\n *\n *\n * @type {?}\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, EmptyOutletComponent];\n/**\n * \\@description\n *\n * Is used in DI to configure the router.\n *\n * \\@publicApi\n * @type {?}\n */\nconst ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');\n/**\n * \\@docsNotRequired\n * @type {?}\n */\nconst ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');\n/** @type {?} */\nconst ROUTER_PROVIDERS = [\n    Location,\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n    {\n        provide: Router,\n        useFactory: setupRouter,\n        deps: [\n            ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,\n            NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,\n            [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]\n        ]\n    },\n    ChildrenOutletContexts,\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\n    RouterPreloader,\n    NoPreloading,\n    PreloadAllModules,\n    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\n];\n/**\n * @return {?}\n */\nfunction routerNgProbeToken() {\n    return new NgProbeToken('Router', Router);\n}\n/**\n * \\@usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\n * overview of how the router should be used.\n *\n * \\@publicApi\n */\nclass RouterModule {\n    // Note: We are injecting the Router so it gets created eagerly...\n    /**\n     * @param {?} guard\n     * @param {?} router\n     */\n    constructor(guard, router) { }\n    /**\n     * Creates a module with all the router providers and directives. It also optionally sets up an\n     * application listener to perform an initial navigation.\n     *\n     * Options (see `ExtraOptions`):\n     * * `enableTracing` makes the router log all its internal events to the console.\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\n     * API.\n     * * `initialNavigation` disables the initial navigation.\n     * * `errorHandler` provides a custom error handler.\n     * * `preloadingStrategy` configures a preloading strategy (see `PreloadAllModules`).\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\n     * `ExtraOptions` for more details.\n     * * `paramsInheritanceStrategy` defines how the router merges params, data and resolved data\n     * from parent to child routes.\n     * @param {?} routes\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(routes, config) {\n        return {\n            ngModule: RouterModule,\n            providers: [\n                ROUTER_PROVIDERS,\n                provideRoutes(routes),\n                {\n                    provide: ROUTER_FORROOT_GUARD,\n                    useFactory: provideForRootGuard,\n                    deps: [[Router, new Optional(), new SkipSelf()]]\n                },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                {\n                    provide: LocationStrategy,\n                    useFactory: provideLocationStrategy,\n                    deps: [\n                        PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n                    ]\n                },\n                {\n                    provide: RouterScroller,\n                    useFactory: createRouterScroller,\n                    deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n                },\n                {\n                    provide: PreloadingStrategy,\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                        NoPreloading\n                },\n                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n                provideRouterInitializer(),\n            ],\n        };\n    }\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     * @param {?} routes\n     * @return {?}\n     */\n    static forChild(routes) {\n        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n    }\n}\nRouterModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: ROUTER_DIRECTIVES,\n                exports: ROUTER_DIRECTIVES,\n                entryComponents: [EmptyOutletComponent]\n            },] }\n];\n/** @nocollapse */\nRouterModule.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] }] },\n    { type: Router, decorators: [{ type: Optional }] }\n];\n/**\n * @param {?} router\n * @param {?} viewportScroller\n * @param {?} config\n * @return {?}\n */\nfunction createRouterScroller(router, viewportScroller, config) {\n    if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n    }\n    return new RouterScroller(router, viewportScroller, config);\n}\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\nfunction provideLocationStrategy(platformLocationStrategy, baseHref, options = {}) {\n    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n        new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\nfunction provideForRootGuard(router) {\n    if (router) {\n        throw new Error(`RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n    }\n    return 'guarded';\n}\n/**\n * \\@description\n *\n * Registers routes.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@publicApi\n * @param {?} routes\n * @return {?}\n */\nfunction provideRoutes(routes) {\n    return [\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n        { provide: ROUTES, multi: true, useValue: routes },\n    ];\n}\n/**\n * @param {?} ref\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\nfunction setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts = {}, urlHandlingStrategy, routeReuseStrategy) {\n    /** @type {?} */\n    const router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    if (routeReuseStrategy) {\n        router.routeReuseStrategy = routeReuseStrategy;\n    }\n    if (opts.errorHandler) {\n        router.errorHandler = opts.errorHandler;\n    }\n    if (opts.malformedUriErrorHandler) {\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n    }\n    if (opts.enableTracing) {\n        /** @type {?} */\n        const dom = ɵgetDOM();\n        router.events.subscribe((e) => {\n            dom.logGroup(`Router Event: ${((/** @type {?} */ (e.constructor))).name}`);\n            dom.log(e.toString());\n            dom.log(e);\n            dom.logGroupEnd();\n        });\n    }\n    if (opts.onSameUrlNavigation) {\n        router.onSameUrlNavigation = opts.onSameUrlNavigation;\n    }\n    if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n    }\n    if (opts.urlUpdateStrategy) {\n        router.urlUpdateStrategy = opts.urlUpdateStrategy;\n    }\n    if (opts.relativeLinkResolution) {\n        router.relativeLinkResolution = opts.relativeLinkResolution;\n    }\n    return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\nfunction rootRoute(router) {\n    return router.routerState.root;\n}\n/**\n * To initialize the router properly we need to do in two steps:\n *\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\n * a resolver or a guards executes asynchronously. Second, we need to actually run\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\n * hook provided by the router to do that.\n *\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nclass RouterInitializer {\n    /**\n     * @param {?} injector\n     */\n    constructor(injector) {\n        this.injector = injector;\n        this.initNavigation = false;\n        this.resultOfPreactivationDone = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    appInitializer() {\n        /** @type {?} */\n        const p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n        return p.then(() => {\n            /** @type {?} */\n            let resolve = (/** @type {?} */ (null));\n            /** @type {?} */\n            const res = new Promise(r => resolve = r);\n            /** @type {?} */\n            const router = this.injector.get(Router);\n            /** @type {?} */\n            const opts = this.injector.get(ROUTER_CONFIGURATION);\n            if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'disabled') {\n                router.setUpLocationChangeListener();\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'enabled') {\n                router.hooks.afterPreactivation = () => {\n                    // only the initial navigation should be delayed\n                    if (!this.initNavigation) {\n                        this.initNavigation = true;\n                        resolve(true);\n                        return this.resultOfPreactivationDone;\n                        // subsequent navigations should not be delayed\n                    }\n                    else {\n                        return (/** @type {?} */ (of(null)));\n                    }\n                };\n                router.initialNavigation();\n            }\n            else {\n                throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n            }\n            return res;\n        });\n    }\n    /**\n     * @param {?} bootstrappedComponentRef\n     * @return {?}\n     */\n    bootstrapListener(bootstrappedComponentRef) {\n        /** @type {?} */\n        const opts = this.injector.get(ROUTER_CONFIGURATION);\n        /** @type {?} */\n        const preloader = this.injector.get(RouterPreloader);\n        /** @type {?} */\n        const routerScroller = this.injector.get(RouterScroller);\n        /** @type {?} */\n        const router = this.injector.get(Router);\n        /** @type {?} */\n        const ref = this.injector.get(ApplicationRef);\n        if (bootstrappedComponentRef !== ref.components[0]) {\n            return;\n        }\n        if (this.isLegacyEnabled(opts)) {\n            router.initialNavigation();\n        }\n        else if (this.isLegacyDisabled(opts)) {\n            router.setUpLocationChangeListener();\n        }\n        preloader.setUpPreloading();\n        routerScroller.init();\n        router.resetRootComponentType(ref.componentTypes[0]);\n        this.resultOfPreactivationDone.next((/** @type {?} */ (null)));\n        this.resultOfPreactivationDone.complete();\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    isLegacyEnabled(opts) {\n        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n            opts.initialNavigation === undefined;\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    isLegacyDisabled(opts) {\n        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n    }\n}\nRouterInitializer.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nRouterInitializer.ctorParameters = () => [\n    { type: Injector }\n];\n/**\n * @param {?} r\n * @return {?}\n */\nfunction getAppInitializer(r) {\n    return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction getBootstrapListener(r) {\n    return r.bootstrapListener.bind(r);\n}\n/**\n * A token for the router initializer that will be called after the app is bootstrapped.\n *\n * \\@publicApi\n * @type {?}\n */\nconst ROUTER_INITIALIZER = new InjectionToken('Router Initializer');\n/**\n * @return {?}\n */\nfunction provideRouterInitializer() {\n    return [\n        RouterInitializer,\n        {\n            provide: APP_INITIALIZER,\n            multi: true,\n            useFactory: getAppInitializer,\n            deps: [RouterInitializer]\n        },\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n    ];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.7');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ROUTER_FORROOT_GUARD as ɵangular_packages_router_router_a, RouterInitializer as ɵangular_packages_router_router_h, createRouterScroller as ɵangular_packages_router_router_c, getAppInitializer as ɵangular_packages_router_router_i, getBootstrapListener as ɵangular_packages_router_router_j, provideForRootGuard as ɵangular_packages_router_router_e, provideLocationStrategy as ɵangular_packages_router_router_d, provideRouterInitializer as ɵangular_packages_router_router_k, rootRoute as ɵangular_packages_router_router_g, routerNgProbeToken as ɵangular_packages_router_router_b, setupRouter as ɵangular_packages_router_router_f, RouterScroller as ɵangular_packages_router_router_n, Tree as ɵangular_packages_router_router_l, TreeNode as ɵangular_packages_router_router_m, RouterLink, RouterLinkWithHref, RouterLinkActive, RouterOutlet, ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized, Scroll, RouteReuseStrategy, Router, ROUTES, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, RouterModule, provideRoutes, ChildrenOutletContexts, OutletContext, NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader, ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, PRIMARY_OUTLET, convertToParamMap, UrlHandlingStrategy, DefaultUrlSerializer, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VERSION, EmptyOutletComponent as ɵEmptyOutletComponent, ROUTER_PROVIDERS as ɵROUTER_PROVIDERS, flatten as ɵflatten };\n//# sourceMappingURL=router.js.map\n","import { fromArray } from '../observable/fromArray';\nimport { scalar } from '../observable/scalar';\nimport { empty } from '../observable/empty';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nexport function startWith(...array) {\n    return (source) => {\n        let scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        const len = array.length;\n        if (len === 1 && !scheduler) {\n            return concatStatic(scalar(array[0]), source);\n        }\n        else if (len > 0) {\n            return concatStatic(fromArray(array, scheduler), source);\n        }\n        else {\n            return concatStatic(empty(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map","import { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\nexport function reduce(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe(scan((acc, value, index) => accumulator(acc, value, index + 1)), takeLast(1))(source);\n    };\n}\n//# sourceMappingURL=reduce.js.map","import { Action } from '@ngrx/store';\r\nimport { NavigationExtras } from '@angular/router';\r\n\r\nexport const GO = '[Router] Go';\r\nexport const BACK = '[Router] Back';\r\nexport const FORWARD = '[Router] Forward';\r\n\r\nexport class Go implements Action {\r\n  readonly type = GO;\r\n\r\n  constructor(\r\n    public payload: {\r\n      path: any[];\r\n      query?: object;\r\n      extras?: NavigationExtras;\r\n    }\r\n  ) {}\r\n}\r\n\r\nexport class Back implements Action {\r\n  readonly type = BACK;\r\n}\r\n\r\nexport class Forward implements Action {\r\n  readonly type = FORWARD;\r\n}\r\n\r\nexport type Actions = Go | Back | Forward;\r\n","import { StoreModule, ActionReducerMap } from '@ngrx/store';\r\nimport { Params, RouterStateSnapshot } from '@angular/router';\r\nimport {\r\n  RouterReducerState,\r\n  RouterStateSerializer\r\n} from '@ngrx/router-store';\r\n\r\nexport interface RouterStateUrl {\r\n  url: string;\r\n  queryParams: Params;\r\n}\r\n\r\nexport class NavigationSerializer implements RouterStateSerializer<RouterStateUrl> {\r\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\r\n    // console.log('ROUTE', routerState);\r\n    const { url } = routerState;\r\n    const queryParams = routerState.root.queryParams;\r\n    return { url, queryParams };\r\n  }\r\n}\r\n","export * from './router-store.actions';\r\nexport * from './router-store.reducer';\r\n","import { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nexport class ReplaySubject extends Subject {\n    constructor(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {\n        super();\n        this.scheduler = scheduler;\n        this._events = [];\n        this._infiniteTimeWindow = false;\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            this._infiniteTimeWindow = true;\n            this.next = this.nextInfiniteTimeWindow;\n        }\n        else {\n            this.next = this.nextTimeWindow;\n        }\n    }\n    nextInfiniteTimeWindow(value) {\n        const _events = this._events;\n        _events.push(value);\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        super.next(value);\n    }\n    nextTimeWindow(value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        const _infiniteTimeWindow = this._infiniteTimeWindow;\n        const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        const scheduler = this.scheduler;\n        const len = _events.length;\n        let subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (let i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    }\n    _getNow() {\n        return (this.scheduler || queue).now();\n    }\n    _trimBufferThenGetEvents() {\n        const now = this._getNow();\n        const _bufferSize = this._bufferSize;\n        const _windowTime = this._windowTime;\n        const _events = this._events;\n        const eventsCount = _events.length;\n        let spliceCount = 0;\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    }\n}\nclass ReplayEvent {\n    constructor(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n}\n//# sourceMappingURL=ReplaySubject.js.map","export const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map","import { Store, createSelector } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { INowPlaylist } from './now-playlist.reducer';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\nexport const getNowPlaylist = (state: EchoesState) => state.nowPlaylist;\r\nexport const isPlayerInRepeat = createSelector(\r\n  getNowPlaylist,\r\n  (nowPlaylist: INowPlaylist) => nowPlaylist.repeat\r\n);\r\nexport const getPlaylistVideos = createSelector(\r\n  getNowPlaylist,\r\n  (nowPlaylist: INowPlaylist) => nowPlaylist.videos\r\n);\r\nexport const getPlaylistMediaIds = createSelector(\r\n  getPlaylistVideos,\r\n  (playlist: GoogleApiYouTubeVideoResource[]) => playlist.map(media => media.id)\r\n);\r\nexport const getSelectedMediaId = createSelector(\r\n  getNowPlaylist,\r\n  (nowPlaylist: INowPlaylist) => nowPlaylist.selectedId\r\n);\r\nexport const getSelectedMedia = createSelector(\r\n  getNowPlaylist,\r\n  getSelectedMediaId,\r\n  (nowPlaylist: INowPlaylist, selectedId: string) => {\r\n    const mediaIds = nowPlaylist.videos.map(video => video.id);\r\n    const selectedMediaIndex = mediaIds.indexOf(selectedId);\r\n    return nowPlaylist.videos[selectedMediaIndex];\r\n  }\r\n);\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\n@Injectable()\r\nexport class YoutubePlayerService {\r\n  public player: YT.Player;\r\n\r\n  constructor(private store: Store<EchoesState>, private zone: NgZone) {}\r\n\r\n  setupPlayer(player) {\r\n    this.player = player;\r\n  }\r\n\r\n  play() {\r\n    this.zone.runOutsideAngular(() => this.player.playVideo());\r\n  }\r\n\r\n  pause() {\r\n    this.zone.runOutsideAngular(() => this.player.pauseVideo());\r\n  }\r\n\r\n  playVideo(media: GoogleApiYouTubeVideoResource, seconds?: number) {\r\n    const id = media.id;\r\n    const isLoaded = this.player.getVideoUrl().includes(id);\r\n    if (!isLoaded) {\r\n      this.zone.runOutsideAngular(() =>\r\n        this.player.loadVideoById(id, seconds || undefined)\r\n      );\r\n    }\r\n    this.play();\r\n  }\r\n\r\n  seekTo(seconds: number) {\r\n    this.zone.runOutsideAngular(() => this.player.seekTo(seconds, true));\r\n  }\r\n\r\n  // Not in use\r\n  onPlayerStateChange(event) {\r\n    const state = event.data;\r\n    // let autoNext = false;\r\n    // play the next song if its not the end of the playlist\r\n    // should add a \"repeat\" feature\r\n    if (state === YT.PlayerState.ENDED) {\r\n      // this.listeners.ended.forEach(callback => callback(state));\r\n    }\r\n\r\n    if (state === YT.PlayerState.PAUSED) {\r\n      // service.playerState = YT.PlayerState.PAUSED;\r\n    }\r\n    if (state === YT.PlayerState.PLAYING) {\r\n      // service.playerState = YT.PlayerState.PLAYING;\r\n    }\r\n  }\r\n\r\n  setSize(height, width) {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.player.setSize(width, height);\r\n    });\r\n  }\r\n}\r\n","import { Subscriber } from './Subscriber';\nexport class OuterSubscriber extends Subscriber {\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(error, innerSub) {\n        this.destination.error(error);\n    }\n    notifyComplete(innerSub) {\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=OuterSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport class MapOperator {\n    constructor(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    }\n}\nclass MapSubscriber extends Subscriber {\n    constructor(destination, project, thisArg) {\n        super(destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=map.js.map","import { noop } from './noop';\nexport function pipe(...fns) {\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn) => fn(prev), input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","export const subscribeToArray = (array) => (subscriber) => {\n    for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n    }\n    if (!subscriber.closed) {\n        subscriber.complete();\n    }\n};\n//# sourceMappingURL=subscribeToArray.js.map","import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nconst connectableProto = ConnectableObservable.prototype;\nexport const connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map","import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        let subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        const connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport class MulticastOperator {\n    constructor(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        const { selector } = this;\n        const subject = this.subjectFactory();\n        const subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    }\n}\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar memoize = require('lodash.memoize');\nexports.default = function (resolver) { return function (target, key, descriptor) {\n    if (typeof descriptor.value !== 'function') {\n        throw new Error('Memoization can be applied only to methods');\n    }\n    descriptor.value = memoize(descriptor.value, resolver);\n    return descriptor;\n}; };\n//# sourceMappingURL=index.js.map","import { async } from '../scheduler/async';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\nexport function timeInterval(scheduler = async) {\n    return (source) => defer(() => {\n        return source.pipe(scan(({ current }, value) => ({ value, current: scheduler.now(), last: current }), { current: scheduler.now(), value: undefined, last: undefined }), map(({ current, last, value }) => new TimeInterval(value, current - last)));\n    });\n}\nexport class TimeInterval {\n    constructor(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n}\n//# sourceMappingURL=timeInterval.js.map","import { from as fromPromise, Subscription, Observable, timer } from 'rxjs';\r\nimport { Injectable, NgZone } from '@angular/core';\r\nimport {\r\n  switchMap,\r\n  map,\r\n  filter,\r\n  tap,\r\n  timeInterval,\r\n  retry,\r\n  catchError\r\n} from 'rxjs/operators';\r\nimport { environment } from '@env/environment';\r\nimport { GapiLoader } from './gapi-loader.service';\r\n\r\nconst extractAccessToken = (_googleAuth: gapi.auth2.GoogleAuth) => {\r\n  return (\r\n    _googleAuth && _googleAuth.currentUser.get().getAuthResponse().access_token\r\n  );\r\n};\r\n\r\n@Injectable()\r\nexport class Authorization {\r\n  private _googleAuth: gapi.auth2.GoogleAuth;\r\n  private _scope = 'profile email https://www.googleapis.com/auth/youtube';\r\n  private _accessToken: string;\r\n  private autoSignInTimer: Subscription;\r\n\r\n  set accessToken(value) {\r\n    this._accessToken = value;\r\n  }\r\n  get accessToken() {\r\n    const token = {\r\n      fromGoogle: extractAccessToken(this._googleAuth),\r\n      fromApp: this._accessToken,\r\n      equal: true\r\n    };\r\n    return token.fromGoogle;\r\n  }\r\n\r\n  constructor(private zone: NgZone, private gapiLoader: GapiLoader) {}\r\n\r\n  loadAuth() {\r\n    // attempt to SILENT authorize\r\n    return this.gapiLoader.load('auth2').pipe(\r\n      switchMap(() => this.authorize()),\r\n      tap((googleAuth: gapi.auth2.GoogleAuth) => {\r\n        this.saveGoogleAuth(googleAuth);\r\n        this.listenToGoogleAuthSignIn(googleAuth);\r\n      }),\r\n      filter(\r\n        (googleAuth: gapi.auth2.GoogleAuth) =>\r\n          this.isSignIn() && this.hasAccessToken(googleAuth)\r\n      ),\r\n      map((googleAuth: gapi.auth2.GoogleAuth) => googleAuth.currentUser.get())\r\n    );\r\n  }\r\n\r\n  authorize() {\r\n    // if (this._googleAuth) {\r\n    //   console.log('signedIn?', this._googleAuth.isSignedIn.get());\r\n    // }\r\n    const authOptions = {\r\n      client_id: environment.youtube.CLIENT_ID,\r\n      scope: this._scope\r\n    };\r\n    return window['gapi'].auth2.init(authOptions);\r\n  }\r\n\r\n  private hasAccessToken(googleAuth: gapi.auth2.GoogleAuth): boolean {\r\n    return (\r\n      googleAuth &&\r\n      googleAuth.currentUser\r\n        .get()\r\n        .getAuthResponse()\r\n        .hasOwnProperty('access_token')\r\n    );\r\n  }\r\n\r\n  private saveGoogleAuth(\r\n    googleAuth: gapi.auth2.GoogleAuth\r\n  ): gapi.auth2.GoogleAuth {\r\n    this._googleAuth = googleAuth;\r\n    return googleAuth;\r\n  }\r\n\r\n  private listenToGoogleAuthSignIn(googleAuth: gapi.auth2.GoogleAuth) {\r\n    window['gapi']['auth2'].getAuthInstance().isSignedIn.listen(authState => {\r\n      console.log('authState changed', authState);\r\n    });\r\n  }\r\n\r\n  signIn() {\r\n    const signOptions: gapi.auth2.SigninOptions = { scope: this._scope };\r\n    if (this._googleAuth) {\r\n      return fromPromise(this._googleAuth.signIn(signOptions));\r\n    }\r\n    return new Observable(obs => obs.complete());\r\n  }\r\n\r\n  extractToken(googleUser: gapi.auth2.GoogleUser) {\r\n    const authResponse = googleUser.getAuthResponse();\r\n    return authResponse.access_token;\r\n  }\r\n\r\n  setAuthTimer(googleUser: gapi.auth2.GoogleUser) {\r\n    const MILLISECOND = 1000;\r\n    const expireTime = 60 * 5;\r\n    const expireTimeInMs = expireTime * MILLISECOND;\r\n    this.disposeAutoSignIn();\r\n    this.autoSignInTimer = this.startTimerToNextAuth(expireTimeInMs);\r\n  }\r\n\r\n  startTimerToNextAuth(timeInMs: number): Subscription {\r\n    return timer(timeInMs)\r\n      .pipe(\r\n        timeInterval(),\r\n        switchMap(() => this.authorize()),\r\n        tap((googleAuth: gapi.auth2.GoogleAuth) =>\r\n          this.saveGoogleAuth(googleAuth)\r\n        ),\r\n        map((googleAuth: gapi.auth2.GoogleAuth) =>\r\n          googleAuth.currentUser.get()\r\n        ),\r\n        retry(3),\r\n        catchError(error => {\r\n          window.location.reload();\r\n          return error;\r\n        })\r\n      )\r\n      .subscribe((googleUser: gapi.auth2.GoogleUser) => {\r\n        this.zone.run(() => this.setAuthTimer(googleUser));\r\n      });\r\n  }\r\n\r\n  handleFailedLogin(response) {\r\n    console.error('FAILED TO LOGIN:', response);\r\n    return new Observable(obs => {\r\n      obs.error();\r\n      obs.complete();\r\n    });\r\n  }\r\n\r\n  isSignIn() {\r\n    return this._googleAuth && this._googleAuth.isSignedIn.get();\r\n  }\r\n\r\n  signOut() {\r\n    return this._googleAuth.signOut();\r\n  }\r\n\r\n  disposeAutoSignIn() {\r\n    if (this.autoSignInTimer) {\r\n      this.autoSignInTimer.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","import { Subscriber } from '../Subscriber';\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nclass FilterOperator {\n    constructor(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    }\n}\nclass FilterSubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=filter.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        const item = iterator.next();\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map","<router-outlet></router-outlet>","import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport class ObserveOnOperator {\n    constructor(scheduler, delay = 0) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    }\n}\nexport class ObserveOnSubscriber extends Subscriber {\n    constructor(destination, scheduler, delay = 0) {\n        super(destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    static dispatch(arg) {\n        const { notification, destination } = arg;\n        notification.observe(destination);\n        this.unsubscribe();\n    }\n    scheduleMessage(notification) {\n        const destination = this.destination;\n        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    }\n    _next(value) {\n        this.scheduleMessage(Notification.createNext(value));\n    }\n    _error(err) {\n        this.scheduleMessage(Notification.createError(err));\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleMessage(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nexport class ObserveOnMessage {\n    constructor(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n}\n//# sourceMappingURL=observeOn.js.map","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\nexport const queue = new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map","import { AsyncScheduler } from './AsyncScheduler';\nexport class QueueScheduler extends AsyncScheduler {\n}\n//# sourceMappingURL=QueueScheduler.js.map","import { AsyncAction } from './AsyncAction';\nexport class QueueAction extends AsyncAction {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    schedule(state, delay = 0) {\n        if (delay > 0) {\n            return super.schedule(state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    }\n    execute(state, delay) {\n        return (delay > 0 || this.closed) ?\n            super.execute(state, delay) :\n            this._execute(state, delay);\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return super.requestAsyncId(scheduler, id, delay);\n        }\n        return scheduler.flush(this);\n    }\n}\n//# sourceMappingURL=QueueAction.js.map","function UnsubscriptionErrorImpl(errors) {\n    Error.call(this);\n    this.message = errors ?\n        `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n}\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\nexport const UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n    constructor(unsubscribe) {\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    unsubscribe() {\n        let hasErrors = false;\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parent, _parents, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        let index = -1;\n        let len = _parents ? _parents.length : 0;\n        while (_parent) {\n            _parent.remove(this);\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            try {\n                _unsubscribe.call(this);\n            }\n            catch (e) {\n                hasErrors = true;\n                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    try {\n                        sub.unsubscribe();\n                    }\n                    catch (e) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        if (e instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n                        }\n                        else {\n                            errors.push(e);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    add(teardown) {\n        let subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (!(subscription instanceof Subscription)) {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default: {\n                if (!teardown) {\n                    return Subscription.EMPTY;\n                }\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n        }\n        if (subscription._addParent(this)) {\n            const subscriptions = this._subscriptions;\n            if (subscriptions) {\n                subscriptions.push(subscription);\n            }\n            else {\n                this._subscriptions = [subscription];\n            }\n        }\n        return subscription;\n    }\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n    _addParent(parent) {\n        let { _parent, _parents } = this;\n        if (_parent === parent) {\n            return false;\n        }\n        else if (!_parent) {\n            this._parent = parent;\n            return true;\n        }\n        else if (!_parents) {\n            this._parents = [parent];\n            return true;\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            _parents.push(parent);\n            return true;\n        }\n        return false;\n    }\n}\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","import {\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'youtube-playlist',\r\n  styleUrls: ['./youtube-playlist.scss'],\r\n  templateUrl: './youtube-playlist.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YoutubePlaylistComponent {\r\n  @Input() media: GoogleApiYouTubePlaylistResource;\r\n  @Input() link = './';\r\n  @Output() play = new EventEmitter();\r\n  @Output() queue = new EventEmitter();\r\n\r\n  isPlaying = false;\r\n  loading = false;\r\n\r\n  playPlaylist(media: GoogleApiYouTubePlaylistResource) {\r\n    this.play.next(media);\r\n  }\r\n\r\n  queuePlaylist(media: GoogleApiYouTubePlaylistResource) {\r\n    this.queue.next(media);\r\n  }\r\n\r\n  onNavigateToPlaylist() {\r\n    this.loading = true;\r\n  }\r\n}\r\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin(...sources) {\n    let resultSelector;\n    if (typeof sources[sources.length - 1] === 'function') {\n        resultSelector = sources.pop();\n    }\n    if (sources.length === 1 && isArray(sources[0])) {\n        sources = sources[0];\n    }\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    if (resultSelector) {\n        return forkJoin(sources).pipe(map(args => resultSelector(...args)));\n    }\n    return new Observable(subscriber => {\n        return new ForkJoinSubscriber(subscriber, sources);\n    });\n}\nclass ForkJoinSubscriber extends OuterSubscriber {\n    constructor(destination, sources) {\n        super(destination);\n        this.sources = sources;\n        this.completed = 0;\n        this.haveValues = 0;\n        const len = sources.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const source = sources[i];\n            const innerSubscription = subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                this.add(innerSubscription);\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    }\n    notifyComplete(innerSub) {\n        const { destination, haveValues, values } = this;\n        const len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            destination.next(values);\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=forkJoin.js.map","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, ɵisPromise, ɵisObservable, forwardRef, Directive, Renderer2, ElementRef, Optional, Inject, Injectable, Injector, Input, ɵlooseIdentical, Host, isDevMode, Self, EventEmitter, SkipSelf, Output, Version, NgModule } from '@angular/core';\nimport { forkJoin, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControlDirective {\n    /**\n     * \\@description\n     * Reports the value of the control if it is present, otherwise null.\n     * @return {?}\n     */\n    get value() { return this.control ? this.control.value : null; }\n    /**\n     * \\@description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valid() { return this.control ? this.control.valid : null; }\n    /**\n     * \\@description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get invalid() { return this.control ? this.control.invalid : null; }\n    /**\n     * \\@description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     * @return {?}\n     */\n    get pending() { return this.control ? this.control.pending : null; }\n    /**\n     * \\@description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get disabled() { return this.control ? this.control.disabled : null; }\n    /**\n     * \\@description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get enabled() { return this.control ? this.control.enabled : null; }\n    /**\n     * \\@description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get errors() { return this.control ? this.control.errors : null; }\n    /**\n     * \\@description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get pristine() { return this.control ? this.control.pristine : null; }\n    /**\n     * \\@description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get dirty() { return this.control ? this.control.dirty : null; }\n    /**\n     * \\@description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get touched() { return this.control ? this.control.touched : null; }\n    /**\n     * \\@description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get status() { return this.control ? this.control.status : null; }\n    /**\n     * \\@description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get untouched() { return this.control ? this.control.untouched : null; }\n    /**\n     * \\@description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return null; }\n    /**\n     * \\@description\n     * Resets the control with the provided value if the control is present.\n     * @param {?=} value\n     * @return {?}\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * \\@publicApi\n * @abstract\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * \\@description\n     * The top-level form directive for the control.\n     * @return {?}\n     */\n    get formDirective() { return null; }\n    /**\n     * \\@description\n     * The path to this group.\n     * @return {?}\n     */\n    get path() { return null; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * \\@description\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * \\@usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * \\@description\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/** @type {?} */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * \\@description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * \\@publicApi\n */\nclass Validators {\n    /**\n     * \\@description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @param {?} min\n     * @return {?} A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static min(min) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @param {?} max\n     * @return {?} A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static max(max) {\n        return (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control have a non-empty value.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static required(control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     */\n    static requiredTrue(control) {\n        return control.value === true ? null : { 'required': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad\\@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @param {?} control\n     * @return {?} An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static email(control) {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @param {?} minLength\n     * @return {?} A validator function that returns an error map with the\n     * `minlength` if the validation check fails, otherwise `null`.\n     */\n    static minLength(minLength) {\n        return (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @param {?} maxLength\n     * @return {?} A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     */\n    static maxLength(maxLength) {\n        return (control) => {\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * Note that if a Regexp is provided, the Regexp is used as is to test the values. On the other\n     * hand, if a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * @param {?} pattern\n     * @return {?} A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     */\n    static pattern(pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        /** @type {?} */\n        let regex;\n        /** @type {?} */\n        let regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    }\n    /**\n     * \\@description\n     * Validator that performs no operation.\n     * @param {?} control\n     * @return {?}\n     */\n    static nullValidator(control) { return null; }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    static compose(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    }\n    /**\n     * \\@description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @param {?} validators\n     * @return {?} A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     */\n    static composeAsync(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            /** @type {?} */\n            const observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return forkJoin(observables).pipe(map(_mergeErrors));\n        };\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    /** @type {?} */\n    const obs = ɵisPromise(r) ? from(r) : r;\n    if (!(ɵisObservable(obs))) {\n        throw new Error(`Expected validator to return Promise or Observable.`);\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(v => v(control));\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(v => v(control));\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    /** @type {?} */\n    const res = arrayOfErrors.reduce((res, errors) => {\n        return errors != null ? Object.assign({}, (/** @type {?} */ (res)), errors) : (/** @type {?} */ (res));\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\n    multi: true,\n};\n/**\n * \\@description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * \\@usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass CheckboxControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"checked\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nCheckboxControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nCheckboxControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DefaultValueAccessor),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    /** @type {?} */\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * \\@description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * \\@publicApi\n * @type {?}\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * \\@description\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass DefaultValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    constructor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        /**\n         * \\@description\n         * The registered callback function called when an input event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _compositionStart() { this._composing = true; }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n}\nDefaultValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '$any(this)._handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '$any(this)._compositionStart()',\n                    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nDefaultValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (c) => ((/** @type {?} */ (validator))).validate(c);\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (c) => ((/** @type {?} */ (validator))).validate(c);\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberValueAccessor),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass NumberValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nNumberValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nNumberValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * \\@description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * \\@description\n         * The parent form for the control.\n         *\n         * \\@internal\n         */\n        this._parent = null;\n        /**\n         * \\@description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * \\@description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n        /**\n         * \\@description\n         * The uncomposed array of synchronous validators for the control\n         *\n         * \\@internal\n         */\n        this._rawValidators = [];\n        /**\n         * \\@description\n         * The uncomposed array of async validators for the control\n         *\n         * \\@internal\n         */\n        this._rawAsyncValidators = [];\n    }\n    /**\n     * \\@description\n     * The registered synchronous validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get validator() { return (/** @type {?} */ (unimplemented())); }\n    /**\n     * \\@description\n     * The registered async validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get asyncValidator() { return (/** @type {?} */ (unimplemented())); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioControlValueAccessor),\n    multi: true\n};\n/**\n * \\@description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * \\@description\n     * Adds a control to the internal registry. For internal use only.\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * \\@description\n     * Removes a control from the internal registry. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * \\@description\n     * Selects a radio button. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    select(accessor) {\n        this._accessors.forEach((c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    }\n    /**\n     * @private\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n}\nRadioControlRegistry.decorators = [\n    { type: Injectable }\n];\n/**\n * \\@description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass RadioControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _registry\n     * @param {?} _injector\n     */\n    constructor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = () => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive is initialized. For internal use only.\n     *\n     * @return {?}\n     */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     *\n     * @return {?}\n     */\n    ngOnDestroy() { this._registry.remove(this); }\n    /**\n     * \\@description\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = () => {\n            fn(this.value);\n            this._registry.select(this);\n        };\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    fireUncheck(value) { this.writeValue(value); }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _throwNameError() {\n        throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n    }\n}\nRadioControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRadioControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: RadioControlRegistry },\n    { type: Injector }\n];\nRadioControlValueAccessor.propDecorators = {\n    name: [{ type: Input }],\n    formControlName: [{ type: Input }],\n    value: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RangeValueAccessor),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass RangeValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nRangeValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRangeValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst FormErrorExamples = {\n    formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n    formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n    formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n    ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n    ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ReactiveErrors {\n    /**\n     * @return {?}\n     */\n    static controlParentException() {\n        throw new Error(`formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static ngModelGroupException() {\n        throw new Error(`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${FormErrorExamples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingFormException() {\n        throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static groupParentException() {\n        throw new Error(`formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formGroupName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static arrayParentException() {\n        throw new Error(`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${FormErrorExamples.formArrayName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static disabledAttrWarning() {\n        console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n    }\n    /**\n     * @param {?} directiveName\n     * @return {?}\n     */\n    static ngModelWarning(directiveName) {\n        console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}. \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective'\n            : 'FormControlName'}#use-with-ngmodel\n    `);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectControlValueAccessor),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the input element. The \"selectedIndex\"\n     * property is also set if an ID is provided on the option element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        const id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        /** @type {?} */\n        const valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _registerOption() { return (this._idCounter++).toString(); }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n}\nSelectControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgSelectOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nNgSelectOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectMultipleControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (_) => { };\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = () => { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * \\@description\n     * Sets the \"value\" property on one or of more\n     * of the select's options.\n     *\n     * @param {?} value The value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            /** @type {?} */\n            const ids = value.map((v) => this._getOptionId(v));\n            optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (_) => {\n            /** @type {?} */\n            const selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                /** @type {?} */\n                const options = _.selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    /** @type {?} */\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade on IE\n            else {\n                /** @type {?} */\n                const options = (/** @type {?} */ (_.options));\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    if (opt.selected) {\n                        /** @type {?} */\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        };\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _registerOption(value) {\n        /** @type {?} */\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith((/** @type {?} */ (this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? (/** @type {?} */ (this._optionMap.get(id)))._value : valueString;\n    }\n}\nSelectMultipleControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectMultipleControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectMultipleControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgSelectMultipleOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectMultipleOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nNgSelectMultipleOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectMultipleOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return [...(/** @type {?} */ (parent.path)), name];\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([(/** @type {?} */ (control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([(/** @type {?} */ (control.asyncValidator)), dir.asyncValidator]);\n    (/** @type {?} */ (dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if ((/** @type {?} */ (dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange((isDisabled) => { (/** @type {?} */ ((/** @type {?} */ (dir.valueAccessor)).setDisabledState))(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach((validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n    });\n    dir._rawAsyncValidators.forEach((validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))(() => control.updateValueAndValidity());\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange(() => _noControlError(dir));\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched(() => _noControlError(dir));\n    dir._rawValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach((validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange((newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched(() => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange((newValue, emitModelEvent) => {\n        // control -> view\n        (/** @type {?} */ (dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    /** @type {?} */\n    let messageEnd;\n    if ((/** @type {?} */ (dir.path)).length > 1) {\n        messageEnd = `path: '${(/** @type {?} */ (dir.path)).join(' -> ')}'`;\n    }\n    else if ((/** @type {?} */ (dir.path))[0]) {\n        messageEnd = `name: '${dir.path}'`;\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(`${message} ${messageEnd}`);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    /** @type {?} */\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !ɵlooseIdentical(viewModel, change.currentValue);\n}\n/** @type {?} */\nconst BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(dir => {\n        /** @type {?} */\n        const control = (/** @type {?} */ (dir.control));\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors))\n        _throwError(dir, 'Value accessor was not provided as an array for form control with');\n    /** @type {?} */\n    let defaultAccessor = undefined;\n    /** @type {?} */\n    let builtinAccessor = undefined;\n    /** @type {?} */\n    let customAccessor = undefined;\n    valueAccessors.forEach((v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\n/**\n * @param {?} name\n * @param {?} type\n * @param {?} instance\n * @param {?} warningConfig\n * @return {?}\n */\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (!isDevMode() || warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        ReactiveErrors.ngModelWarning(name);\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * \\@publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /**\n     * \\@description\n     * An internal callback method triggered on the instance after the inputs are set.\n     * Registers the group with its parent group.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormGroup(this);\n    }\n    /**\n     * \\@description\n     * An internal callback method triggered before the instance is destroyed.\n     * Removes the group from its parent group.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormGroup(this); }\n    /**\n     * \\@description\n     * The path to this group from the top-level directive.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, this._parent); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * The synchronous validators registered with this group.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * The async validators registered with this group.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { this._cd = cd; }\n    /**\n     * @return {?}\n     */\n    get ngClassUntouched() { return this._cd.control ? this._cd.control.untouched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassTouched() { return this._cd.control ? this._cd.control.touched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPristine() { return this._cd.control ? this._cd.control.pristine : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassDirty() { return this._cd.control ? this._cd.control.dirty : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassValid() { return this._cd.control ? this._cd.control.valid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassInvalid() { return this._cd.control ? this._cd.control.invalid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPending() { return this._cd.control ? this._cd.control.pending : false; }\n}\n/** @type {?} */\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * \\@description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * \\@usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { super(cd); }\n}\nNgControlStatus.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] }\n];\n/** @nocollapse */\nNgControlStatus.ctorParameters = () => [\n    { type: NgControl, decorators: [{ type: Self }] }\n];\n/**\n * \\@description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @see `NgControlStatus`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { super(cd); }\n}\nNgControlStatusGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            },] }\n];\n/** @nocollapse */\nNgControlStatusGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Self }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst VALID = 'VALID';\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n * @type {?}\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n * @type {?}\n */\nconst DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = ((/** @type {?} */ (path))).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return ((/** @type {?} */ (path))).reduce((v, name) => {\n        if (v instanceof FormGroup) {\n            return v.controls.hasOwnProperty((/** @type {?} */ (name))) ? v.controls[name] : null;\n        }\n        if (v instanceof FormArray) {\n            return v.at((/** @type {?} */ (name))) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    /** @type {?} */\n    const validator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).validators :\n        validatorOrOpts)));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    /** @type {?} */\n    const origAsyncValidator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).asyncValidators :\n        asyncValidator)));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param {?} validator The function that determines the synchronous validity of this control.\n     * @param {?} asyncValidator The function that determines the asynchronous validity of this\n     * control.\n     */\n    constructor(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = () => { };\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @return True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    /**\n     * The parent control.\n     * @return {?}\n     */\n    get parent() { return this._parent; }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() { return this.status === VALID; }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() { return this.status === INVALID; }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() { return this.status == PENDING; }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control is disabled, false otherwise.\n     */\n    get disabled() { return this.status === DISABLED; }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     */\n    get enabled() { return this.status !== DISABLED; }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @return {?} True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() { return !this.pristine; }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     * @return {?}\n     */\n    get untouched() { return !this.touched; }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     * @return {?}\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setValidators(newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setAsyncValidators(newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    clearValidators() { this.validator = null; }\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    clearAsyncValidators() { this.asyncValidator = null; }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see `markAsUntouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see `markAsTouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsUntouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((control) => { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsDirty(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsDirty()`\n     *\n     * @param {?=} opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * @return {?}\n     */\n    markAsPristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((control) => { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    markAsPending(opts = {}) {\n        ((/** @type {?} */ (this))).status = PENDING;\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    disable(opts = {}) {\n        ((/** @type {?} */ (this))).status = DISABLED;\n        ((/** @type {?} */ (this))).errors = null;\n        this._forEachChild((control) => { control.disable(Object.assign({}, opts, { onlySelf: true })); });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        this._updateAncestors(opts);\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    enable(opts = {}) {\n        ((/** @type {?} */ (this))).status = VALID;\n        this._forEachChild((control) => { control.enable(Object.assign({}, opts, { onlySelf: true })); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(opts);\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * @param {?} parent Sets the parent of the control\n     * @return {?}\n     */\n    setParent(parent) { this._parent = parent; }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param {?=} opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            ((/** @type {?} */ (this))).errors = this._runValidator();\n            ((/** @type {?} */ (this))).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setInitialStatus() {\n        ((/** @type {?} */ (this))).status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    /**\n     * @private\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            ((/** @type {?} */ (this))).status = PENDING;\n            /** @type {?} */\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe((errors) => this.setErrors(errors, { emitEvent }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * \\@usageNotes\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    setErrors(errors, opts = {}) {\n        ((/** @type {?} */ (this))).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * \\@usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @return {?}\n     */\n    get(path) { return _find(this, path, '.'); }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        /** @type {?} */\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     * @return {?}\n     */\n    get root() {\n        /** @type {?} */\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    _updateControlsErrors(emitEvent) {\n        ((/** @type {?} */ (this))).status = this._calculateStatus();\n        if (emitEvent) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _initObservables() {\n        ((/** @type {?} */ (this))).valueChanges = new EventEmitter();\n        ((/** @type {?} */ (this))).statusChanges = new EventEmitter();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((control) => control.status === status);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsDirty() {\n        return this._anyControls((control) => control.dirty);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsTouched() {\n        return this._anyControls((control) => control.touched);\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updatePristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    _isBoxedValue(formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    _registerOnCollectionChange(fn) { this._onCollectionChange = fn; }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && ((/** @type {?} */ (opts))).updateOn != null) {\n            this._updateOn = (/** @type {?} */ (((/** @type {?} */ (opts))).updateOn));\n        }\n    }\n}\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * \\@usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n * ```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n *\n * \\@publicApi\n */\nclass FormControl extends AbstractControl {\n    /**\n     * Creates a new `FormControl` instance.\n     *\n     * @param {?=} formState Initializes the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(formState = null, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        /**\n         * \\@internal\n         */\n        this._onChange = [];\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        this._initObservables();\n    }\n    /**\n     * Sets a new value for the form control.\n     *\n     * @param {?} value The new value for the control.\n     * @param {?=} options Configuration options that determine how the control proopagates changes\n     * and emits events when the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n     * `onChange` event to\n     * update the view.\n     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n     * `ngModelChange`\n     * event to update the model.\n     *\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        ((/** @type {?} */ (this))).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\n        }\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param {?=} formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    reset(formState = null, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) { return false; }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() { return this.disabled; }\n    /**\n     * Register a listener for change events.\n     *\n     * @param {?} fn The method that is called when the value changes\n     * @return {?}\n     */\n    registerOnChange(fn) { this._onChange.push(fn); }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _clearChangeFns() {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = () => { };\n    }\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param {?} fn The method that is called when the disabled status changes.\n     * @return {?}\n     */\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) { }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} formState\n     * @return {?}\n     */\n    _applyFormState(formState) {\n        if (this._isBoxedValue(formState)) {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState;\n        }\n    }\n}\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * \\@usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * \\@publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param {?} controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control.\n     * Use {\\@link FormGroup#addControl addControl} instead.\n     *\n     * @param {?} name The control name to register in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param {?} name The control name to add to the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    addControl(name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group.\n     *\n     * @param {?} name The control name to remove from the collection\n     * @return {?}\n     */\n    removeControl(name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} name The control name to replace in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    setControl(name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(() => { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     *\n     * @param {?} controlName\n     * @return {?} false for disabled controls, true otherwise.\n     */\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * \\@usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you excluding the value of a control.\n     *\n     * @param {?} value The new value for the control that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(name => {\n            this._throwIfControlMissing(name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param {?} value The object that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        Object.keys(value).forEach(name => {\n            if (this.controls[name]) {\n                this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * \\@usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @return {?}\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((control, name) => {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     * @return {?}\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            acc[name] = control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n            return acc;\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this._reduceChildren(false, (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    _throwIfControlMissing(name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.controls[name]) {\n            throw new Error(`Cannot find form control with name: ${name}.`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { ((/** @type {?} */ (this))).value = this._reduceValue(); }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        /** @type {?} */\n        let res = false;\n        this._forEachChild((control, name) => {\n            res = res || (this.contains(name) && condition(control));\n        });\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reduceValue() {\n        return this._reduceChildren({}, (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    }\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    _reduceChildren(initValue, fn) {\n        /** @type {?} */\n        let res = initValue;\n        this._forEachChild((control, name) => { res = fn(res, control, name); });\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, name) => {\n            if (value[name] === undefined) {\n                throw new Error(`Must supply a value for form control with name: '${name}'.`);\n            }\n        });\n    }\n}\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * \\@usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * \\@publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param {?} controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to retrieve the control\n     * @return {?}\n     */\n    at(index) { return this.controls[index]; }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    push(control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to insert the control\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    insert(index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to remove the control\n     * @return {?}\n     */\n    removeAt(index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} index Index in the array to replace the control\n     * @param {?} control The `AbstractControl` control to replace the existing control\n     * @return {?}\n     */\n    setControl(index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(() => { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     * @return {?}\n     */\n    get length() { return this.controls.length; }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * \\@usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param {?} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        value.forEach((newValue, index) => {\n            this._throwIfControlMissing(index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param {?} value Array of latest values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        value.forEach((newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * \\@usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param {?=} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    getRawValue() {\n        return this.controls.map((control) => {\n            return control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this.controls.reduce((updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    _throwIfControlMissing(index) {\n        if (!this.controls.length) {\n            throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.at(index)) {\n            throw new Error(`Cannot find form control at index ${index}`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        this.controls.forEach((control, index) => { cb(control, index); });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() {\n        ((/** @type {?} */ (this))).value =\n            this.controls.filter((control) => control.enabled || this.disabled)\n                .map((control) => control.value);\n    }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        return this.controls.some((control) => control.enabled && condition(control));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((control) => this._registerControl(control));\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((control, i) => {\n            if (value[i] === undefined) {\n                throw new Error(`Must supply a value for form control at index: ${i}.`);\n            }\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    /**\n     * @private\n     * @param {?} control\n     * @return {?}\n     */\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm)\n};\n/** @type {?} */\nconst resolvedPromise = Promise.resolve(null);\n/**\n * \\@description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * \\@usageNotes\n *\n * ### Migrating from deprecated ngForm selector\n *\n * Support for using `ngForm` element selector has been deprecated in Angular v6 and will be removed\n * in Angular v9.\n *\n * This has been deprecated to keep selectors consistent with other core Angular selectors,\n * as element selectors are typically written in kebab-case.\n *\n * Now deprecated:\n * ```html\n * <ngForm #myForm=\"ngForm\">\n * ```\n *\n * After:\n * ```html\n * <ng-form #myForm=\"ngForm\">\n * ```\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgForm extends ControlContainer {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(validators, asyncValidators) {\n        super();\n        /**\n         * \\@description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = [];\n        /**\n         * \\@description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /**\n     * \\@description\n     * Lifecycle method called after the view is initialized. For internal use only.\n     * @return {?}\n     */\n    ngAfterViewInit() { this._setUpdateStrategy(); }\n    /**\n     * \\@description\n     * The directive instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * The internal `FormGroup` instance.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Returns a map of the controls in this group.\n     * @return {?}\n     */\n    get controls() { return this.form.controls; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            ((/** @type {?} */ (dir))).control =\n                (/** @type {?} */ (container.registerControl(dir.name, dir.control)));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.push(dir);\n        });\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(this._directives, dir);\n        });\n    }\n    /**\n     * \\@description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            /** @type {?} */\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * \\@description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param {?} dir The `NgControl` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        resolvedPromise.then(() => {\n            /** @type {?} */\n            const ctrl = (/** @type {?} */ (this.form.get((/** @type {?} */ (dir.path)))));\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * \\@description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param {?} value The new value\n     * @return {?}\n     */\n    setValue(value) { this.control.setValue(value); }\n    /**\n     * \\@description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    _findContainer(path) {\n        path.pop();\n        return path.length ? (/** @type {?} */ (this.form.get(path))) : this.form;\n    }\n}\nNgForm.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,ng-form,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nNgForm.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgForm.propDecorators = {\n    options: [{ type: Input, args: ['ngFormOptions',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TemplateDrivenErrors {\n    /**\n     * @return {?}\n     */\n    static modelParentException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${FormErrorExamples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${FormErrorExamples.ngModelWithFormGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static formGroupNameException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingNameException() {\n        throw new Error(`If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n    }\n    /**\n     * @return {?}\n     */\n    static modelGroupParentException() {\n        throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static ngFormWarning() {\n        console.warn(`\n    It looks like you're using 'ngForm'.\n\n    Support for using the 'ngForm' element selector has been deprecated in Angular v6 and will be removed\n    in Angular v9.\n\n    Use 'ng-form' instead.\n\n    Before:\n    <ngForm #myForm=\"ngForm\">\n\n    After:\n    <ng-form #myForm=\"ngForm\">\n    `);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * `InjectionToken` to provide to turn off the warning when using 'ngForm' deprecated selector.\n * @type {?}\n */\nconst NG_FORM_SELECTOR_WARNING = new InjectionToken('NgFormSelectorWarning');\n/**\n * This directive is solely used to display warnings when the deprecated `ngForm` selector is used.\n *\n * @deprecated in Angular v6 and will be removed in Angular v9.\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgFormSelectorWarning {\n    /**\n     * @param {?} ngFormWarning\n     */\n    constructor(ngFormWarning) {\n        if (((!ngFormWarning || ngFormWarning === 'once') && !NgFormSelectorWarning._ngFormWarning) ||\n            ngFormWarning === 'always') {\n            TemplateDrivenErrors.ngFormWarning();\n            NgFormSelectorWarning._ngFormWarning = true;\n        }\n    }\n}\n/**\n * Static property used to track whether the deprecation warning for this selector has been sent.\n * Used to support warning config of \"once\".\n *\n * \\@internal\n */\nNgFormSelectorWarning._ngFormWarning = false;\nNgFormSelectorWarning.decorators = [\n    { type: Directive, args: [{ selector: 'ngForm' },] }\n];\n/** @nocollapse */\nNgFormSelectorWarning.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_FORM_SELECTOR_WARNING,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * \\@description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * \\@usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.decorators = [\n    { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] }\n];\n/** @nocollapse */\nNgModelGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgModelGroup.propDecorators = {\n    name: [{ type: Input, args: ['ngModelGroup',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n * @type {?}\n */\nconst resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex: `#myVar=\"ngModel\"`).\n * You then access the control using the directive's `control` property,\n * but most properties used (like `valid` and `dirty`) fall through to the control anyway for direct access.\n * See a full list of properties directly available in `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel name attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. The name attribute is used\n * within a custom form component, and the name `\\@Input` property serves a different purpose.\n *\n * ```html\n * <form>\n *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-person-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModel extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors) {\n        super();\n        this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        this._registered = false;\n        /**\n         * \\@description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal\n     * use only.\n     * @return {?}\n     */\n    ngOnDestroy() { this.formDirective && this.formDirective.removeControl(this); }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n    }\n    /**\n     * \\@description\n     * The top-level directive for this control if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value emitted by `ngModelChange`.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _updateValue(value) {\n        resolvedPromise$1.then(() => { this.control.setValue(value, { emitViewToModelChange: false }); });\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _updateDisabled(changes) {\n        /** @type {?} */\n        const disabledValue = changes['isDisabled'].currentValue;\n        /** @type {?} */\n        const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n        });\n    }\n}\nNgModel.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            },] }\n];\n/** @nocollapse */\nNgModel.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] }\n];\nNgModel.propDecorators = {\n    name: [{ type: Input }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    options: [{ type: Input, args: ['ngModelOptions',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n * @type {?}\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\n/** @type {?} */\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * \\@description\n * * Syncs a standalone `FormControl` instance to a form control element.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Registering a single form control\n *\n * The following examples shows how to register a standalone control and set its value.\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlDirective extends NgControl {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n                (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * The `FormControl` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.decorators = [\n    { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] }\n];\n/** @nocollapse */\nFormControlDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlDirective.propDecorators = {\n    form: [{ type: Input, args: ['formControl',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * \\@description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    constructor(_validators, _asyncValidators) {\n        super();\n        this._validators = _validators;\n        this._asyncValidators = _asyncValidators;\n        /**\n         * \\@description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * \\@description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * \\@description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = (/** @type {?} */ (null));\n        /**\n         * \\@description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    }\n    /**\n     * \\@description\n     * Returns this directive's instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * Returns the `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) { removeDir(this.directives, dir); }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form group.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Adds a new `FormArrayName` directive instance to the form.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    addFormArray(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form array.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    removeFormArray(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    getFormArray(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        /** @type {?} */\n        const ctrl = (/** @type {?} */ (this.form.get(dir.path)));\n        ctrl.setValue(value);\n    }\n    /**\n     * \\@description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateDomValue() {\n        this.directives.forEach(dir => {\n            /** @type {?} */\n            const newCtrl = this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                ((/** @type {?} */ (dir))).control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(() => this._updateDomValue());\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(() => { });\n        this._oldForm = this.form;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateValidators() {\n        /** @type {?} */\n        const sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([(/** @type {?} */ (this.form.validator)), (/** @type {?} */ (sync))]);\n        /** @type {?} */\n        const async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([(/** @type {?} */ (this.form.asyncValidator)), (/** @type {?} */ (async))]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkFormPresent() {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    }\n}\nFormGroupDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nFormGroupDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupDirective.propDecorators = {\n    form: [{ type: Input, args: ['formGroup',] }],\n    ngSubmit: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * \\@usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    }\n}\nFormGroupName.decorators = [\n    { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] }\n];\n/** @nocollapse */\nFormGroupName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupName.propDecorators = {\n    name: [{ type: Input, args: ['formGroupName',] }]\n};\n/** @type {?} */\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormArrayName extends ControlContainer {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     *\n     * @throws If the directive does not have a valid parent.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormArray(this);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormArray` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormArray(this); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() {\n        return this._parent ? (/** @type {?} */ (this._parent.formDirective)) : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, this._parent); }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    }\n}\nFormArrayName.decorators = [\n    { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] }\n];\n/** @nocollapse */\nFormArrayName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormArrayName.propDecorators = {\n    name: [{ type: Input, args: ['formArrayName',] }]\n};\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName)\n};\n/**\n * \\@description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in Angular v7.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before v7, you'll want to decide whether to stick with reactive form\n * directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlName extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return controlPath(this.name, (/** @type {?} */ (this._parent))); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return (/** @type {?} */ (composeAsyncValidators(this._rawAsyncValidators)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._checkParentType();\n        ((/** @type {?} */ (this))).control = this.formDirective.addControl(this);\n        if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n            (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] }\n];\n/** @nocollapse */\nFormControlName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlName.propDecorators = {\n    name: [{ type: Input, args: ['formControlName',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => RequiredValidator),\n    multi: true\n};\n/**\n * \\@description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass RequiredValidator {\n    /**\n     * \\@description\n     * Tracks changes to the required attribute bound to this directive.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = value != null && value !== false && `${value}` !== 'false';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether the control is empty.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.required(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\nRequiredValidator.propDecorators = {\n    required: [{ type: Input }]\n};\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    /**\n     * \\@description\n     * Method that validates whether or not the checkbox has been checked.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.requiredTrue(control) : null;\n    }\n}\nCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\n/**\n * \\@description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => EmailValidator),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass EmailValidator {\n    /**\n     * \\@description\n     * Tracks changes to the email attribute bound to this directive.\n     * @param {?} value\n     * @return {?}\n     */\n    set email(value) {\n        this._enabled = value === '' || value === true || value === 'true';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether an email address is valid.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this._enabled ? Validators.email(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nEmailValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            },] }\n];\nEmailValidator.propDecorators = {\n    email: [{ type: Input }]\n};\n/**\n * \\@description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` mult-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MinLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value meets a minimum length\n     * requirement. Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.minlength == null ? null : this._validator(control);\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    }\n}\nMinLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            },] }\n];\nMinLengthValidator.propDecorators = {\n    minlength: [{ type: Input }]\n};\n/**\n * \\@description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxLengthValidator),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MaxLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value exceeds\n     * the maximum length requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.maxlength != null ? this._validator(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    }\n}\nMaxLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            },] }\n];\nMaxLengthValidator.propDecorators = {\n    maxlength: [{ type: Input }]\n};\n/**\n * \\@description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => PatternValidator),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass PatternValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value matches the\n     * the pattern requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) { return this._validator(control); }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() { this._validator = Validators.pattern(this.pattern); }\n}\nPatternValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            },] }\n];\nPatternValidator.propDecorators = {\n    pattern: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} options\n * @return {?}\n */\nfunction isAbstractControlOptions(options) {\n    return ((/** @type {?} */ (options))).asyncValidators !== undefined ||\n        ((/** @type {?} */ (options))).validators !== undefined ||\n        ((/** @type {?} */ (options))).updateOn !== undefined;\n}\n/**\n * \\@description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass FormBuilder {\n    /**\n     * \\@description\n     * Construct a new `FormGroup` instance.\n     *\n     * @param {?} controlsConfig A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} options Configuration options object for the `FormGroup`. The object can\n     * have two shapes:\n     *\n     * 1) `AbstractControlOptions` object (preferred), which consists of:\n     * * `validators`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidators`: A single async validator or array of async validator functions\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n     * submit')\n     *\n     * 2) Legacy configuration object, which consists of:\n     * * `validator`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidator`: A single async validator or array of async validator functions\n     *\n     * @return {?}\n     */\n    group(controlsConfig, options = null) {\n        /** @type {?} */\n        const controls = this._reduceControls(controlsConfig);\n        /** @type {?} */\n        let validators = null;\n        /** @type {?} */\n        let asyncValidators = null;\n        /** @type {?} */\n        let updateOn = undefined;\n        if (options != null) {\n            if (isAbstractControlOptions(options)) {\n                // `options` are `AbstractControlOptions`\n                validators = options.validators != null ? options.validators : null;\n                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n                updateOn = options.updateOn != null ? options.updateOn : undefined;\n            }\n            else {\n                // `options` are legacy form group options\n                validators = options.validator != null ? options.validator : null;\n                asyncValidators = options.asyncValidator != null ? options.asyncValidator : null;\n            }\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n    /**\n     * \\@description\n     * Construct a new `FormControl` with the given state, validators and options.\n     *\n     * \\@usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\"\n     *   linenums=\"false\" region=\"disabled-control\">\n     * </code-example>\n     * @param {?} formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @return {?}\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * @param {?} controlsConfig An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     * @return {?}\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        /** @type {?} */\n        const controls = controlsConfig.map(c => this._createControl(c));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    _reduceControls(controlsConfig) {\n        /** @type {?} */\n        const controls = {};\n        Object.keys(controlsConfig).forEach(controlName => {\n            controls[controlName] = this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    }\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            /** @type {?} */\n            const value = controlConfig[0];\n            /** @type {?} */\n            const validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            /** @type {?} */\n            const asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    }\n}\nFormBuilder.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.7');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@publicApi\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass NgNoValidate {\n}\nNgNoValidate.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' },\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\n/** @type {?} */\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm, NgFormSelectorWarning];\n/** @type {?} */\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass InternalFormsSharedModule {\n}\nInternalFormsSharedModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Guide](/guide/forms)\n *\n * \\@publicApi\n */\nclass FormsModule {\n    /**\n     * \\@description\n     * Provides options for configuring the template-driven forms module.\n     *\n     * @param {?} opts An object of configuration options\n     * * `warnOnDeprecatedNgFormSelector` Configures when to emit a warning when the deprecated\n     * `ngForm` selector is used.\n     * @return {?}\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: FormsModule,\n            providers: [{ provide: NG_FORM_SELECTOR_WARNING, useValue: opts.warnOnDeprecatedNgFormSelector }]\n        };\n    }\n}\nFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            },] }\n];\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/reactive-forms)\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * \\@description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param {?} opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * @return {?}\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [{\n                    provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n                    useValue: opts.warnOnNgModelWithFormControl\n                }]\n        };\n    }\n}\nReactiveFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InternalFormsSharedModule as ɵangular_packages_forms_forms_bc, REACTIVE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_bb, SHARED_FORM_DIRECTIVES as ɵangular_packages_forms_forms_z, TEMPLATE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_ba, CHECKBOX_VALUE_ACCESSOR as ɵangular_packages_forms_forms_a, DEFAULT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_b, AbstractControlStatus as ɵangular_packages_forms_forms_c, ngControlStatusHost as ɵangular_packages_forms_forms_d, formDirectiveProvider as ɵangular_packages_forms_forms_e, NG_FORM_SELECTOR_WARNING as ɵangular_packages_forms_forms_f, formControlBinding as ɵangular_packages_forms_forms_g, modelGroupProvider as ɵangular_packages_forms_forms_h, NgNoValidate as ɵangular_packages_forms_forms_bh, NUMBER_VALUE_ACCESSOR as ɵangular_packages_forms_forms_bd, NumberValueAccessor as ɵangular_packages_forms_forms_be, RADIO_VALUE_ACCESSOR as ɵangular_packages_forms_forms_i, RadioControlRegistry as ɵangular_packages_forms_forms_j, RANGE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_bf, RangeValueAccessor as ɵangular_packages_forms_forms_bg, NG_MODEL_WITH_FORM_CONTROL_WARNING as ɵangular_packages_forms_forms_k, formControlBinding$1 as ɵangular_packages_forms_forms_l, controlNameBinding as ɵangular_packages_forms_forms_m, formDirectiveProvider$1 as ɵangular_packages_forms_forms_n, formArrayNameProvider as ɵangular_packages_forms_forms_p, formGroupNameProvider as ɵangular_packages_forms_forms_o, SELECT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_q, NgSelectMultipleOption as ɵangular_packages_forms_forms_s, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_r, CHECKBOX_REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_u, EMAIL_VALIDATOR as ɵangular_packages_forms_forms_v, MAX_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_x, MIN_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_w, PATTERN_VALIDATOR as ɵangular_packages_forms_forms_y, REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_t, AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgFormSelectorWarning, NgModel, NgModelGroup, RadioControlValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule };\n//# sourceMappingURL=forms.js.map\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require(\"@angular/core\");\n/* Action Creator Factory\n * ======================\n * Creates typed action creators functions\n * const addTodo = ActionCreatorFactory.create<string>('ADD_TODO')\n *\n **/\nvar ActionCreator = (function () {\n    function ActionCreator(type, payload) {\n        if (type === void 0) { type = 'NOT_SET'; }\n        this.type = type;\n        this.payload = payload;\n    }\n    return ActionCreator;\n}());\nexports.ActionCreator = ActionCreator;\nvar ActionCreatorFactory = (function () {\n    function ActionCreatorFactory() {\n    }\n    ActionCreatorFactory.create = function (type, defaultPayloadValue) {\n        return function (payload) {\n            var _payload = payload || typeof payload !== 'undefined' ? payload : defaultPayloadValue;\n            return new ActionCreator(type, _payload);\n        };\n    };\n    ActionCreatorFactory.prototype.create = function (type, defaultPayloadValue) {\n        return ActionCreatorFactory.create(type, defaultPayloadValue);\n    };\n    return ActionCreatorFactory;\n}());\nActionCreatorFactory = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [])\n], ActionCreatorFactory);\nexports.ActionCreatorFactory = ActionCreatorFactory;\n// export { NgrxActionCreatorFactoryModule } from './src/index';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdyeC1hY3Rpb24tY3JlYXRvci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmdyeC1hY3Rpb24tY3JlYXRvci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxzQ0FBMkM7QUFFM0M7Ozs7O0lBS0k7QUFDSjtJQUNFLHVCQUNTLElBQXdCLEVBQ3hCLE9BQVc7UUFEWCxxQkFBQSxFQUFBLGdCQUF3QjtRQUF4QixTQUFJLEdBQUosSUFBSSxDQUFvQjtRQUN4QixZQUFPLEdBQVAsT0FBTyxDQUFJO0lBQ2pCLENBQUM7SUFDTixvQkFBQztBQUFELENBQUMsQUFMRCxJQUtDO0FBTEQsc0NBS0M7QUFFRDtJQUFBO0lBV0EsQ0FBQztJQVZRLDJCQUFNLEdBQWIsVUFBa0IsSUFBWSxFQUFFLG1CQUF5QjtRQUN2RCxNQUFNLENBQUMsVUFBQyxPQUFXO1lBQ2pCLElBQU0sUUFBUSxHQUFHLE9BQU8sSUFBSSxPQUFPLE9BQU8sS0FBSyxXQUFXLEdBQUcsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1lBQzNGLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBSSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELHFDQUFNLEdBQU4sVUFBVyxJQUFZLEVBQUUsbUJBQXlCO1FBQ2hELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUksSUFBSSxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUNILDJCQUFDO0FBQUQsQ0FBQyxBQVhELElBV0M7QUFYRDtJQURDLGlCQUFVLEVBQUU7O3dCQVlaO0FBWFksK0JBQUEsb0JBQW9CLENBQUE7QUFhakMsZ0VBQWdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiBBY3Rpb24gQ3JlYXRvciBGYWN0b3J5XG4gKiA9PT09PT09PT09PT09PT09PT09PT09XG4gKiBDcmVhdGVzIHR5cGVkIGFjdGlvbiBjcmVhdG9ycyBmdW5jdGlvbnNcbiAqIGNvbnN0IGFkZFRvZG8gPSBBY3Rpb25DcmVhdG9yRmFjdG9yeS5jcmVhdGU8c3RyaW5nPignQUREX1RPRE8nKVxuICogXG4gKiovXG5leHBvcnQgY2xhc3MgQWN0aW9uQ3JlYXRvcjxUPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmcgPSAnTk9UX1NFVCcsXG4gICAgcHVibGljIHBheWxvYWQ/OiBUXG4gICkge31cbn1cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY3Rpb25DcmVhdG9yRmFjdG9yeSB7XG4gIHN0YXRpYyBjcmVhdGU/PFQ+KHR5cGU6IHN0cmluZywgZGVmYXVsdFBheWxvYWRWYWx1ZT86IGFueSkge1xuICAgIHJldHVybiAocGF5bG9hZD86IFQpOiBBY3Rpb25DcmVhdG9yPGFueT4gPT4ge1xuICAgICAgY29uc3QgX3BheWxvYWQgPSBwYXlsb2FkIHx8IHR5cGVvZiBwYXlsb2FkICE9PSAndW5kZWZpbmVkJyA/IHBheWxvYWQgOiBkZWZhdWx0UGF5bG9hZFZhbHVlO1xuICAgICAgcmV0dXJuIG5ldyBBY3Rpb25DcmVhdG9yPFQ+KHR5cGUsIF9wYXlsb2FkKTtcbiAgICB9O1xuICB9XG5cbiAgY3JlYXRlPzxUPih0eXBlOiBzdHJpbmcsIGRlZmF1bHRQYXlsb2FkVmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gQWN0aW9uQ3JlYXRvckZhY3RvcnkuY3JlYXRlPFQ+KHR5cGUsIGRlZmF1bHRQYXlsb2FkVmFsdWUpO1xuICB9XG59XG5cbi8vIGV4cG9ydCB7IE5ncnhBY3Rpb25DcmVhdG9yRmFjdG9yeU1vZHVsZSB9IGZyb20gJy4vc3JjL2luZGV4JztcbiJdfQ==","import { Pipe, PipeTransform } from '@angular/core';\r\nimport memo from 'memo-decorator';\r\n\r\n@Pipe({\r\n  name: 'toFriendlyDuration'\r\n})\r\nexport class ToFriendlyDurationPipe implements PipeTransform {\r\n  @memo()\r\n  transform(value: any, args?: any[]): any {\r\n    const time = <string>value;\r\n    if (!time) {\r\n      return '...';\r\n    }\r\n    return ['PT', 'H', 'M', 'S']\r\n      .reduce(\r\n        (prev, cur, i, arr) => {\r\n          const now = prev.rest.split(cur);\r\n          if (cur !== 'PT' && cur !== 'H' && !prev.rest.match(cur)) {\r\n            prev.new.push('00');\r\n          }\r\n          if (now.length === 1) {\r\n            return prev;\r\n          }\r\n          prev.new.push(now[0]);\r\n          return {\r\n            rest: now[1].replace(cur, ''),\r\n            new: prev.new\r\n          };\r\n        },\r\n        { rest: time, new: [] }\r\n      )\r\n      .new.filter(_time => _time !== '')\r\n      .map(_time => (_time.length === 1 ? `0${_time}` : _time))\r\n      .join(':');\r\n  }\r\n}\r\n","function TimeoutErrorImpl() {\n    Error.call(this);\n    this.message = 'Timeout has occurred';\n    this.name = 'TimeoutError';\n    return this;\n}\nTimeoutErrorImpl.prototype = Object.create(Error.prototype);\nexport const TimeoutError = TimeoutErrorImpl;\n//# sourceMappingURL=TimeoutError.js.map","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function timeoutWith(due, withObservable, scheduler = async) {\n    return (source) => {\n        let absoluteTimeout = isDate(due);\n        let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nclass TimeoutWithOperator {\n    constructor(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    }\n}\nclass TimeoutWithSubscriber extends OuterSubscriber {\n    constructor(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        super(destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    static dispatchTimeout(subscriber) {\n        const { withObservable } = subscriber;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    }\n    scheduleTimeout() {\n        const { action } = this;\n        if (action) {\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    }\n    _next(value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        super._next(value);\n    }\n    _unsubscribe() {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    }\n}\n//# sourceMappingURL=timeoutWith.js.map","export function isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\n//# sourceMappingURL=isDate.js.map","import { async } from '../scheduler/async';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { timeoutWith } from './timeoutWith';\nimport { throwError } from '../observable/throwError';\nexport function timeout(due, scheduler = async) {\n    return timeoutWith(due, throwError(new TimeoutError()), scheduler);\n}\n//# sourceMappingURL=timeout.js.map","import { Subscriber } from '../Subscriber';\nexport function retry(count = -1) {\n    return (source) => source.lift(new RetryOperator(count, source));\n}\nclass RetryOperator {\n    constructor(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    }\n}\nclass RetrySubscriber extends Subscriber {\n    constructor(destination, count, source) {\n        super(destination);\n        this.count = count;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { source, count } = this;\n            if (count === 0) {\n                return super.error(err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    }\n}\n//# sourceMappingURL=retry.js.map","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = memoize;\n","import { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nclass DoOperator {\n    constructor(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    }\n}\nclass TapSubscriber extends Subscriber {\n    constructor(destination, observerOrNext, error, complete) {\n        super(destination);\n        this._tapNext = noop;\n        this._tapError = noop;\n        this._tapComplete = noop;\n        this._tapError = error || noop;\n        this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            this._context = this;\n            this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            this._context = observerOrNext;\n            this._tapNext = observerOrNext.next || noop;\n            this._tapError = observerOrNext.error || noop;\n            this._tapComplete = observerOrNext.complete || noop;\n        }\n    }\n    _next(value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    }\n    _error(err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    }\n}\n//# sourceMappingURL=tap.js.map","import { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\nexport function share() {\n    return (source) => refCount()(multicast(shareSubjectFactory)(source));\n}\n//# sourceMappingURL=share.js.map","import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\n\r\n@Injectable()\r\nexport class ActionTypes {\r\n  static PLAY = '[Player] PLAY';\r\n  static PAUSE = '[Player] PAUSE';\r\n  static SETUP_PLAYER = '[Player] SETUP_PLAYER';\r\n  static LOAD_AND_PLAY = '[Player] LOAD_AND_PLAY';\r\n  static QUEUE = '[Player] REMOVE';\r\n  static PLAY_STARTED = '[Player] PLAY_STARTED';\r\n  static TOGGLE_PLAYER = '[Player] TOGGLE_PLAYER';\r\n  static UPDATE_STATE = '[Player] STATE_CHANGE';\r\n  static PLAYER_STATE_CHANGE = '[Player] PLAYER_STATE_CHANGE';\r\n  static FULLSCREEN = '[Player] FULLSCREEN';\r\n  static RESET = '[Player] RESET';\r\n  static LOAD_NEXT_TRACK = '[Player] LOAD_NEXT_TRACK';\r\n  static RESET_FULLSCREEN = '[Player] RESET_FULLSCREEN';\r\n}\r\n\r\nexport class PlayVideo implements Action {\r\n  public type = ActionTypes.PLAY;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\n\r\nexport class PauseVideo implements Action {\r\n  public type = ActionTypes.PAUSE;\r\n  constructor(public payload = '') {}\r\n}\r\n\r\nexport class TogglePlayer implements Action {\r\n  public type = ActionTypes.TOGGLE_PLAYER;\r\n  constructor(public payload: boolean = true) {}\r\n}\r\n\r\nexport class LoadNextTrack implements Action {\r\n  public type = ActionTypes.LOAD_NEXT_TRACK;\r\n  public payload = '';\r\n}\r\n\r\nexport class LoadAndPlay implements Action {\r\n  public type = ActionTypes.LOAD_AND_PLAY;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\n\r\nexport class PlayStarted implements Action {\r\n  public type = ActionTypes.PLAY_STARTED;\r\n  constructor(public payload: GoogleApiYouTubeVideoResource) {}\r\n}\r\n\r\nexport class UpdateState implements Action {\r\n  public type = ActionTypes.UPDATE_STATE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class FullScreen implements Action {\r\n  public type = ActionTypes.FULLSCREEN;\r\n  public payload = '';\r\n}\r\n\r\nexport class ResetFullScreen implements Action {\r\n  public type = ActionTypes.RESET_FULLSCREEN;\r\n  public payload = '';\r\n}\r\n\r\nexport class Reset implements Action {\r\n  public type = ActionTypes.RESET;\r\n  public payload = '';\r\n}\r\n\r\nexport class SetupPlayer implements Action {\r\n  public type = ActionTypes.SETUP_PLAYER;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class PlayerStateChange implements Action {\r\n  public type = ActionTypes.PLAYER_STATE_CHANGE;\r\n  constructor(public payload: YT.PlayerState) {}\r\n}\r\n\r\nexport type Actions =\r\n  | PlayVideo\r\n  | TogglePlayer\r\n  | LoadNextTrack\r\n  | LoadAndPlay\r\n  | PlayStarted\r\n  | UpdateState\r\n  | FullScreen\r\n  | Reset\r\n  | any;\r\n","import { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=refCount.js.map","import { ActionCreatorFactory } from 'ngrx-action-creator-factory';\r\nimport { Injectable } from '@angular/core';\r\nimport { GoogleBasicProfile } from './user-profile.reducer';\r\nimport { Action } from '@ngrx/store';\r\n\r\n@Injectable()\r\nexport class UserProfileActions {\r\n  static UPDATE = '[UserProfile] UPDATE';\r\n  static ADD_PLAYLISTS = '[UserProfile] ADD_PLAYLISTS';\r\n  static UPDATE_TOKEN = '[UserProfile] UPDATE_TOKEN';\r\n  static UPDATE_NEXT_PAGE_TOKEN = '[UserProfile] UPDATE_NEXT_PAGE_TOKEN';\r\n  static USER_PROFILE_COMPLETED = '[UserProfile] USER_PROFILE_COMPLETED';\r\n  static UPDATE_USER_PROFILE = '[UserProfile] UPDATE_USER_PROFILE';\r\n  static USER_PROFILE_RECIEVED = '[UserProfile] USER_PROFILE_RECIEVED';\r\n  static VIEWED_PLAYLIST = '[UserProfile] VIEWED_PLAYLIST';\r\n\r\n  static CHECK_USER_AUTH = '[UserProfile] CHECK_USER_AUTH';\r\n  static USER_SIGNIN = '[UserProfile] USER_SIGNIN';\r\n  static USER_SIGNIN_START = '[UserProfile] USER_SIGNIN_START';\r\n  static USER_SIGNIN_SUCCESS = '[UserProfile] USER_SIGNIN_SUCCESS';\r\n\r\n  static USER_SIGNOUT = '[UserProfile] USER_SIGNOUT';\r\n  static USER_SIGNOUT_SUCCESS = '[UserProfile] USER_SIGNOUT_SUCCESS';\r\n  static USER_PLAYLISTS_FETCH_ERROR = '[UserProfile] USER_PLAYLISTS_FETCH_ERROR';\r\n\r\n  setViewPlaylist = ActionCreatorFactory.create<string>(UserProfileActions.VIEWED_PLAYLIST);\r\n\r\n  updateData = (data: any) => ({ type: UserProfileActions.UPDATE, payload: data });\r\n\r\n  addPlaylists(playlists: Array<any>) {\r\n    return {\r\n      type: UserProfileActions.ADD_PLAYLISTS,\r\n      payload: playlists\r\n    };\r\n  }\r\n\r\n  updateToken = (payload: string) => ({ type: UserProfileActions.UPDATE_TOKEN, payload });\r\n\r\n  updatePageToken(token: string) {\r\n    return {\r\n      type: UserProfileActions.UPDATE_NEXT_PAGE_TOKEN,\r\n      payload: token\r\n    };\r\n  }\r\n\r\n  userProfileCompleted() {\r\n    return {\r\n      type: UserProfileActions.USER_PROFILE_COMPLETED\r\n    };\r\n  }\r\n\r\n  userProfileRecieved(profile: any) {\r\n    return {\r\n      type: UserProfileActions.USER_PROFILE_RECIEVED,\r\n      payload: profile\r\n    };\r\n  }\r\n\r\n  updateUserProfile(profile: GoogleBasicProfile) {\r\n    return {\r\n      type: UserProfileActions.UPDATE_USER_PROFILE,\r\n      payload: profile\r\n    };\r\n  }\r\n}\r\n\r\nexport class UserSignin implements Action {\r\n  readonly type = UserProfileActions.USER_SIGNIN;\r\n  constructor() {}\r\n}\r\n\r\nexport class UserSigninStart implements Action {\r\n  readonly type = UserProfileActions.USER_SIGNIN_START;\r\n  constructor() {}\r\n}\r\n\r\nexport class UserSigninSuccess implements Action {\r\n  readonly type = UserProfileActions.USER_SIGNIN_SUCCESS;\r\n  constructor(public payload: gapi.auth2.GoogleUser) { }\r\n}\r\n\r\nexport class UserSignout implements Action {\r\n  readonly type = UserProfileActions.USER_SIGNOUT;\r\n}\r\n\r\nexport class UserSignoutSuccess implements Action {\r\n  readonly type = UserProfileActions.USER_SIGNOUT_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class CheckUserAuth implements Action {\r\n  readonly type = UserProfileActions.CHECK_USER_AUTH;\r\n  constructor () {}\r\n}\r\nexport class UserPlaylistsFetchError implements Action {\r\n  readonly type = UserProfileActions.USER_PLAYLISTS_FETCH_ERROR;\r\n  constructor (public payload: any) {}\r\n}\r\n","<div class=\"youtube-playlist-item ux-maker card\">\r\n  <section class=\"media-title front\">\r\n    <div\r\n      class=\"media-thumb\"\r\n      [tooltip]=\"media.snippet.title\">\r\n      <div class=\"thumbnail is-rounded\">\r\n        <img\r\n          [src]=\"media | videoToThumb\"\r\n          class=\"thumb-image\">\r\n      </div>\r\n      <button\r\n        class=\"btn btn-transparent text-primary btn-lg play-media\"\r\n        (click)=\"playPlaylist(media)\">\r\n        <icon name=\"youtube-play 2x\"></icon>\r\n      </button>\r\n    </div>\r\n\r\n    <section class=\"item-actions is-absolute is-rounded-bottom\">\r\n      <a\r\n        class=\"playlist-link\"\r\n        [routerLink]=\"[ link + '/playlist', media.id ]\"\r\n        [tooltip]=\"media.snippet.title\"\r\n        (click)=\"onNavigateToPlaylist()\">\r\n        <h4 class=\"title ellipsis\">\r\n          {{ media.snippet.title }}\r\n        </h4>\r\n        <section class=\"text-info is-flex-row is-flex-valign\">\r\n          <icon name=\"list-ul\"></icon>\r\n          <span class=\"is-flex-1\">{{ media.contentDetails.itemCount }}</span>\r\n          <icon\r\n            *ngIf=\"loading\"\r\n            name=\"refresh spin\"\r\n            class=\"loader\"></icon>\r\n        </section>\r\n      </a>\r\n    </section>\r\n  </section>\r\n</div>\r\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nconst toString = Object.prototype.toString;\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        function handler(e) {\n            if (arguments.length > 1) {\n                subscriber.next(Array.prototype.slice.call(arguments));\n            }\n            else {\n                subscriber.next(e);\n            }\n        }\n        setupSubscription(target, eventName, handler, subscriber, options);\n    });\n}\nfunction setupSubscription(sourceObj, eventName, handler, subscriber, options) {\n    let unsubscribe;\n    if (isEventTarget(sourceObj)) {\n        const source = sourceObj;\n        sourceObj.addEventListener(eventName, handler, options);\n        unsubscribe = () => source.removeEventListener(eventName, handler, options);\n    }\n    else if (isJQueryStyleEventEmitter(sourceObj)) {\n        const source = sourceObj;\n        sourceObj.on(eventName, handler);\n        unsubscribe = () => source.off(eventName, handler);\n    }\n    else if (isNodeStyleEventEmitter(sourceObj)) {\n        const source = sourceObj;\n        sourceObj.addListener(eventName, handler);\n        unsubscribe = () => source.removeListener(eventName, handler);\n    }\n    else if (sourceObj && sourceObj.length) {\n        for (let i = 0, len = sourceObj.length; i < len; i++) {\n            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n        }\n    }\n    else {\n        throw new TypeError('Invalid event target');\n    }\n    subscriber.add(unsubscribe);\n}\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isEventTarget(sourceObj) {\n    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n//# sourceMappingURL=fromEvent.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map","export function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map","\n<div class=\"tooltip {{ placement }}\"\n     [style.top]=\"top + 'px'\"\n     [style.left]=\"left + 'px'\"\n     [class.in]=\"isIn\"\n     [class.fade]=\"isFade\"\n     role=\"tooltip\">\n    <div class=\"tooltip-arrow\"></div> \n    <div class=\"tooltip-inner\">\n        <ng-content></ng-content>\n        {{ content }}\n    </div> \n</div>\n","import { Observable } from '../Observable';\nexport function throwError(error, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscriber => subscriber.error(error));\n    }\n    else {\n        return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n    }\n}\nfunction dispatch({ error, subscriber }) {\n    subscriber.error(error);\n}\n//# sourceMappingURL=throwError.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule, ErrorHandler } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HttpClientJsonpModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { CoreModule } from './core';\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { APP_CORE_MODULES } from './core/components';\r\nimport { APP_CONTAINER_MODULES } from './containers';\r\nimport { ROUTES } from './app.routes';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { environment } from '../environments/environment';\r\nimport { AppErrorHandler } from './core/services/error-handler';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    HttpClientJsonpModule,\r\n    RouterModule.forRoot(ROUTES, { useHash: true }),\r\n    BrowserAnimationsModule,\r\n\r\n    CoreModule,\r\n    SharedModule,\r\n    ...APP_CORE_MODULES,\r\n    ...APP_CONTAINER_MODULES,\r\n    ServiceWorkerModule.register('/ngsw-worker.js', {\r\n      enabled: environment.production\r\n    })\r\n  ],\r\n  providers: [{ provide: ErrorHandler, useClass: AppErrorHandler }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","import { Store, select } from '@ngrx/store';\r\nimport { VersionCheckerService } from './core/services/version-checker.service';\r\nimport { Component, HostBinding, OnInit } from '@angular/core';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { getSidebarCollapsed, getAppTheme } from '@store/app-core';\r\nimport { AppApi } from '@core/api/app.api';\r\n\r\n@Component({\r\n  selector: 'body',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  sidebarCollapsed$ = this.store.pipe(select(getSidebarCollapsed));\r\n  theme$ = this.store.select(getAppTheme);\r\n\r\n  @HostBinding('class') style = 'arctic';\r\n\r\n  constructor(\r\n    private store: Store<EchoesState>,\r\n    private appApi: AppApi,\r\n    private versionCheckerService: VersionCheckerService\r\n  ) {\r\n    this.versionCheckerService.start();\r\n    this.appApi.checkUserAuth();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.theme$.subscribe(theme => (this.style = theme));\r\n  }\r\n}\r\n","\n  <ng-template #suggestionsTplRef>\n  <section class=\"ta-results list-group\" *ngIf=\"showSuggestions\">\n    <div class=\"ta-backdrop\" (click)=\"hideSuggestions()\"></div>\n    <button type=\"button\" class=\"ta-item list-group-item\"\n      *ngFor=\"let result of results; let i = index;\"\n      [class.active]=\"markIsActive(i, result)\"\n      (click)=\"handleSelectionClick(result, i)\">\n      <span *ngIf=\"!taItemTpl\"><i class=\"fa fa-search\"></i> {{ result }}</span>\n      <ng-template\n        [ngTemplateOutlet]=\"taItemTpl\"\n        [ngTemplateOutletContext]=\"{ $implicit: {result: result, index: i} }\"\n      ></ng-template>\n    </button>\n  </section>\n  </ng-template>\n  ","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { debounceTime, filter } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'player-search',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./player-search.scss'],\r\n  template: `\r\n    <form class=\"navbar-form form-search\" id=\"media-explorer\"\r\n      [formGroup]=\"searchForm\"\r\n      >\r\n      <div class=\"form-group clearfix is-flex-row\">\r\n        <input placeholder=\"Search\" id=\"media-search\"\r\n          #mediaSearch\r\n          ngxTypeahead\r\n          [taUrl]=\"'//suggestqueries.google.com/complete/search'\"\r\n          [taParams]=\"params\"\r\n          [taAllowEmpty]=\"true\"\r\n          (taSelected)=\"handleSelectSuggestion($event)\"\r\n          type=\"search\" class=\"form-control\" autocomplete=\"off\"\r\n          name=\"mediaSearch\"\r\n          formControlName=\"searchInput\"\r\n          >\r\n        <button class=\"btn btn-transparent btn-submit\" tooltip=\"search with echoes\">\r\n          <icon name=\"search\"></icon>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PlayerSearchComponent implements OnChanges, OnDestroy {\r\n  @Input() query;\r\n  @Output() queryChange = new EventEmitter<string>();\r\n  @Output() search = new EventEmitter();\r\n  // @Output() typing = new EventEmitter<string>();\r\n\r\n  @ViewChild('mediaSearch') mediaSearch;\r\n\r\n  searchForm: FormGroup;\r\n  formState: Subscription;\r\n\r\n  params = {\r\n    hl: 'en',\r\n    ds: 'yt',\r\n    xhr: 't',\r\n    client: 'youtube'\r\n  };\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.searchForm = fb.group({\r\n      searchInput: this.query\r\n    });\r\n    this.formState = this.searchForm.valueChanges\r\n      .pipe(\r\n        debounceTime(400),\r\n        filter(value => !value.hasOwnProperty('isTrusted'))\r\n      )\r\n      .subscribe(formState => {\r\n        this.onQueryChange(formState.searchInput);\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const changedQuery = changes && changes.query;\r\n    if (\r\n      changedQuery &&\r\n      changedQuery.currentValue &&\r\n      changedQuery.currentValue.hasOwnProperty('length')\r\n    ) {\r\n      this.patchSearchInput(changedQuery.currentValue);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.formState.unsubscribe();\r\n  }\r\n\r\n  patchSearchInput(searchInput: string) {\r\n    this.searchForm.patchValue({ searchInput }, { emitEvent: false });\r\n  }\r\n\r\n  onQueryChange(query: string) {\r\n    this.queryChange.emit(query);\r\n  }\r\n\r\n  onSearch() {\r\n    const searchFormState = this.searchForm.value;\r\n    this.selectSuggestion(searchFormState.searchInput);\r\n  }\r\n\r\n  handleSelectSuggestion(suggestion: string) {\r\n    this.selectSuggestion(suggestion);\r\n  }\r\n\r\n  selectSuggestion(suggestion: string) {\r\n    if (!suggestion.hasOwnProperty('isTrusted')) this.search.emit(suggestion);\r\n  }\r\n}\r\n","\n    <form class=\"navbar-form form-search\" id=\"media-explorer\"\n      [formGroup]=\"searchForm\"\n      >\n      <div class=\"form-group clearfix is-flex-row\">\n        <input placeholder=\"Search\" id=\"media-search\"\n          #mediaSearch\n          ngxTypeahead\n          [taUrl]=\"'//suggestqueries.google.com/complete/search'\"\n          [taParams]=\"params\"\n          [taAllowEmpty]=\"true\"\n          (taSelected)=\"handleSelectSuggestion($event)\"\n          type=\"search\" class=\"form-control\" autocomplete=\"off\"\n          name=\"mediaSearch\"\n          formControlName=\"searchInput\"\n          >\n        <button class=\"btn btn-transparent btn-submit\" tooltip=\"search with echoes\">\n          <icon name=\"search\"></icon>\n        </button>\n      </div>\n    </form>\n  ","import { Injectable } from '@angular/core';\r\nimport { ActionCreatorFactory } from 'ngrx-action-creator-factory';\r\nimport { Action } from '@ngrx/store';\r\n\r\nexport enum ActionTypes {\r\n  ADD = '[Videos] ADD',\r\n  SET_SELECTED_VIDEO = '[Videos] SET_SELECTED_VIDEO',\r\n  UPDATE_FILTER = '[PlayerSearch] UPDATE_FILTER',\r\n  UPDATE_QUERY_PARAM = '[PlayerSearch] UPDATE_QUERY_PARAM',\r\n  UPDATE_QUERY = '[PlayerSearch] UPDATE_QUERY',\r\n  SEARCH_NEW_QUERY = '[PlayerSearch] SEARCH_NEW_QUERY',\r\n  SEARCH_MORE_FOR_QUERY = '[PlayerSearch] SEARCH_MORE_FOR_QUERY',\r\n  GET_SUGGESTIONS = '[PlayerSearch] GET_SUGGESTIONS',\r\n  RESET_PAGE_TOKEN = '[PlayerSearch] RESET_PAGE_TOKEN',\r\n  SEARCH_RESULTS_RETURNED = '[PlayerSearch] SERACH_RESULTS_RETURNED',\r\n  SEARCH_CURRENT_QUERY = '[PlayerSearch] SEARCH_CURRENT_QUERY',\r\n  SEARCH_STARTED = '[PlayerSearch] SEARCH_STARTED',\r\n  SEARCH_TYPE_UPDATE = '[PlayerSearch] SEARCH_TYPE_UPDATE',\r\n  ADD_PLAYLISTS_TO_RESULTS = '[PlayerSearch] ADD_PLAYLISTS_TO_RESULTS',\r\n  ADD_METADATA_TO_VIDEOS = '[PlayerSearch] ADD_METADATA_TO_VIDEOS',\r\n  PLAYLISTS_SEARCH_START = '[PlayerSearch] PLAYLISTS_SEARCH_START',\r\n  ADD_RESULTS = '[PlayerSearch] ADD_RESULTS',\r\n  RESET_RESULTS = '[PlayerSearch] RESET_RESULTS',\r\n  ERROR_RESULTS = '[PlayerSearch] ERROR_RESULTS'\r\n}\r\n@Injectable()\r\nexport class PlayerSearchActions {\r\n  // @ActionCreator({\r\n  //   type: 'UPDATE_FILTER',\r\n  //   payload: string\r\n  // })\r\n  // @ActionCreator<string>(PlayerSearchActions.UPDATE_FILTER)\r\n  // update;\r\n  static UPDATE_FILTER = '[PlayerSearch] UPDATE_FILTER';\r\n  static UPDATE_QUERY_PARAM = '[PlayerSearch] UPDATE_QUERY_PARAM';\r\n  static UPDATE_QUERY = '[PlayerSearch] UPDATE_QUERY';\r\n  static SEARCH_NEW_QUERY = '[PlayerSearch] SEARCH_NEW_QUERY';\r\n  static SEARCH_MORE_FOR_QUERY = '[PlayerSearch] SEARCH_MORE_FOR_QUERY';\r\n  static GET_SUGGESTIONS = '[PlayerSearch] GET_SUGGESTIONS';\r\n  static RESET_PAGE_TOKEN = '[PlayerSearch] RESET_PAGE_TOKEN';\r\n  static SEARCH_RESULTS_RETURNED = '[PlayerSearch] SERACH_RESULTS_RETURNED';\r\n  static SEARCH_CURRENT_QUERY = '[PlayerSearch] SEARCH_CURRENT_QUERY';\r\n  static SEARCH_STARTED = '[PlayerSearch] SEARCH_STARTED';\r\n  static SEARCH_TYPE_UPDATE = '[PlayerSearch] SEARCH_TYPE_UPDATE';\r\n  static ADD_PLAYLISTS_TO_RESULTS = {\r\n    action: '[PlayerSearch] ADD_PLAYLISTS_TO_RESULTS',\r\n    creator: payload => ({\r\n      payload,\r\n      type: PlayerSearchActions.ADD_PLAYLISTS_TO_RESULTS.action\r\n    })\r\n  };\r\n\r\n  static ADD_METADATA_TO_VIDEOS = {\r\n    action: '[PlayerSearch] ADD_METADATA_TO_VIDEOS',\r\n    creator: payload => ({\r\n      payload,\r\n      type: PlayerSearchActions.ADD_METADATA_TO_VIDEOS.action\r\n    })\r\n  };\r\n\r\n  static PLAYLISTS_SEARCH_START = {\r\n    action: '[PlayerSearch] PLAYLISTS_SEARCH_START',\r\n    creator: () => ({ type: PlayerSearchActions.PLAYLISTS_SEARCH_START.action })\r\n  };\r\n\r\n  // Results Actions\r\n  static ADD_RESULTS = '[PlayerSearch] ADD_RESULTS';\r\n  static RESET_RESULTS = '[PlayerSearch] RESET_RESULTS';\r\n  static ERROR_RESULTS = '[PlayerSearch] ERROR_RESULTS';\r\n\r\n  getSuggestions = ActionCreatorFactory.create<string>(\r\n    PlayerSearchActions.GET_SUGGESTIONS\r\n  );\r\n  searchNewQuery = ActionCreatorFactory.create<string>(\r\n    PlayerSearchActions.SEARCH_NEW_QUERY\r\n  );\r\n  searchMoreForQuery = ActionCreatorFactory.create(\r\n    PlayerSearchActions.SEARCH_MORE_FOR_QUERY\r\n  );\r\n  updateFilter = ActionCreatorFactory.create(PlayerSearchActions.UPDATE_FILTER);\r\n  updateQueryParam = ActionCreatorFactory.create<any>(\r\n    PlayerSearchActions.UPDATE_QUERY_PARAM\r\n  );\r\n  resetPageToken = ActionCreatorFactory.create<any>(\r\n    PlayerSearchActions.RESET_PAGE_TOKEN\r\n  );\r\n  searchResultsReturned = ActionCreatorFactory.create<any>(\r\n    PlayerSearchActions.SEARCH_RESULTS_RETURNED\r\n  );\r\n  searchStarted = ActionCreatorFactory.create(\r\n    PlayerSearchActions.SEARCH_STARTED\r\n  );\r\n  // addResults = ActionCreatorFactory.create(PlayerSearchActions.ADD_RESULTS);\r\n  resetResults = ActionCreatorFactory.create(PlayerSearchActions.RESET_RESULTS);\r\n  errorInSearch = ActionCreatorFactory.create<any>(\r\n    PlayerSearchActions.ERROR_RESULTS\r\n  );\r\n}\r\n\r\nexport class UpdateQueryAction {\r\n  public type = PlayerSearchActions.UPDATE_QUERY;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class UpdateSearchType {\r\n  public type = PlayerSearchActions.SEARCH_TYPE_UPDATE;\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class SearchCurrentQuery {\r\n  public type = PlayerSearchActions.SEARCH_CURRENT_QUERY;\r\n  constructor() {}\r\n}\r\n\r\n// export class AddResults implements Action {\r\n//   readonly type = PlayerSearchActions.ADD_RESULTS;\r\n//   constructor(public payload: GoogleApiYouTubeVideoResource[]) { }\r\n// }\r\n\r\nexport const AddResultsAction = {\r\n  type: PlayerSearchActions.ADD_RESULTS,\r\n  creator(payload: GoogleApiYouTubeVideoResource[]) {\r\n    return { payload, type: this.type };\r\n  },\r\n  handler(state, payload: GoogleApiYouTubeVideoResource[]) {\r\n    return {\r\n      ...state,\r\n      results: [...state.results, ...payload],\r\n      isSearching: false\r\n    };\r\n  }\r\n};\r\n","export interface IQueryParam {\r\n  preset: string;\r\n  duration: number;\r\n}\r\nexport interface IPlayerSearch {\r\n  query: string;\r\n  filter: string;\r\n  searchType: string;\r\n  queryParams: IQueryParam;\r\n  presets: IPresetParam[];\r\n  pageToken: {\r\n    next: string;\r\n    prev: string;\r\n  };\r\n  isSearching: boolean;\r\n  results: any[];\r\n}\r\n\r\nexport interface ISearchQueryParam {\r\n  [property: string]: any;\r\n}\r\n\r\nexport interface IPresetParam {\r\n  label: string;\r\n  value: CPresetTypes | string;\r\n}\r\n\r\nexport class CSearchTypes {\r\n  static VIDEO =  'video';\r\n  static PLAYLIST = 'playlist';\r\n}\r\n\r\nexport class CPresetTypes {\r\n  static FULL_ALBUMS = 'full albums';\r\n  static LIVE = 'live';\r\n}\r\n","import { Action } from '@ngrx/store';\r\nimport { PlayerSearchActions, AddResultsAction } from './player-search.actions';\r\nimport {\r\n  IPlayerSearch,\r\n  CSearchTypes,\r\n  CPresetTypes\r\n} from './player-search.interfaces';\r\n\r\nexport * from './player-search.interfaces';\r\n\r\nconst initialState: IPlayerSearch = {\r\n  query: '',\r\n  filter: '',\r\n  searchType: CSearchTypes.VIDEO,\r\n  queryParams: {\r\n    preset: '',\r\n    duration: -1\r\n  },\r\n  presets: [\r\n    { label: 'Any', value: '' },\r\n    { label: 'Albums', value: CPresetTypes.FULL_ALBUMS },\r\n    { label: 'Live', value: CPresetTypes.LIVE }\r\n  ],\r\n  pageToken: {\r\n    next: '',\r\n    prev: ''\r\n  },\r\n  isSearching: false,\r\n  results: []\r\n};\r\ninterface UnsafeAction {\r\n  payload: any;\r\n  type?: any;\r\n}\r\n\r\nexport function search(\r\n  state: IPlayerSearch = initialState,\r\n  action: any\r\n): IPlayerSearch {\r\n  switch (action.type) {\r\n    case PlayerSearchActions.UPDATE_QUERY: {\r\n      return { ...state, query: action.payload };\r\n    }\r\n\r\n    case PlayerSearchActions.SEARCH_NEW_QUERY:\r\n      return {\r\n        ...state,\r\n        query: action.payload,\r\n        isSearching: true\r\n      };\r\n\r\n    case PlayerSearchActions.UPDATE_QUERY_PARAM:\r\n      const queryParams = { ...state.queryParams, ...action.payload };\r\n      return { ...state, queryParams };\r\n\r\n    case PlayerSearchActions.SEARCH_RESULTS_RETURNED:\r\n      const { nextPageToken, prevPageToken } = action.payload;\r\n      const statePageToken = state.pageToken;\r\n      const pageToken = {\r\n        next: nextPageToken || statePageToken.next,\r\n        prev: prevPageToken || statePageToken.prev\r\n      };\r\n      return { ...state, pageToken };\r\n\r\n    case PlayerSearchActions.SEARCH_STARTED:\r\n      return { ...state, isSearching: true };\r\n\r\n    case AddResultsAction.type:\r\n      return AddResultsAction.handler(state, action.payload);\r\n\r\n    case PlayerSearchActions.RESET_RESULTS:\r\n      return { ...state, results: [] };\r\n\r\n    case PlayerSearchActions.SEARCH_TYPE_UPDATE: {\r\n      return {\r\n        ...state,\r\n        searchType: action.payload\r\n      };\r\n    }\r\n    case PlayerSearchActions.PLAYLISTS_SEARCH_START.action: {\r\n      return { ...state, isSearching: true };\r\n    }\r\n\r\n    default:\r\n      // upgrade policy - for when the initialState has changed\r\n      return { ...initialState, ...state };\r\n  }\r\n}\r\n","import { Store, createSelector } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { IPlayerSearch, IQueryParam } from './player-search.reducer';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\nexport const getPlayerSearch = (state: EchoesState) => state.search;\r\nexport const getPlayerSearchResults = createSelector(getPlayerSearch, (search: IPlayerSearch) => search.results);\r\nexport const getQuery = createSelector(getPlayerSearch, (search: IPlayerSearch) => search.query);\r\nexport const getQueryParams = createSelector(getPlayerSearch, (search: IPlayerSearch) => search.queryParams);\r\nexport const getQueryParamPreset = createSelector(\r\n  getPlayerSearch,\r\n  getQueryParams,\r\n  (search: IPlayerSearch, queryParams: IQueryParam) => queryParams.preset\r\n);\r\nexport const getSearchType = createSelector(getPlayerSearch, (search: IPlayerSearch) => search.searchType);\r\nexport const getIsSearching = createSelector(getPlayerSearch, (search: IPlayerSearch) => search.isSearching);\r\nexport const getPresets = createSelector(getPlayerSearch, (search: IPlayerSearch) => search.presets);\r\n","import { Component, Input, OnInit, ChangeDetectionStrategy } from '@angular/core';\r\nimport { CSearchTypes } from '@core/store/player-search';\r\n\r\n@Component({\r\n  selector: 'search-navigator',\r\n  styleUrls: ['./search-navigator.component.scss'],\r\n  template: `\r\n  <ul class=\"nav nav-tabs search-selector\" role=\"tablist\">\r\n    <li *ngFor=\"let search of searchTypes\"\r\n      routerLinkActive=\"active\"\r\n      [routerLinkActiveOptions]=\"{ exact: true }\">\r\n      <a routerLink=\"{{ search.link }}\">{{ search.label }}</a>\r\n    </li>\r\n  </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SearchNavigatorComponent implements OnInit {\r\n  searchTypes = [\r\n    { label: 'Videos', link: '/search/videos', type: CSearchTypes.VIDEO },\r\n    { label: 'Playlists', link: '/search/playlists', type: CSearchTypes.PLAYLIST },\r\n  ];\r\n\r\n  ngOnInit() { }\r\n}\r\n","\n  <ul class=\"nav nav-tabs search-selector\" role=\"tablist\">\n    <li *ngFor=\"let search of searchTypes\"\n      routerLinkActive=\"active\"\n      [routerLinkActiveOptions]=\"{ exact: true }\">\n      <a routerLink=\"{{ search.link }}\">{{ search.label }}</a>\n    </li>\n  </ul>\n  ","import { Component, OnInit } from '@angular/core';\r\nimport { select, Store } from '@ngrx/store';\r\nimport { EchoesState } from '@core/store';\r\n\r\n// selectors\r\nimport * as UserProfile from '@core/store/user-profile';\r\nimport * as fromPlayerSearch from '@core/store/player-search';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  styleUrls: ['./app-search.scss'],\r\n  template: `\r\n  <article\r\n    infiniteScroll\r\n    [infiniteScrollDistance]=\"2\"\r\n    [infiniteScrollDisabled]=\"currentPlaylist$ | async\"\r\n    (scrolled)=\"searchMore()\"\r\n    [immediateCheck]=\"true\">\r\n    <app-navbar>\r\n      <div class=\"navbar-header\">\r\n        <player-search\r\n          [query]=\"query$ | async\"\r\n          (queryChange)=\"resetPageToken($event)\"\r\n          (search)=\"search($event)\"\r\n        ></player-search>\r\n      </div>\r\n      <button-group class=\"nav-toolbar\"\r\n        [buttons]=\"presets$ | async\"\r\n        [selectedButton]=\"queryParamPreset$ | async\"\r\n        (buttonClick)=\"updatePreset($event)\"\r\n      ></button-group>\r\n      <search-navigator></search-navigator>\r\n    </app-navbar>\r\n    <router-outlet></router-outlet>\r\n    </article>\r\n    `\r\n})\r\nexport class AppSearchComponent implements OnInit {\r\n  query$ = this.store.pipe(select(fromPlayerSearch.getQuery));\r\n  currentPlaylist$ = this.store.pipe(select(UserProfile.getUserViewPlaylist));\r\n  queryParamPreset$ = this.store.pipe(\r\n    select(fromPlayerSearch.getQueryParamPreset)\r\n  );\r\n  presets$ = this.store.pipe(select(fromPlayerSearch.getPresets));\r\n\r\n  constructor(\r\n    private store: Store<EchoesState>,\r\n    private playerSearchActions: fromPlayerSearch.PlayerSearchActions\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  search(query: string) {\r\n    if (!query.hasOwnProperty('isTrusted')) {\r\n      this.store.dispatch(this.playerSearchActions.searchNewQuery(query));\r\n    }\r\n  }\r\n\r\n  resetPageToken(query: string) {\r\n    this.store.dispatch(this.playerSearchActions.resetPageToken());\r\n    this.store.dispatch(new fromPlayerSearch.UpdateQueryAction(query));\r\n  }\r\n\r\n  searchMore() {\r\n    this.store.dispatch(this.playerSearchActions.searchMoreForQuery());\r\n  }\r\n\r\n  updatePreset(preset: fromPlayerSearch.IPresetParam) {\r\n    this.store.dispatch(\r\n      this.playerSearchActions.updateQueryParam({ preset: preset.value })\r\n    );\r\n  }\r\n}\r\n","\n  <article\n    infiniteScroll\n    [infiniteScrollDistance]=\"2\"\n    [infiniteScrollDisabled]=\"currentPlaylist$ | async\"\n    (scrolled)=\"searchMore()\"\n    [immediateCheck]=\"true\">\n    <app-navbar>\n      <div class=\"navbar-header\">\n        <player-search\n          [query]=\"query$ | async\"\n          (queryChange)=\"resetPageToken($event)\"\n          (search)=\"search($event)\"\n        ></player-search>\n      </div>\n      <button-group class=\"nav-toolbar\"\n        [buttons]=\"presets$ | async\"\n        [selectedButton]=\"queryParamPreset$ | async\"\n        (buttonClick)=\"updatePreset($event)\"\n      ></button-group>\n      <search-navigator></search-navigator>\n    </app-navbar>\n    <router-outlet></router-outlet>\n    </article>\n    ","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'loader',\r\n  styleUrls: ['./loading-indicator.scss'],\r\n  template: `\r\n  <div class=\"alert alert-info\">\r\n    <icon name=\"circle-o-notch spin\"></icon> {{ message }}\r\n  </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LoadingIndicatorComponent {\r\n  @Input() message = '';\r\n  @Input() loading = false;\r\n\r\n  @HostBinding('class.show-loader')\r\n  get show() {\r\n    return this.loading;\r\n  }\r\n}\r\n","\n  <div class=\"alert alert-info\">\n    <icon name=\"circle-o-notch spin\"></icon> {{ message }}\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { EchoesState } from '@core/store';\r\n\r\n// actions\r\nimport * as fromNowPlaylist from '@core/store/now-playlist';\r\nimport * as fromPlayer from '@core/store/app-player';\r\nimport * as fromPlayerSearch from '@core/store/player-search';\r\nimport { AppPlayerApi } from '@core/api/app-player.api';\r\n\r\n// selectors\r\nimport * as NowPlaylist from '@core/store/now-playlist';\r\n\r\n@Component({\r\n  selector: 'youtube-videos',\r\n  styleUrls: ['./youtube-videos.scss'],\r\n  template: `\r\n    <loader [message]=\"'Loading Awesome Media Results'\" [loading]=\"loading$ | async\"></loader>\r\n    <youtube-list\r\n      [list]=\"videos$ | async\"\r\n      [queued]=\"playlistIds$ | async\"\r\n      (play)=\"playSelectedVideo($event)\"\r\n      (queue)=\"queueSelectedVideo($event)\"\r\n      (unqueue)=\"removeVideoFromPlaylist($event)\"\r\n    ></youtube-list>\r\n  `\r\n})\r\nexport class YoutubeVideosComponent implements OnInit {\r\n  videos$ = this.store.select(fromPlayerSearch.getPlayerSearchResults);\r\n  playlistIds$ = this.store.select(NowPlaylist.getPlaylistMediaIds);\r\n  loading$ = this.store.select(fromPlayerSearch.getIsSearching);\r\n\r\n  constructor(\r\n    private store: Store<EchoesState>,\r\n    private appPlayerApi: AppPlayerApi\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.store.dispatch(\r\n      new fromPlayerSearch.UpdateSearchType(fromPlayerSearch.CSearchTypes.VIDEO)\r\n    );\r\n    this.store.dispatch(new fromPlayerSearch.SearchCurrentQuery());\r\n  }\r\n\r\n  playSelectedVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.appPlayerApi.playVideo(media);\r\n  }\r\n\r\n  queueSelectedVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.appPlayerApi.queueVideo(media);\r\n  }\r\n\r\n  removeVideoFromPlaylist(media: GoogleApiYouTubeVideoResource) {\r\n    this.appPlayerApi.removeVideoFromPlaylist(media);\r\n  }\r\n}\r\n","\n    <loader [message]=\"'Loading Awesome Media Results'\" [loading]=\"loading$ | async\"></loader>\n    <youtube-list\n      [list]=\"videos$ | async\"\n      [queued]=\"playlistIds$ | async\"\n      (play)=\"playSelectedVideo($event)\"\n      (queue)=\"queueSelectedVideo($event)\"\n      (unqueue)=\"removeVideoFromPlaylist($event)\"\n    ></youtube-list>\n  ","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { EchoesState } from '@core/store';\r\n\r\n// actions\r\nimport * as fromNowPlaylist from '@core/store/now-playlist';\r\nimport * as fromAppPlayer from '@core/store/app-player';\r\n// selectors\r\nimport * as fromPlayerSearch from '@core/store/player-search';\r\nimport { AppPlayerApi } from '@core/api/app-player.api';\r\n\r\nimport { fadeInAnimation } from '@shared/animations/fade-in.animation';\r\n\r\n@Component({\r\n  selector: 'youtube-playlists',\r\n  animations: [fadeInAnimation],\r\n  template: `\r\n  <loader [message]=\"'Loading Awesome Playlists Results'\" [loading]=\"isSearching$ | async\"></loader>\r\n  <section class=\"videos-list\">\r\n    <div class=\"ux-maker is-flex-row is-flex-wrap is-content-aligned-h\">\r\n      <youtube-playlist class=\"is-media-responsive\"\r\n        [@fadeIn]\r\n        *ngFor=\"let playlist of results$ | async\"\r\n        link=\"\"\r\n        [media]=\"playlist\"\r\n        (play)=\"playPlaylist(playlist)\"\r\n        (queue)=\"queueSelectedPlaylist(playlist)\">\r\n      </youtube-playlist>\r\n    </div>\r\n  </section>\r\n  `\r\n})\r\nexport class YoutubePlaylistsComponent implements OnInit {\r\n  results$ = this.store.select(fromPlayerSearch.getPlayerSearchResults);\r\n  isSearching$ = this.store.select(fromPlayerSearch.getIsSearching);\r\n\r\n  constructor(\r\n    private store: Store<EchoesState>,\r\n    private appPlayerApi: AppPlayerApi\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.store.dispatch(\r\n      new fromPlayerSearch.UpdateSearchType(\r\n        fromPlayerSearch.CSearchTypes.PLAYLIST\r\n      )\r\n    );\r\n    this.store.dispatch(\r\n      fromPlayerSearch.PlayerSearchActions.PLAYLISTS_SEARCH_START.creator()\r\n    );\r\n  }\r\n\r\n  playPlaylist(media: GoogleApiYouTubePlaylistResource) {\r\n    this.appPlayerApi.playPlaylist(media);\r\n  }\r\n\r\n  queueSelectedPlaylist(media: GoogleApiYouTubePlaylistResource) {\r\n    this.appPlayerApi.queuePlaylist(media);\r\n  }\r\n}\r\n","\n  <loader [message]=\"'Loading Awesome Playlists Results'\" [loading]=\"isSearching$ | async\"></loader>\n  <section class=\"videos-list\">\n    <div class=\"ux-maker is-flex-row is-flex-wrap is-content-aligned-h\">\n      <youtube-playlist class=\"is-media-responsive\"\n        [@fadeIn]\n        *ngFor=\"let playlist of results$ | async\"\n        link=\"\"\n        [media]=\"playlist\"\n        (play)=\"playPlaylist(playlist)\"\n        (queue)=\"queueSelectedPlaylist(playlist)\">\n      </youtube-playlist>\n    </div>\n  </section>\n  ","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'image-blur',\r\n  styleUrls: ['./image-blur.scss'],\r\n  template: `\r\n  <div class=\"media-bg\" [ngStyle]=\"style\"></div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ImageBlurComponent {\r\n  @Input() media: GoogleApiYouTubeVideoResource;\r\n  get style() {\r\n    const hasMedia = this.media && this.media.snippet;\r\n    return {\r\n      backgroundImage: hasMedia\r\n        ? `url(${this.extractBestImage(hasMedia.thumbnails as any)})`\r\n        : ''\r\n    };\r\n  }\r\n\r\n  extractBestImage(thumbnails: GoogleApiYouTubeThumbnailResource) {\r\n    const quality =\r\n      thumbnails && thumbnails.hasOwnProperty('high') ? 'high' : 'default';\r\n    const hasContent = thumbnails && quality && thumbnails[quality];\r\n    return hasContent ? thumbnails[quality].url : '';\r\n  }\r\n}\r\n","\n  <div class=\"media-bg\" [ngStyle]=\"style\"></div>\n  ","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'player-resizer',\r\n  styleUrls: ['./player-resizer.scss'],\r\n  template: `\r\n    <button title=\"minimize / maximize player\"\r\n      [class.full-screen]=\"!fullScreen\"\r\n      (click)=\"togglePlayer()\"\r\n      class=\"btn btn-sm navbar-btn show-player pull-right\">\r\n      <icon name=\"chevron-down\" class=\"icon-minimize\"></icon>\r\n      <icon name=\"expand\" class=\"icon-max\"></icon>\r\n    </button>\r\n  `\r\n})\r\nexport class PlayerResizerComponent implements OnInit {\r\n  @Input() fullScreen: boolean;\r\n  @Output() toggle = new EventEmitter<void>();\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n  togglePlayer() {\r\n    this.toggle.next();\r\n  }\r\n}\r\n","\n    <button title=\"minimize / maximize player\"\n      [class.full-screen]=\"!fullScreen\"\n      (click)=\"togglePlayer()\"\n      class=\"btn btn-sm navbar-btn show-player pull-right\">\n      <icon name=\"chevron-down\" class=\"icon-minimize\"></icon>\n      <icon name=\"expand\" class=\"icon-max\"></icon>\n    </button>\n  ","\n    <div id=\"yt-player-ngx-component\"></div>\n  ","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { MediaParserService } from '@core/services/media-parser.service';\r\nimport memo from 'memo-decorator';\r\n\r\n@Pipe({ name: 'parseTracks' })\r\nexport class ParseTracksPipe implements PipeTransform {\r\n  constructor(private mediaParser: MediaParserService) {}\r\n\r\n  @memo()\r\n  transform(value: any): any {\r\n    return this.mediaParser.parseTracks(value);\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  AfterContentInit,\r\n  Output,\r\n  HostListener\r\n} from '@angular/core';\r\nimport { MediaParserService } from '../../../../core/services';\r\n\r\n@Component({\r\n  selector: 'media-info',\r\n  styleUrls: ['./media-info.scss'],\r\n  template: `\r\n  <article class=\"media-info is-flex-row is-flex-valign\">\r\n    <aside class=\"media-thumb-container\"\r\n    title=\"maximize / minimize\"\r\n    (click)=\"handleThumbClick()\">\r\n      <img class=\"media-thumb\" *ngIf=\"player.media.snippet.thumbnails\" [src]=\"player?.media?.snippet?.thumbnails?.default?.url\">\r\n      <icon name=\"code 2x\" *ngIf=\"!player.media.snippet.thumbnails\"></icon>\r\n      <icon name=\"arrows-alt\" [class.invisible]=\"_minimized\" class=\"minimize-icon\"></icon>\r\n    </aside>\r\n    <section class=\"title ellipsis\">{{ player?.media?.snippet?.title }}</section>\r\n    <article class=\"track-info\" [ngClass]=\"{ 'show-info': displayInfo }\">\r\n      <nav class=\"is-flex-row is-justify-right is-sticky\">\r\n        <button (click)=\"toggleInfo()\" class=\"btn btn-default\">\r\n          <icon name=\"close\"></icon>\r\n          Close\r\n        </button>\r\n      </nav>\r\n      {{ player.media.snippet.description }}\r\n      <div class=\"track-tracks list-group\" *ngIf=\"hasTracks()\">\r\n        <h3 class=\"text-primary\">Tracks (Select &amp; Play)</h3>\r\n        <button class=\"list-group-item btn-transparent\"\r\n          *ngFor=\"let track of tracks | parseTracks\"\r\n          (click)=\"handleSelectTrack($event, track, player.media)\">\r\n          {{ track }}\r\n        </button>\r\n      </div>\r\n    </article>\r\n    <button class=\"btn btn-transparent text-info more-info-btn\" (click)=\"toggleInfo()\">\r\n      <icon name=\"info-circle 2x\"></icon>\r\n    </button>\r\n  </article>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MediaInfoComponent implements OnInit, AfterContentInit {\r\n  @Input() player: any = {};\r\n  @Input() minimized: GoogleApiYouTubeVideoResource;\r\n  @Output() thumbClick = new EventEmitter();\r\n  @Output() seekTrack = new EventEmitter();\r\n\r\n  displayInfo = false;\r\n  tracks: string[] = [];\r\n\r\n  constructor(public mediaParser: MediaParserService) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngAfterContentInit() {\r\n    if (this.player.media) {\r\n      this.extractTracks(this.player.media);\r\n    }\r\n  }\r\n\r\n  extractTracks(media: GoogleApiYouTubeVideoResource) {\r\n    const tracks = this.mediaParser.extractTracks(media.snippet.description);\r\n    if (Array.isArray(tracks)) {\r\n      this.tracks = tracks;\r\n    }\r\n  }\r\n\r\n  @HostListener('window:keyup.Escape', ['$event'])\r\n  keyEvent(event: KeyboardEvent) {\r\n    if (this.player.fullscreen.on) {\r\n      this.handleThumbClick();\r\n    }\r\n  }\r\n\r\n  handleThumbClick() {\r\n    this.thumbClick.next();\r\n  }\r\n\r\n  toggleInfo() {\r\n    this.displayInfo = !this.displayInfo;\r\n  }\r\n\r\n  handleSelectTrack(\r\n    $event: Event,\r\n    track: string,\r\n    media: GoogleApiYouTubeVideoResource\r\n  ) {\r\n    $event.stopImmediatePropagation();\r\n    const time = this.mediaParser.extractTime(track);\r\n    if (time) {\r\n      this.seekTrack.emit({ time: time[0], media });\r\n    }\r\n  }\r\n\r\n  hasTracks() {\r\n    return this.tracks.length > 0;\r\n  }\r\n\r\n  get _minimized() {\r\n    return !this.minimized.hasOwnProperty('id');\r\n  }\r\n}\r\n","\n  <article class=\"media-info is-flex-row is-flex-valign\">\n    <aside class=\"media-thumb-container\"\n    title=\"maximize / minimize\"\n    (click)=\"handleThumbClick()\">\n      <img class=\"media-thumb\" *ngIf=\"player.media.snippet.thumbnails\" [src]=\"player?.media?.snippet?.thumbnails?.default?.url\">\n      <icon name=\"code 2x\" *ngIf=\"!player.media.snippet.thumbnails\"></icon>\n      <icon name=\"arrows-alt\" [class.invisible]=\"_minimized\" class=\"minimize-icon\"></icon>\n    </aside>\n    <section class=\"title ellipsis\">{{ player?.media?.snippet?.title }}</section>\n    <article class=\"track-info\" [ngClass]=\"{ 'show-info': displayInfo }\">\n      <nav class=\"is-flex-row is-justify-right is-sticky\">\n        <button (click)=\"toggleInfo()\" class=\"btn btn-default\">\n          <icon name=\"close\"></icon>\n          Close\n        </button>\n      </nav>\n      {{ player.media.snippet.description }}\n      <div class=\"track-tracks list-group\" *ngIf=\"hasTracks()\">\n        <h3 class=\"text-primary\">Tracks (Select &amp; Play)</h3>\n        <button class=\"list-group-item btn-transparent\"\n          *ngFor=\"let track of tracks | parseTracks\"\n          (click)=\"handleSelectTrack($event, track, player.media)\">\n          {{ track }}\n        </button>\n      </div>\n    </article>\n    <button class=\"btn btn-transparent text-info more-info-btn\" (click)=\"toggleInfo()\">\n      <icon name=\"info-circle 2x\"></icon>\n    </button>\n  </article>\n  ","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  HostBinding\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'player-controls',\r\n  styleUrls: ['./player-controls.scss'],\r\n  template: `\r\n  <div class=\"btn-group player-controls is-flex-row\">\r\n    <button *ngFor=\"let control of controls\"\r\n      [title]=\"control.title\"\r\n      class=\"btn btn-default btn-lg\"\r\n      [ngClass]=\"[control.feature]\"\r\n      (click)=\"handleControl(control)\">\r\n      <icon [name]=\"control.icon\"></icon>\r\n    </button>\r\n  </div>\r\n  `\r\n})\r\nexport class PlayerControlsComponent {\r\n  @Input() media: GoogleApiYouTubeVideoResource;\r\n  @HostBinding('class.yt-repeat-on')\r\n  @Input()\r\n  isRepeat = false;\r\n  @HostBinding('class.yt-playing')\r\n  @Input()\r\n  playing = false;\r\n  @Output() play = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output() pause = new EventEmitter();\r\n  @Output() previous = new EventEmitter();\r\n  @Output() next = new EventEmitter();\r\n  @Output() repeat = new EventEmitter();\r\n\r\n  controls = [\r\n    {\r\n      title: 'previous',\r\n      icon: 'step-backward',\r\n      handler: this.handlePrevious,\r\n      feature: 'previous'\r\n    },\r\n    {\r\n      title: 'pause',\r\n      icon: 'pause',\r\n      handler: this.handlePause,\r\n      feature: 'pause'\r\n    },\r\n    {\r\n      title: 'play',\r\n      icon: 'play',\r\n      handler: this.handlePlay,\r\n      feature: 'play'\r\n    },\r\n    {\r\n      title: 'play next track',\r\n      icon: 'step-forward',\r\n      handler: this.handleNext,\r\n      feature: 'next'\r\n    },\r\n    {\r\n      title: 'repeat playlist',\r\n      icon: 'repeat',\r\n      handler: this.handleRepeat,\r\n      feature: 'repeat'\r\n    }\r\n  ];\r\n\r\n  handlePlay() {\r\n    this.play.emit(this.media);\r\n  }\r\n\r\n  handlePrevious() {\r\n    this.previous.emit();\r\n  }\r\n\r\n  handlePause() {\r\n    this.pause.emit();\r\n  }\r\n\r\n  handleNext() {\r\n    this.next.emit();\r\n  }\r\n\r\n  handleRepeat() {\r\n    this.repeat.emit();\r\n  }\r\n\r\n  handleControl(control) {\r\n    control.handler.call(this);\r\n  }\r\n}\r\n","\n  <div class=\"btn-group player-controls is-flex-row\">\n    <button *ngFor=\"let control of controls\"\n      [title]=\"control.title\"\n      class=\"btn btn-default btn-lg\"\n      [ngClass]=\"[control.feature]\"\n      (click)=\"handleControl(control)\">\n      <icon [name]=\"control.icon\"></icon>\n    </button>\n  </div>\n  ","import { NowPlaylistEffects } from '@core/effects/now-playlist.effects';\r\nimport * as AppPlayer from '@store/app-player';\r\nimport * as NowPlaylist from '@store/now-playlist/now-playlist.selectors';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  OnInit,\r\n  OnDestroy,\r\n  Output\r\n} from '@angular/core';\r\n\r\nimport { NowPlaylistService } from '@core/services';\r\nimport { AppPlayerApi } from '@api/app-player.api';\r\n\r\n@Component({\r\n  selector: 'app-player',\r\n  styleUrls: ['./app-player.scss'],\r\n  template: `\r\n  <section\r\n    [class.show-youtube-player]=\"isShowPlayer$ | async\"\r\n    [class.fullscreen]=\"(isPlayerFullscreen$ | async).on\">\r\n    <div class=\"yt-player ux-maker\">\r\n      <player-resizer\r\n        (toggle)=\"togglePlayer()\"\r\n        [fullScreen]=\"isShowPlayer$ | async\"\r\n      ></player-resizer>\r\n      <youtube-player\r\n        (ready)=\"setupPlayer($event)\"\r\n        (change)=\"updatePlayerState($event)\"\r\n      ></youtube-player>\r\n    </div>\r\n    <div class=\"container\">\r\n      <image-blur [media]=\"media$ | async\" *ngIf=\"!(isPlayerFullscreen$ | async).on\"></image-blur>\r\n      <media-info\r\n        [player]=\"player$ | async\"\r\n        [minimized]=\"media$ | async\"\r\n        (thumbClick)=\"toggleFullScreen()\"\r\n        (seekTrack)=\"selectTrackInVideo($event)\"\r\n      ></media-info>\r\n      <player-controls class=\"controls-container nicer-ux\"\r\n        [isRepeat]=\"isPlayerInRepeat$ | async\"\r\n        [playing]=\"isPlayerPlaying$ | async\"\r\n        [media]=\"media$ | async\"\r\n        (pause)=\"pauseVideo()\"\r\n        (next)=\"playNextTrack()\"\r\n        (play)=\"playVideo($event)\"\r\n        (previous)=\"playPreviousTrack()\"\r\n        (repeat)=\"toggleRepeat()\"\r\n      ></player-controls>\r\n    </div>\r\n  </section>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppPlayerComponent implements OnInit, OnDestroy {\r\n  player$ = this.store.select(AppPlayer.getPlayer);\r\n  media$ = this.store.select(AppPlayer.getCurrentMedia);\r\n  isPlayerPlaying$ = this.store.select(AppPlayer.getIsPlayerPlaying);\r\n  isPlayerInRepeat$ = this.store.select(NowPlaylist.isPlayerInRepeat);\r\n  isPlayerFullscreen$ = this.store.select(AppPlayer.getPlayerFullscreen);\r\n  isShowPlayer$ = this.store.select(AppPlayer.getShowPlayer);\r\n\r\n  @HostBinding('class.youtube-player') style = true;\r\n\r\n  constructor(\r\n    private nowPlaylistService: NowPlaylistService,\r\n    private store: Store<EchoesState>,\r\n    private nowPlaylistEffects: NowPlaylistEffects,\r\n    private appPlayerApi: AppPlayerApi\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.appPlayerApi.resetPlayer();\r\n    this.nowPlaylistEffects.loadNextTrack$.subscribe(action =>\r\n      this.playVideo(action.payload)\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n\r\n  setupPlayer(player) {\r\n    this.appPlayerApi.setupPlayer(player);\r\n  }\r\n\r\n  updatePlayerState(event) {\r\n    this.appPlayerApi.changePlayerState(event);\r\n  }\r\n\r\n  playVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.appPlayerApi.playVideo(media);\r\n  }\r\n\r\n  pauseVideo() {\r\n    this.appPlayerApi.pauseVideo();\r\n  }\r\n\r\n  togglePlayer() {\r\n    this.appPlayerApi.togglePlayer();\r\n  }\r\n\r\n  toggleFullScreen() {\r\n    this.appPlayerApi.toggleFullScreen();\r\n  }\r\n\r\n  playNextTrack() {\r\n    this.nowPlaylistService.selectNextIndex();\r\n    this.playVideo(this.nowPlaylistService.getCurrent());\r\n  }\r\n\r\n  playPreviousTrack() {\r\n    this.nowPlaylistService.selectPreviousIndex();\r\n    this.playVideo(this.nowPlaylistService.getCurrent());\r\n  }\r\n\r\n  toggleRepeat() {\r\n    this.appPlayerApi.toggleRepeat();\r\n  }\r\n\r\n  selectTrackInVideo(trackEvent: {\r\n    time: string;\r\n    media: GoogleApiYouTubeVideoResource;\r\n  }) {\r\n    this.playVideo(trackEvent.media);\r\n    this.nowPlaylistService.seekToTrack(trackEvent);\r\n  }\r\n}\r\n","\n  <section\n    [class.show-youtube-player]=\"isShowPlayer$ | async\"\n    [class.fullscreen]=\"(isPlayerFullscreen$ | async).on\">\n    <div class=\"yt-player ux-maker\">\n      <player-resizer\n        (toggle)=\"togglePlayer()\"\n        [fullScreen]=\"isShowPlayer$ | async\"\n      ></player-resizer>\n      <youtube-player\n        (ready)=\"setupPlayer($event)\"\n        (change)=\"updatePlayerState($event)\"\n      ></youtube-player>\n    </div>\n    <div class=\"container\">\n      <image-blur [media]=\"media$ | async\" *ngIf=\"!(isPlayerFullscreen$ | async).on\"></image-blur>\n      <media-info\n        [player]=\"player$ | async\"\n        [minimized]=\"media$ | async\"\n        (thumbClick)=\"toggleFullScreen()\"\n        (seekTrack)=\"selectTrackInVideo($event)\"\n      ></media-info>\n      <player-controls class=\"controls-container nicer-ux\"\n        [isRepeat]=\"isPlayerInRepeat$ | async\"\n        [playing]=\"isPlayerPlaying$ | async\"\n        [media]=\"media$ | async\"\n        (pause)=\"pauseVideo()\"\n        (next)=\"playNextTrack()\"\n        (play)=\"playVideo($event)\"\n        (previous)=\"playPreviousTrack()\"\n        (repeat)=\"toggleRepeat()\"\n      ></player-controls>\n    </div>\n  </section>\n  ","import { AppApi } from '@api/app.api';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-brand',\r\n  styleUrls: ['./app-brand.scss'],\r\n  template: `\r\n  <div class=\"brand-container bg-primary\"\r\n    (click)=\"toggleSidebar()\">\r\n    <section class=\"brand-text\">\r\n      <h3 class=\"text brand-text-item\">Playlists</h3>\r\n      <!--<icon name=\"headphones\" class=\"brand-icon brand-text-item\"></icon>\r\n      <h3 class=\"text brand-text-item\">es</h3>-->\r\n    </section>\r\n    <button class=\"btn btn-transparent sidebar-toggle\">\r\n      <icon name=\"bars 2x\"></icon>\r\n    </button>\r\n  </div>\r\n  `\r\n})\r\nexport class AppBrandComponent implements OnInit {\r\n  constructor(private appApi: AppApi) {}\r\n  ngOnInit() {}\r\n\r\n  toggleSidebar() {\r\n    return this.appApi.toggleSidebar();\r\n  }\r\n}\r\n","\n  <div class=\"brand-container bg-primary\"\n    (click)=\"toggleSidebar()\">\n    <section class=\"brand-text\">\n      <h3 class=\"text brand-text-item\">Playlists</h3>\n      <!--<icon name=\"headphones\" class=\"brand-icon brand-text-item\"></icon>\n      <h3 class=\"text brand-text-item\">es</h3>-->\n    </section>\n    <button class=\"btn btn-transparent sidebar-toggle\">\n      <icon name=\"bars 2x\"></icon>\n    </button>\n  </div>\n  ","import { Router } from '@angular/router';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { Store } from '@ngrx/store';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport * as PlayerSearch from '@core/store/player-search';\r\n\r\n@Component({\r\n  selector: 'app-navigator',\r\n  styleUrls: ['./app-navigator.scss'],\r\n  template: `\r\n  <div class=\"list-group\"\r\n    [class.closed]=\"closed\">\r\n    <button class=\"list-group-item ux-maker\"\r\n      *ngFor=\"let route of routes;\"\r\n      (click)=\"go(route.link)\">\r\n      <icon [name]=\"route.icon\"></icon>\r\n      <span class=\"text\">{{ route.label }}</span>\r\n    </button>\r\n  </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppNavigatorComponent implements OnInit {\r\n  @Input() closed = false;\r\n  @Input() searchType = PlayerSearch.CSearchTypes.VIDEO;\r\n\r\n  public searchType$ = this.store.select(PlayerSearch.getSearchType);\r\n  public routes = [\r\n    { link: 'search', icon: 'music', label: 'Explore' }\r\n    // { link: '/user', icon: 'heart', label: 'My Profile' }\r\n  ];\r\n\r\n  constructor(\r\n    private store: Store<EchoesState>,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  go(link) {\r\n    this.router.navigate([`/${link}/${this.searchType}s`]);\r\n  }\r\n}\r\n","\n  <div class=\"list-group\"\n    [class.closed]=\"closed\">\n    <button class=\"list-group-item ux-maker\"\n      *ngFor=\"let route of routes;\"\n      (click)=\"go(route.link)\">\n      <icon [name]=\"route.icon\"></icon>\n      <span class=\"text\">{{ route.label }}</span>\n    </button>\n  </div>\n  ","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport * as NowPlaylist from '@store/now-playlist';\r\n\r\n@Component({\r\n  selector: 'now-playlist-filter',\r\n  styleUrls: ['./now-playlist-filter.scss'],\r\n  template: `\r\n  <section class=\"nav-header user-playlists-filter\">\r\n  <span class=\"playlist-header\" (click)=\"onNowPlayingClick()\">\r\n      <icon name=\"play-circle-o\" class=\"text-primary\"></icon>\r\n      <span class=\"text btn-transparent playlist-count\"\r\n        tooltip=\"Reveal now playing track\">\r\n        Now Playing <span *ngIf=\"!isPlaylistEmpty()\">({{ playlistLength }})</span>\r\n      </span>\r\n    </span>\r\n    <button class=\"btn btn-link btn-xs btn-clear\"\r\n      tooltip=\"Clear All Tracks In Now Playlist\"\r\n      [disabled]=\"isPlaylistEmpty()\"\r\n      (click)=\"clearPlaylist()\">\r\n      <icon name=\"trash\"></icon>\r\n    </button>\r\n    <button class=\"btn btn-link btn-xs btn-save\" title=\"Save All These Tracks To A New Playlist\"\r\n      disabled\r\n      ng-disabled=\"!nowPlaylistFilter.playlist.length\"\r\n      ng-click=\"nowPlaylistFilter.togglePlaylistSaver()\">\r\n      <icon name=\"cloud-upload-alt\"></icon>\r\n    </button>\r\n    <div class=\"playlist-filter\">\r\n      <icon name=\"search\" *ngIf=\"isFilterEmpty()\"></icon>\r\n      <icon name=\"times\" class=\"text-danger\"\r\n        *ngIf=\"!isFilterEmpty()\"\r\n        (click)=\"resetSearchFilter()\"\r\n      ></icon>\r\n      <input type=\"search\" name=\"playlist-search\"\r\n        [value]=\"playlist.filter\"\r\n        #searchFilter\r\n        (input)=\"handleFilterChange(searchFilter.value)\">\r\n    </div>\r\n  </section>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NowPlaylistFilterComponent {\r\n  @Input() playlist: NowPlaylist.INowPlaylist;\r\n  // @Output() save = new EventEmitter();\r\n  @Output() clear = new EventEmitter();\r\n  @Output() filter = new EventEmitter();\r\n  @Output() reset = new EventEmitter();\r\n  @Output() headerClick = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  handleFilterChange(searchFilter: string) {\r\n    this.filter.next(searchFilter);\r\n  }\r\n\r\n  resetSearchFilter() {\r\n    this.reset.next('');\r\n  }\r\n\r\n  isFilterEmpty() {\r\n    return this.playlist.filter === '';\r\n  }\r\n\r\n  clearPlaylist() {\r\n    this.clear.next('');\r\n  }\r\n\r\n  isPlaylistEmpty() {\r\n    return this.playlistLength === 0;\r\n  }\r\n\r\n  onNowPlayingClick() {\r\n    this.headerClick.next();\r\n  }\r\n  get playlistLength() {\r\n    return this.playlist.videos.length;\r\n  }\r\n}\r\n","\n  <section class=\"nav-header user-playlists-filter\">\n  <span class=\"playlist-header\" (click)=\"onNowPlayingClick()\">\n      <icon name=\"play-circle-o\" class=\"text-primary\"></icon>\n      <span class=\"text btn-transparent playlist-count\"\n        tooltip=\"Reveal now playing track\">\n        Now Playing <span *ngIf=\"!isPlaylistEmpty()\">({{ playlistLength }})</span>\n      </span>\n    </span>\n    <button class=\"btn btn-link btn-xs btn-clear\"\n      tooltip=\"Clear All Tracks In Now Playlist\"\n      [disabled]=\"isPlaylistEmpty()\"\n      (click)=\"clearPlaylist()\">\n      <icon name=\"trash\"></icon>\n    </button>\n    <button class=\"btn btn-link btn-xs btn-save\" title=\"Save All These Tracks To A New Playlist\"\n      disabled\n      ng-disabled=\"!nowPlaylistFilter.playlist.length\"\n      ng-click=\"nowPlaylistFilter.togglePlaylistSaver()\">\n      <icon name=\"cloud-upload-alt\"></icon>\n    </button>\n    <div class=\"playlist-filter\">\n      <icon name=\"search\" *ngIf=\"isFilterEmpty()\"></icon>\n      <icon name=\"times\" class=\"text-danger\"\n        *ngIf=\"!isFilterEmpty()\"\n        (click)=\"resetSearchFilter()\"\n      ></icon>\n      <input type=\"search\" name=\"playlist-search\"\n        [value]=\"playlist.filter\"\n        #searchFilter\n        (input)=\"handleFilterChange(searchFilter.value)\">\n    </div>\n  </section>\n  ","import { MediaParserService } from '@core/services/media-parser.service';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output\r\n} from '@angular/core';\r\nimport { flyOut, flyInOut } from '@shared/animations/fade-in.animation';\r\n\r\n@Component({\r\n  selector: 'now-playlist-track',\r\n  styleUrls: ['./now-playlist-track.scss'],\r\n  template: `\r\n  <div class=\"now-playlist-track__trigger\">\r\n    <div class=\"track-contents\">\r\n      <section class=\"video-thumb playlist-track__thumb\"\r\n        (click)=\"markSelected(video)\">\r\n        <span class=\"track-number\">{{ index + 1 }}</span>\r\n        <img draggable=\"false\" class=\"video-thumb__image\"\r\n        src=\"{{ video | videoToThumb }}\"\r\n        xtitle=\"Drag to sort\">\r\n        <span class=\"badge badge-info\">\r\n          {{ video.contentDetails.duration | toFriendlyDuration }}\r\n        </span>\r\n      </section>\r\n\r\n      <section class=\"video-title\" (click)=\"markSelected(video)\" [tooltip]=\"video.snippet.title\">{{ video.snippet.title }}</section>\r\n      </div>\r\n    <aside class=\"playlist-track__content\">\r\n      <section class=\"track-actions\">\r\n        <button class=\"btn btn-transparent text-primary playlist-track\"\r\n          *ngIf=\"isPlaylistMedia(video)\"\r\n          (click)=\"handleToggleTracks($event, video)\"\r\n          tooltip=\"Album Track - click to select cued tracks\">\r\n          <icon name=\"list-ul\"></icon>\r\n        </button>\r\n        <button class=\"btn btn-transparent text-info playlist-track\"\r\n          (click)=\"toggleInfo()\"\r\n          tooltip=\"More information for this media\">\r\n          <icon name=\"info-circle\"></icon>\r\n        </button>\r\n      </section>\r\n      <button class=\"btn btn-transparent text-danger ux-maker remove-track\" tooltip=\"Remove From Playlist\"\r\n        (click)=\"remove.emit(video)\">\r\n        <icon name=\"trash\"></icon>\r\n      </button>\r\n    </aside>\r\n    <article [@flyInOut] *ngIf=\"displayTracks\" class=\"track-tracks list-group\">\r\n      <aside class=\"album-tracks-heading\">Tracks</aside>\r\n      <button type=\"button\" class=\"list-group-item btn-transparent\"\r\n        *ngFor=\"let track of tracks | parseTracks\"\r\n        (click)=\"handleSelectTrack($event, track, video)\">\r\n        {{ track }}\r\n      </button>\r\n    </article>\r\n    <article [@flyOut] *ngIf=\"displayInfo\" class=\"track-info\">\r\n      {{ video.snippet.description }}\r\n    </article>\r\n  </div>\r\n  `,\r\n  animations: [flyOut, flyInOut],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NowPlaylistTrackComponent implements AfterContentInit {\r\n  @Input() video: GoogleApiYouTubeVideoResource;\r\n  @Input() index: number;\r\n\r\n  @Output() remove = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output() select = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output()\r\n  selectTrack = new EventEmitter<{\r\n    time: string;\r\n    media: GoogleApiYouTubeVideoResource;\r\n  }>();\r\n\r\n  displayTracks = false;\r\n  displayInfo = false;\r\n  tracks: string[] = [];\r\n  hasTracks = false;\r\n  private parsedTracks = false;\r\n\r\n  constructor(public mediaParser: MediaParserService) {}\r\n\r\n  ngAfterContentInit() {\r\n    this.extractTracks(this.video);\r\n  }\r\n\r\n  extractTracks(media: GoogleApiYouTubeVideoResource) {\r\n    if (!this.parsedTracks) {\r\n      const tracks = this.mediaParser.extractTracks(media.snippet.description);\r\n      if (Array.isArray(tracks)) {\r\n        this.parsedTracks = true;\r\n        this.tracks = tracks;\r\n        this.hasTracks = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  isPlaylistMedia(media: GoogleApiYouTubeVideoResource) {\r\n    return this.hasTracks;\r\n  }\r\n\r\n  toggleTracks(media: GoogleApiYouTubeVideoResource) {\r\n    this.displayTracks = !this.displayTracks;\r\n    return this.displayTracks;\r\n  }\r\n\r\n  handleToggleTracks(event: Event, media: GoogleApiYouTubeVideoResource) {\r\n    event.stopImmediatePropagation();\r\n    this.toggleTracks(media);\r\n  }\r\n\r\n  handleSelectTrack(\r\n    $event: Event,\r\n    track: string,\r\n    media: GoogleApiYouTubeVideoResource\r\n  ) {\r\n    $event.stopImmediatePropagation();\r\n    const time = this.mediaParser.extractTime(track);\r\n    if (time) {\r\n      this.selectTrack.emit({ time: time[0], media });\r\n    }\r\n  }\r\n\r\n  markSelected(video: GoogleApiYouTubeVideoResource) {\r\n    this.select.emit(video);\r\n  }\r\n\r\n  toggleInfo() {\r\n    this.displayInfo = !this.displayInfo;\r\n    return this.displayInfo;\r\n  }\r\n}\r\n","\n  <div class=\"now-playlist-track__trigger\">\n    <div class=\"track-contents\">\n      <section class=\"video-thumb playlist-track__thumb\"\n        (click)=\"markSelected(video)\">\n        <span class=\"track-number\">{{ index + 1 }}</span>\n        <img draggable=\"false\" class=\"video-thumb__image\"\n        src=\"{{ video | videoToThumb }}\"\n        xtitle=\"Drag to sort\">\n        <span class=\"badge badge-info\">\n          {{ video.contentDetails.duration | toFriendlyDuration }}\n        </span>\n      </section>\n\n      <section class=\"video-title\" (click)=\"markSelected(video)\" [tooltip]=\"video.snippet.title\">{{ video.snippet.title }}</section>\n      </div>\n    <aside class=\"playlist-track__content\">\n      <section class=\"track-actions\">\n        <button class=\"btn btn-transparent text-primary playlist-track\"\n          *ngIf=\"isPlaylistMedia(video)\"\n          (click)=\"handleToggleTracks($event, video)\"\n          tooltip=\"Album Track - click to select cued tracks\">\n          <icon name=\"list-ul\"></icon>\n        </button>\n        <button class=\"btn btn-transparent text-info playlist-track\"\n          (click)=\"toggleInfo()\"\n          tooltip=\"More information for this media\">\n          <icon name=\"info-circle\"></icon>\n        </button>\n      </section>\n      <button class=\"btn btn-transparent text-danger ux-maker remove-track\" tooltip=\"Remove From Playlist\"\n        (click)=\"remove.emit(video)\">\n        <icon name=\"trash\"></icon>\n      </button>\n    </aside>\n    <article [@flyInOut] *ngIf=\"displayTracks\" class=\"track-tracks list-group\">\n      <aside class=\"album-tracks-heading\">Tracks</aside>\n      <button type=\"button\" class=\"list-group-item btn-transparent\"\n        *ngFor=\"let track of tracks | parseTracks\"\n        (click)=\"handleSelectTrack($event, track, video)\">\n        {{ track }}\n      </button>\n    </article>\n    <article [@flyOut] *ngIf=\"displayInfo\" class=\"track-info\">\n      {{ video.snippet.description }}\n    </article>\n  </div>\n  ","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'search',\r\n})\r\nexport class SearchPipe implements PipeTransform {\r\n\r\n  transform(values: any, args: any) {\r\n    const term = args.length ? args.toLowerCase() : '';\r\n    const matchString = (key) => {\r\n      if (typeof key === 'string') {\r\n        return key.toLowerCase().indexOf(term) > -1;\r\n      }\r\n      return Object.keys(key).some(prop => matchString(key[prop]));\r\n    };\r\n    return values.filter(matchString);\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  ViewEncapsulation,\r\n  AfterViewChecked,\r\n  NgZone,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport * as NowPlaylist from '@store/now-playlist';\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger\r\n} from '@angular/animations';\r\nimport { flyOut } from '@shared/animations/fade-in.animation';\r\nimport { isNewChange } from '@shared/utils/data.utils';\r\n\r\n@Component({\r\n  selector: 'now-playlist',\r\n  animations: [flyOut],\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./now-playlist.scss'],\r\n  template: `\r\n  <section class=\"now-playlist ux-maker\">\r\n    <div *ngIf=\"isPlaylistEmpty\" class=\"empty-list text-center\" [@flyOut]>\r\n      <icon name=\"music 4x\" class=\"bg-primary\"></icon>\r\n      <article>\r\n        <h3 class=\"text-primary\">Playlist Is Empty</h3>\r\n        <p class=\"text-primary\">Queue Media From Results</p>\r\n      </article>\r\n    </div>\r\n    <ul class=\"nav nav-list ux-maker nicer-ux\">\r\n      <li class=\"now-playlist-track\" #playlistTrack\r\n        [ngClass]=\"{\r\n          'active': isActiveMedia(video.id, playlistTrack)\r\n        }\"\r\n        *ngFor=\"let video of playlist.videos | search:playlist.filter; let index = index\"\r\n        [@flyOut]>\r\n        <now-playlist-track\r\n          [video]=\"video\" [index]=\"index\"\r\n          (remove)=\"removeVideo($event)\"\r\n          (select)=\"selectVideo(video)\"\r\n          (selectTrack)=\"selectTrackInVideo($event)\"\r\n        ></now-playlist-track>\r\n      </li>\r\n    </ul>\r\n  </section>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NowPlaylistComponent implements OnChanges, AfterViewChecked {\r\n  @Input() playlist: NowPlaylist.INowPlaylist;\r\n  @Output() select = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n  @Output()\r\n  selectTrack = new EventEmitter<{\r\n    time: string;\r\n    media: GoogleApiYouTubeVideoResource;\r\n  }>();\r\n  // @Output() sort = new EventEmitter<GoogleApiYouTubeSearchResource>();\r\n  @Output() remove = new EventEmitter<GoogleApiYouTubeVideoResource>();\r\n\r\n  public activeTrackElement: HTMLUListElement;\r\n  public hasActiveChanged = false;\r\n\r\n  constructor(public zone: NgZone) {}\r\n\r\n  ngAfterViewChecked() {\r\n    if (this.hasActiveChanged && this.activeTrackElement) {\r\n      this.zone.runOutsideAngular(() => this.scrollToActiveTrack());\r\n    }\r\n  }\r\n\r\n  ngOnChanges({ activeId }: SimpleChanges) {\r\n    if (activeId) {\r\n      this.hasActiveChanged = isNewChange(activeId);\r\n    }\r\n  }\r\n\r\n  scrollToActiveTrack() {\r\n    if (this.activeTrackElement) {\r\n      this.activeTrackElement.scrollIntoView();\r\n    }\r\n  }\r\n\r\n  selectVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.select.emit(media);\r\n  }\r\n\r\n  removeVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.remove.emit(media);\r\n  }\r\n\r\n  sortVideo(media: GoogleApiYouTubeVideoResource) {\r\n    // this.sort.next(media);\r\n  }\r\n\r\n  isActiveMedia(mediaId: string, trackElement: HTMLUListElement) {\r\n    const isActive = this.playlist.selectedId === mediaId;\r\n    if (isActive) {\r\n      this.activeTrackElement = trackElement;\r\n    }\r\n    return isActive;\r\n  }\r\n\r\n  selectTrackInVideo(trackEvent: { time; media }) {\r\n    this.selectTrack.emit(trackEvent);\r\n  }\r\n\r\n  get isPlaylistEmpty() {\r\n    return this.playlist.videos.length === 0;\r\n  }\r\n}\r\n","\n  <section class=\"now-playlist ux-maker\">\n    <div *ngIf=\"isPlaylistEmpty\" class=\"empty-list text-center\" [@flyOut]>\n      <icon name=\"music 4x\" class=\"bg-primary\"></icon>\n      <article>\n        <h3 class=\"text-primary\">Playlist Is Empty</h3>\n        <p class=\"text-primary\">Queue Media From Results</p>\n      </article>\n    </div>\n    <ul class=\"nav nav-list ux-maker nicer-ux\">\n      <li class=\"now-playlist-track\" #playlistTrack\n        [ngClass]=\"{\n          'active': isActiveMedia(video.id, playlistTrack)\n        }\"\n        *ngFor=\"let video of playlist.videos | search:playlist.filter; let index = index\"\n        [@flyOut]>\n        <now-playlist-track\n          [video]=\"video\" [index]=\"index\"\n          (remove)=\"removeVideo($event)\"\n          (select)=\"selectVideo(video)\"\n          (selectTrack)=\"selectTrackInVideo($event)\"\n        ></now-playlist-track>\n      </li>\n    </ul>\n  </section>\n  ","import { ChangeDetectionStrategy, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { EchoesState } from '@store/reducers';\r\nimport { NowPlaylistService } from '@core/services/now-playlist.service';\r\nimport { INowPlaylist } from '@store/now-playlist';\r\nimport * as AppPlayer from '@store/app-player/app-player.actions';\r\nimport { NowPlaylistComponent } from './now-playlist';\r\n\r\n@Component({\r\n  selector: 'now-playing',\r\n  styleUrls: ['./now-playing.scss'],\r\n  template: `\r\n  <div class=\"sidebar-pane\">\r\n    <now-playlist-filter\r\n      [playlist]=\"nowPlaylist$ | async\"\r\n      (clear)=\"clearPlaylist()\"\r\n      (filter)=\"updateFilter($event)\"\r\n      (reset)=\"resetFilter()\"\r\n      (headerClick)=\"onHeaderClick()\"\r\n    ></now-playlist-filter>\r\n    <now-playlist\r\n      [playlist]=\"nowPlaylist$ | async\"\r\n      (select)=\"selectVideo($event)\"\r\n      (selectTrack)=\"selectTrackInVideo($event)\"\r\n      (remove)=\"removeVideo($event)\"\r\n    ></now-playlist>\r\n  </div>\r\n  `,\r\n  // (sort)=\"sortVideo($event)\"\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NowPlayingComponent implements OnInit {\r\n  public nowPlaylist$: Observable<INowPlaylist>;\r\n  @ViewChild(NowPlaylistComponent) nowPlaylistComponent: NowPlaylistComponent;\r\n\r\n  constructor(public store: Store<EchoesState>, public nowPlaylistService: NowPlaylistService) { }\r\n\r\n  ngOnInit() {\r\n    this.nowPlaylist$ = this.nowPlaylistService.playlist$;\r\n  }\r\n\r\n  selectVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.store.dispatch(new AppPlayer.PlayVideo(media));\r\n    this.nowPlaylistService.updateIndexByMedia(media.id);\r\n  }\r\n\r\n  sortVideo() { }\r\n\r\n  updateFilter(searchFilter: string) {\r\n    this.nowPlaylistService.updateFilter(searchFilter);\r\n  }\r\n\r\n  resetFilter() {\r\n    this.nowPlaylistService.updateFilter('');\r\n  }\r\n\r\n  clearPlaylist() {\r\n    this.nowPlaylistService.clearPlaylist();\r\n  }\r\n\r\n  removeVideo(media) {\r\n    this.nowPlaylistService.removeVideo(media);\r\n  }\r\n\r\n  onHeaderClick() {\r\n    this.nowPlaylistComponent.scrollToActiveTrack();\r\n  }\r\n\r\n  selectTrackInVideo(trackEvent: { time: string; media: GoogleApiYouTubeVideoResource }) {\r\n    this.store.dispatch(new AppPlayer.PlayVideo(trackEvent.media));\r\n    this.nowPlaylistService.seekToTrack(trackEvent);\r\n  }\r\n}\r\n","\n  <div class=\"sidebar-pane\">\n    <now-playlist-filter\n      [playlist]=\"nowPlaylist$ | async\"\n      (clear)=\"clearPlaylist()\"\n      (filter)=\"updateFilter($event)\"\n      (reset)=\"resetFilter()\"\n      (headerClick)=\"onHeaderClick()\"\n    ></now-playlist-filter>\n    <now-playlist\n      [playlist]=\"nowPlaylist$ | async\"\n      (select)=\"selectVideo($event)\"\n      (selectTrack)=\"selectTrackInVideo($event)\"\n      (remove)=\"removeVideo($event)\"\n    ></now-playlist>\n  </div>\n  ","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppApi } from '@api/app.api';\r\nimport { EchoesState } from '@store/reducers';\r\n\r\nimport { getSidebarCollapsed } from '@store/app-core';\r\nimport * as PlayerSearch from '@store/player-search';\r\n\r\n@Injectable()\r\nexport class AppSidebarProxy {\r\n  sidebarCollapsed$ = this.store.select(getSidebarCollapsed);\r\n  searchType$ = this.store.select(PlayerSearch.getSearchType);\r\n\r\n  constructor(private store: Store<EchoesState>, private appApi: AppApi) {}\r\n\r\n  toggleSidebar() {\r\n    this.appApi.toggleSidebar();\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { AppSidebarProxy } from './app-sidebar.proxy';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  styleUrls: ['./app-sidebar.scss'],\r\n  template: `\r\n  <div id=\"sidebar\" class=\"sidebar ux-maker\"\r\n    [class.closed]=\"sidebarCollapsed$ | async\">\r\n    <div class=\"sidebar-backdrop\" (click)=\"toggleSidebar()\"></div>\r\n    <nav class=\"navbar navbar-transparent\">\r\n      <app-brand></app-brand>\r\n      <app-navigator [closed]=\"sidebarCollapsed$ | async\" [searchType]=\"searchType$ | async\">\r\n      </app-navigator>\r\n    </nav>\r\n    <now-playing></now-playing>\r\n  </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppSidebarComponent {\r\n  sidebarCollapsed$ = this.appSidebarProxy.sidebarCollapsed$;\r\n  searchType$ = this.appSidebarProxy.searchType$;\r\n\r\n  constructor(private appSidebarProxy: AppSidebarProxy) { }\r\n\r\n  toggleSidebar() {\r\n    this.appSidebarProxy.toggleSidebar();\r\n  }\r\n}\r\n","\n  <div id=\"sidebar\" class=\"sidebar ux-maker\"\n    [class.closed]=\"sidebarCollapsed$ | async\">\n    <div class=\"sidebar-backdrop\" (click)=\"toggleSidebar()\"></div>\n    <nav class=\"navbar navbar-transparent\">\n      <app-brand></app-brand>\n      <app-navigator [closed]=\"sidebarCollapsed$ | async\" [searchType]=\"searchType$ | async\">\n      </app-navigator>\n    </nav>\n    <now-playing></now-playing>\n  </div>\n  ","import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'button-icon',\r\n  // styleUrls: ['./button-icon.scss'],\r\n  template: `\r\n    <button [ngClass]=\"types\">\r\n      <icon [name]=\"icon\"></icon> <ng-content></ng-content>\r\n    </button>\r\n  `,\r\n  // encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class ButtonIconComponent implements OnInit {\r\n  @Input() icon: string;\r\n  @Input() types: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n}\r\n","\n    <button [ngClass]=\"types\">\n      <icon [name]=\"icon\"></icon> <ng-content></ng-content>\n    </button>\n  ","import { Injectable } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppApi } from '@api/app.api';\r\nimport { EchoesState } from '@store/reducers';\r\nimport * as fromAppCore from '../../store/app-core';\r\n\r\n@Injectable()\r\nexport class AppErrorHandlerProxy {\r\n  errorMessage$ = this.store.pipe(select(fromAppCore.selectErrorMessage));\r\n  isShowError$ = this.store.pipe(select(fromAppCore.selectIsErrorShow));\r\n  errorAction$ = this.store.pipe(select(fromAppCore.selectErrorAction));\r\n\r\n  constructor(private store: Store<EchoesState>, private appApi: AppApi) {}\r\n\r\n  toggleError() {\r\n    this.store.dispatch(new fromAppCore.ToggleError());\r\n  }\r\n\r\n  cleanError() {\r\n    this.store.dispatch(new fromAppCore.CleanError());\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AppErrorHandlerProxy } from './app-error-handler.proxy';\r\nimport { ErrorActions } from '../../store/app-core';\r\n\r\n@Component({\r\n  selector: 'app-error-handler',\r\n  templateUrl: './app-error-handler.html',\r\n  styleUrls: ['./app-error-handler.scss']\r\n})\r\nexport class AppErrorHandlerComponent implements OnInit {\r\n  errorMessage$ = this.appErrorHandlerProxy.errorMessage$;\r\n  errorShow$ = this.appErrorHandlerProxy.isShowError$;\r\n  errorAction$ = this.appErrorHandlerProxy.errorAction$;\r\n\r\n  constructor(public appErrorHandlerProxy: AppErrorHandlerProxy) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  handleAction(errorAction: ErrorActions) {\r\n    switch (errorAction) {\r\n      case ErrorActions.NONE:\r\n        this.appErrorHandlerProxy.toggleError();\r\n        break;\r\n\r\n      case ErrorActions.RELOAD:\r\n        this.appErrorHandlerProxy.cleanError();\r\n        location.reload();\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  close() {\r\n    this.handleAction(ErrorActions.NONE);\r\n  }\r\n}\r\n","<section\r\n  class=\"is-flex-column is-flex-valign bg-danger\"\r\n  *ngIf=\"errorShow$ | async\">\r\n  <article class=\"is-flex-row is-flex-valign\">\r\n    <h4 class=\"is-strechable\">\r\n      <icon name=\"info-circle\"></icon> Something Went Wrong\r\n    </h4>\r\n    <button-icon\r\n      (click)=\"close()\"\r\n      icon=\"close\"\r\n      types=\"primary\"></button-icon>\r\n  </article>\r\n  <article class=\"text-left\">{{ errorMessage$ | async }}</article>\r\n  <ng-container *ngIf=\"errorAction$ | async as errorAction\">\r\n    <button\r\n      class=\"btn btn-default\"\r\n      (click)=\"handleAction(errorAction)\">\r\n      {{ errorAction }}\r\n    </button>\r\n  </ng-container>\r\n</section>\r\n","<app-player class=\"navbar navbar-default navbar-fixed-bottom\"></app-player>\r\n\r\n<app-sidebar [class.closed]=\"sidebarCollapsed$ | async\"></app-sidebar>\r\n\r\n<div class=\"container-main\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<app-error-handler></app-error-handler>\r\n","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * \\@usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the `build()` method to create a programmatic animation using the\n * `animate()` function. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '\\@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @abstract\n */\nclass AnimationBuilder {\n}\n/**\n * A factory object returned from the `AnimationBuilder`.`build()` method.\n *\n * \\@publicApi\n * @abstract\n */\nclass AnimationFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Specifies automatic styling.\n *\n * \\@publicApi\n * @type {?}\n */\nconst AUTO_STYLE = '*';\n/**\n * Creates a named animation trigger, containing a  list of `state()`\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * \\@usageNotes\n * Define an animation trigger in the `animations` section of `\\@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[\\@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```typescript\n * \\@Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```typescript\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n * string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *  /\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `\\@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `\\@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```typescript /\n *   selector: 'my-component',\n *   template: `\n *     <div [\\@.disabled]=\"isDisabled\">\n *       <div [\\@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `\\@.disabled` is true, it prevents the `\\@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `\\@.disabled` on the topmost Angular component.\n *\n * ```typescript\n * import {Component, HostBinding} from '\\@angular/core';\n *  /\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n * \\@HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * \\@publicApi\n * @param {?} name An identifying string.\n * @param {?} definitions  An animation definition object, containing an array of `state()`\n * and `transition()` declarations.\n *\n * @return {?} An object that encapsulates the trigger data.\n *\n */\nfunction trigger(name, definitions) {\n    return { type: 7 /* Trigger */, name, definitions, options: {} };\n}\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * \\@usageNotes\n * Call within an animation `sequence()`, `{\\@link animations/group group()}`, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```typescript\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```typescript\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n *  ])\n * ```\n *\n * \\@publicApi\n * @param {?} timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param {?=} styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @return {?} An object that encapsulates the animation step.\n *\n */\nfunction animate(timings, styles = null) {\n    return { type: 4 /* Animate */, styles, timings };\n}\n/**\n * \\@description Defines a list of animation steps to be run in parallel.\n *\n * \\@usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n *\n * \\@publicApi\n * @param {?} steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```typescript\n * group([\n *   animate(\"1s\", style({ background: \"black\" })),\n *   animate(\"2s\", style({ color: \"white\" }))\n * ])\n * ```\n *\n * @param {?=} options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return {?} An object that encapsulates the group data.\n *\n */\nfunction group(steps, options = null) {\n    return { type: 3 /* Group */, steps, options };\n}\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * \\@usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the `{\\@link animations/group group()}` call, which runs animation steps in parallel.\n *\n * When a sequence is used within a `{\\@link animations/group group()}` or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n * \\@publicApi\n *\n * @param {?} steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", style({ opacity: 1 }))\n * ])\n * ```\n *\n * @param {?=} options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return {?} An object that encapsulates the sequence data.\n *\n */\nfunction sequence(steps, options = null) {\n    return { type: 2 /* Sequence */, steps, options };\n}\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation `state`, within an animation `sequence`,\n * or as styling data for calls to `animate()` and `keyframes()`.\n *\n * \\@usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```typescript\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow a component to animate from\n * a height of 0 up to the height of the parent element:\n *\n * ```\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * \\@publicApi\n *\n * @param {?} tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return {?} An object that encapsulates the style data.\n *\n */\nfunction style(tokens) {\n    return { type: 6 /* Style */, styles: tokens, offset: null };\n}\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * \\@usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n *\n * \\@publicApi\n *\n * @param {?} name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param {?} styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param {?=} options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return {?} An object that encapsulates the new state data.\n *\n */\nfunction state(name, styles, options) {\n    return { type: 0 /* State */, name, styles, options };\n}\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * \\@usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```typescript\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n * \\@publicApi\n * @param {?} steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @return {?} An object that encapsulates the keyframes data.\n *\n */\nfunction keyframes(steps) {\n    return { type: 5 /* Keyframes */, steps };\n}\n/**\n * Declares an animation transition as a sequence of animation steps to run when a given\n * condition is satisfied. The condition is a Boolean expression or function that compares\n * the previous and current animation states, and returns true if this transition should occur.\n * When the state criteria of a defined transition are met, the associated animation is\n * triggered.\n *\n * \\@usageNotes\n * The template associated with a component binds an animation trigger to an element.\n *\n * ```HTML\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * All transitions are defined within an animation trigger,\n * along with named states that the transitions change to and from.\n *\n * ```typescript\n * trigger(\"myAnimationTrigger\", [\n *  // define states\n *  state(\"on\", style({ background: \"green\" })),\n *  state(\"off\", style({ background: \"grey\" })),\n *  ...]\n * ```\n *\n * Note that when you call the `sequence()` function within a `{\\@link animations/group group()}`\n * or a `transition()` call, execution does not continue to the next instruction\n * until each of the inner animation steps have completed.\n *\n * ### Syntax examples\n *\n * The following examples define transitions between the two defined states (and default states),\n * using various options:\n *\n * ```typescript\n * // Transition occurs when the state value\n * // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n * transition(\"on => off\", animate(500))\n * // Run the same animation for both directions\n * transition(\"on <=> off\", animate(500))\n * // Define multiple state-change pairs separated by commas\n * transition(\"on => off, off => void\", animate(500))\n * ```\n *\n * ### Special values for state-change expressions\n *\n * - Catch-all state change for when an element is inserted into the page and the\n * destination state is unknown:\n *\n * ```typescript\n * transition(\"void => *\", [\n *  style({ opacity: 0 }),\n *  animate(500)\n *  ])\n * ```\n *\n * - Capture a state change between any states:\n *\n *  `transition(\"* => *\", animate(\"1s 0s\"))`\n *\n * - Entry and exit transitions:\n *\n * ```typescript\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n *   ]),\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n *   ])\n * ```\n *\n * - Use `:increment` and `:decrement` to initiate transitions:\n *\n * ```typescript\n * transition(\":increment\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n *\n * transition(\":decrement\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n * ```\n *\n * ### State-change functions\n *\n * Here is an example of a `fromState` specified as a state-change function that invokes an\n * animation when true:\n *\n * ```typescript\n * transition((fromState, toState) =>\n *  {\n *   return fromState == \"off\" && toState == \"on\";\n *  },\n *  animate(\"1s 0s\"))\n * ```\n *\n * ### Animating to the final state\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no style data, that step is automatically considered the final animation arc,\n * for the element to reach the final state. Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n * The following example defines a transition that starts by hiding the element,\n * then makes sure that it animates properly to whatever state is currently active for trigger:\n *\n * ```typescript\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n *  ])\n * ```\n * ### Boolean value matching\n * If a trigger binding value is a Boolean, it can be matched using a transition expression\n * that compares true and false or 1 and 0. For example:\n *\n * ```\n * // in the template\n * <div [\\@openClose]=\"open ? true : false\">...</div>\n * // in the component metadata\n * trigger('openClose', [\n *   state('true', style({ height: '*' })),\n *   state('false', style({ height: '0px' })),\n *   transition('false <=> true', animate(500))\n * ])\n * ```\n *\n * \\@publicApi\n *\n * @param {?} stateChangeExpr A Boolean expression or function that compares the previous and current\n * animation states, and returns true if this transition should occur. Note that  \"true\" and \"false\"\n * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the\n * animation trigger element.\n * The animation steps run when the expression evaluates to true.\n *\n * - A state-change string takes the form \"state1 => state2\", where each side is a defined animation\n * state, or an asterix (*) to refer to a dynamic start or end state.\n *   - The expression string can contain multiple comma-separated statements;\n * for example \"state1 => state2, state3 => state4\".\n *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,\n * equivalent to  \"void => *\"  and \"* => void\".\n *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has\n * increased or decreased in value.\n * - A function is executed each time a state change occurs in the animation trigger element.\n * The animation steps run when the function returns true.\n *\n * @param {?} steps One or more animation objects, as returned by the `animate()` or\n * `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param {?=} options An options object that can contain a delay value for the start of the animation,\n * and additional developer-defined parameters. Provided values for additional parameters are used\n * as defaults, and override values can be passed to the caller on invocation.\n * @return {?} An object that encapsulates the transition data.\n *\n */\nfunction transition(stateChangeExpr, steps, options = null) {\n    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options };\n}\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * \\@usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```typescript\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n *\n * \\@publicApi\n * @param {?} steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param {?=} options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @return {?} An object that encapsulates the animation data.\n *\n */\nfunction animation(steps, options = null) {\n    return { type: 8 /* Reference */, animation: steps, options };\n}\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * \\@usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature is designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n *\n * \\@publicApi\n * @param {?=} options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return {?} An object that encapsulates the child animation data.\n *\n */\nfunction animateChild(options = null) {\n    return { type: 9 /* AnimateChild */, options };\n}\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * \\@publicApi\n * @param {?} animation The reusable animation to start.\n * @param {?=} options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return {?} An object that contains the animation parameters.\n *\n */\nfunction useAnimation(animation, options = null) {\n    return { type: 10 /* AnimateRef */, animation, options };\n}\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animate()`.\n *\n * \\@usageNotes\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```typescript\n *  query(':self, .record:enter, .record:leave, \\@subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animate()`.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'inner',\n *   template: `\n *     <div [\\@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 })),\n *        query('.content', animate(1000, style({ opacity: 1 })),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @param {?} selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements.\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"\\@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"\\@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param {?} animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param {?=} options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return {?} An object that encapsulates the query data.\n *\n */\nfunction query(selector, animation, options = null) {\n    return { type: 11 /* Query */, selector, animation, options };\n}\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * \\@usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `ngFor`. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [\\@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```typescript\n * import {trigger, transition, style, animate, query, stagger} from '\\@angular/animations';\n * \\@Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```typescript\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * \\@publicApi\n * @param {?} timings A delay value.\n * @param {?} animation One ore more animation steps.\n * @return {?} An object that encapsulates the stagger data.\n *\n */\nfunction stagger(timings, animation) {\n    return { type: 12 /* Stagger */, timings, animation };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cb\n * @return {?}\n */\nfunction scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see `animate()`\n * @see `AnimationPlayer`\n * @see `GroupPlayer`\n *\n * \\@publicApi\n */\nclass NoopAnimationPlayer {\n    /**\n     * @param {?=} duration\n     * @param {?=} delay\n     */\n    constructor(duration = 0, delay = 0) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this.parentPlayer = null;\n        this.totalTime = duration + delay;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    init() { }\n    /**\n     * @return {?}\n     */\n    play() {\n        if (!this.hasStarted()) {\n            this._onStart();\n            this.triggerMicrotask();\n        }\n        this._started = true;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    triggerMicrotask() { scheduleMicroTask(() => this._onFinish()); }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onStart() {\n        this._onStartFns.forEach(fn => fn());\n        this._onStartFns = [];\n    }\n    /**\n     * @return {?}\n     */\n    pause() { }\n    /**\n     * @return {?}\n     */\n    restart() { }\n    /**\n     * @return {?}\n     */\n    finish() { this._onFinish(); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    reset() { }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    setPosition(position) { }\n    /**\n     * @return {?}\n     */\n    getPosition() { return 0; }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see `AnimationPlayer`\n * @see `{\\@link animations/group group()}`\n *\n */\nclass AnimationGroupPlayer {\n    /**\n     * @param {?} _players\n     */\n    constructor(_players) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        this.totalTime = 0;\n        this.players = _players;\n        /** @type {?} */\n        let doneCount = 0;\n        /** @type {?} */\n        let destroyCount = 0;\n        /** @type {?} */\n        let startCount = 0;\n        /** @type {?} */\n        const total = this.players.length;\n        if (total == 0) {\n            scheduleMicroTask(() => this._onFinish());\n        }\n        else {\n            this.players.forEach(player => {\n                player.onDone(() => {\n                    if (++doneCount == total) {\n                        this._onFinish();\n                    }\n                });\n                player.onDestroy(() => {\n                    if (++destroyCount == total) {\n                        this._onDestroy();\n                    }\n                });\n                player.onStart(() => {\n                    if (++startCount == total) {\n                        this._onStart();\n                    }\n                });\n            });\n        }\n        this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    init() { this.players.forEach(player => player.init()); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onStart() {\n        if (!this.hasStarted()) {\n            this._started = true;\n            this._onStartFns.forEach(fn => fn());\n            this._onStartFns = [];\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    play() {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        this._onStart();\n        this.players.forEach(player => player.play());\n    }\n    /**\n     * @return {?}\n     */\n    pause() { this.players.forEach(player => player.pause()); }\n    /**\n     * @return {?}\n     */\n    restart() { this.players.forEach(player => player.restart()); }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this._onFinish();\n        this.players.forEach(player => player.finish());\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { this._onDestroy(); }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onDestroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._onFinish();\n            this.players.forEach(player => player.destroy());\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this.players.forEach(player => player.reset());\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) {\n        /** @type {?} */\n        const timeAtPosition = p * this.totalTime;\n        this.players.forEach(player => {\n            /** @type {?} */\n            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n            player.setPosition(position);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    getPosition() {\n        /** @type {?} */\n        let min = 0;\n        this.players.forEach(player => {\n            /** @type {?} */\n            const p = player.getPosition();\n            min = Math.min(p, min);\n        });\n        return min;\n    }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        this.players.forEach(player => {\n            if (player.beforeDestroy) {\n                player.beforeDestroy();\n            }\n        });\n    }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ɵPRE_STYLE = '!';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationBuilder, AnimationFactory, AUTO_STYLE, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, NoopAnimationPlayer, AnimationGroupPlayer as ɵAnimationGroupPlayer, ɵPRE_STYLE };\n//# sourceMappingURL=animations.js.map\n","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { NoopAnimationPlayer, ɵAnimationGroupPlayer, ɵPRE_STYLE, AUTO_STYLE, sequence, style } from '@angular/animations';\nimport { Injectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction isBrowser() {\n    return (typeof window !== 'undefined' && typeof window.document !== 'undefined');\n}\n/**\n * @return {?}\n */\nfunction isNode() {\n    return (typeof process !== 'undefined');\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction optimizeGroupPlayer(players) {\n    switch (players.length) {\n        case 0:\n            return new NoopAnimationPlayer();\n        case 1:\n            return players[0];\n        default:\n            return new ɵAnimationGroupPlayer(players);\n    }\n}\n/**\n * @param {?} driver\n * @param {?} normalizer\n * @param {?} element\n * @param {?} keyframes\n * @param {?=} preStyles\n * @param {?=} postStyles\n * @return {?}\n */\nfunction normalizeKeyframes(driver, normalizer, element, keyframes, preStyles = {}, postStyles = {}) {\n    /** @type {?} */\n    const errors = [];\n    /** @type {?} */\n    const normalizedKeyframes = [];\n    /** @type {?} */\n    let previousOffset = -1;\n    /** @type {?} */\n    let previousKeyframe = null;\n    keyframes.forEach(kf => {\n        /** @type {?} */\n        const offset = (/** @type {?} */ (kf['offset']));\n        /** @type {?} */\n        const isSameOffset = offset == previousOffset;\n        /** @type {?} */\n        const normalizedKeyframe = (isSameOffset && previousKeyframe) || {};\n        Object.keys(kf).forEach(prop => {\n            /** @type {?} */\n            let normalizedProp = prop;\n            /** @type {?} */\n            let normalizedValue = kf[prop];\n            if (prop !== 'offset') {\n                normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);\n                switch (normalizedValue) {\n                    case ɵPRE_STYLE:\n                        normalizedValue = preStyles[prop];\n                        break;\n                    case AUTO_STYLE:\n                        normalizedValue = postStyles[prop];\n                        break;\n                    default:\n                        normalizedValue =\n                            normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);\n                        break;\n                }\n            }\n            normalizedKeyframe[normalizedProp] = normalizedValue;\n        });\n        if (!isSameOffset) {\n            normalizedKeyframes.push(normalizedKeyframe);\n        }\n        previousKeyframe = normalizedKeyframe;\n        previousOffset = offset;\n    });\n    if (errors.length) {\n        /** @type {?} */\n        const LINE_START = '\\n - ';\n        throw new Error(`Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);\n    }\n    return normalizedKeyframes;\n}\n/**\n * @param {?} player\n * @param {?} eventName\n * @param {?} event\n * @param {?} callback\n * @return {?}\n */\nfunction listenOnPlayer(player, eventName, event, callback) {\n    switch (eventName) {\n        case 'start':\n            player.onStart(() => callback(event && copyAnimationEvent(event, 'start', player)));\n            break;\n        case 'done':\n            player.onDone(() => callback(event && copyAnimationEvent(event, 'done', player)));\n            break;\n        case 'destroy':\n            player.onDestroy(() => callback(event && copyAnimationEvent(event, 'destroy', player)));\n            break;\n    }\n}\n/**\n * @param {?} e\n * @param {?} phaseName\n * @param {?} player\n * @return {?}\n */\nfunction copyAnimationEvent(e, phaseName, player) {\n    /** @type {?} */\n    const totalTime = player.totalTime;\n    /** @type {?} */\n    const disabled = ((/** @type {?} */ (player))).disabled ? true : false;\n    /** @type {?} */\n    const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);\n    /** @type {?} */\n    const data = ((/** @type {?} */ (e)))['_data'];\n    if (data != null) {\n        ((/** @type {?} */ (event)))['_data'] = data;\n    }\n    return event;\n}\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?=} phaseName\n * @param {?=} totalTime\n * @param {?=} disabled\n * @return {?}\n */\nfunction makeAnimationEvent(element, triggerName, fromState, toState, phaseName = '', totalTime = 0, disabled) {\n    return { element, triggerName, fromState, toState, phaseName, totalTime, disabled: !!disabled };\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} defaultValue\n * @return {?}\n */\nfunction getOrSetAsInMap(map, key, defaultValue) {\n    /** @type {?} */\n    let value;\n    if (map instanceof Map) {\n        value = map.get(key);\n        if (!value) {\n            map.set(key, value = defaultValue);\n        }\n    }\n    else {\n        value = map[key];\n        if (!value) {\n            value = map[key] = defaultValue;\n        }\n    }\n    return value;\n}\n/**\n * @param {?} command\n * @return {?}\n */\nfunction parseTimelineCommand(command) {\n    /** @type {?} */\n    const separatorPos = command.indexOf(':');\n    /** @type {?} */\n    const id = command.substring(1, separatorPos);\n    /** @type {?} */\n    const action = command.substr(separatorPos + 1);\n    return [id, action];\n}\n/** @type {?} */\nlet _contains = (elm1, elm2) => false;\n/** @type {?} */\nlet _matches = (element, selector) => false;\n/** @type {?} */\nlet _query = (element, selector, multi) => {\n    return [];\n};\n// Define utility methods for browsers and platform-server(domino) where Element\n// and utility methods exist.\n/** @type {?} */\nconst _isNode = isNode();\nif (_isNode || typeof Element !== 'undefined') {\n    // this is well supported in all browsers\n    _contains = (elm1, elm2) => { return (/** @type {?} */ (elm1.contains(elm2))); };\n    if (_isNode || Element.prototype.matches) {\n        _matches = (element, selector) => element.matches(selector);\n    }\n    else {\n        /** @type {?} */\n        const proto = (/** @type {?} */ (Element.prototype));\n        /** @type {?} */\n        const fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||\n            proto.oMatchesSelector || proto.webkitMatchesSelector;\n        if (fn) {\n            _matches = (element, selector) => fn.apply(element, [selector]);\n        }\n    }\n    _query = (element, selector, multi) => {\n        /** @type {?} */\n        let results = [];\n        if (multi) {\n            results.push(...element.querySelectorAll(selector));\n        }\n        else {\n            /** @type {?} */\n            const elm = element.querySelector(selector);\n            if (elm) {\n                results.push(elm);\n            }\n        }\n        return results;\n    };\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction containsVendorPrefix(prop) {\n    // Webkit is the only real popular vendor prefix nowadays\n    // cc: http://shouldiprefix.com/\n    return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit\n}\n/** @type {?} */\nlet _CACHED_BODY = null;\n/** @type {?} */\nlet _IS_WEBKIT = false;\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction validateStyleProperty(prop) {\n    if (!_CACHED_BODY) {\n        _CACHED_BODY = getBodyNode() || {};\n        _IS_WEBKIT = (/** @type {?} */ (_CACHED_BODY)).style ? ('WebkitAppearance' in (/** @type {?} */ (_CACHED_BODY)).style) : false;\n    }\n    /** @type {?} */\n    let result = true;\n    if ((/** @type {?} */ (_CACHED_BODY)).style && !containsVendorPrefix(prop)) {\n        result = prop in (/** @type {?} */ (_CACHED_BODY)).style;\n        if (!result && _IS_WEBKIT) {\n            /** @type {?} */\n            const camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);\n            result = camelProp in (/** @type {?} */ (_CACHED_BODY)).style;\n        }\n    }\n    return result;\n}\n/**\n * @return {?}\n */\nfunction getBodyNode() {\n    if (typeof document != 'undefined') {\n        return document.body;\n    }\n    return null;\n}\n/** @type {?} */\nconst matchesElement = _matches;\n/** @type {?} */\nconst containsElement = _contains;\n/** @type {?} */\nconst invokeQuery = _query;\n/**\n * @param {?} object\n * @return {?}\n */\nfunction hypenatePropsObject(object) {\n    /** @type {?} */\n    const newObj = {};\n    Object.keys(object).forEach(prop => {\n        /** @type {?} */\n        const newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');\n        newObj[newProp] = object[prop];\n    });\n    return newObj;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n */\nclass NoopAnimationDriver {\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return defaultValue || '';\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @param {?=} scrubberAccessRequested\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        return new NoopAnimationPlayer(duration, delay);\n    }\n}\nNoopAnimationDriver.decorators = [\n    { type: Injectable }\n];\n/**\n * \\@publicApi\n * @abstract\n */\nclass AnimationDriver {\n}\nAnimationDriver.NOOP = new NoopAnimationDriver();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ONE_SECOND = 1000;\n/** @type {?} */\nconst SUBSTITUTION_EXPR_START = '{{';\n/** @type {?} */\nconst SUBSTITUTION_EXPR_END = '}}';\n/** @type {?} */\nconst ENTER_CLASSNAME = 'ng-enter';\n/** @type {?} */\nconst LEAVE_CLASSNAME = 'ng-leave';\n/** @type {?} */\nconst NG_TRIGGER_CLASSNAME = 'ng-trigger';\n/** @type {?} */\nconst NG_TRIGGER_SELECTOR = '.ng-trigger';\n/** @type {?} */\nconst NG_ANIMATING_CLASSNAME = 'ng-animating';\n/** @type {?} */\nconst NG_ANIMATING_SELECTOR = '.ng-animating';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction resolveTimingValue(value) {\n    if (typeof value == 'number')\n        return value;\n    /** @type {?} */\n    const matches = ((/** @type {?} */ (value))).match(/^(-?[\\.\\d]+)(m?s)/);\n    if (!matches || matches.length < 2)\n        return 0;\n    return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n}\n/**\n * @param {?} value\n * @param {?} unit\n * @return {?}\n */\nfunction _convertTimeValueToMS(value, unit) {\n    switch (unit) {\n        case 's':\n            return value * ONE_SECOND;\n        default: // ms or something else\n            return value;\n    }\n}\n/**\n * @param {?} timings\n * @param {?} errors\n * @param {?=} allowNegativeValues\n * @return {?}\n */\nfunction resolveTiming(timings, errors, allowNegativeValues) {\n    return timings.hasOwnProperty('duration') ?\n        (/** @type {?} */ (timings)) :\n        parseTimeExpression((/** @type {?} */ (timings)), errors, allowNegativeValues);\n}\n/**\n * @param {?} exp\n * @param {?} errors\n * @param {?=} allowNegativeValues\n * @return {?}\n */\nfunction parseTimeExpression(exp, errors, allowNegativeValues) {\n    /** @type {?} */\n    const regex = /^(-?[\\.\\d]+)(m?s)(?:\\s+(-?[\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n    /** @type {?} */\n    let duration;\n    /** @type {?} */\n    let delay = 0;\n    /** @type {?} */\n    let easing = '';\n    if (typeof exp === 'string') {\n        /** @type {?} */\n        const matches = exp.match(regex);\n        if (matches === null) {\n            errors.push(`The provided timing value \"${exp}\" is invalid.`);\n            return { duration: 0, delay: 0, easing: '' };\n        }\n        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n        /** @type {?} */\n        const delayMatch = matches[3];\n        if (delayMatch != null) {\n            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);\n        }\n        /** @type {?} */\n        const easingVal = matches[5];\n        if (easingVal) {\n            easing = easingVal;\n        }\n    }\n    else {\n        duration = (/** @type {?} */ (exp));\n    }\n    if (!allowNegativeValues) {\n        /** @type {?} */\n        let containsErrors = false;\n        /** @type {?} */\n        let startIndex = errors.length;\n        if (duration < 0) {\n            errors.push(`Duration values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (delay < 0) {\n            errors.push(`Delay values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (containsErrors) {\n            errors.splice(startIndex, 0, `The provided timing value \"${exp}\" is invalid.`);\n        }\n    }\n    return { duration, delay, easing };\n}\n/**\n * @param {?} obj\n * @param {?=} destination\n * @return {?}\n */\nfunction copyObj(obj, destination = {}) {\n    Object.keys(obj).forEach(prop => { destination[prop] = obj[prop]; });\n    return destination;\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction normalizeStyles(styles) {\n    /** @type {?} */\n    const normalizedStyles = {};\n    if (Array.isArray(styles)) {\n        styles.forEach(data => copyStyles(data, false, normalizedStyles));\n    }\n    else {\n        copyStyles(styles, false, normalizedStyles);\n    }\n    return normalizedStyles;\n}\n/**\n * @param {?} styles\n * @param {?} readPrototype\n * @param {?=} destination\n * @return {?}\n */\nfunction copyStyles(styles, readPrototype, destination = {}) {\n    if (readPrototype) {\n        // we make use of a for-in loop so that the\n        // prototypically inherited properties are\n        // revealed from the backFill map\n        for (let prop in styles) {\n            destination[prop] = styles[prop];\n        }\n    }\n    else {\n        copyObj(styles, destination);\n    }\n    return destination;\n}\n/**\n * @param {?} element\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction getStyleAttributeString(element, key, value) {\n    // Return the key-value pair string to be added to the style attribute for the\n    // given CSS style key.\n    if (value) {\n        return key + ':' + value + ';';\n    }\n    else {\n        return '';\n    }\n}\n/**\n * @param {?} element\n * @return {?}\n */\nfunction writeStyleAttribute(element) {\n    // Read the style property of the element and manually reflect it to the\n    // style attribute. This is needed because Domino on platform-server doesn't\n    // understand the full set of allowed CSS properties and doesn't reflect some\n    // of them automatically.\n    /** @type {?} */\n    let styleAttrValue = '';\n    for (let i = 0; i < element.style.length; i++) {\n        /** @type {?} */\n        const key = element.style.item(i);\n        styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));\n    }\n    for (const key in element.style) {\n        // Skip internal Domino properties that don't need to be reflected.\n        if (!element.style.hasOwnProperty(key) || key.startsWith('_')) {\n            continue;\n        }\n        /** @type {?} */\n        const dashKey = camelCaseToDashCase(key);\n        styleAttrValue += getStyleAttributeString(element, dashKey, element.style[key]);\n    }\n    element.setAttribute('style', styleAttrValue);\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction setStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(prop => {\n            /** @type {?} */\n            const camelProp = dashCaseToCamelCase(prop);\n            element.style[camelProp] = styles[prop];\n        });\n        // On the server set the 'style' attribute since it's not automatically reflected.\n        if (isNode()) {\n            writeStyleAttribute(element);\n        }\n    }\n}\n/**\n * @param {?} element\n * @param {?} styles\n * @return {?}\n */\nfunction eraseStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(prop => {\n            /** @type {?} */\n            const camelProp = dashCaseToCamelCase(prop);\n            element.style[camelProp] = '';\n        });\n        // On the server set the 'style' attribute since it's not automatically reflected.\n        if (isNode()) {\n            writeStyleAttribute(element);\n        }\n    }\n}\n/**\n * @param {?} steps\n * @return {?}\n */\nfunction normalizeAnimationEntry(steps) {\n    if (Array.isArray(steps)) {\n        if (steps.length == 1)\n            return steps[0];\n        return sequence(steps);\n    }\n    return (/** @type {?} */ (steps));\n}\n/**\n * @param {?} value\n * @param {?} options\n * @param {?} errors\n * @return {?}\n */\nfunction validateStyleParams(value, options, errors) {\n    /** @type {?} */\n    const params = options.params || {};\n    /** @type {?} */\n    const matches = extractStyleParams(value);\n    if (matches.length) {\n        matches.forEach(varName => {\n            if (!params.hasOwnProperty(varName)) {\n                errors.push(`Unable to resolve the local animation param ${varName} in the given list of values`);\n            }\n        });\n    }\n}\n/** @type {?} */\nconst PARAM_REGEX = new RegExp(`${SUBSTITUTION_EXPR_START}\\\\s*(.+?)\\\\s*${SUBSTITUTION_EXPR_END}`, 'g');\n/**\n * @param {?} value\n * @return {?}\n */\nfunction extractStyleParams(value) {\n    /** @type {?} */\n    let params = [];\n    if (typeof value === 'string') {\n        /** @type {?} */\n        const val = value.toString();\n        /** @type {?} */\n        let match;\n        while (match = PARAM_REGEX.exec(val)) {\n            params.push((/** @type {?} */ (match[1])));\n        }\n        PARAM_REGEX.lastIndex = 0;\n    }\n    return params;\n}\n/**\n * @param {?} value\n * @param {?} params\n * @param {?} errors\n * @return {?}\n */\nfunction interpolateParams(value, params, errors) {\n    /** @type {?} */\n    const original = value.toString();\n    /** @type {?} */\n    const str = original.replace(PARAM_REGEX, (_, varName) => {\n        /** @type {?} */\n        let localVal = params[varName];\n        // this means that the value was never overridden by the data passed in by the user\n        if (!params.hasOwnProperty(varName)) {\n            errors.push(`Please provide a value for the animation param ${varName}`);\n            localVal = '';\n        }\n        return localVal.toString();\n    });\n    // we do this to assert that numeric values stay as they are\n    return str == original ? value : str;\n}\n/**\n * @param {?} iterator\n * @return {?}\n */\nfunction iteratorToArray(iterator) {\n    /** @type {?} */\n    const arr = [];\n    /** @type {?} */\n    let item = iterator.next();\n    while (!item.done) {\n        arr.push(item.value);\n        item = iterator.next();\n    }\n    return arr;\n}\n/** @type {?} */\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n/**\n * @param {?} duration\n * @param {?} delay\n * @return {?}\n */\nfunction allowPreviousPlayerStylesMerge(duration, delay) {\n    return duration === 0 || delay === 0;\n}\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} previousStyles\n * @return {?}\n */\nfunction balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {\n    /** @type {?} */\n    const previousStyleProps = Object.keys(previousStyles);\n    if (previousStyleProps.length && keyframes.length) {\n        /** @type {?} */\n        let startingKeyframe = keyframes[0];\n        /** @type {?} */\n        let missingStyleProps = [];\n        previousStyleProps.forEach(prop => {\n            if (!startingKeyframe.hasOwnProperty(prop)) {\n                missingStyleProps.push(prop);\n            }\n            startingKeyframe[prop] = previousStyles[prop];\n        });\n        if (missingStyleProps.length) {\n            // tslint:disable-next-line\n            for (var i = 1; i < keyframes.length; i++) {\n                /** @type {?} */\n                let kf = keyframes[i];\n                missingStyleProps.forEach(function (prop) { kf[prop] = computeStyle(element, prop); });\n            }\n        }\n    }\n    return keyframes;\n}\n/**\n * @param {?} visitor\n * @param {?} node\n * @param {?} context\n * @return {?}\n */\nfunction visitDslNode(visitor, node, context) {\n    switch (node.type) {\n        case 7 /* Trigger */:\n            return visitor.visitTrigger(node, context);\n        case 0 /* State */:\n            return visitor.visitState(node, context);\n        case 1 /* Transition */:\n            return visitor.visitTransition(node, context);\n        case 2 /* Sequence */:\n            return visitor.visitSequence(node, context);\n        case 3 /* Group */:\n            return visitor.visitGroup(node, context);\n        case 4 /* Animate */:\n            return visitor.visitAnimate(node, context);\n        case 5 /* Keyframes */:\n            return visitor.visitKeyframes(node, context);\n        case 6 /* Style */:\n            return visitor.visitStyle(node, context);\n        case 8 /* Reference */:\n            return visitor.visitReference(node, context);\n        case 9 /* AnimateChild */:\n            return visitor.visitAnimateChild(node, context);\n        case 10 /* AnimateRef */:\n            return visitor.visitAnimateRef(node, context);\n        case 11 /* Query */:\n            return visitor.visitQuery(node, context);\n        case 12 /* Stagger */:\n            return visitor.visitStagger(node, context);\n        default:\n            throw new Error(`Unable to resolve animation metadata node #${node.type}`);\n    }\n}\n/**\n * @param {?} element\n * @param {?} prop\n * @return {?}\n */\nfunction computeStyle(element, prop) {\n    return ((/** @type {?} */ (window.getComputedStyle(element))))[prop];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst ANY_STATE = '*';\n/**\n * @param {?} transitionValue\n * @param {?} errors\n * @return {?}\n */\nfunction parseTransitionExpr(transitionValue, errors) {\n    /** @type {?} */\n    const expressions = [];\n    if (typeof transitionValue == 'string') {\n        ((/** @type {?} */ (transitionValue)))\n            .split(/\\s*,\\s*/)\n            .forEach(str => parseInnerTransitionStr(str, expressions, errors));\n    }\n    else {\n        expressions.push((/** @type {?} */ (transitionValue)));\n    }\n    return expressions;\n}\n/**\n * @param {?} eventStr\n * @param {?} expressions\n * @param {?} errors\n * @return {?}\n */\nfunction parseInnerTransitionStr(eventStr, expressions, errors) {\n    if (eventStr[0] == ':') {\n        /** @type {?} */\n        const result = parseAnimationAlias(eventStr, errors);\n        if (typeof result == 'function') {\n            expressions.push(result);\n            return;\n        }\n        eventStr = (/** @type {?} */ (result));\n    }\n    /** @type {?} */\n    const match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n    if (match == null || match.length < 4) {\n        errors.push(`The provided transition expression \"${eventStr}\" is not supported`);\n        return expressions;\n    }\n    /** @type {?} */\n    const fromState = match[1];\n    /** @type {?} */\n    const separator = match[2];\n    /** @type {?} */\n    const toState = match[3];\n    expressions.push(makeLambdaFromStates(fromState, toState));\n    /** @type {?} */\n    const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n    if (separator[0] == '<' && !isFullAnyStateExpr) {\n        expressions.push(makeLambdaFromStates(toState, fromState));\n    }\n}\n/**\n * @param {?} alias\n * @param {?} errors\n * @return {?}\n */\nfunction parseAnimationAlias(alias, errors) {\n    switch (alias) {\n        case ':enter':\n            return 'void => *';\n        case ':leave':\n            return '* => void';\n        case ':increment':\n            return (fromState, toState) => parseFloat(toState) > parseFloat(fromState);\n        case ':decrement':\n            return (fromState, toState) => parseFloat(toState) < parseFloat(fromState);\n        default:\n            errors.push(`The transition alias value \"${alias}\" is not supported`);\n            return '* => *';\n    }\n}\n// DO NOT REFACTOR ... keep the follow set instantiations\n// with the values intact (closure compiler for some reason\n// removes follow-up lines that add the values outside of\n// the constructor...\n/** @type {?} */\nconst TRUE_BOOLEAN_VALUES = new Set(['true', '1']);\n/** @type {?} */\nconst FALSE_BOOLEAN_VALUES = new Set(['false', '0']);\n/**\n * @param {?} lhs\n * @param {?} rhs\n * @return {?}\n */\nfunction makeLambdaFromStates(lhs, rhs) {\n    /** @type {?} */\n    const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);\n    /** @type {?} */\n    const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);\n    return (fromState, toState) => {\n        /** @type {?} */\n        let lhsMatch = lhs == ANY_STATE || lhs == fromState;\n        /** @type {?} */\n        let rhsMatch = rhs == ANY_STATE || rhs == toState;\n        if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {\n            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);\n        }\n        if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {\n            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);\n        }\n        return lhsMatch && rhsMatch;\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELF_TOKEN = ':self';\n/** @type {?} */\nconst SELF_TOKEN_REGEX = new RegExp(`\\s*${SELF_TOKEN}\\s*,?`, 'g');\n/*\n * [Validation]\n * The visitor code below will traverse the animation AST generated by the animation verb functions\n * (the output is a tree of objects) and attempt to perform a series of validations on the data. The\n * following corner-cases will be validated:\n *\n * 1. Overlap of animations\n * Given that a CSS property cannot be animated in more than one place at the same time, it's\n * important that this behavior is detected and validated. The way in which this occurs is that\n * each time a style property is examined, a string-map containing the property will be updated with\n * the start and end times for when the property is used within an animation step.\n *\n * If there are two or more parallel animations that are currently running (these are invoked by the\n * group()) on the same element then the validator will throw an error. Since the start/end timing\n * values are collected for each property then if the current animation step is animating the same\n * property and its timing values fall anywhere into the window of time that the property is\n * currently being animated within then this is what causes an error.\n *\n * 2. Timing values\n * The validator will validate to see if a timing value of `duration delay easing` or\n * `durationNumber` is valid or not.\n *\n * (note that upon validation the code below will replace the timing data with an object containing\n * {duration,delay,easing}.\n *\n * 3. Offset Validation\n * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().\n * Offsets within keyframes() are considered valid when:\n *\n *   - No offsets are used at all\n *   - Each style() entry contains an offset value\n *   - Each offset is between 0 and 1\n *   - Each offset is greater to or equal than the previous one\n *\n * Otherwise an error will be thrown.\n */\n/**\n * @param {?} driver\n * @param {?} metadata\n * @param {?} errors\n * @return {?}\n */\nfunction buildAnimationAst(driver, metadata, errors) {\n    return new AnimationAstBuilderVisitor(driver).build(metadata, errors);\n}\n/** @type {?} */\nconst ROOT_SELECTOR = '';\nclass AnimationAstBuilderVisitor {\n    /**\n     * @param {?} _driver\n     */\n    constructor(_driver) {\n        this._driver = _driver;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} errors\n     * @return {?}\n     */\n    build(metadata, errors) {\n        /** @type {?} */\n        const context = new AnimationAstBuilderContext(errors);\n        this._resetContextStyleTimingState(context);\n        return (/** @type {?} */ (visitDslNode(this, normalizeAnimationEntry(metadata), context)));\n    }\n    /**\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _resetContextStyleTimingState(context) {\n        context.currentQuerySelector = ROOT_SELECTOR;\n        context.collectedStyles = {};\n        context.collectedStyles[ROOT_SELECTOR] = {};\n        context.currentTime = 0;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitTrigger(metadata, context) {\n        /** @type {?} */\n        let queryCount = context.queryCount = 0;\n        /** @type {?} */\n        let depCount = context.depCount = 0;\n        /** @type {?} */\n        const states = [];\n        /** @type {?} */\n        const transitions = [];\n        if (metadata.name.charAt(0) == '@') {\n            context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\\'@foo\\', [...]))');\n        }\n        metadata.definitions.forEach(def => {\n            this._resetContextStyleTimingState(context);\n            if (def.type == 0 /* State */) {\n                /** @type {?} */\n                const stateDef = (/** @type {?} */ (def));\n                /** @type {?} */\n                const name = stateDef.name;\n                name.toString().split(/\\s*,\\s*/).forEach(n => {\n                    stateDef.name = n;\n                    states.push(this.visitState(stateDef, context));\n                });\n                stateDef.name = name;\n            }\n            else if (def.type == 1 /* Transition */) {\n                /** @type {?} */\n                const transition = this.visitTransition((/** @type {?} */ (def)), context);\n                queryCount += transition.queryCount;\n                depCount += transition.depCount;\n                transitions.push(transition);\n            }\n            else {\n                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');\n            }\n        });\n        return {\n            type: 7 /* Trigger */,\n            name: metadata.name, states, transitions, queryCount, depCount,\n            options: null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitState(metadata, context) {\n        /** @type {?} */\n        const styleAst = this.visitStyle(metadata.styles, context);\n        /** @type {?} */\n        const astParams = (metadata.options && metadata.options.params) || null;\n        if (styleAst.containsDynamicStyles) {\n            /** @type {?} */\n            const missingSubs = new Set();\n            /** @type {?} */\n            const params = astParams || {};\n            styleAst.styles.forEach(value => {\n                if (isObject(value)) {\n                    /** @type {?} */\n                    const stylesObj = (/** @type {?} */ (value));\n                    Object.keys(stylesObj).forEach(prop => {\n                        extractStyleParams(stylesObj[prop]).forEach(sub => {\n                            if (!params.hasOwnProperty(sub)) {\n                                missingSubs.add(sub);\n                            }\n                        });\n                    });\n                }\n            });\n            if (missingSubs.size) {\n                /** @type {?} */\n                const missingSubsArr = iteratorToArray(missingSubs.values());\n                context.errors.push(`state(\"${metadata.name}\", ...) must define default values for all the following style substitutions: ${missingSubsArr.join(', ')}`);\n            }\n        }\n        return {\n            type: 0 /* State */,\n            name: metadata.name,\n            style: styleAst,\n            options: astParams ? { params: astParams } : null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitTransition(metadata, context) {\n        context.queryCount = 0;\n        context.depCount = 0;\n        /** @type {?} */\n        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        /** @type {?} */\n        const matchers = parseTransitionExpr(metadata.expr, context.errors);\n        return {\n            type: 1 /* Transition */,\n            matchers,\n            animation,\n            queryCount: context.queryCount,\n            depCount: context.depCount,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitSequence(metadata, context) {\n        return {\n            type: 2 /* Sequence */,\n            steps: metadata.steps.map(s => visitDslNode(this, s, context)),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitGroup(metadata, context) {\n        /** @type {?} */\n        const currentTime = context.currentTime;\n        /** @type {?} */\n        let furthestTime = 0;\n        /** @type {?} */\n        const steps = metadata.steps.map(step => {\n            context.currentTime = currentTime;\n            /** @type {?} */\n            const innerAst = visitDslNode(this, step, context);\n            furthestTime = Math.max(furthestTime, context.currentTime);\n            return innerAst;\n        });\n        context.currentTime = furthestTime;\n        return {\n            type: 3 /* Group */,\n            steps,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimate(metadata, context) {\n        /** @type {?} */\n        const timingAst = constructTimingAst(metadata.timings, context.errors);\n        context.currentAnimateTimings = timingAst;\n        /** @type {?} */\n        let styleAst;\n        /** @type {?} */\n        let styleMetadata = metadata.styles ? metadata.styles : style({});\n        if (styleMetadata.type == 5 /* Keyframes */) {\n            styleAst = this.visitKeyframes((/** @type {?} */ (styleMetadata)), context);\n        }\n        else {\n            /** @type {?} */\n            let styleMetadata = (/** @type {?} */ (metadata.styles));\n            /** @type {?} */\n            let isEmpty = false;\n            if (!styleMetadata) {\n                isEmpty = true;\n                /** @type {?} */\n                const newStyleData = {};\n                if (timingAst.easing) {\n                    newStyleData['easing'] = timingAst.easing;\n                }\n                styleMetadata = style(newStyleData);\n            }\n            context.currentTime += timingAst.duration + timingAst.delay;\n            /** @type {?} */\n            const _styleAst = this.visitStyle(styleMetadata, context);\n            _styleAst.isEmptyStep = isEmpty;\n            styleAst = _styleAst;\n        }\n        context.currentAnimateTimings = null;\n        return {\n            type: 4 /* Animate */,\n            timings: timingAst,\n            style: styleAst,\n            options: null\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitStyle(metadata, context) {\n        /** @type {?} */\n        const ast = this._makeStyleAst(metadata, context);\n        this._validateStyleAst(ast, context);\n        return ast;\n    }\n    /**\n     * @private\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    _makeStyleAst(metadata, context) {\n        /** @type {?} */\n        const styles = [];\n        if (Array.isArray(metadata.styles)) {\n            ((/** @type {?} */ (metadata.styles))).forEach(styleTuple => {\n                if (typeof styleTuple == 'string') {\n                    if (styleTuple == AUTO_STYLE) {\n                        styles.push((/** @type {?} */ (styleTuple)));\n                    }\n                    else {\n                        context.errors.push(`The provided style string value ${styleTuple} is not allowed.`);\n                    }\n                }\n                else {\n                    styles.push((/** @type {?} */ (styleTuple)));\n                }\n            });\n        }\n        else {\n            styles.push(metadata.styles);\n        }\n        /** @type {?} */\n        let containsDynamicStyles = false;\n        /** @type {?} */\n        let collectedEasing = null;\n        styles.forEach(styleData => {\n            if (isObject(styleData)) {\n                /** @type {?} */\n                const styleMap = (/** @type {?} */ (styleData));\n                /** @type {?} */\n                const easing = styleMap['easing'];\n                if (easing) {\n                    collectedEasing = (/** @type {?} */ (easing));\n                    delete styleMap['easing'];\n                }\n                if (!containsDynamicStyles) {\n                    for (let prop in styleMap) {\n                        /** @type {?} */\n                        const value = styleMap[prop];\n                        if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {\n                            containsDynamicStyles = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        });\n        return {\n            type: 6 /* Style */,\n            styles,\n            easing: collectedEasing,\n            offset: metadata.offset, containsDynamicStyles,\n            options: null\n        };\n    }\n    /**\n     * @private\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _validateStyleAst(ast, context) {\n        /** @type {?} */\n        const timings = context.currentAnimateTimings;\n        /** @type {?} */\n        let endTime = context.currentTime;\n        /** @type {?} */\n        let startTime = context.currentTime;\n        if (timings && startTime > 0) {\n            startTime -= timings.duration + timings.delay;\n        }\n        ast.styles.forEach(tuple => {\n            if (typeof tuple == 'string')\n                return;\n            Object.keys(tuple).forEach(prop => {\n                if (!this._driver.validateStyleProperty(prop)) {\n                    context.errors.push(`The provided animation property \"${prop}\" is not a supported CSS property for animations`);\n                    return;\n                }\n                /** @type {?} */\n                const collectedStyles = context.collectedStyles[(/** @type {?} */ (context.currentQuerySelector))];\n                /** @type {?} */\n                const collectedEntry = collectedStyles[prop];\n                /** @type {?} */\n                let updateCollectedStyle = true;\n                if (collectedEntry) {\n                    if (startTime != endTime && startTime >= collectedEntry.startTime &&\n                        endTime <= collectedEntry.endTime) {\n                        context.errors.push(`The CSS property \"${prop}\" that exists between the times of \"${collectedEntry.startTime}ms\" and \"${collectedEntry.endTime}ms\" is also being animated in a parallel animation between the times of \"${startTime}ms\" and \"${endTime}ms\"`);\n                        updateCollectedStyle = false;\n                    }\n                    // we always choose the smaller start time value since we\n                    // want to have a record of the entire animation window where\n                    // the style property is being animated in between\n                    startTime = collectedEntry.startTime;\n                }\n                if (updateCollectedStyle) {\n                    collectedStyles[prop] = { startTime, endTime };\n                }\n                if (context.options) {\n                    validateStyleParams(tuple[prop], context.options, context.errors);\n                }\n            });\n        });\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitKeyframes(metadata, context) {\n        /** @type {?} */\n        const ast = { type: 5 /* Keyframes */, styles: [], options: null };\n        if (!context.currentAnimateTimings) {\n            context.errors.push(`keyframes() must be placed inside of a call to animate()`);\n            return ast;\n        }\n        /** @type {?} */\n        const MAX_KEYFRAME_OFFSET = 1;\n        /** @type {?} */\n        let totalKeyframesWithOffsets = 0;\n        /** @type {?} */\n        const offsets = [];\n        /** @type {?} */\n        let offsetsOutOfOrder = false;\n        /** @type {?} */\n        let keyframesOutOfRange = false;\n        /** @type {?} */\n        let previousOffset = 0;\n        /** @type {?} */\n        const keyframes = metadata.steps.map(styles => {\n            /** @type {?} */\n            const style$$1 = this._makeStyleAst(styles, context);\n            /** @type {?} */\n            let offsetVal = style$$1.offset != null ? style$$1.offset : consumeOffset(style$$1.styles);\n            /** @type {?} */\n            let offset = 0;\n            if (offsetVal != null) {\n                totalKeyframesWithOffsets++;\n                offset = style$$1.offset = offsetVal;\n            }\n            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n            previousOffset = offset;\n            offsets.push(offset);\n            return style$$1;\n        });\n        if (keyframesOutOfRange) {\n            context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);\n        }\n        if (offsetsOutOfOrder) {\n            context.errors.push(`Please ensure that all keyframe offsets are in order`);\n        }\n        /** @type {?} */\n        const length = metadata.steps.length;\n        /** @type {?} */\n        let generatedOffset = 0;\n        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n            context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);\n        }\n        else if (totalKeyframesWithOffsets == 0) {\n            generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);\n        }\n        /** @type {?} */\n        const limit = length - 1;\n        /** @type {?} */\n        const currentTime = context.currentTime;\n        /** @type {?} */\n        const currentAnimateTimings = (/** @type {?} */ (context.currentAnimateTimings));\n        /** @type {?} */\n        const animateDuration = currentAnimateTimings.duration;\n        keyframes.forEach((kf, i) => {\n            /** @type {?} */\n            const offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n            /** @type {?} */\n            const durationUpToThisFrame = offset * animateDuration;\n            context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;\n            currentAnimateTimings.duration = durationUpToThisFrame;\n            this._validateStyleAst(kf, context);\n            kf.offset = offset;\n            ast.styles.push(kf);\n        });\n        return ast;\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitReference(metadata, context) {\n        return {\n            type: 8 /* Reference */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateChild(metadata, context) {\n        context.depCount++;\n        return {\n            type: 9 /* AnimateChild */,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateRef(metadata, context) {\n        return {\n            type: 10 /* AnimateRef */,\n            animation: this.visitReference(metadata.animation, context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitQuery(metadata, context) {\n        /** @type {?} */\n        const parentSelector = (/** @type {?} */ (context.currentQuerySelector));\n        /** @type {?} */\n        const options = (/** @type {?} */ ((metadata.options || {})));\n        context.queryCount++;\n        context.currentQuery = metadata;\n        const [selector, includeSelf] = normalizeSelector(metadata.selector);\n        context.currentQuerySelector =\n            parentSelector.length ? (parentSelector + ' ' + selector) : selector;\n        getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});\n        /** @type {?} */\n        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        context.currentQuery = null;\n        context.currentQuerySelector = parentSelector;\n        return {\n            type: 11 /* Query */,\n            selector,\n            limit: options.limit || 0,\n            optional: !!options.optional, includeSelf, animation,\n            originalSelector: metadata.selector,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    /**\n     * @param {?} metadata\n     * @param {?} context\n     * @return {?}\n     */\n    visitStagger(metadata, context) {\n        if (!context.currentQuery) {\n            context.errors.push(`stagger() can only be used inside of query()`);\n        }\n        /** @type {?} */\n        const timings = metadata.timings === 'full' ?\n            { duration: 0, delay: 0, easing: 'full' } :\n            resolveTiming(metadata.timings, context.errors, true);\n        return {\n            type: 12 /* Stagger */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context), timings,\n            options: null\n        };\n    }\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction normalizeSelector(selector) {\n    /** @type {?} */\n    const hasAmpersand = selector.split(/\\s*,\\s*/).find(token => token == SELF_TOKEN) ? true : false;\n    if (hasAmpersand) {\n        selector = selector.replace(SELF_TOKEN_REGEX, '');\n    }\n    // the :enter and :leave selectors are filled in at runtime during timeline building\n    selector = selector.replace(/@\\*/g, NG_TRIGGER_SELECTOR)\n        .replace(/@\\w+/g, match => NG_TRIGGER_SELECTOR + '-' + match.substr(1))\n        .replace(/:animating/g, NG_ANIMATING_SELECTOR);\n    return [selector, hasAmpersand];\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction normalizeParams(obj) {\n    return obj ? copyObj(obj) : null;\n}\nclass AnimationAstBuilderContext {\n    /**\n     * @param {?} errors\n     */\n    constructor(errors) {\n        this.errors = errors;\n        this.queryCount = 0;\n        this.depCount = 0;\n        this.currentTransition = null;\n        this.currentQuery = null;\n        this.currentQuerySelector = null;\n        this.currentAnimateTimings = null;\n        this.currentTime = 0;\n        this.collectedStyles = {};\n        this.options = null;\n    }\n}\n/**\n * @param {?} styles\n * @return {?}\n */\nfunction consumeOffset(styles) {\n    if (typeof styles == 'string')\n        return null;\n    /** @type {?} */\n    let offset = null;\n    if (Array.isArray(styles)) {\n        styles.forEach(styleTuple => {\n            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {\n                /** @type {?} */\n                const obj = (/** @type {?} */ (styleTuple));\n                offset = parseFloat((/** @type {?} */ (obj['offset'])));\n                delete obj['offset'];\n            }\n        });\n    }\n    else if (isObject(styles) && styles.hasOwnProperty('offset')) {\n        /** @type {?} */\n        const obj = (/** @type {?} */ (styles));\n        offset = parseFloat((/** @type {?} */ (obj['offset'])));\n        delete obj['offset'];\n    }\n    return offset;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isObject(value) {\n    return !Array.isArray(value) && typeof value == 'object';\n}\n/**\n * @param {?} value\n * @param {?} errors\n * @return {?}\n */\nfunction constructTimingAst(value, errors) {\n    /** @type {?} */\n    let timings = null;\n    if (value.hasOwnProperty('duration')) {\n        timings = (/** @type {?} */ (value));\n    }\n    else if (typeof value == 'number') {\n        /** @type {?} */\n        const duration = resolveTiming((/** @type {?} */ (value)), errors).duration;\n        return makeTimingAst((/** @type {?} */ (duration)), 0, '');\n    }\n    /** @type {?} */\n    const strValue = (/** @type {?} */ (value));\n    /** @type {?} */\n    const isDynamic = strValue.split(/\\s+/).some(v => v.charAt(0) == '{' && v.charAt(1) == '{');\n    if (isDynamic) {\n        /** @type {?} */\n        const ast = (/** @type {?} */ (makeTimingAst(0, 0, '')));\n        ast.dynamic = true;\n        ast.strValue = strValue;\n        return (/** @type {?} */ (ast));\n    }\n    timings = timings || resolveTiming(strValue, errors);\n    return makeTimingAst(timings.duration, timings.delay, timings.easing);\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction normalizeAnimationOptions(options) {\n    if (options) {\n        options = copyObj(options);\n        if (options['params']) {\n            options['params'] = (/** @type {?} */ (normalizeParams(options['params'])));\n        }\n    }\n    else {\n        options = {};\n    }\n    return options;\n}\n/**\n * @param {?} duration\n * @param {?} delay\n * @param {?} easing\n * @return {?}\n */\nfunction makeTimingAst(duration, delay, easing) {\n    return { duration, delay, easing };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} element\n * @param {?} keyframes\n * @param {?} preStyleProps\n * @param {?} postStyleProps\n * @param {?} duration\n * @param {?} delay\n * @param {?=} easing\n * @param {?=} subTimeline\n * @return {?}\n */\nfunction createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {\n    return {\n        type: 1 /* TimelineAnimation */,\n        element,\n        keyframes,\n        preStyleProps,\n        postStyleProps,\n        duration,\n        delay,\n        totalTime: duration + delay, easing, subTimeline\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ElementInstructionMap {\n    constructor() {\n        this._map = new Map();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    consume(element) {\n        /** @type {?} */\n        let instructions = this._map.get(element);\n        if (instructions) {\n            this._map.delete(element);\n        }\n        else {\n            instructions = [];\n        }\n        return instructions;\n    }\n    /**\n     * @param {?} element\n     * @param {?} instructions\n     * @return {?}\n     */\n    append(element, instructions) {\n        /** @type {?} */\n        let existingInstructions = this._map.get(element);\n        if (!existingInstructions) {\n            this._map.set(element, existingInstructions = []);\n        }\n        existingInstructions.push(...instructions);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    has(element) { return this._map.has(element); }\n    /**\n     * @return {?}\n     */\n    clear() { this._map.clear(); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ONE_FRAME_IN_MILLISECONDS = 1;\n/** @type {?} */\nconst ENTER_TOKEN = ':enter';\n/** @type {?} */\nconst ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');\n/** @type {?} */\nconst LEAVE_TOKEN = ':leave';\n/** @type {?} */\nconst LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');\n/*\n * The code within this file aims to generate web-animations-compatible keyframes from Angular's\n * animation DSL code.\n *\n * The code below will be converted from:\n *\n * ```\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(1000, style({ opacity: 0 }))\n * ])\n * ```\n *\n * To:\n * ```\n * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]\n * duration = 1000\n * delay = 0\n * easing = ''\n * ```\n *\n * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a\n * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.\n *\n * [AST Traversal]\n * Each of the animation verbs, when executed, will return an string-map object representing what\n * type of action it is (style, animate, group, etc...) and the data associated with it. This means\n * that when functional composition mix of these functions is evaluated (like in the example above)\n * then it will end up producing a tree of objects representing the animation itself.\n *\n * When this animation object tree is processed by the visitor code below it will visit each of the\n * verb statements within the visitor. And during each visit it will build the context of the\n * animation keyframes by interacting with the `TimelineBuilder`.\n *\n * [TimelineBuilder]\n * This class is responsible for tracking the styles and building a series of keyframe objects for a\n * timeline between a start and end time. The builder starts off with an initial timeline and each\n * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a\n * `sequence()` then it will generate a sub timeline for each step as well as a new one after\n * they are complete.\n *\n * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub\n * timeline was created (based on one of the cases above) then the parent timeline will attempt to\n * merge the styles used within the sub timelines into itself (only with group() this will happen).\n * This happens with a merge operation (much like how the merge works in mergesort) and it will only\n * copy the most recently used styles from the sub timelines into the parent timeline. This ensures\n * that if the styles are used later on in another phase of the animation then they will be the most\n * up-to-date values.\n *\n * [How Missing Styles Are Updated]\n * Each timeline has a `backFill` property which is responsible for filling in new styles into\n * already processed keyframes if a new style shows up later within the animation sequence.\n *\n * ```\n * sequence([\n *   style({ width: 0 }),\n *   animate(1000, style({ width: 100 })),\n *   animate(1000, style({ width: 200 })),\n *   animate(1000, style({ width: 300 }))\n *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere\n * else\n * ])\n * ```\n *\n * What is happening here is that the `height` value is added later in the sequence, but is missing\n * from all previous animation steps. Therefore when a keyframe is created it would also be missing\n * from all previous keyframes up until where it is first used. For the timeline keyframe generation\n * to properly fill in the style it will place the previous value (the value from the parent\n * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe\n * styles are objects that prototypically inhert from the backFill object, this means that if a\n * value is added into the backFill then it will automatically propagate any missing values to all\n * keyframes. Therefore the missing `height` value will be properly filled into the already\n * processed keyframes.\n *\n * When a sub-timeline is created it will have its own backFill property. This is done so that\n * styles present within the sub-timeline do not accidentally seep into the previous/future timeline\n * keyframes\n *\n * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)\n *\n * [Validation]\n * The code in this file is not responsible for validation. That functionality happens with within\n * the `AnimationValidatorVisitor` code.\n */\n/**\n * @param {?} driver\n * @param {?} rootElement\n * @param {?} ast\n * @param {?} enterClassName\n * @param {?} leaveClassName\n * @param {?=} startingStyles\n * @param {?=} finalStyles\n * @param {?=} options\n * @param {?=} subInstructions\n * @param {?=} errors\n * @return {?}\n */\nfunction buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = {}, finalStyles = {}, options, subInstructions, errors = []) {\n    return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);\n}\nclass AnimationTimelineBuilderVisitor {\n    /**\n     * @param {?} driver\n     * @param {?} rootElement\n     * @param {?} ast\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?} startingStyles\n     * @param {?} finalStyles\n     * @param {?} options\n     * @param {?=} subInstructions\n     * @param {?=} errors\n     * @return {?}\n     */\n    buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {\n        subInstructions = subInstructions || new ElementInstructionMap();\n        /** @type {?} */\n        const context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);\n        context.options = options;\n        context.currentTimeline.setStyles([startingStyles], null, context.errors, options);\n        visitDslNode(this, ast, context);\n        // this checks to see if an actual animation happened\n        /** @type {?} */\n        const timelines = context.timelines.filter(timeline => timeline.containsAnimation());\n        if (timelines.length && Object.keys(finalStyles).length) {\n            /** @type {?} */\n            const tl = timelines[timelines.length - 1];\n            if (!tl.allowOnlyTimelineStyles()) {\n                tl.setStyles([finalStyles], null, context.errors, options);\n            }\n        }\n        return timelines.length ? timelines.map(timeline => timeline.buildKeyframes()) :\n            [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitTrigger(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitState(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitTransition(ast, context) {\n        // these values are not visited in this AST\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateChild(ast, context) {\n        /** @type {?} */\n        const elementInstructions = context.subInstructions.consume(context.element);\n        if (elementInstructions) {\n            /** @type {?} */\n            const innerContext = context.createSubContext(ast.options);\n            /** @type {?} */\n            const startTime = context.currentTimeline.currentTime;\n            /** @type {?} */\n            const endTime = this._visitSubInstructions(elementInstructions, innerContext, (/** @type {?} */ (innerContext.options)));\n            if (startTime != endTime) {\n                // we do this on the upper context because we created a sub context for\n                // the sub child animations\n                context.transformIntoNewTimeline(endTime);\n            }\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimateRef(ast, context) {\n        /** @type {?} */\n        const innerContext = context.createSubContext(ast.options);\n        innerContext.transformIntoNewTimeline();\n        this.visitReference(ast.animation, innerContext);\n        context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);\n        context.previousNode = ast;\n    }\n    /**\n     * @private\n     * @param {?} instructions\n     * @param {?} context\n     * @param {?} options\n     * @return {?}\n     */\n    _visitSubInstructions(instructions, context, options) {\n        /** @type {?} */\n        const startTime = context.currentTimeline.currentTime;\n        /** @type {?} */\n        let furthestTime = startTime;\n        // this is a special-case for when a user wants to skip a sub\n        // animation from being fired entirely.\n        /** @type {?} */\n        const duration = options.duration != null ? resolveTimingValue(options.duration) : null;\n        /** @type {?} */\n        const delay = options.delay != null ? resolveTimingValue(options.delay) : null;\n        if (duration !== 0) {\n            instructions.forEach(instruction => {\n                /** @type {?} */\n                const instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);\n                furthestTime =\n                    Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);\n            });\n        }\n        return furthestTime;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitReference(ast, context) {\n        context.updateOptions(ast.options, true);\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitSequence(ast, context) {\n        /** @type {?} */\n        const subContextCount = context.subContextCount;\n        /** @type {?} */\n        let ctx = context;\n        /** @type {?} */\n        const options = ast.options;\n        if (options && (options.params || options.delay)) {\n            ctx = context.createSubContext(options);\n            ctx.transformIntoNewTimeline();\n            if (options.delay != null) {\n                if (ctx.previousNode.type == 6 /* Style */) {\n                    ctx.currentTimeline.snapshotCurrentStyles();\n                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n                }\n                /** @type {?} */\n                const delay = resolveTimingValue(options.delay);\n                ctx.delayNextStep(delay);\n            }\n        }\n        if (ast.steps.length) {\n            ast.steps.forEach(s => visitDslNode(this, s, ctx));\n            // this is here just incase the inner steps only contain or end with a style() call\n            ctx.currentTimeline.applyStylesToKeyframe();\n            // this means that some animation function within the sequence\n            // ended up creating a sub timeline (which means the current\n            // timeline cannot overlap with the contents of the sequence)\n            if (ctx.subContextCount > subContextCount) {\n                ctx.transformIntoNewTimeline();\n            }\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitGroup(ast, context) {\n        /** @type {?} */\n        const innerTimelines = [];\n        /** @type {?} */\n        let furthestTime = context.currentTimeline.currentTime;\n        /** @type {?} */\n        const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;\n        ast.steps.forEach(s => {\n            /** @type {?} */\n            const innerContext = context.createSubContext(ast.options);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            visitDslNode(this, s, innerContext);\n            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n            innerTimelines.push(innerContext.currentTimeline);\n        });\n        // this operation is run after the AST loop because otherwise\n        // if the parent timeline's collected styles were updated then\n        // it would pass in invalid data into the new-to-be forked items\n        innerTimelines.forEach(timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));\n        context.transformIntoNewTimeline(furthestTime);\n        context.previousNode = ast;\n    }\n    /**\n     * @private\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _visitTiming(ast, context) {\n        if (((/** @type {?} */ (ast))).dynamic) {\n            /** @type {?} */\n            const strValue = ((/** @type {?} */ (ast))).strValue;\n            /** @type {?} */\n            const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;\n            return resolveTiming(timingValue, context.errors);\n        }\n        else {\n            return { duration: ast.duration, delay: ast.delay, easing: ast.easing };\n        }\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitAnimate(ast, context) {\n        /** @type {?} */\n        const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);\n        /** @type {?} */\n        const timeline = context.currentTimeline;\n        if (timings.delay) {\n            context.incrementTime(timings.delay);\n            timeline.snapshotCurrentStyles();\n        }\n        /** @type {?} */\n        const style$$1 = ast.style;\n        if (style$$1.type == 5 /* Keyframes */) {\n            this.visitKeyframes(style$$1, context);\n        }\n        else {\n            context.incrementTime(timings.duration);\n            this.visitStyle((/** @type {?} */ (style$$1)), context);\n            timeline.applyStylesToKeyframe();\n        }\n        context.currentAnimateTimings = null;\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitStyle(ast, context) {\n        /** @type {?} */\n        const timeline = context.currentTimeline;\n        /** @type {?} */\n        const timings = (/** @type {?} */ (context.currentAnimateTimings));\n        // this is a special case for when a style() call\n        // directly follows  an animate() call (but not inside of an animate() call)\n        if (!timings && timeline.getCurrentStyleProperties().length) {\n            timeline.forwardFrame();\n        }\n        /** @type {?} */\n        const easing = (timings && timings.easing) || ast.easing;\n        if (ast.isEmptyStep) {\n            timeline.applyEmptyStep(easing);\n        }\n        else {\n            timeline.setStyles(ast.styles, easing, context.errors, context.options);\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitKeyframes(ast, context) {\n        /** @type {?} */\n        const currentAnimateTimings = (/** @type {?} */ (context.currentAnimateTimings));\n        /** @type {?} */\n        const startTime = ((/** @type {?} */ (context.currentTimeline))).duration;\n        /** @type {?} */\n        const duration = currentAnimateTimings.duration;\n        /** @type {?} */\n        const innerContext = context.createSubContext();\n        /** @type {?} */\n        const innerTimeline = innerContext.currentTimeline;\n        innerTimeline.easing = currentAnimateTimings.easing;\n        ast.styles.forEach(step => {\n            /** @type {?} */\n            const offset = step.offset || 0;\n            innerTimeline.forwardTime(offset * duration);\n            innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);\n            innerTimeline.applyStylesToKeyframe();\n        });\n        // this will ensure that the parent timeline gets all the styles from\n        // the child even if the new timeline below is not used\n        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n        // we do this because the window between this timeline and the sub timeline\n        // should ensure that the styles within are exactly the same as they were before\n        context.transformIntoNewTimeline(startTime + duration);\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitQuery(ast, context) {\n        // in the event that the first step before this is a style step we need\n        // to ensure the styles are applied before the children are animated\n        /** @type {?} */\n        const startTime = context.currentTimeline.currentTime;\n        /** @type {?} */\n        const options = (/** @type {?} */ ((ast.options || {})));\n        /** @type {?} */\n        const delay = options.delay ? resolveTimingValue(options.delay) : 0;\n        if (delay && (context.previousNode.type === 6 /* Style */ ||\n            (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {\n            context.currentTimeline.snapshotCurrentStyles();\n            context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        }\n        /** @type {?} */\n        let furthestTime = startTime;\n        /** @type {?} */\n        const elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);\n        context.currentQueryTotal = elms.length;\n        /** @type {?} */\n        let sameElementTimeline = null;\n        elms.forEach((element, i) => {\n            context.currentQueryIndex = i;\n            /** @type {?} */\n            const innerContext = context.createSubContext(ast.options, element);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            if (element === context.element) {\n                sameElementTimeline = innerContext.currentTimeline;\n            }\n            visitDslNode(this, ast.animation, innerContext);\n            // this is here just incase the inner steps only contain or end\n            // with a style() call (which is here to signal that this is a preparatory\n            // call to style an element before it is animated again)\n            innerContext.currentTimeline.applyStylesToKeyframe();\n            /** @type {?} */\n            const endTime = innerContext.currentTimeline.currentTime;\n            furthestTime = Math.max(furthestTime, endTime);\n        });\n        context.currentQueryIndex = 0;\n        context.currentQueryTotal = 0;\n        context.transformIntoNewTimeline(furthestTime);\n        if (sameElementTimeline) {\n            context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        context.previousNode = ast;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    visitStagger(ast, context) {\n        /** @type {?} */\n        const parentContext = (/** @type {?} */ (context.parentContext));\n        /** @type {?} */\n        const tl = context.currentTimeline;\n        /** @type {?} */\n        const timings = ast.timings;\n        /** @type {?} */\n        const duration = Math.abs(timings.duration);\n        /** @type {?} */\n        const maxTime = duration * (context.currentQueryTotal - 1);\n        /** @type {?} */\n        let delay = duration * context.currentQueryIndex;\n        /** @type {?} */\n        let staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;\n        switch (staggerTransformer) {\n            case 'reverse':\n                delay = maxTime - delay;\n                break;\n            case 'full':\n                delay = parentContext.currentStaggerTime;\n                break;\n        }\n        /** @type {?} */\n        const timeline = context.currentTimeline;\n        if (delay) {\n            timeline.delayNextStep(delay);\n        }\n        /** @type {?} */\n        const startingTime = timeline.currentTime;\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n        // time = duration + delay\n        // the reason why this computation is so complex is because\n        // the inner timeline may either have a delay value or a stretched\n        // keyframe depending on if a subtimeline is not used or is used.\n        parentContext.currentStaggerTime =\n            (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);\n    }\n}\n/** @type {?} */\nconst DEFAULT_NOOP_PREVIOUS_NODE = (/** @type {?} */ ({}));\nclass AnimationTimelineContext {\n    /**\n     * @param {?} _driver\n     * @param {?} element\n     * @param {?} subInstructions\n     * @param {?} _enterClassName\n     * @param {?} _leaveClassName\n     * @param {?} errors\n     * @param {?} timelines\n     * @param {?=} initialTimeline\n     */\n    constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {\n        this._driver = _driver;\n        this.element = element;\n        this.subInstructions = subInstructions;\n        this._enterClassName = _enterClassName;\n        this._leaveClassName = _leaveClassName;\n        this.errors = errors;\n        this.timelines = timelines;\n        this.parentContext = null;\n        this.currentAnimateTimings = null;\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.subContextCount = 0;\n        this.options = {};\n        this.currentQueryIndex = 0;\n        this.currentQueryTotal = 0;\n        this.currentStaggerTime = 0;\n        this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);\n        timelines.push(this.currentTimeline);\n    }\n    /**\n     * @return {?}\n     */\n    get params() { return this.options.params; }\n    /**\n     * @param {?} options\n     * @param {?=} skipIfExists\n     * @return {?}\n     */\n    updateOptions(options, skipIfExists) {\n        if (!options)\n            return;\n        /** @type {?} */\n        const newOptions = (/** @type {?} */ (options));\n        /** @type {?} */\n        let optionsToUpdate = this.options;\n        // NOTE: this will get patched up when other animation methods support duration overrides\n        if (newOptions.duration != null) {\n            ((/** @type {?} */ (optionsToUpdate))).duration = resolveTimingValue(newOptions.duration);\n        }\n        if (newOptions.delay != null) {\n            optionsToUpdate.delay = resolveTimingValue(newOptions.delay);\n        }\n        /** @type {?} */\n        const newParams = newOptions.params;\n        if (newParams) {\n            /** @type {?} */\n            let paramsToUpdate = (/** @type {?} */ (optionsToUpdate.params));\n            if (!paramsToUpdate) {\n                paramsToUpdate = this.options.params = {};\n            }\n            Object.keys(newParams).forEach(name => {\n                if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {\n                    paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);\n                }\n            });\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _copyOptions() {\n        /** @type {?} */\n        const options = {};\n        if (this.options) {\n            /** @type {?} */\n            const oldParams = this.options.params;\n            if (oldParams) {\n                /** @type {?} */\n                const params = options['params'] = {};\n                Object.keys(oldParams).forEach(name => { params[name] = oldParams[name]; });\n            }\n        }\n        return options;\n    }\n    /**\n     * @param {?=} options\n     * @param {?=} element\n     * @param {?=} newTime\n     * @return {?}\n     */\n    createSubContext(options = null, element, newTime) {\n        /** @type {?} */\n        const target = element || this.element;\n        /** @type {?} */\n        const context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));\n        context.previousNode = this.previousNode;\n        context.currentAnimateTimings = this.currentAnimateTimings;\n        context.options = this._copyOptions();\n        context.updateOptions(options);\n        context.currentQueryIndex = this.currentQueryIndex;\n        context.currentQueryTotal = this.currentQueryTotal;\n        context.parentContext = this;\n        this.subContextCount++;\n        return context;\n    }\n    /**\n     * @param {?=} newTime\n     * @return {?}\n     */\n    transformIntoNewTimeline(newTime) {\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.currentTimeline = this.currentTimeline.fork(this.element, newTime);\n        this.timelines.push(this.currentTimeline);\n        return this.currentTimeline;\n    }\n    /**\n     * @param {?} instruction\n     * @param {?} duration\n     * @param {?} delay\n     * @return {?}\n     */\n    appendInstructionToTimeline(instruction, duration, delay) {\n        /** @type {?} */\n        const updatedTimings = {\n            duration: duration != null ? duration : instruction.duration,\n            delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,\n            easing: ''\n        };\n        /** @type {?} */\n        const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);\n        this.timelines.push(builder);\n        return updatedTimings;\n    }\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    incrementTime(time) {\n        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n    }\n    /**\n     * @param {?} delay\n     * @return {?}\n     */\n    delayNextStep(delay) {\n        // negative delays are not yet supported\n        if (delay > 0) {\n            this.currentTimeline.delayNextStep(delay);\n        }\n    }\n    /**\n     * @param {?} selector\n     * @param {?} originalSelector\n     * @param {?} limit\n     * @param {?} includeSelf\n     * @param {?} optional\n     * @param {?} errors\n     * @return {?}\n     */\n    invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {\n        /** @type {?} */\n        let results = [];\n        if (includeSelf) {\n            results.push(this.element);\n        }\n        if (selector.length > 0) { // if :self is only used then the selector is empty\n            selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);\n            selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);\n            /** @type {?} */\n            const multi = limit != 1;\n            /** @type {?} */\n            let elements = this._driver.query(this.element, selector, multi);\n            if (limit !== 0) {\n                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :\n                    elements.slice(0, limit);\n            }\n            results.push(...elements);\n        }\n        if (!optional && results.length == 0) {\n            errors.push(`\\`query(\"${originalSelector}\")\\` returned zero elements. (Use \\`query(\"${originalSelector}\", { optional: true })\\` if you wish to allow this.)`);\n        }\n        return results;\n    }\n}\nclass TimelineBuilder {\n    /**\n     * @param {?} _driver\n     * @param {?} element\n     * @param {?} startTime\n     * @param {?=} _elementTimelineStylesLookup\n     */\n    constructor(_driver, element, startTime, _elementTimelineStylesLookup) {\n        this._driver = _driver;\n        this.element = element;\n        this.startTime = startTime;\n        this._elementTimelineStylesLookup = _elementTimelineStylesLookup;\n        this.duration = 0;\n        this._previousKeyframe = {};\n        this._currentKeyframe = {};\n        this._keyframes = new Map();\n        this._styleSummary = {};\n        this._pendingStyles = {};\n        this._backFill = {};\n        this._currentEmptyStepKeyframe = null;\n        if (!this._elementTimelineStylesLookup) {\n            this._elementTimelineStylesLookup = new Map();\n        }\n        this._localTimelineStyles = Object.create(this._backFill, {});\n        this._globalTimelineStyles = (/** @type {?} */ (this._elementTimelineStylesLookup.get(element)));\n        if (!this._globalTimelineStyles) {\n            this._globalTimelineStyles = this._localTimelineStyles;\n            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);\n        }\n        this._loadKeyframe();\n    }\n    /**\n     * @return {?}\n     */\n    containsAnimation() {\n        switch (this._keyframes.size) {\n            case 0:\n                return false;\n            case 1:\n                return this.getCurrentStyleProperties().length > 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getCurrentStyleProperties() { return Object.keys(this._currentKeyframe); }\n    /**\n     * @return {?}\n     */\n    get currentTime() { return this.startTime + this.duration; }\n    /**\n     * @param {?} delay\n     * @return {?}\n     */\n    delayNextStep(delay) {\n        // in the event that a style() step is placed right before a stagger()\n        // and that style() step is the very first style() value in the animation\n        // then we need to make a copy of the keyframe [0, copy, 1] so that the delay\n        // properly applies the style() values to work with the stagger...\n        /** @type {?} */\n        const hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;\n        if (this.duration || hasPreStyleStep) {\n            this.forwardTime(this.currentTime + delay);\n            if (hasPreStyleStep) {\n                this.snapshotCurrentStyles();\n            }\n        }\n        else {\n            this.startTime += delay;\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?=} currentTime\n     * @return {?}\n     */\n    fork(element, currentTime) {\n        this.applyStylesToKeyframe();\n        return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _loadKeyframe() {\n        if (this._currentKeyframe) {\n            this._previousKeyframe = this._currentKeyframe;\n        }\n        this._currentKeyframe = (/** @type {?} */ (this._keyframes.get(this.duration)));\n        if (!this._currentKeyframe) {\n            this._currentKeyframe = Object.create(this._backFill, {});\n            this._keyframes.set(this.duration, this._currentKeyframe);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    forwardFrame() {\n        this.duration += ONE_FRAME_IN_MILLISECONDS;\n        this._loadKeyframe();\n    }\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    forwardTime(time) {\n        this.applyStylesToKeyframe();\n        this.duration = time;\n        this._loadKeyframe();\n    }\n    /**\n     * @private\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    _updateStyle(prop, value) {\n        this._localTimelineStyles[prop] = value;\n        this._globalTimelineStyles[prop] = value;\n        this._styleSummary[prop] = { time: this.currentTime, value };\n    }\n    /**\n     * @return {?}\n     */\n    allowOnlyTimelineStyles() { return this._currentEmptyStepKeyframe !== this._currentKeyframe; }\n    /**\n     * @param {?} easing\n     * @return {?}\n     */\n    applyEmptyStep(easing) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        // special case for animate(duration):\n        // all missing styles are filled with a `*` value then\n        // if any destination styles are filled in later on the same\n        // keyframe then they will override the overridden styles\n        // We use `_globalTimelineStyles` here because there may be\n        // styles in previous keyframes that are not present in this timeline\n        Object.keys(this._globalTimelineStyles).forEach(prop => {\n            this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n            this._currentKeyframe[prop] = AUTO_STYLE;\n        });\n        this._currentEmptyStepKeyframe = this._currentKeyframe;\n    }\n    /**\n     * @param {?} input\n     * @param {?} easing\n     * @param {?} errors\n     * @param {?=} options\n     * @return {?}\n     */\n    setStyles(input, easing, errors, options) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        /** @type {?} */\n        const params = (options && options.params) || {};\n        /** @type {?} */\n        const styles = flattenStyles(input, this._globalTimelineStyles);\n        Object.keys(styles).forEach(prop => {\n            /** @type {?} */\n            const val = interpolateParams(styles[prop], params, errors);\n            this._pendingStyles[prop] = val;\n            if (!this._localTimelineStyles.hasOwnProperty(prop)) {\n                this._backFill[prop] = this._globalTimelineStyles.hasOwnProperty(prop) ?\n                    this._globalTimelineStyles[prop] :\n                    AUTO_STYLE;\n            }\n            this._updateStyle(prop, val);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    applyStylesToKeyframe() {\n        /** @type {?} */\n        const styles = this._pendingStyles;\n        /** @type {?} */\n        const props = Object.keys(styles);\n        if (props.length == 0)\n            return;\n        this._pendingStyles = {};\n        props.forEach(prop => {\n            /** @type {?} */\n            const val = styles[prop];\n            this._currentKeyframe[prop] = val;\n        });\n        Object.keys(this._localTimelineStyles).forEach(prop => {\n            if (!this._currentKeyframe.hasOwnProperty(prop)) {\n                this._currentKeyframe[prop] = this._localTimelineStyles[prop];\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    snapshotCurrentStyles() {\n        Object.keys(this._localTimelineStyles).forEach(prop => {\n            /** @type {?} */\n            const val = this._localTimelineStyles[prop];\n            this._pendingStyles[prop] = val;\n            this._updateStyle(prop, val);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    getFinalKeyframe() { return this._keyframes.get(this.duration); }\n    /**\n     * @return {?}\n     */\n    get properties() {\n        /** @type {?} */\n        const properties = [];\n        for (let prop in this._currentKeyframe) {\n            properties.push(prop);\n        }\n        return properties;\n    }\n    /**\n     * @param {?} timeline\n     * @return {?}\n     */\n    mergeTimelineCollectedStyles(timeline) {\n        Object.keys(timeline._styleSummary).forEach(prop => {\n            /** @type {?} */\n            const details0 = this._styleSummary[prop];\n            /** @type {?} */\n            const details1 = timeline._styleSummary[prop];\n            if (!details0 || details1.time > details0.time) {\n                this._updateStyle(prop, details1.value);\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    buildKeyframes() {\n        this.applyStylesToKeyframe();\n        /** @type {?} */\n        const preStyleProps = new Set();\n        /** @type {?} */\n        const postStyleProps = new Set();\n        /** @type {?} */\n        const isEmpty = this._keyframes.size === 1 && this.duration === 0;\n        /** @type {?} */\n        let finalKeyframes = [];\n        this._keyframes.forEach((keyframe, time) => {\n            /** @type {?} */\n            const finalKeyframe = copyStyles(keyframe, true);\n            Object.keys(finalKeyframe).forEach(prop => {\n                /** @type {?} */\n                const value = finalKeyframe[prop];\n                if (value == ɵPRE_STYLE) {\n                    preStyleProps.add(prop);\n                }\n                else if (value == AUTO_STYLE) {\n                    postStyleProps.add(prop);\n                }\n            });\n            if (!isEmpty) {\n                finalKeyframe['offset'] = time / this.duration;\n            }\n            finalKeyframes.push(finalKeyframe);\n        });\n        /** @type {?} */\n        const preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];\n        /** @type {?} */\n        const postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];\n        // special case for a 0-second animation (which is designed just to place styles onscreen)\n        if (isEmpty) {\n            /** @type {?} */\n            const kf0 = finalKeyframes[0];\n            /** @type {?} */\n            const kf1 = copyObj(kf0);\n            kf0['offset'] = 0;\n            kf1['offset'] = 1;\n            finalKeyframes = [kf0, kf1];\n        }\n        return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);\n    }\n}\nclass SubTimelineBuilder extends TimelineBuilder {\n    /**\n     * @param {?} driver\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} preStyleProps\n     * @param {?} postStyleProps\n     * @param {?} timings\n     * @param {?=} _stretchStartingKeyframe\n     */\n    constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {\n        super(driver, element, timings.delay);\n        this.element = element;\n        this.keyframes = keyframes;\n        this.preStyleProps = preStyleProps;\n        this.postStyleProps = postStyleProps;\n        this._stretchStartingKeyframe = _stretchStartingKeyframe;\n        this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };\n    }\n    /**\n     * @return {?}\n     */\n    containsAnimation() { return this.keyframes.length > 1; }\n    /**\n     * @return {?}\n     */\n    buildKeyframes() {\n        /** @type {?} */\n        let keyframes = this.keyframes;\n        let { delay, duration, easing } = this.timings;\n        if (this._stretchStartingKeyframe && delay) {\n            /** @type {?} */\n            const newKeyframes = [];\n            /** @type {?} */\n            const totalTime = duration + delay;\n            /** @type {?} */\n            const startingGap = delay / totalTime;\n            // the original starting keyframe now starts once the delay is done\n            /** @type {?} */\n            const newFirstKeyframe = copyStyles(keyframes[0], false);\n            newFirstKeyframe['offset'] = 0;\n            newKeyframes.push(newFirstKeyframe);\n            /** @type {?} */\n            const oldFirstKeyframe = copyStyles(keyframes[0], false);\n            oldFirstKeyframe['offset'] = roundOffset(startingGap);\n            newKeyframes.push(oldFirstKeyframe);\n            /*\n                    When the keyframe is stretched then it means that the delay before the animation\n                    starts is gone. Instead the first keyframe is placed at the start of the animation\n                    and it is then copied to where it starts when the original delay is over. This basically\n                    means nothing animates during that delay, but the styles are still renderered. For this\n                    to work the original offset values that exist in the original keyframes must be \"warped\"\n                    so that they can take the new keyframe + delay into account.\n            \n                    delay=1000, duration=1000, keyframes = 0 .5 1\n            \n                    turns into\n            \n                    delay=0, duration=2000, keyframes = 0 .33 .66 1\n                   */\n            // offsets between 1 ... n -1 are all warped by the keyframe stretch\n            /** @type {?} */\n            const limit = keyframes.length - 1;\n            for (let i = 1; i <= limit; i++) {\n                /** @type {?} */\n                let kf = copyStyles(keyframes[i], false);\n                /** @type {?} */\n                const oldOffset = (/** @type {?} */ (kf['offset']));\n                /** @type {?} */\n                const timeAtKeyframe = delay + oldOffset * duration;\n                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);\n                newKeyframes.push(kf);\n            }\n            // the new starting keyframe should be added at the start\n            duration = totalTime;\n            delay = 0;\n            easing = '';\n            keyframes = newKeyframes;\n        }\n        return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);\n    }\n}\n/**\n * @param {?} offset\n * @param {?=} decimalPoints\n * @return {?}\n */\nfunction roundOffset(offset, decimalPoints = 3) {\n    /** @type {?} */\n    const mult = Math.pow(10, decimalPoints - 1);\n    return Math.round(offset * mult) / mult;\n}\n/**\n * @param {?} input\n * @param {?} allStyles\n * @return {?}\n */\nfunction flattenStyles(input, allStyles) {\n    /** @type {?} */\n    const styles = {};\n    /** @type {?} */\n    let allProperties;\n    input.forEach(token => {\n        if (token === '*') {\n            allProperties = allProperties || Object.keys(allStyles);\n            allProperties.forEach(prop => { styles[prop] = AUTO_STYLE; });\n        }\n        else {\n            copyStyles((/** @type {?} */ (token)), false, styles);\n        }\n    });\n    return styles;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Animation {\n    /**\n     * @param {?} _driver\n     * @param {?} input\n     */\n    constructor(_driver, input) {\n        this._driver = _driver;\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const ast = buildAnimationAst(_driver, input, errors);\n        if (errors.length) {\n            /** @type {?} */\n            const errorMessage = `animation validation failed:\\n${errors.join(\"\\n\")}`;\n            throw new Error(errorMessage);\n        }\n        this._animationAst = ast;\n    }\n    /**\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} destinationStyles\n     * @param {?} options\n     * @param {?=} subInstructions\n     * @return {?}\n     */\n    buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {\n        /** @type {?} */\n        const start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) :\n            (/** @type {?} */ (startingStyles));\n        /** @type {?} */\n        const dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) :\n            (/** @type {?} */ (destinationStyles));\n        /** @type {?} */\n        const errors = [];\n        subInstructions = subInstructions || new ElementInstructionMap();\n        /** @type {?} */\n        const result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);\n        if (errors.length) {\n            /** @type {?} */\n            const errorMessage = `animation building failed:\\n${errors.join(\"\\n\")}`;\n            throw new Error(errorMessage);\n        }\n        return result;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@publicApi\n * @abstract\n */\nclass AnimationStyleNormalizer {\n}\n/**\n * \\@publicApi\n */\nclass NoopAnimationStyleNormalizer {\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizePropertyName(propertyName, errors) { return propertyName; }\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        return (/** @type {?} */ (value));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n    /**\n     * @param {?} propertyName\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizePropertyName(propertyName, errors) {\n        return dashCaseToCamelCase(propertyName);\n    }\n    /**\n     * @param {?} userProvidedProperty\n     * @param {?} normalizedProperty\n     * @param {?} value\n     * @param {?} errors\n     * @return {?}\n     */\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        /** @type {?} */\n        let unit = '';\n        /** @type {?} */\n        const strVal = value.toString().trim();\n        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n            if (typeof value === 'number') {\n                unit = 'px';\n            }\n            else {\n                /** @type {?} */\n                const valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n                }\n            }\n        }\n        return strVal + unit;\n    }\n}\n/** @type {?} */\nconst DIMENSIONAL_PROP_MAP = makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'\n    .split(','));\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction makeBooleanMap(keys) {\n    /** @type {?} */\n    const map = {};\n    keys.forEach(key => map[key] = true);\n    return map;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} element\n * @param {?} triggerName\n * @param {?} fromState\n * @param {?} toState\n * @param {?} isRemovalTransition\n * @param {?} fromStyles\n * @param {?} toStyles\n * @param {?} timelines\n * @param {?} queriedElements\n * @param {?} preStyleProps\n * @param {?} postStyleProps\n * @param {?} totalTime\n * @param {?=} errors\n * @return {?}\n */\nfunction createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {\n    return {\n        type: 0 /* TransitionAnimation */,\n        element,\n        triggerName,\n        isRemovalTransition,\n        fromState,\n        fromStyles,\n        toState,\n        toStyles,\n        timelines,\n        queriedElements,\n        preStyleProps,\n        postStyleProps,\n        totalTime,\n        errors\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_OBJECT = {};\nclass AnimationTransitionFactory {\n    /**\n     * @param {?} _triggerName\n     * @param {?} ast\n     * @param {?} _stateStyles\n     */\n    constructor(_triggerName, ast, _stateStyles) {\n        this._triggerName = _triggerName;\n        this.ast = ast;\n        this._stateStyles = _stateStyles;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @param {?} element\n     * @param {?} params\n     * @return {?}\n     */\n    match(currentState, nextState, element, params) {\n        return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);\n    }\n    /**\n     * @param {?} stateName\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    buildStyles(stateName, params, errors) {\n        /** @type {?} */\n        const backupStateStyler = this._stateStyles['*'];\n        /** @type {?} */\n        const stateStyler = this._stateStyles[stateName];\n        /** @type {?} */\n        const backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};\n        return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;\n    }\n    /**\n     * @param {?} driver\n     * @param {?} element\n     * @param {?} currentState\n     * @param {?} nextState\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?=} currentOptions\n     * @param {?=} nextOptions\n     * @param {?=} subInstructions\n     * @param {?=} skipAstBuild\n     * @return {?}\n     */\n    build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;\n        /** @type {?} */\n        const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;\n        /** @type {?} */\n        const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);\n        /** @type {?} */\n        const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;\n        /** @type {?} */\n        const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);\n        /** @type {?} */\n        const queriedElements = new Set();\n        /** @type {?} */\n        const preStyleMap = new Map();\n        /** @type {?} */\n        const postStyleMap = new Map();\n        /** @type {?} */\n        const isRemoval = nextState === 'void';\n        /** @type {?} */\n        const animationOptions = { params: Object.assign({}, transitionAnimationParams, nextAnimationParams) };\n        /** @type {?} */\n        const timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);\n        /** @type {?} */\n        let totalTime = 0;\n        timelines.forEach(tl => { totalTime = Math.max(tl.duration + tl.delay, totalTime); });\n        if (errors.length) {\n            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);\n        }\n        timelines.forEach(tl => {\n            /** @type {?} */\n            const elm = tl.element;\n            /** @type {?} */\n            const preProps = getOrSetAsInMap(preStyleMap, elm, {});\n            tl.preStyleProps.forEach(prop => preProps[prop] = true);\n            /** @type {?} */\n            const postProps = getOrSetAsInMap(postStyleMap, elm, {});\n            tl.postStyleProps.forEach(prop => postProps[prop] = true);\n            if (elm !== element) {\n                queriedElements.add(elm);\n            }\n        });\n        /** @type {?} */\n        const queriedElementsList = iteratorToArray(queriedElements.values());\n        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);\n    }\n}\n/**\n * @param {?} matchFns\n * @param {?} currentState\n * @param {?} nextState\n * @param {?} element\n * @param {?} params\n * @return {?}\n */\nfunction oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {\n    return matchFns.some(fn => fn(currentState, nextState, element, params));\n}\nclass AnimationStateStyles {\n    /**\n     * @param {?} styles\n     * @param {?} defaultParams\n     */\n    constructor(styles, defaultParams) {\n        this.styles = styles;\n        this.defaultParams = defaultParams;\n    }\n    /**\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    buildStyles(params, errors) {\n        /** @type {?} */\n        const finalStyles = {};\n        /** @type {?} */\n        const combinedParams = copyObj(this.defaultParams);\n        Object.keys(params).forEach(key => {\n            /** @type {?} */\n            const value = params[key];\n            if (value != null) {\n                combinedParams[key] = value;\n            }\n        });\n        this.styles.styles.forEach(value => {\n            if (typeof value !== 'string') {\n                /** @type {?} */\n                const styleObj = (/** @type {?} */ (value));\n                Object.keys(styleObj).forEach(prop => {\n                    /** @type {?} */\n                    let val = styleObj[prop];\n                    if (val.length > 1) {\n                        val = interpolateParams(val, combinedParams, errors);\n                    }\n                    finalStyles[prop] = val;\n                });\n            }\n        });\n        return finalStyles;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @param {?} name\n * @param {?} ast\n * @return {?}\n */\nfunction buildTrigger(name, ast) {\n    return new AnimationTrigger(name, ast);\n}\n/**\n * \\@publicApi\n */\nclass AnimationTrigger {\n    /**\n     * @param {?} name\n     * @param {?} ast\n     */\n    constructor(name, ast) {\n        this.name = name;\n        this.ast = ast;\n        this.transitionFactories = [];\n        this.states = {};\n        ast.states.forEach(ast => {\n            /** @type {?} */\n            const defaultParams = (ast.options && ast.options.params) || {};\n            this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);\n        });\n        balanceProperties(this.states, 'true', '1');\n        balanceProperties(this.states, 'false', '0');\n        ast.transitions.forEach(ast => {\n            this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));\n        });\n        this.fallbackTransition = createFallbackTransition(name, this.states);\n    }\n    /**\n     * @return {?}\n     */\n    get containsQueries() { return this.ast.queryCount > 0; }\n    /**\n     * @param {?} currentState\n     * @param {?} nextState\n     * @param {?} element\n     * @param {?} params\n     * @return {?}\n     */\n    matchTransition(currentState, nextState, element, params) {\n        /** @type {?} */\n        const entry = this.transitionFactories.find(f => f.match(currentState, nextState, element, params));\n        return entry || null;\n    }\n    /**\n     * @param {?} currentState\n     * @param {?} params\n     * @param {?} errors\n     * @return {?}\n     */\n    matchStyles(currentState, params, errors) {\n        return this.fallbackTransition.buildStyles(currentState, params, errors);\n    }\n}\n/**\n * @param {?} triggerName\n * @param {?} states\n * @return {?}\n */\nfunction createFallbackTransition(triggerName, states) {\n    /** @type {?} */\n    const matchers = [(fromState, toState) => true];\n    /** @type {?} */\n    const animation = { type: 2 /* Sequence */, steps: [], options: null };\n    /** @type {?} */\n    const transition = {\n        type: 1 /* Transition */,\n        animation,\n        matchers,\n        options: null,\n        queryCount: 0,\n        depCount: 0\n    };\n    return new AnimationTransitionFactory(triggerName, transition, states);\n}\n/**\n * @param {?} obj\n * @param {?} key1\n * @param {?} key2\n * @return {?}\n */\nfunction balanceProperties(obj, key1, key2) {\n    if (obj.hasOwnProperty(key1)) {\n        if (!obj.hasOwnProperty(key2)) {\n            obj[key2] = obj[key1];\n        }\n    }\n    else if (obj.hasOwnProperty(key2)) {\n        obj[key1] = obj[key2];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();\nclass TimelineAnimationEngine {\n    /**\n     * @param {?} bodyNode\n     * @param {?} _driver\n     * @param {?} _normalizer\n     */\n    constructor(bodyNode, _driver, _normalizer) {\n        this.bodyNode = bodyNode;\n        this._driver = _driver;\n        this._normalizer = _normalizer;\n        this._animations = {};\n        this._playersById = {};\n        this.players = [];\n    }\n    /**\n     * @param {?} id\n     * @param {?} metadata\n     * @return {?}\n     */\n    register(id, metadata) {\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const ast = buildAnimationAst(this._driver, metadata, errors);\n        if (errors.length) {\n            throw new Error(`Unable to build the animation due to the following errors: ${errors.join(\"\\n\")}`);\n        }\n        else {\n            this._animations[id] = ast;\n        }\n    }\n    /**\n     * @private\n     * @param {?} i\n     * @param {?} preStyles\n     * @param {?=} postStyles\n     * @return {?}\n     */\n    _buildPlayer(i, preStyles, postStyles) {\n        /** @type {?} */\n        const element = i.element;\n        /** @type {?} */\n        const keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);\n        return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?=} options\n     * @return {?}\n     */\n    create(id, element, options = {}) {\n        /** @type {?} */\n        const errors = [];\n        /** @type {?} */\n        const ast = this._animations[id];\n        /** @type {?} */\n        let instructions;\n        /** @type {?} */\n        const autoStylesMap = new Map();\n        if (ast) {\n            instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);\n            instructions.forEach(inst => {\n                /** @type {?} */\n                const styles = getOrSetAsInMap(autoStylesMap, inst.element, {});\n                inst.postStyleProps.forEach(prop => styles[prop] = null);\n            });\n        }\n        else {\n            errors.push('The requested animation doesn\\'t exist or has already been destroyed');\n            instructions = [];\n        }\n        if (errors.length) {\n            throw new Error(`Unable to create the animation due to the following errors: ${errors.join(\"\\n\")}`);\n        }\n        autoStylesMap.forEach((styles, element) => {\n            Object.keys(styles).forEach(prop => { styles[prop] = this._driver.computeStyle(element, prop, AUTO_STYLE); });\n        });\n        /** @type {?} */\n        const players = instructions.map(i => {\n            /** @type {?} */\n            const styles = autoStylesMap.get(i.element);\n            return this._buildPlayer(i, {}, styles);\n        });\n        /** @type {?} */\n        const player = optimizeGroupPlayer(players);\n        this._playersById[id] = player;\n        player.onDestroy(() => this.destroy(id));\n        this.players.push(player);\n        return player;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    destroy(id) {\n        /** @type {?} */\n        const player = this._getPlayer(id);\n        player.destroy();\n        delete this._playersById[id];\n        /** @type {?} */\n        const index = this.players.indexOf(player);\n        if (index >= 0) {\n            this.players.splice(index, 1);\n        }\n    }\n    /**\n     * @private\n     * @param {?} id\n     * @return {?}\n     */\n    _getPlayer(id) {\n        /** @type {?} */\n        const player = this._playersById[id];\n        if (!player) {\n            throw new Error(`Unable to find the timeline player referenced by ${id}`);\n        }\n        return player;\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(id, element, eventName, callback) {\n        // triggerName, fromState, toState are all ignored for timeline animations\n        /** @type {?} */\n        const baseEvent = makeAnimationEvent(element, '', '', '');\n        listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);\n        return () => { };\n    }\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} command\n     * @param {?} args\n     * @return {?}\n     */\n    command(id, element, command, args) {\n        if (command == 'register') {\n            this.register(id, (/** @type {?} */ (args[0])));\n            return;\n        }\n        if (command == 'create') {\n            /** @type {?} */\n            const options = (/** @type {?} */ ((args[0] || {})));\n            this.create(id, element, options);\n            return;\n        }\n        /** @type {?} */\n        const player = this._getPlayer(id);\n        switch (command) {\n            case 'play':\n                player.play();\n                break;\n            case 'pause':\n                player.pause();\n                break;\n            case 'reset':\n                player.reset();\n                break;\n            case 'restart':\n                player.restart();\n                break;\n            case 'finish':\n                player.finish();\n                break;\n            case 'init':\n                player.init();\n                break;\n            case 'setPosition':\n                player.setPosition(parseFloat((/** @type {?} */ (args[0]))));\n                break;\n            case 'destroy':\n                this.destroy(id);\n                break;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst QUEUED_CLASSNAME = 'ng-animate-queued';\n/** @type {?} */\nconst QUEUED_SELECTOR = '.ng-animate-queued';\n/** @type {?} */\nconst DISABLED_CLASSNAME = 'ng-animate-disabled';\n/** @type {?} */\nconst DISABLED_SELECTOR = '.ng-animate-disabled';\n/** @type {?} */\nconst STAR_CLASSNAME = 'ng-star-inserted';\n/** @type {?} */\nconst STAR_SELECTOR = '.ng-star-inserted';\n/** @type {?} */\nconst EMPTY_PLAYER_ARRAY = [];\n/** @type {?} */\nconst NULL_REMOVAL_STATE = {\n    namespaceId: '',\n    setForRemoval: false,\n    setForMove: false,\n    hasAnimation: false,\n    removedBeforeQueried: false\n};\n/** @type {?} */\nconst NULL_REMOVED_QUERIED_STATE = {\n    namespaceId: '',\n    setForMove: false,\n    setForRemoval: false,\n    hasAnimation: false,\n    removedBeforeQueried: true\n};\n/** @type {?} */\nconst REMOVAL_FLAG = '__ng_removed';\nclass StateValue {\n    /**\n     * @param {?} input\n     * @param {?=} namespaceId\n     */\n    constructor(input, namespaceId = '') {\n        this.namespaceId = namespaceId;\n        /** @type {?} */\n        const isObj = input && input.hasOwnProperty('value');\n        /** @type {?} */\n        const value = isObj ? input['value'] : input;\n        this.value = normalizeTriggerValue(value);\n        if (isObj) {\n            /** @type {?} */\n            const options = copyObj((/** @type {?} */ (input)));\n            delete options['value'];\n            this.options = (/** @type {?} */ (options));\n        }\n        else {\n            this.options = {};\n        }\n        if (!this.options.params) {\n            this.options.params = {};\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get params() { return (/** @type {?} */ (this.options.params)); }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    absorbOptions(options) {\n        /** @type {?} */\n        const newParams = options.params;\n        if (newParams) {\n            /** @type {?} */\n            const oldParams = (/** @type {?} */ (this.options.params));\n            Object.keys(newParams).forEach(prop => {\n                if (oldParams[prop] == null) {\n                    oldParams[prop] = newParams[prop];\n                }\n            });\n        }\n    }\n}\n/** @type {?} */\nconst VOID_VALUE = 'void';\n/** @type {?} */\nconst DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);\nclass AnimationTransitionNamespace {\n    /**\n     * @param {?} id\n     * @param {?} hostElement\n     * @param {?} _engine\n     */\n    constructor(id, hostElement, _engine) {\n        this.id = id;\n        this.hostElement = hostElement;\n        this._engine = _engine;\n        this.players = [];\n        this._triggers = {};\n        this._queue = [];\n        this._elementListeners = new Map();\n        this._hostClassName = 'ng-tns-' + id;\n        addClass(hostElement, this._hostClassName);\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} phase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(element, name, phase, callback) {\n        if (!this._triggers.hasOwnProperty(name)) {\n            throw new Error(`Unable to listen on the animation trigger event \"${phase}\" because the animation trigger \"${name}\" doesn\\'t exist!`);\n        }\n        if (phase == null || phase.length == 0) {\n            throw new Error(`Unable to listen on the animation trigger \"${name}\" because the provided event is undefined!`);\n        }\n        if (!isTriggerEventValid(phase)) {\n            throw new Error(`The provided animation trigger event \"${phase}\" for the animation trigger \"${name}\" is not supported!`);\n        }\n        /** @type {?} */\n        const listeners = getOrSetAsInMap(this._elementListeners, element, []);\n        /** @type {?} */\n        const data = { name, phase, callback };\n        listeners.push(data);\n        /** @type {?} */\n        const triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});\n        if (!triggersWithStates.hasOwnProperty(name)) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);\n            triggersWithStates[name] = DEFAULT_STATE_VALUE;\n        }\n        return () => {\n            // the event listener is removed AFTER the flush has occurred such\n            // that leave animations callbacks can fire (otherwise if the node\n            // is removed in between then the listeners would be deregistered)\n            this._engine.afterFlush(() => {\n                /** @type {?} */\n                const index = listeners.indexOf(data);\n                if (index >= 0) {\n                    listeners.splice(index, 1);\n                }\n                if (!this._triggers[name]) {\n                    delete triggersWithStates[name];\n                }\n            });\n        };\n    }\n    /**\n     * @param {?} name\n     * @param {?} ast\n     * @return {?}\n     */\n    register(name, ast) {\n        if (this._triggers[name]) {\n            // throw\n            return false;\n        }\n        else {\n            this._triggers[name] = ast;\n            return true;\n        }\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n    _getTrigger(name) {\n        /** @type {?} */\n        const trigger = this._triggers[name];\n        if (!trigger) {\n            throw new Error(`The provided animation trigger \"${name}\" has not been registered!`);\n        }\n        return trigger;\n    }\n    /**\n     * @param {?} element\n     * @param {?} triggerName\n     * @param {?} value\n     * @param {?=} defaultToFallback\n     * @return {?}\n     */\n    trigger(element, triggerName, value, defaultToFallback = true) {\n        /** @type {?} */\n        const trigger = this._getTrigger(triggerName);\n        /** @type {?} */\n        const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n        /** @type {?} */\n        let triggersWithStates = this._engine.statesByElement.get(element);\n        if (!triggersWithStates) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);\n            this._engine.statesByElement.set(element, triggersWithStates = {});\n        }\n        /** @type {?} */\n        let fromState = triggersWithStates[triggerName];\n        /** @type {?} */\n        const toState = new StateValue(value, this.id);\n        /** @type {?} */\n        const isObj = value && value.hasOwnProperty('value');\n        if (!isObj && fromState) {\n            toState.absorbOptions(fromState.options);\n        }\n        triggersWithStates[triggerName] = toState;\n        if (!fromState) {\n            fromState = DEFAULT_STATE_VALUE;\n        }\n        /** @type {?} */\n        const isRemoval = toState.value === VOID_VALUE;\n        // normally this isn't reached by here, however, if an object expression\n        // is passed in then it may be a new object each time. Comparing the value\n        // is important since that will stay the same despite there being a new object.\n        // The removal arc here is special cased because the same element is triggered\n        // twice in the event that it contains animations on the outer/inner portions\n        // of the host container\n        if (!isRemoval && fromState.value === toState.value) {\n            // this means that despite the value not changing, some inner params\n            // have changed which means that the animation final styles need to be applied\n            if (!objEquals(fromState.params, toState.params)) {\n                /** @type {?} */\n                const errors = [];\n                /** @type {?} */\n                const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);\n                /** @type {?} */\n                const toStyles = trigger.matchStyles(toState.value, toState.params, errors);\n                if (errors.length) {\n                    this._engine.reportError(errors);\n                }\n                else {\n                    this._engine.afterFlush(() => {\n                        eraseStyles(element, fromStyles);\n                        setStyles(element, toStyles);\n                    });\n                }\n            }\n            return;\n        }\n        /** @type {?} */\n        const playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);\n        playersOnElement.forEach(player => {\n            // only remove the player if it is queued on the EXACT same trigger/namespace\n            // we only also deal with queued players here because if the animation has\n            // started then we want to keep the player alive until the flush happens\n            // (which is where the previousPlayers are passed into the new palyer)\n            if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {\n                player.destroy();\n            }\n        });\n        /** @type {?} */\n        let transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);\n        /** @type {?} */\n        let isFallbackTransition = false;\n        if (!transition) {\n            if (!defaultToFallback)\n                return;\n            transition = trigger.fallbackTransition;\n            isFallbackTransition = true;\n        }\n        this._engine.totalQueuedPlayers++;\n        this._queue.push({ element, triggerName, transition, fromState, toState, player, isFallbackTransition });\n        if (!isFallbackTransition) {\n            addClass(element, QUEUED_CLASSNAME);\n            player.onStart(() => { removeClass(element, QUEUED_CLASSNAME); });\n        }\n        player.onDone(() => {\n            /** @type {?} */\n            let index = this.players.indexOf(player);\n            if (index >= 0) {\n                this.players.splice(index, 1);\n            }\n            /** @type {?} */\n            const players = this._engine.playersByElement.get(element);\n            if (players) {\n                /** @type {?} */\n                let index = players.indexOf(player);\n                if (index >= 0) {\n                    players.splice(index, 1);\n                }\n            }\n        });\n        this.players.push(player);\n        playersOnElement.push(player);\n        return player;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    deregister(name) {\n        delete this._triggers[name];\n        this._engine.statesByElement.forEach((stateMap, element) => { delete stateMap[name]; });\n        this._elementListeners.forEach((listeners, element) => {\n            this._elementListeners.set(element, listeners.filter(entry => { return entry.name != name; }));\n        });\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    clearElementCache(element) {\n        this._engine.statesByElement.delete(element);\n        this._elementListeners.delete(element);\n        /** @type {?} */\n        const elementPlayers = this._engine.playersByElement.get(element);\n        if (elementPlayers) {\n            elementPlayers.forEach(player => player.destroy());\n            this._engine.playersByElement.delete(element);\n        }\n    }\n    /**\n     * @private\n     * @param {?} rootElement\n     * @param {?} context\n     * @param {?=} animate\n     * @return {?}\n     */\n    _signalRemovalForInnerTriggers(rootElement, context, animate = false) {\n        // emulate a leave animation for all inner nodes within this node.\n        // If there are no animations found for any of the nodes then clear the cache\n        // for the element.\n        this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true).forEach(elm => {\n            // this means that an inner remove() operation has already kicked off\n            // the animation on this element...\n            if (elm[REMOVAL_FLAG])\n                return;\n            /** @type {?} */\n            const namespaces = this._engine.fetchNamespacesByElement(elm);\n            if (namespaces.size) {\n                namespaces.forEach(ns => ns.triggerLeaveAnimation(elm, context, false, true));\n            }\n            else {\n                this.clearElementCache(elm);\n            }\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @param {?=} destroyAfterComplete\n     * @param {?=} defaultToFallback\n     * @return {?}\n     */\n    triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {\n        /** @type {?} */\n        const triggerStates = this._engine.statesByElement.get(element);\n        if (triggerStates) {\n            /** @type {?} */\n            const players = [];\n            Object.keys(triggerStates).forEach(triggerName => {\n                // this check is here in the event that an element is removed\n                // twice (both on the host level and the component level)\n                if (this._triggers[triggerName]) {\n                    /** @type {?} */\n                    const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);\n                    if (player) {\n                        players.push(player);\n                    }\n                }\n            });\n            if (players.length) {\n                this._engine.markElementAsRemoved(this.id, element, true, context);\n                if (destroyAfterComplete) {\n                    optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    prepareLeaveAnimationListeners(element) {\n        /** @type {?} */\n        const listeners = this._elementListeners.get(element);\n        if (listeners) {\n            /** @type {?} */\n            const visitedTriggers = new Set();\n            listeners.forEach(listener => {\n                /** @type {?} */\n                const triggerName = listener.name;\n                if (visitedTriggers.has(triggerName))\n                    return;\n                visitedTriggers.add(triggerName);\n                /** @type {?} */\n                const trigger = this._triggers[triggerName];\n                /** @type {?} */\n                const transition = trigger.fallbackTransition;\n                /** @type {?} */\n                const elementStates = (/** @type {?} */ (this._engine.statesByElement.get(element)));\n                /** @type {?} */\n                const fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;\n                /** @type {?} */\n                const toState = new StateValue(VOID_VALUE);\n                /** @type {?} */\n                const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n                this._engine.totalQueuedPlayers++;\n                this._queue.push({\n                    element,\n                    triggerName,\n                    transition,\n                    fromState,\n                    toState,\n                    player,\n                    isFallbackTransition: true\n                });\n            });\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    removeNode(element, context) {\n        /** @type {?} */\n        const engine = this._engine;\n        if (element.childElementCount) {\n            this._signalRemovalForInnerTriggers(element, context, true);\n        }\n        // this means that a * => VOID animation was detected and kicked off\n        if (this.triggerLeaveAnimation(element, context, true))\n            return;\n        // find the player that is animating and make sure that the\n        // removal is delayed until that player has completed\n        /** @type {?} */\n        let containsPotentialParentTransition = false;\n        if (engine.totalAnimations) {\n            /** @type {?} */\n            const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];\n            // when this `if statement` does not continue forward it means that\n            // a previous animation query has selected the current element and\n            // is animating it. In this situation want to continue forwards and\n            // allow the element to be queued up for animation later.\n            if (currentPlayers && currentPlayers.length) {\n                containsPotentialParentTransition = true;\n            }\n            else {\n                /** @type {?} */\n                let parent = element;\n                while (parent = parent.parentNode) {\n                    /** @type {?} */\n                    const triggers = engine.statesByElement.get(parent);\n                    if (triggers) {\n                        containsPotentialParentTransition = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // at this stage we know that the element will either get removed\n        // during flush or will be picked up by a parent query. Either way\n        // we need to fire the listeners for this element when it DOES get\n        // removed (once the query parent animation is done or after flush)\n        this.prepareLeaveAnimationListeners(element);\n        // whether or not a parent has an animation we need to delay the deferral of the leave\n        // operation until we have more information (which we do after flush() has been called)\n        if (containsPotentialParentTransition) {\n            engine.markElementAsRemoved(this.id, element, false, context);\n        }\n        else {\n            // we do this after the flush has occurred such\n            // that the callbacks can be fired\n            engine.afterFlush(() => this.clearElementCache(element));\n            engine.destroyInnerAnimations(element);\n            engine._onRemovalComplete(element, context);\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} parent\n     * @return {?}\n     */\n    insertNode(element, parent) { addClass(element, this._hostClassName); }\n    /**\n     * @param {?} microtaskId\n     * @return {?}\n     */\n    drainQueuedTransitions(microtaskId) {\n        /** @type {?} */\n        const instructions = [];\n        this._queue.forEach(entry => {\n            /** @type {?} */\n            const player = entry.player;\n            if (player.destroyed)\n                return;\n            /** @type {?} */\n            const element = entry.element;\n            /** @type {?} */\n            const listeners = this._elementListeners.get(element);\n            if (listeners) {\n                listeners.forEach((listener) => {\n                    if (listener.name == entry.triggerName) {\n                        /** @type {?} */\n                        const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);\n                        ((/** @type {?} */ (baseEvent)))['_data'] = microtaskId;\n                        listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);\n                    }\n                });\n            }\n            if (player.markedForDestroy) {\n                this._engine.afterFlush(() => {\n                    // now we can destroy the element properly since the event listeners have\n                    // been bound to the player\n                    player.destroy();\n                });\n            }\n            else {\n                instructions.push(entry);\n            }\n        });\n        this._queue = [];\n        return instructions.sort((a, b) => {\n            // if depCount == 0 them move to front\n            // otherwise if a contains b then move back\n            /** @type {?} */\n            const d0 = a.transition.ast.depCount;\n            /** @type {?} */\n            const d1 = b.transition.ast.depCount;\n            if (d0 == 0 || d1 == 0) {\n                return d0 - d1;\n            }\n            return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;\n        });\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(context) {\n        this.players.forEach(p => p.destroy());\n        this._signalRemovalForInnerTriggers(this.hostElement, context);\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    elementContainsData(element) {\n        /** @type {?} */\n        let containsData = false;\n        if (this._elementListeners.has(element))\n            containsData = true;\n        containsData =\n            (this._queue.find(entry => entry.element === element) ? true : false) || containsData;\n        return containsData;\n    }\n}\nclass TransitionAnimationEngine {\n    /**\n     * @param {?} bodyNode\n     * @param {?} driver\n     * @param {?} _normalizer\n     */\n    constructor(bodyNode, driver, _normalizer) {\n        this.bodyNode = bodyNode;\n        this.driver = driver;\n        this._normalizer = _normalizer;\n        this.players = [];\n        this.newHostElements = new Map();\n        this.playersByElement = new Map();\n        this.playersByQueriedElement = new Map();\n        this.statesByElement = new Map();\n        this.disabledNodes = new Set();\n        this.totalAnimations = 0;\n        this.totalQueuedPlayers = 0;\n        this._namespaceLookup = {};\n        this._namespaceList = [];\n        this._flushFns = [];\n        this._whenQuietFns = [];\n        this.namespacesByHostElement = new Map();\n        this.collectedEnterElements = [];\n        this.collectedLeaveElements = [];\n        // this method is designed to be overridden by the code that uses this engine\n        this.onRemovalComplete = (element, context) => { };\n    }\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    _onRemovalComplete(element, context) { this.onRemovalComplete(element, context); }\n    /**\n     * @return {?}\n     */\n    get queuedPlayers() {\n        /** @type {?} */\n        const players = [];\n        this._namespaceList.forEach(ns => {\n            ns.players.forEach(player => {\n                if (player.queued) {\n                    players.push(player);\n                }\n            });\n        });\n        return players;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    createNamespace(namespaceId, hostElement) {\n        /** @type {?} */\n        const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);\n        if (hostElement.parentNode) {\n            this._balanceNamespaceList(ns, hostElement);\n        }\n        else {\n            // defer this later until flush during when the host element has\n            // been inserted so that we know exactly where to place it in\n            // the namespace list\n            this.newHostElements.set(hostElement, ns);\n            // given that this host element is apart of the animation code, it\n            // may or may not be inserted by a parent node that is an of an\n            // animation renderer type. If this happens then we can still have\n            // access to this item when we query for :enter nodes. If the parent\n            // is a renderer then the set data-structure will normalize the entry\n            this.collectEnterElement(hostElement);\n        }\n        return this._namespaceLookup[namespaceId] = ns;\n    }\n    /**\n     * @private\n     * @param {?} ns\n     * @param {?} hostElement\n     * @return {?}\n     */\n    _balanceNamespaceList(ns, hostElement) {\n        /** @type {?} */\n        const limit = this._namespaceList.length - 1;\n        if (limit >= 0) {\n            /** @type {?} */\n            let found = false;\n            for (let i = limit; i >= 0; i--) {\n                /** @type {?} */\n                const nextNamespace = this._namespaceList[i];\n                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {\n                    this._namespaceList.splice(i + 1, 0, ns);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                this._namespaceList.splice(0, 0, ns);\n            }\n        }\n        else {\n            this._namespaceList.push(ns);\n        }\n        this.namespacesByHostElement.set(hostElement, ns);\n        return ns;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    register(namespaceId, hostElement) {\n        /** @type {?} */\n        let ns = this._namespaceLookup[namespaceId];\n        if (!ns) {\n            ns = this.createNamespace(namespaceId, hostElement);\n        }\n        return ns;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} name\n     * @param {?} trigger\n     * @return {?}\n     */\n    registerTrigger(namespaceId, name, trigger) {\n        /** @type {?} */\n        let ns = this._namespaceLookup[namespaceId];\n        if (ns && ns.register(name, trigger)) {\n            this.totalAnimations++;\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(namespaceId, context) {\n        if (!namespaceId)\n            return;\n        /** @type {?} */\n        const ns = this._fetchNamespace(namespaceId);\n        this.afterFlush(() => {\n            this.namespacesByHostElement.delete(ns.hostElement);\n            delete this._namespaceLookup[namespaceId];\n            /** @type {?} */\n            const index = this._namespaceList.indexOf(ns);\n            if (index >= 0) {\n                this._namespaceList.splice(index, 1);\n            }\n        });\n        this.afterFlushAnimationsDone(() => ns.destroy(context));\n    }\n    /**\n     * @private\n     * @param {?} id\n     * @return {?}\n     */\n    _fetchNamespace(id) { return this._namespaceLookup[id]; }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    fetchNamespacesByElement(element) {\n        // normally there should only be one namespace per element, however\n        // if @triggers are placed on both the component element and then\n        // its host element (within the component code) then there will be\n        // two namespaces returned. We use a set here to simply the dedupe\n        // of namespaces incase there are multiple triggers both the elm and host\n        /** @type {?} */\n        const namespaces = new Set();\n        /** @type {?} */\n        const elementStates = this.statesByElement.get(element);\n        if (elementStates) {\n            /** @type {?} */\n            const keys = Object.keys(elementStates);\n            for (let i = 0; i < keys.length; i++) {\n                /** @type {?} */\n                const nsId = elementStates[keys[i]].namespaceId;\n                if (nsId) {\n                    /** @type {?} */\n                    const ns = this._fetchNamespace(nsId);\n                    if (ns) {\n                        namespaces.add(ns);\n                    }\n                }\n            }\n        }\n        return namespaces;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    trigger(namespaceId, element, name, value) {\n        if (isElementNode(element)) {\n            /** @type {?} */\n            const ns = this._fetchNamespace(namespaceId);\n            if (ns) {\n                ns.trigger(element, name, value);\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} parent\n     * @param {?} insertBefore\n     * @return {?}\n     */\n    insertNode(namespaceId, element, parent, insertBefore) {\n        if (!isElementNode(element))\n            return;\n        // special case for when an element is removed and reinserted (move operation)\n        // when this occurs we do not want to use the element for deletion later\n        /** @type {?} */\n        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n        if (details && details.setForRemoval) {\n            details.setForRemoval = false;\n            details.setForMove = true;\n            /** @type {?} */\n            const index = this.collectedLeaveElements.indexOf(element);\n            if (index >= 0) {\n                this.collectedLeaveElements.splice(index, 1);\n            }\n        }\n        // in the event that the namespaceId is blank then the caller\n        // code does not contain any animation code in it, but it is\n        // just being called so that the node is marked as being inserted\n        if (namespaceId) {\n            /** @type {?} */\n            const ns = this._fetchNamespace(namespaceId);\n            // This if-statement is a workaround for router issue #21947.\n            // The router sometimes hits a race condition where while a route\n            // is being instantiated a new navigation arrives, triggering leave\n            // animation of DOM that has not been fully initialized, until this\n            // is resolved, we need to handle the scenario when DOM is not in a\n            // consistent state during the animation.\n            if (ns) {\n                ns.insertNode(element, parent);\n            }\n        }\n        // only *directives and host elements are inserted before\n        if (insertBefore) {\n            this.collectEnterElement(element);\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    collectEnterElement(element) { this.collectedEnterElements.push(element); }\n    /**\n     * @param {?} element\n     * @param {?} value\n     * @return {?}\n     */\n    markElementAsDisabled(element, value) {\n        if (value) {\n            if (!this.disabledNodes.has(element)) {\n                this.disabledNodes.add(element);\n                addClass(element, DISABLED_CLASSNAME);\n            }\n        }\n        else if (this.disabledNodes.has(element)) {\n            this.disabledNodes.delete(element);\n            removeClass(element, DISABLED_CLASSNAME);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    removeNode(namespaceId, element, context) {\n        if (!isElementNode(element)) {\n            this._onRemovalComplete(element, context);\n            return;\n        }\n        /** @type {?} */\n        const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;\n        if (ns) {\n            ns.removeNode(element, context);\n        }\n        else {\n            this.markElementAsRemoved(namespaceId, element, false, context);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?=} hasAnimation\n     * @param {?=} context\n     * @return {?}\n     */\n    markElementAsRemoved(namespaceId, element, hasAnimation, context) {\n        this.collectedLeaveElements.push(element);\n        element[REMOVAL_FLAG] = {\n            namespaceId,\n            setForRemoval: context, hasAnimation,\n            removedBeforeQueried: false\n        };\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} name\n     * @param {?} phase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(namespaceId, element, name, phase, callback) {\n        if (isElementNode(element)) {\n            return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);\n        }\n        return () => { };\n    }\n    /**\n     * @private\n     * @param {?} entry\n     * @param {?} subTimelines\n     * @param {?} enterClassName\n     * @param {?} leaveClassName\n     * @param {?=} skipBuildAst\n     * @return {?}\n     */\n    _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {\n        return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);\n    }\n    /**\n     * @param {?} containerElement\n     * @return {?}\n     */\n    destroyInnerAnimations(containerElement) {\n        /** @type {?} */\n        let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);\n        elements.forEach(element => this.destroyActiveAnimationsForElement(element));\n        if (this.playersByQueriedElement.size == 0)\n            return;\n        elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);\n        elements.forEach(element => this.finishActiveQueriedAnimationOnElement(element));\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    destroyActiveAnimationsForElement(element) {\n        /** @type {?} */\n        const players = this.playersByElement.get(element);\n        if (players) {\n            players.forEach(player => {\n                // special case for when an element is set for destruction, but hasn't started.\n                // in this situation we want to delay the destruction until the flush occurs\n                // so that any event listeners attached to the player are triggered.\n                if (player.queued) {\n                    player.markedForDestroy = true;\n                }\n                else {\n                    player.destroy();\n                }\n            });\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    finishActiveQueriedAnimationOnElement(element) {\n        /** @type {?} */\n        const players = this.playersByQueriedElement.get(element);\n        if (players) {\n            players.forEach(player => player.finish());\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() {\n        return new Promise(resolve => {\n            if (this.players.length) {\n                return optimizeGroupPlayer(this.players).onDone(() => resolve());\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    processLeaveNode(element) {\n        /** @type {?} */\n        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n        if (details && details.setForRemoval) {\n            // this will prevent it from removing it twice\n            element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;\n            if (details.namespaceId) {\n                this.destroyInnerAnimations(element);\n                /** @type {?} */\n                const ns = this._fetchNamespace(details.namespaceId);\n                if (ns) {\n                    ns.clearElementCache(element);\n                }\n            }\n            this._onRemovalComplete(element, details.setForRemoval);\n        }\n        if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {\n            this.markElementAsDisabled(element, false);\n        }\n        this.driver.query(element, DISABLED_SELECTOR, true).forEach(node => {\n            this.markElementAsDisabled(node, false);\n        });\n    }\n    /**\n     * @param {?=} microtaskId\n     * @return {?}\n     */\n    flush(microtaskId = -1) {\n        /** @type {?} */\n        let players = [];\n        if (this.newHostElements.size) {\n            this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));\n            this.newHostElements.clear();\n        }\n        if (this.totalAnimations && this.collectedEnterElements.length) {\n            for (let i = 0; i < this.collectedEnterElements.length; i++) {\n                /** @type {?} */\n                const elm = this.collectedEnterElements[i];\n                addClass(elm, STAR_CLASSNAME);\n            }\n        }\n        if (this._namespaceList.length &&\n            (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {\n            /** @type {?} */\n            const cleanupFns = [];\n            try {\n                players = this._flushAnimations(cleanupFns, microtaskId);\n            }\n            finally {\n                for (let i = 0; i < cleanupFns.length; i++) {\n                    cleanupFns[i]();\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n                /** @type {?} */\n                const element = this.collectedLeaveElements[i];\n                this.processLeaveNode(element);\n            }\n        }\n        this.totalQueuedPlayers = 0;\n        this.collectedEnterElements.length = 0;\n        this.collectedLeaveElements.length = 0;\n        this._flushFns.forEach(fn => fn());\n        this._flushFns = [];\n        if (this._whenQuietFns.length) {\n            // we move these over to a variable so that\n            // if any new callbacks are registered in another\n            // flush they do not populate the existing set\n            /** @type {?} */\n            const quietFns = this._whenQuietFns;\n            this._whenQuietFns = [];\n            if (players.length) {\n                optimizeGroupPlayer(players).onDone(() => { quietFns.forEach(fn => fn()); });\n            }\n            else {\n                quietFns.forEach(fn => fn());\n            }\n        }\n    }\n    /**\n     * @param {?} errors\n     * @return {?}\n     */\n    reportError(errors) {\n        throw new Error(`Unable to process animations due to the following failed trigger transitions\\n ${errors.join('\\n')}`);\n    }\n    /**\n     * @private\n     * @param {?} cleanupFns\n     * @param {?} microtaskId\n     * @return {?}\n     */\n    _flushAnimations(cleanupFns, microtaskId) {\n        /** @type {?} */\n        const subTimelines = new ElementInstructionMap();\n        /** @type {?} */\n        const skippedPlayers = [];\n        /** @type {?} */\n        const skippedPlayersMap = new Map();\n        /** @type {?} */\n        const queuedInstructions = [];\n        /** @type {?} */\n        const queriedElements = new Map();\n        /** @type {?} */\n        const allPreStyleElements = new Map();\n        /** @type {?} */\n        const allPostStyleElements = new Map();\n        /** @type {?} */\n        const disabledElementsSet = new Set();\n        this.disabledNodes.forEach(node => {\n            disabledElementsSet.add(node);\n            /** @type {?} */\n            const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);\n            for (let i = 0; i < nodesThatAreDisabled.length; i++) {\n                disabledElementsSet.add(nodesThatAreDisabled[i]);\n            }\n        });\n        /** @type {?} */\n        const bodyNode = this.bodyNode;\n        /** @type {?} */\n        const allTriggerElements = Array.from(this.statesByElement.keys());\n        /** @type {?} */\n        const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);\n        // this must occur before the instructions are built below such that\n        // the :enter queries match the elements (since the timeline queries\n        // are fired during instruction building).\n        /** @type {?} */\n        const enterNodeMapIds = new Map();\n        /** @type {?} */\n        let i = 0;\n        enterNodeMap.forEach((nodes, root) => {\n            /** @type {?} */\n            const className = ENTER_CLASSNAME + i++;\n            enterNodeMapIds.set(root, className);\n            nodes.forEach(node => addClass(node, className));\n        });\n        /** @type {?} */\n        const allLeaveNodes = [];\n        /** @type {?} */\n        const mergedLeaveNodes = new Set();\n        /** @type {?} */\n        const leaveNodesWithoutAnimations = new Set();\n        for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n            /** @type {?} */\n            const element = this.collectedLeaveElements[i];\n            /** @type {?} */\n            const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n            if (details && details.setForRemoval) {\n                allLeaveNodes.push(element);\n                mergedLeaveNodes.add(element);\n                if (details.hasAnimation) {\n                    this.driver.query(element, STAR_SELECTOR, true).forEach(elm => mergedLeaveNodes.add(elm));\n                }\n                else {\n                    leaveNodesWithoutAnimations.add(element);\n                }\n            }\n        }\n        /** @type {?} */\n        const leaveNodeMapIds = new Map();\n        /** @type {?} */\n        const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));\n        leaveNodeMap.forEach((nodes, root) => {\n            /** @type {?} */\n            const className = LEAVE_CLASSNAME + i++;\n            leaveNodeMapIds.set(root, className);\n            nodes.forEach(node => addClass(node, className));\n        });\n        cleanupFns.push(() => {\n            enterNodeMap.forEach((nodes, root) => {\n                /** @type {?} */\n                const className = (/** @type {?} */ (enterNodeMapIds.get(root)));\n                nodes.forEach(node => removeClass(node, className));\n            });\n            leaveNodeMap.forEach((nodes, root) => {\n                /** @type {?} */\n                const className = (/** @type {?} */ (leaveNodeMapIds.get(root)));\n                nodes.forEach(node => removeClass(node, className));\n            });\n            allLeaveNodes.forEach(element => { this.processLeaveNode(element); });\n        });\n        /** @type {?} */\n        const allPlayers = [];\n        /** @type {?} */\n        const erroneousTransitions = [];\n        for (let i = this._namespaceList.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const ns = this._namespaceList[i];\n            ns.drainQueuedTransitions(microtaskId).forEach(entry => {\n                /** @type {?} */\n                const player = entry.player;\n                /** @type {?} */\n                const element = entry.element;\n                allPlayers.push(player);\n                if (this.collectedEnterElements.length) {\n                    /** @type {?} */\n                    const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n                    // move animations are currently not supported...\n                    if (details && details.setForMove) {\n                        player.destroy();\n                        return;\n                    }\n                }\n                /** @type {?} */\n                const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);\n                /** @type {?} */\n                const leaveClassName = (/** @type {?} */ (leaveNodeMapIds.get(element)));\n                /** @type {?} */\n                const enterClassName = (/** @type {?} */ (enterNodeMapIds.get(element)));\n                /** @type {?} */\n                const instruction = (/** @type {?} */ (this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned)));\n                if (instruction.errors && instruction.errors.length) {\n                    erroneousTransitions.push(instruction);\n                    return;\n                }\n                // even though the element may not be apart of the DOM, it may\n                // still be added at a later point (due to the mechanics of content\n                // projection and/or dynamic component insertion) therefore it's\n                // important we still style the element.\n                if (nodeIsOrphaned) {\n                    player.onStart(() => eraseStyles(element, instruction.fromStyles));\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // if a unmatched transition is queued to go then it SHOULD NOT render\n                // an animation and cancel the previously running animations.\n                if (entry.isFallbackTransition) {\n                    player.onStart(() => eraseStyles(element, instruction.fromStyles));\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this means that if a parent animation uses this animation as a sub trigger\n                // then it will instruct the timeline builder to not add a player delay, but\n                // instead stretch the first keyframe gap up until the animation starts. The\n                // reason this is important is to prevent extra initialization styles from being\n                // required by the user in the animation.\n                instruction.timelines.forEach(tl => tl.stretchStartingKeyframe = true);\n                subTimelines.append(element, instruction.timelines);\n                /** @type {?} */\n                const tuple = { instruction, player, element };\n                queuedInstructions.push(tuple);\n                instruction.queriedElements.forEach(element => getOrSetAsInMap(queriedElements, element, []).push(player));\n                instruction.preStyleProps.forEach((stringMap, element) => {\n                    /** @type {?} */\n                    const props = Object.keys(stringMap);\n                    if (props.length) {\n                        /** @type {?} */\n                        let setVal = (/** @type {?} */ (allPreStyleElements.get(element)));\n                        if (!setVal) {\n                            allPreStyleElements.set(element, setVal = new Set());\n                        }\n                        props.forEach(prop => setVal.add(prop));\n                    }\n                });\n                instruction.postStyleProps.forEach((stringMap, element) => {\n                    /** @type {?} */\n                    const props = Object.keys(stringMap);\n                    /** @type {?} */\n                    let setVal = (/** @type {?} */ (allPostStyleElements.get(element)));\n                    if (!setVal) {\n                        allPostStyleElements.set(element, setVal = new Set());\n                    }\n                    props.forEach(prop => setVal.add(prop));\n                });\n            });\n        }\n        if (erroneousTransitions.length) {\n            /** @type {?} */\n            const errors = [];\n            erroneousTransitions.forEach(instruction => {\n                errors.push(`@${instruction.triggerName} has failed due to:\\n`);\n                (/** @type {?} */ (instruction.errors)).forEach(error => errors.push(`- ${error}\\n`));\n            });\n            allPlayers.forEach(player => player.destroy());\n            this.reportError(errors);\n        }\n        /** @type {?} */\n        const allPreviousPlayersMap = new Map();\n        // this map works to tell which element in the DOM tree is contained by\n        // which animation. Further down below this map will get populated once\n        // the players are built and in doing so it can efficiently figure out\n        // if a sub player is skipped due to a parent player having priority.\n        /** @type {?} */\n        const animationElementMap = new Map();\n        queuedInstructions.forEach(entry => {\n            /** @type {?} */\n            const element = entry.element;\n            if (subTimelines.has(element)) {\n                animationElementMap.set(element, element);\n                this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);\n            }\n        });\n        skippedPlayers.forEach(player => {\n            /** @type {?} */\n            const element = player.element;\n            /** @type {?} */\n            const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);\n            previousPlayers.forEach(prevPlayer => {\n                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);\n                prevPlayer.destroy();\n            });\n        });\n        // this is a special case for nodes that will be removed (either by)\n        // having their own leave animations or by being queried in a container\n        // that will be removed once a parent animation is complete. The idea\n        // here is that * styles must be identical to ! styles because of\n        // backwards compatibility (* is also filled in by default in many places).\n        // Otherwise * styles will return an empty value or auto since the element\n        // that is being getComputedStyle'd will not be visible (since * = destination)\n        /** @type {?} */\n        const replaceNodes = allLeaveNodes.filter(node => {\n            return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);\n        });\n        // POST STAGE: fill the * styles\n        /** @type {?} */\n        const postStylesMap = new Map();\n        /** @type {?} */\n        const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);\n        allLeaveQueriedNodes.forEach(node => {\n            if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {\n                replaceNodes.push(node);\n            }\n        });\n        // PRE STAGE: fill the ! styles\n        /** @type {?} */\n        const preStylesMap = new Map();\n        enterNodeMap.forEach((nodes, root) => {\n            cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, ɵPRE_STYLE);\n        });\n        replaceNodes.forEach(node => {\n            /** @type {?} */\n            const post = postStylesMap.get(node);\n            /** @type {?} */\n            const pre = preStylesMap.get(node);\n            postStylesMap.set(node, (/** @type {?} */ (Object.assign({}, post, pre))));\n        });\n        /** @type {?} */\n        const rootPlayers = [];\n        /** @type {?} */\n        const subPlayers = [];\n        /** @type {?} */\n        const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};\n        queuedInstructions.forEach(entry => {\n            const { element, player, instruction } = entry;\n            // this means that it was never consumed by a parent animation which\n            // means that it is independent and therefore should be set for animation\n            if (subTimelines.has(element)) {\n                if (disabledElementsSet.has(element)) {\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    player.disabled = true;\n                    player.overrideTotalTime(instruction.totalTime);\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this will flow up the DOM and query the map to figure out\n                // if a parent animation has priority over it. In the situation\n                // that a parent is detected then it will cancel the loop. If\n                // nothing is detected, or it takes a few hops to find a parent,\n                // then it will fill in the missing nodes and signal them as having\n                // a detected parent (or a NO_PARENT value via a special constant).\n                /** @type {?} */\n                let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;\n                if (animationElementMap.size > 1) {\n                    /** @type {?} */\n                    let elm = element;\n                    /** @type {?} */\n                    const parentsToAdd = [];\n                    while (elm = elm.parentNode) {\n                        /** @type {?} */\n                        const detectedParent = animationElementMap.get(elm);\n                        if (detectedParent) {\n                            parentWithAnimation = detectedParent;\n                            break;\n                        }\n                        parentsToAdd.push(elm);\n                    }\n                    parentsToAdd.forEach(parent => animationElementMap.set(parent, parentWithAnimation));\n                }\n                /** @type {?} */\n                const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);\n                player.setRealPlayer(innerPlayer);\n                if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {\n                    rootPlayers.push(player);\n                }\n                else {\n                    /** @type {?} */\n                    const parentPlayers = this.playersByElement.get(parentWithAnimation);\n                    if (parentPlayers && parentPlayers.length) {\n                        player.parentPlayer = optimizeGroupPlayer(parentPlayers);\n                    }\n                    skippedPlayers.push(player);\n                }\n            }\n            else {\n                eraseStyles(element, instruction.fromStyles);\n                player.onDestroy(() => setStyles(element, instruction.toStyles));\n                // there still might be a ancestor player animating this\n                // element therefore we will still add it as a sub player\n                // even if its animation may be disabled\n                subPlayers.push(player);\n                if (disabledElementsSet.has(element)) {\n                    skippedPlayers.push(player);\n                }\n            }\n        });\n        // find all of the sub players' corresponding inner animation player\n        subPlayers.forEach(player => {\n            // even if any players are not found for a sub animation then it\n            // will still complete itself after the next tick since it's Noop\n            /** @type {?} */\n            const playersForElement = skippedPlayersMap.get(player.element);\n            if (playersForElement && playersForElement.length) {\n                /** @type {?} */\n                const innerPlayer = optimizeGroupPlayer(playersForElement);\n                player.setRealPlayer(innerPlayer);\n            }\n        });\n        // the reason why we don't actually play the animation is\n        // because all that a skipped player is designed to do is to\n        // fire the start/done transition callback events\n        skippedPlayers.forEach(player => {\n            if (player.parentPlayer) {\n                player.syncPlayerEvents(player.parentPlayer);\n            }\n            else {\n                player.destroy();\n            }\n        });\n        // run through all of the queued removals and see if they\n        // were picked up by a query. If not then perform the removal\n        // operation right away unless a parent animation is ongoing.\n        for (let i = 0; i < allLeaveNodes.length; i++) {\n            /** @type {?} */\n            const element = allLeaveNodes[i];\n            /** @type {?} */\n            const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n            removeClass(element, LEAVE_CLASSNAME);\n            // this means the element has a removal animation that is being\n            // taken care of and therefore the inner elements will hang around\n            // until that animation is over (or the parent queried animation)\n            if (details && details.hasAnimation)\n                continue;\n            /** @type {?} */\n            let players = [];\n            // if this element is queried or if it contains queried children\n            // then we want for the element not to be removed from the page\n            // until the queried animations have finished\n            if (queriedElements.size) {\n                /** @type {?} */\n                let queriedPlayerResults = queriedElements.get(element);\n                if (queriedPlayerResults && queriedPlayerResults.length) {\n                    players.push(...queriedPlayerResults);\n                }\n                /** @type {?} */\n                let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);\n                for (let j = 0; j < queriedInnerElements.length; j++) {\n                    /** @type {?} */\n                    let queriedPlayers = queriedElements.get(queriedInnerElements[j]);\n                    if (queriedPlayers && queriedPlayers.length) {\n                        players.push(...queriedPlayers);\n                    }\n                }\n            }\n            /** @type {?} */\n            const activePlayers = players.filter(p => !p.destroyed);\n            if (activePlayers.length) {\n                removeNodesAfterAnimationDone(this, element, activePlayers);\n            }\n            else {\n                this.processLeaveNode(element);\n            }\n        }\n        // this is required so the cleanup method doesn't remove them\n        allLeaveNodes.length = 0;\n        rootPlayers.forEach(player => {\n            this.players.push(player);\n            player.onDone(() => {\n                player.destroy();\n                /** @type {?} */\n                const index = this.players.indexOf(player);\n                this.players.splice(index, 1);\n            });\n            player.play();\n        });\n        return rootPlayers;\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @return {?}\n     */\n    elementContainsData(namespaceId, element) {\n        /** @type {?} */\n        let containsData = false;\n        /** @type {?} */\n        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));\n        if (details && details.setForRemoval)\n            containsData = true;\n        if (this.playersByElement.has(element))\n            containsData = true;\n        if (this.playersByQueriedElement.has(element))\n            containsData = true;\n        if (this.statesByElement.has(element))\n            containsData = true;\n        return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    afterFlush(callback) { this._flushFns.push(callback); }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    afterFlushAnimationsDone(callback) { this._whenQuietFns.push(callback); }\n    /**\n     * @private\n     * @param {?} element\n     * @param {?} isQueriedElement\n     * @param {?=} namespaceId\n     * @param {?=} triggerName\n     * @param {?=} toStateValue\n     * @return {?}\n     */\n    _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {\n        /** @type {?} */\n        let players = [];\n        if (isQueriedElement) {\n            /** @type {?} */\n            const queriedElementPlayers = this.playersByQueriedElement.get(element);\n            if (queriedElementPlayers) {\n                players = queriedElementPlayers;\n            }\n        }\n        else {\n            /** @type {?} */\n            const elementPlayers = this.playersByElement.get(element);\n            if (elementPlayers) {\n                /** @type {?} */\n                const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;\n                elementPlayers.forEach(player => {\n                    if (player.queued)\n                        return;\n                    if (!isRemovalAnimation && player.triggerName != triggerName)\n                        return;\n                    players.push(player);\n                });\n            }\n        }\n        if (namespaceId || triggerName) {\n            players = players.filter(player => {\n                if (namespaceId && namespaceId != player.namespaceId)\n                    return false;\n                if (triggerName && triggerName != player.triggerName)\n                    return false;\n                return true;\n            });\n        }\n        return players;\n    }\n    /**\n     * @private\n     * @param {?} namespaceId\n     * @param {?} instruction\n     * @param {?} allPreviousPlayersMap\n     * @return {?}\n     */\n    _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {\n        /** @type {?} */\n        const triggerName = instruction.triggerName;\n        /** @type {?} */\n        const rootElement = instruction.element;\n        // when a removal animation occurs, ALL previous players are collected\n        // and destroyed (even if they are outside of the current namespace)\n        /** @type {?} */\n        const targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;\n        /** @type {?} */\n        const targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;\n        for (const timelineInstruction of instruction.timelines) {\n            /** @type {?} */\n            const element = timelineInstruction.element;\n            /** @type {?} */\n            const isQueriedElement = element !== rootElement;\n            /** @type {?} */\n            const players = getOrSetAsInMap(allPreviousPlayersMap, element, []);\n            /** @type {?} */\n            const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);\n            previousPlayers.forEach(player => {\n                /** @type {?} */\n                const realPlayer = (/** @type {?} */ (player.getRealPlayer()));\n                if (realPlayer.beforeDestroy) {\n                    realPlayer.beforeDestroy();\n                }\n                player.destroy();\n                players.push(player);\n            });\n        }\n        // this needs to be done so that the PRE/POST styles can be\n        // computed properly without interfering with the previous animation\n        eraseStyles(rootElement, instruction.fromStyles);\n    }\n    /**\n     * @private\n     * @param {?} namespaceId\n     * @param {?} instruction\n     * @param {?} allPreviousPlayersMap\n     * @param {?} skippedPlayersMap\n     * @param {?} preStylesMap\n     * @param {?} postStylesMap\n     * @return {?}\n     */\n    _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {\n        /** @type {?} */\n        const triggerName = instruction.triggerName;\n        /** @type {?} */\n        const rootElement = instruction.element;\n        // we first run this so that the previous animation player\n        // data can be passed into the successive animation players\n        /** @type {?} */\n        const allQueriedPlayers = [];\n        /** @type {?} */\n        const allConsumedElements = new Set();\n        /** @type {?} */\n        const allSubElements = new Set();\n        /** @type {?} */\n        const allNewPlayers = instruction.timelines.map(timelineInstruction => {\n            /** @type {?} */\n            const element = timelineInstruction.element;\n            allConsumedElements.add(element);\n            // FIXME (matsko): make sure to-be-removed animations are removed properly\n            /** @type {?} */\n            const details = element[REMOVAL_FLAG];\n            if (details && details.removedBeforeQueried)\n                return new NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);\n            /** @type {?} */\n            const isQueriedElement = element !== rootElement;\n            /** @type {?} */\n            const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)\n                .map(p => p.getRealPlayer()))\n                .filter(p => {\n                // the `element` is not apart of the AnimationPlayer definition, but\n                // Mock/WebAnimations\n                // use the element within their implementation. This will be added in Angular5 to\n                // AnimationPlayer\n                /** @type {?} */\n                const pp = (/** @type {?} */ (p));\n                return pp.element ? pp.element === element : false;\n            });\n            /** @type {?} */\n            const preStyles = preStylesMap.get(element);\n            /** @type {?} */\n            const postStyles = postStylesMap.get(element);\n            /** @type {?} */\n            const keyframes = normalizeKeyframes(this.driver, this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);\n            /** @type {?} */\n            const player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);\n            // this means that this particular player belongs to a sub trigger. It is\n            // important that we match this player up with the corresponding (@trigger.listener)\n            if (timelineInstruction.subTimeline && skippedPlayersMap) {\n                allSubElements.add(element);\n            }\n            if (isQueriedElement) {\n                /** @type {?} */\n                const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);\n                wrappedPlayer.setRealPlayer(player);\n                allQueriedPlayers.push(wrappedPlayer);\n            }\n            return player;\n        });\n        allQueriedPlayers.forEach(player => {\n            getOrSetAsInMap(this.playersByQueriedElement, player.element, []).push(player);\n            player.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player));\n        });\n        allConsumedElements.forEach(element => addClass(element, NG_ANIMATING_CLASSNAME));\n        /** @type {?} */\n        const player = optimizeGroupPlayer(allNewPlayers);\n        player.onDestroy(() => {\n            allConsumedElements.forEach(element => removeClass(element, NG_ANIMATING_CLASSNAME));\n            setStyles(rootElement, instruction.toStyles);\n        });\n        // this basically makes all of the callbacks for sub element animations\n        // be dependent on the upper players for when they finish\n        allSubElements.forEach(element => { getOrSetAsInMap(skippedPlayersMap, element, []).push(player); });\n        return player;\n    }\n    /**\n     * @private\n     * @param {?} instruction\n     * @param {?} keyframes\n     * @param {?} previousPlayers\n     * @return {?}\n     */\n    _buildPlayer(instruction, keyframes, previousPlayers) {\n        if (keyframes.length > 0) {\n            return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);\n        }\n        // special case for when an empty transition|definition is provided\n        // ... there is no point in rendering an empty animation\n        return new NoopAnimationPlayer(instruction.duration, instruction.delay);\n    }\n}\nclass TransitionAnimationPlayer {\n    /**\n     * @param {?} namespaceId\n     * @param {?} triggerName\n     * @param {?} element\n     */\n    constructor(namespaceId, triggerName, element) {\n        this.namespaceId = namespaceId;\n        this.triggerName = triggerName;\n        this.element = element;\n        this._player = new NoopAnimationPlayer();\n        this._containsRealPlayer = false;\n        this._queuedCallbacks = {};\n        this.destroyed = false;\n        this.markedForDestroy = false;\n        this.disabled = false;\n        this.queued = true;\n        this.totalTime = 0;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    setRealPlayer(player) {\n        if (this._containsRealPlayer)\n            return;\n        this._player = player;\n        Object.keys(this._queuedCallbacks).forEach(phase => {\n            this._queuedCallbacks[phase].forEach(callback => listenOnPlayer(player, phase, undefined, callback));\n        });\n        this._queuedCallbacks = {};\n        this._containsRealPlayer = true;\n        this.overrideTotalTime(player.totalTime);\n        ((/** @type {?} */ (this))).queued = false;\n    }\n    /**\n     * @return {?}\n     */\n    getRealPlayer() { return this._player; }\n    /**\n     * @param {?} totalTime\n     * @return {?}\n     */\n    overrideTotalTime(totalTime) { ((/** @type {?} */ (this))).totalTime = totalTime; }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    syncPlayerEvents(player) {\n        /** @type {?} */\n        const p = (/** @type {?} */ (this._player));\n        if (p.triggerCallback) {\n            player.onStart(() => (/** @type {?} */ (p.triggerCallback))('start'));\n        }\n        player.onDone(() => this.finish());\n        player.onDestroy(() => this.destroy());\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    _queueEvent(name, callback) {\n        getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) {\n        if (this.queued) {\n            this._queueEvent('done', fn);\n        }\n        this._player.onDone(fn);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) {\n        if (this.queued) {\n            this._queueEvent('start', fn);\n        }\n        this._player.onStart(fn);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) {\n        if (this.queued) {\n            this._queueEvent('destroy', fn);\n        }\n        this._player.onDestroy(fn);\n    }\n    /**\n     * @return {?}\n     */\n    init() { this._player.init(); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this.queued ? false : this._player.hasStarted(); }\n    /**\n     * @return {?}\n     */\n    play() { !this.queued && this._player.play(); }\n    /**\n     * @return {?}\n     */\n    pause() { !this.queued && this._player.pause(); }\n    /**\n     * @return {?}\n     */\n    restart() { !this.queued && this._player.restart(); }\n    /**\n     * @return {?}\n     */\n    finish() { this._player.finish(); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this))).destroyed = true;\n        this._player.destroy();\n    }\n    /**\n     * @return {?}\n     */\n    reset() { !this.queued && this._player.reset(); }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) {\n        if (!this.queued) {\n            this._player.setPosition(p);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this.queued ? 0 : this._player.getPosition(); }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const p = (/** @type {?} */ (this._player));\n        if (p.triggerCallback) {\n            p.triggerCallback(phaseName);\n        }\n    }\n}\n/**\n * @param {?} map\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction deleteOrUnsetInMap(map, key, value) {\n    /** @type {?} */\n    let currentValues;\n    if (map instanceof Map) {\n        currentValues = map.get(key);\n        if (currentValues) {\n            if (currentValues.length) {\n                /** @type {?} */\n                const index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                map.delete(key);\n            }\n        }\n    }\n    else {\n        currentValues = map[key];\n        if (currentValues) {\n            if (currentValues.length) {\n                /** @type {?} */\n                const index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                delete map[key];\n            }\n        }\n    }\n    return currentValues;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeTriggerValue(value) {\n    // we use `!= null` here because it's the most simple\n    // way to test against a \"falsy\" value without mixing\n    // in empty strings or a zero value. DO NOT OPTIMIZE.\n    return value != null ? value : null;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isElementNode(node) {\n    return node && node['nodeType'] === 1;\n}\n/**\n * @param {?} eventName\n * @return {?}\n */\nfunction isTriggerEventValid(eventName) {\n    return eventName == 'start' || eventName == 'done';\n}\n/**\n * @param {?} element\n * @param {?=} value\n * @return {?}\n */\nfunction cloakElement(element, value) {\n    /** @type {?} */\n    const oldValue = element.style.display;\n    element.style.display = value != null ? value : 'none';\n    return oldValue;\n}\n/**\n * @param {?} valuesMap\n * @param {?} driver\n * @param {?} elements\n * @param {?} elementPropsMap\n * @param {?} defaultStyle\n * @return {?}\n */\nfunction cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {\n    /** @type {?} */\n    const cloakVals = [];\n    elements.forEach(element => cloakVals.push(cloakElement(element)));\n    /** @type {?} */\n    const failedElements = [];\n    elementPropsMap.forEach((props, element) => {\n        /** @type {?} */\n        const styles = {};\n        props.forEach(prop => {\n            /** @type {?} */\n            const value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);\n            // there is no easy way to detect this because a sub element could be removed\n            // by a parent animation element being detached.\n            if (!value || value.length == 0) {\n                element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;\n                failedElements.push(element);\n            }\n        });\n        valuesMap.set(element, styles);\n    });\n    // we use a index variable here since Set.forEach(a, i) does not return\n    // an index value for the closure (but instead just the value)\n    /** @type {?} */\n    let i = 0;\n    elements.forEach(element => cloakElement(element, cloakVals[i++]));\n    return failedElements;\n}\n/*\nSince the Angular renderer code will return a collection of inserted\nnodes in all areas of a DOM tree, it's up to this algorithm to figure\nout which nodes are roots for each animation @trigger.\n\nBy placing each inserted node into a Set and traversing upwards, it\nis possible to find the @trigger elements and well any direct *star\ninsertion nodes, if a @trigger root is found then the enter element\nis placed into the Map[@trigger] spot.\n */\n/**\n * @param {?} roots\n * @param {?} nodes\n * @return {?}\n */\nfunction buildRootMap(roots, nodes) {\n    /** @type {?} */\n    const rootMap = new Map();\n    roots.forEach(root => rootMap.set(root, []));\n    if (nodes.length == 0)\n        return rootMap;\n    /** @type {?} */\n    const NULL_NODE = 1;\n    /** @type {?} */\n    const nodeSet = new Set(nodes);\n    /** @type {?} */\n    const localRootMap = new Map();\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function getRoot(node) {\n        if (!node)\n            return NULL_NODE;\n        /** @type {?} */\n        let root = localRootMap.get(node);\n        if (root)\n            return root;\n        /** @type {?} */\n        const parent = node.parentNode;\n        if (rootMap.has(parent)) { // ngIf inside @trigger\n            root = parent;\n        }\n        else if (nodeSet.has(parent)) { // ngIf inside ngIf\n            root = NULL_NODE;\n        }\n        else { // recurse upwards\n            root = getRoot(parent);\n        }\n        localRootMap.set(node, root);\n        return root;\n    }\n    nodes.forEach(node => {\n        /** @type {?} */\n        const root = getRoot(node);\n        if (root !== NULL_NODE) {\n            (/** @type {?} */ (rootMap.get(root))).push(node);\n        }\n    });\n    return rootMap;\n}\n/** @type {?} */\nconst CLASSES_CACHE_KEY = '$$classes';\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nfunction addClass(element, className) {\n    if (element.classList) {\n        element.classList.add(className);\n    }\n    else {\n        /** @type {?} */\n        let classes = element[CLASSES_CACHE_KEY];\n        if (!classes) {\n            classes = element[CLASSES_CACHE_KEY] = {};\n        }\n        classes[className] = true;\n    }\n}\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nfunction removeClass(element, className) {\n    if (element.classList) {\n        element.classList.remove(className);\n    }\n    else {\n        /** @type {?} */\n        let classes = element[CLASSES_CACHE_KEY];\n        if (classes) {\n            delete classes[className];\n        }\n    }\n}\n/**\n * @param {?} engine\n * @param {?} element\n * @param {?} players\n * @return {?}\n */\nfunction removeNodesAfterAnimationDone(engine, element, players) {\n    optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));\n}\n/**\n * @param {?} players\n * @return {?}\n */\nfunction flattenGroupPlayers(players) {\n    /** @type {?} */\n    const finalPlayers = [];\n    _flattenGroupPlayersRecur(players, finalPlayers);\n    return finalPlayers;\n}\n/**\n * @param {?} players\n * @param {?} finalPlayers\n * @return {?}\n */\nfunction _flattenGroupPlayersRecur(players, finalPlayers) {\n    for (let i = 0; i < players.length; i++) {\n        /** @type {?} */\n        const player = players[i];\n        if (player instanceof ɵAnimationGroupPlayer) {\n            _flattenGroupPlayersRecur(player.players, finalPlayers);\n        }\n        else {\n            finalPlayers.push((/** @type {?} */ (player)));\n        }\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction objEquals(a, b) {\n    /** @type {?} */\n    const k1 = Object.keys(a);\n    /** @type {?} */\n    const k2 = Object.keys(b);\n    if (k1.length != k2.length)\n        return false;\n    for (let i = 0; i < k1.length; i++) {\n        /** @type {?} */\n        const prop = k1[i];\n        if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])\n            return false;\n    }\n    return true;\n}\n/**\n * @param {?} element\n * @param {?} allPreStyleElements\n * @param {?} allPostStyleElements\n * @return {?}\n */\nfunction replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {\n    /** @type {?} */\n    const postEntry = allPostStyleElements.get(element);\n    if (!postEntry)\n        return false;\n    /** @type {?} */\n    let preEntry = allPreStyleElements.get(element);\n    if (preEntry) {\n        postEntry.forEach(data => (/** @type {?} */ (preEntry)).add(data));\n    }\n    else {\n        allPreStyleElements.set(element, postEntry);\n    }\n    allPostStyleElements.delete(element);\n    return true;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AnimationEngine {\n    /**\n     * @param {?} bodyNode\n     * @param {?} _driver\n     * @param {?} normalizer\n     */\n    constructor(bodyNode, _driver, normalizer) {\n        this.bodyNode = bodyNode;\n        this._driver = _driver;\n        this._triggerCache = {};\n        // this method is designed to be overridden by the code that uses this engine\n        this.onRemovalComplete = (element, context) => { };\n        this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);\n        this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);\n        this._transitionEngine.onRemovalComplete = (element, context) => this.onRemovalComplete(element, context);\n    }\n    /**\n     * @param {?} componentId\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @param {?} name\n     * @param {?} metadata\n     * @return {?}\n     */\n    registerTrigger(componentId, namespaceId, hostElement, name, metadata) {\n        /** @type {?} */\n        const cacheKey = componentId + '-' + name;\n        /** @type {?} */\n        let trigger = this._triggerCache[cacheKey];\n        if (!trigger) {\n            /** @type {?} */\n            const errors = [];\n            /** @type {?} */\n            const ast = (/** @type {?} */ (buildAnimationAst(this._driver, (/** @type {?} */ (metadata)), errors)));\n            if (errors.length) {\n                throw new Error(`The animation trigger \"${name}\" has failed to build due to the following errors:\\n - ${errors.join(\"\\n - \")}`);\n            }\n            trigger = buildTrigger(name, ast);\n            this._triggerCache[cacheKey] = trigger;\n        }\n        this._transitionEngine.registerTrigger(namespaceId, name, trigger);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} hostElement\n     * @return {?}\n     */\n    register(namespaceId, hostElement) {\n        this._transitionEngine.register(namespaceId, hostElement);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} context\n     * @return {?}\n     */\n    destroy(namespaceId, context) {\n        this._transitionEngine.destroy(namespaceId, context);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} parent\n     * @param {?} insertBefore\n     * @return {?}\n     */\n    onInsert(namespaceId, element, parent, insertBefore) {\n        this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    onRemove(namespaceId, element, context) {\n        this._transitionEngine.removeNode(namespaceId, element, context);\n    }\n    /**\n     * @param {?} element\n     * @param {?} disable\n     * @return {?}\n     */\n    disableAnimations(element, disable) {\n        this._transitionEngine.markElementAsDisabled(element, disable);\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    process(namespaceId, element, property, value) {\n        if (property.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(property);\n            /** @type {?} */\n            const args = (/** @type {?} */ (value));\n            this._timelineEngine.command(id, element, action, args);\n        }\n        else {\n            this._transitionEngine.trigger(namespaceId, element, property, value);\n        }\n    }\n    /**\n     * @param {?} namespaceId\n     * @param {?} element\n     * @param {?} eventName\n     * @param {?} eventPhase\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(namespaceId, element, eventName, eventPhase, callback) {\n        // @@listen\n        if (eventName.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(eventName);\n            return this._timelineEngine.listen(id, element, action, callback);\n        }\n        return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);\n    }\n    /**\n     * @param {?=} microtaskId\n     * @return {?}\n     */\n    flush(microtaskId = -1) { this._transitionEngine.flush(microtaskId); }\n    /**\n     * @return {?}\n     */\n    get players() {\n        return ((/** @type {?} */ (this._transitionEngine.players)))\n            .concat((/** @type {?} */ (this._timelineEngine.players)));\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() { return this._transitionEngine.whenRenderingDone(); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\n/** @type {?} */\nconst ANIMATION_PROP = 'animation';\n/** @type {?} */\nconst ANIMATIONEND_EVENT = 'animationend';\n/** @type {?} */\nconst ONE_SECOND$1 = 1000;\nclass ElementAnimationStyleHandler {\n    /**\n     * @param {?} _element\n     * @param {?} _name\n     * @param {?} _duration\n     * @param {?} _delay\n     * @param {?} _easing\n     * @param {?} _fillMode\n     * @param {?} _onDoneFn\n     */\n    constructor(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {\n        this._element = _element;\n        this._name = _name;\n        this._duration = _duration;\n        this._delay = _delay;\n        this._easing = _easing;\n        this._fillMode = _fillMode;\n        this._onDoneFn = _onDoneFn;\n        this._finished = false;\n        this._destroyed = false;\n        this._startTime = 0;\n        this._position = 0;\n        this._eventFn = (e) => this._handleCallback(e);\n    }\n    /**\n     * @return {?}\n     */\n    apply() {\n        applyKeyframeAnimation(this._element, `${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${this._name}`);\n        addRemoveAnimationEvent(this._element, this._eventFn, false);\n        this._startTime = Date.now();\n    }\n    /**\n     * @return {?}\n     */\n    pause() { playPauseAnimation(this._element, this._name, 'paused'); }\n    /**\n     * @return {?}\n     */\n    resume() { playPauseAnimation(this._element, this._name, 'running'); }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    setPosition(position) {\n        /** @type {?} */\n        const index = findIndexForAnimation(this._element, this._name);\n        this._position = position * this._duration;\n        setAnimationStyle(this._element, 'Delay', `-${this._position}ms`, index);\n    }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this._position; }\n    /**\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCallback(event) {\n        /** @type {?} */\n        const timestamp = event._ngTestManualTimestamp || Date.now();\n        /** @type {?} */\n        const elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;\n        if (event.animationName == this._name &&\n            Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {\n            this.finish();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        if (this._finished)\n            return;\n        this._finished = true;\n        this._onDoneFn();\n        addRemoveAnimationEvent(this._element, this._eventFn, true);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed)\n            return;\n        this._destroyed = true;\n        this.finish();\n        removeKeyframeAnimation(this._element, this._name);\n    }\n}\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} status\n * @return {?}\n */\nfunction playPauseAnimation(element, name, status) {\n    /** @type {?} */\n    const index = findIndexForAnimation(element, name);\n    setAnimationStyle(element, 'PlayState', status, index);\n}\n/**\n * @param {?} element\n * @param {?} value\n * @return {?}\n */\nfunction applyKeyframeAnimation(element, value) {\n    /** @type {?} */\n    const anim = getAnimationStyle(element, '').trim();\n    /** @type {?} */\n    let index = 0;\n    if (anim.length) {\n        index = countChars(anim, ',') + 1;\n        value = `${anim}, ${value}`;\n    }\n    setAnimationStyle(element, '', value);\n    return index;\n}\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nfunction removeKeyframeAnimation(element, name) {\n    /** @type {?} */\n    const anim = getAnimationStyle(element, '');\n    /** @type {?} */\n    const tokens = anim.split(',');\n    /** @type {?} */\n    const index = findMatchingTokenIndex(tokens, name);\n    if (index >= 0) {\n        tokens.splice(index, 1);\n        /** @type {?} */\n        const newValue = tokens.join(',');\n        setAnimationStyle(element, '', newValue);\n    }\n}\n/**\n * @param {?} element\n * @param {?} value\n * @return {?}\n */\nfunction findIndexForAnimation(element, value) {\n    /** @type {?} */\n    const anim = getAnimationStyle(element, '');\n    if (anim.indexOf(',') > 0) {\n        /** @type {?} */\n        const tokens = anim.split(',');\n        return findMatchingTokenIndex(tokens, value);\n    }\n    return findMatchingTokenIndex([anim], value);\n}\n/**\n * @param {?} tokens\n * @param {?} searchToken\n * @return {?}\n */\nfunction findMatchingTokenIndex(tokens, searchToken) {\n    for (let i = 0; i < tokens.length; i++) {\n        if (tokens[i].indexOf(searchToken) >= 0) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} element\n * @param {?} fn\n * @param {?} doRemove\n * @return {?}\n */\nfunction addRemoveAnimationEvent(element, fn, doRemove) {\n    doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) :\n        element.addEventListener(ANIMATIONEND_EVENT, fn);\n}\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @param {?=} index\n * @return {?}\n */\nfunction setAnimationStyle(element, name, value, index) {\n    /** @type {?} */\n    const prop = ANIMATION_PROP + name;\n    if (index != null) {\n        /** @type {?} */\n        const oldValue = element.style[prop];\n        if (oldValue.length) {\n            /** @type {?} */\n            const tokens = oldValue.split(',');\n            tokens[index] = value;\n            value = tokens.join(',');\n        }\n    }\n    element.style[prop] = value;\n}\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nfunction getAnimationStyle(element, name) {\n    return element.style[ANIMATION_PROP + name];\n}\n/**\n * @param {?} value\n * @param {?} char\n * @return {?}\n */\nfunction countChars(value, char) {\n    /** @type {?} */\n    let count = 0;\n    for (let i = 0; i < value.length; i++) {\n        /** @type {?} */\n        const c = value.charAt(i);\n        if (c === char)\n            count++;\n    }\n    return count;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_FILL_MODE = 'forwards';\n/** @type {?} */\nconst DEFAULT_EASING = 'linear';\nclass CssKeyframesPlayer {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} animationName\n     * @param {?} _duration\n     * @param {?} _delay\n     * @param {?} easing\n     * @param {?} _finalStyles\n     */\n    constructor(element, keyframes, animationName, _duration, _delay, easing, _finalStyles) {\n        this.element = element;\n        this.keyframes = keyframes;\n        this.animationName = animationName;\n        this._duration = _duration;\n        this._delay = _delay;\n        this._finalStyles = _finalStyles;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this.currentSnapshot = {};\n        this._state = 0;\n        this.easing = easing || DEFAULT_EASING;\n        this.totalTime = _duration + _delay;\n        this._buildStyler();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this.init();\n        if (this._state >= 4 /* DESTROYED */)\n            return;\n        this._state = 4 /* DESTROYED */;\n        this._styler.destroy();\n        this._flushStartFns();\n        this._flushDoneFns();\n        this._onDestroyFns.forEach(fn => fn());\n        this._onDestroyFns = [];\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _flushDoneFns() {\n        this._onDoneFns.forEach(fn => fn());\n        this._onDoneFns = [];\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _flushStartFns() {\n        this._onStartFns.forEach(fn => fn());\n        this._onStartFns = [];\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this.init();\n        if (this._state >= 3 /* FINISHED */)\n            return;\n        this._state = 3 /* FINISHED */;\n        this._styler.finish();\n        this._flushStartFns();\n        this._flushDoneFns();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setPosition(value) { this._styler.setPosition(value); }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this._styler.getPosition(); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._state >= 2 /* STARTED */; }\n    /**\n     * @return {?}\n     */\n    init() {\n        if (this._state >= 1 /* INITIALIZED */)\n            return;\n        this._state = 1 /* INITIALIZED */;\n        /** @type {?} */\n        const elm = this.element;\n        this._styler.apply();\n        if (this._delay) {\n            this._styler.pause();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    play() {\n        this.init();\n        if (!this.hasStarted()) {\n            this._flushStartFns();\n            this._state = 2 /* STARTED */;\n        }\n        this._styler.resume();\n    }\n    /**\n     * @return {?}\n     */\n    pause() {\n        this.init();\n        this._styler.pause();\n    }\n    /**\n     * @return {?}\n     */\n    restart() {\n        this.reset();\n        this.play();\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this._styler.destroy();\n        this._buildStyler();\n        this._styler.apply();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _buildStyler() {\n        this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, () => this.finish());\n    }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        this.init();\n        /** @type {?} */\n        const styles = {};\n        if (this.hasStarted()) {\n            /** @type {?} */\n            const finished = this._state >= 3 /* FINISHED */;\n            Object.keys(this._finalStyles).forEach(prop => {\n                if (prop != 'offset') {\n                    styles[prop] = finished ? this._finalStyles[prop] : computeStyle(this.element, prop);\n                }\n            });\n        }\n        this.currentSnapshot = styles;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DirectStylePlayer extends NoopAnimationPlayer {\n    /**\n     * @param {?} element\n     * @param {?} styles\n     */\n    constructor(element, styles) {\n        super();\n        this.element = element;\n        this._startingStyles = {};\n        this.__initialized = false;\n        this._styles = hypenatePropsObject(styles);\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        if (this.__initialized || !this._startingStyles)\n            return;\n        this.__initialized = true;\n        Object.keys(this._styles).forEach(prop => {\n            (/** @type {?} */ (this._startingStyles))[prop] = this.element.style[prop];\n        });\n        super.init();\n    }\n    /**\n     * @return {?}\n     */\n    play() {\n        if (!this._startingStyles)\n            return;\n        this.init();\n        Object.keys(this._styles)\n            .forEach(prop => this.element.style.setProperty(prop, this._styles[prop]));\n        super.play();\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (!this._startingStyles)\n            return;\n        Object.keys(this._startingStyles).forEach(prop => {\n            /** @type {?} */\n            const value = (/** @type {?} */ (this._startingStyles))[prop];\n            if (value) {\n                this.element.style.setProperty(prop, value);\n            }\n            else {\n                this.element.style.removeProperty(prop);\n            }\n        });\n        this._startingStyles = null;\n        super.destroy();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';\n/** @type {?} */\nconst TAB_SPACE = ' ';\nclass CssKeyframesDriver {\n    constructor() {\n        this._count = 0;\n        this._head = document.querySelector('head');\n        this._warningIssued = false;\n    }\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return (/** @type {?} */ (((/** @type {?} */ (window.getComputedStyle(element))))[prop]));\n    }\n    /**\n     * @param {?} element\n     * @param {?} name\n     * @param {?} keyframes\n     * @return {?}\n     */\n    buildKeyframeElement(element, name, keyframes) {\n        keyframes = keyframes.map(kf => hypenatePropsObject(kf));\n        /** @type {?} */\n        let keyframeStr = `@keyframes ${name} {\\n`;\n        /** @type {?} */\n        let tab = '';\n        keyframes.forEach(kf => {\n            tab = TAB_SPACE;\n            /** @type {?} */\n            const offset = parseFloat(kf.offset);\n            keyframeStr += `${tab}${offset * 100}% {\\n`;\n            tab += TAB_SPACE;\n            Object.keys(kf).forEach(prop => {\n                /** @type {?} */\n                const value = kf[prop];\n                switch (prop) {\n                    case 'offset':\n                        return;\n                    case 'easing':\n                        if (value) {\n                            keyframeStr += `${tab}animation-timing-function: ${value};\\n`;\n                        }\n                        return;\n                    default:\n                        keyframeStr += `${tab}${prop}: ${value};\\n`;\n                        return;\n                }\n            });\n            keyframeStr += `${tab}}\\n`;\n        });\n        keyframeStr += `}\\n`;\n        /** @type {?} */\n        const kfElm = document.createElement('style');\n        kfElm.innerHTML = keyframeStr;\n        return kfElm;\n    }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @param {?=} scrubberAccessRequested\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        if (scrubberAccessRequested) {\n            this._notifyFaultyScrubber();\n        }\n        /** @type {?} */\n        const previousCssKeyframePlayers = (/** @type {?} */ (previousPlayers.filter(player => player instanceof CssKeyframesPlayer)));\n        /** @type {?} */\n        const previousStyles = {};\n        if (allowPreviousPlayerStylesMerge(duration, delay)) {\n            previousCssKeyframePlayers.forEach(player => {\n                /** @type {?} */\n                let styles = player.currentSnapshot;\n                Object.keys(styles).forEach(prop => previousStyles[prop] = styles[prop]);\n            });\n        }\n        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n        /** @type {?} */\n        const finalStyles = flattenKeyframesIntoStyles(keyframes);\n        // if there is no animation then there is no point in applying\n        // styles and waiting for an event to get fired. This causes lag.\n        // It's better to just directly apply the styles to the element\n        // via the direct styling animation player.\n        if (duration == 0) {\n            return new DirectStylePlayer(element, finalStyles);\n        }\n        /** @type {?} */\n        const animationName = `${KEYFRAMES_NAME_PREFIX}${this._count++}`;\n        /** @type {?} */\n        const kfElm = this.buildKeyframeElement(element, animationName, keyframes);\n        (/** @type {?} */ (document.querySelector('head'))).appendChild(kfElm);\n        /** @type {?} */\n        const player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles);\n        player.onDestroy(() => removeElement(kfElm));\n        return player;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _notifyFaultyScrubber() {\n        if (!this._warningIssued) {\n            console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\\n', '  visit http://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');\n            this._warningIssued = true;\n        }\n    }\n}\n/**\n * @param {?} keyframes\n * @return {?}\n */\nfunction flattenKeyframesIntoStyles(keyframes) {\n    /** @type {?} */\n    let flatKeyframes = {};\n    if (keyframes) {\n        /** @type {?} */\n        const kfs = Array.isArray(keyframes) ? keyframes : [keyframes];\n        kfs.forEach(kf => {\n            Object.keys(kf).forEach(prop => {\n                if (prop == 'offset' || prop == 'easing')\n                    return;\n                flatKeyframes[prop] = kf[prop];\n            });\n        });\n    }\n    return flatKeyframes;\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction removeElement(node) {\n    node.parentNode.removeChild(node);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass WebAnimationsPlayer {\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     */\n    constructor(element, keyframes, options) {\n        this.element = element;\n        this.keyframes = keyframes;\n        this.options = options;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._initialized = false;\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this.time = 0;\n        this.parentPlayer = null;\n        this.currentSnapshot = {};\n        this._duration = (/** @type {?} */ (options['duration']));\n        this._delay = (/** @type {?} */ (options['delay'])) || 0;\n        this.time = this._duration + this._delay;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    /**\n     * @return {?}\n     */\n    init() {\n        this._buildPlayer();\n        this._preparePlayerBeforeStart();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _buildPlayer() {\n        if (this._initialized)\n            return;\n        this._initialized = true;\n        /** @type {?} */\n        const keyframes = this.keyframes;\n        ((/** @type {?} */ (this))).domPlayer =\n            this._triggerWebAnimation(this.element, keyframes, this.options);\n        this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};\n        this.domPlayer.addEventListener('finish', () => this._onFinish());\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _preparePlayerBeforeStart() {\n        // this is required so that the player doesn't start to animate right away\n        if (this._delay) {\n            this._resetDomPlayerState();\n        }\n        else {\n            this.domPlayer.pause();\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} options\n     * @return {?}\n     */\n    _triggerWebAnimation(element, keyframes, options) {\n        // jscompiler doesn't seem to know animate is a native property because it's not fully\n        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n        return (/** @type {?} */ (element['animate'](keyframes, options)));\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._onStartFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._onDoneFns.push(fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._onDestroyFns.push(fn); }\n    /**\n     * @return {?}\n     */\n    play() {\n        this._buildPlayer();\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(fn => fn());\n            this._onStartFns = [];\n            this._started = true;\n        }\n        this.domPlayer.play();\n    }\n    /**\n     * @return {?}\n     */\n    pause() {\n        this.init();\n        this.domPlayer.pause();\n    }\n    /**\n     * @return {?}\n     */\n    finish() {\n        this.init();\n        this._onFinish();\n        this.domPlayer.finish();\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this._resetDomPlayerState();\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetDomPlayerState() {\n        if (this.domPlayer) {\n            this.domPlayer.cancel();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    restart() {\n        this.reset();\n        this.play();\n    }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._resetDomPlayerState();\n            this._onFinish();\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) { this.domPlayer.currentTime = p * this.time; }\n    /**\n     * @return {?}\n     */\n    getPosition() { return this.domPlayer.currentTime / this.time; }\n    /**\n     * @return {?}\n     */\n    get totalTime() { return this._delay + this._duration; }\n    /**\n     * @return {?}\n     */\n    beforeDestroy() {\n        /** @type {?} */\n        const styles = {};\n        if (this.hasStarted()) {\n            Object.keys(this._finalKeyframe).forEach(prop => {\n                if (prop != 'offset') {\n                    styles[prop] =\n                        this._finished ? this._finalKeyframe[prop] : computeStyle(this.element, prop);\n                }\n            });\n        }\n        this.currentSnapshot = styles;\n    }\n    /**\n     * \\@internal\n     * @param {?} phaseName\n     * @return {?}\n     */\n    triggerCallback(phaseName) {\n        /** @type {?} */\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass WebAnimationsDriver {\n    constructor() {\n        this._isNativeImpl = /\\{\\s*\\[native\\s+code\\]\\s*\\}/.test(getElementAnimateFn().toString());\n        this._cssKeyframesDriver = new CssKeyframesDriver();\n    }\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    validateStyleProperty(prop) { return validateStyleProperty(prop); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    /**\n     * @param {?} elm1\n     * @param {?} elm2\n     * @return {?}\n     */\n    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @param {?} multi\n     * @return {?}\n     */\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    /**\n     * @param {?} element\n     * @param {?} prop\n     * @param {?=} defaultValue\n     * @return {?}\n     */\n    computeStyle(element, prop, defaultValue) {\n        return (/** @type {?} */ (((/** @type {?} */ (window.getComputedStyle(element))))[prop]));\n    }\n    /**\n     * @param {?} supported\n     * @return {?}\n     */\n    overrideWebAnimationsSupport(supported) { this._isNativeImpl = supported; }\n    /**\n     * @param {?} element\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @param {?=} scrubberAccessRequested\n     * @return {?}\n     */\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        /** @type {?} */\n        const useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;\n        if (useKeyframes) {\n            return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);\n        }\n        /** @type {?} */\n        const fill = delay == 0 ? 'both' : 'forwards';\n        /** @type {?} */\n        const playerOptions = { duration, delay, fill };\n        // we check for this to avoid having a null|undefined value be present\n        // for the easing (which results in an error for certain browsers #9752)\n        if (easing) {\n            playerOptions['easing'] = easing;\n        }\n        /** @type {?} */\n        const previousStyles = {};\n        /** @type {?} */\n        const previousWebAnimationPlayers = (/** @type {?} */ (previousPlayers.filter(player => player instanceof WebAnimationsPlayer)));\n        if (allowPreviousPlayerStylesMerge(duration, delay)) {\n            previousWebAnimationPlayers.forEach(player => {\n                /** @type {?} */\n                let styles = player.currentSnapshot;\n                Object.keys(styles).forEach(prop => previousStyles[prop] = styles[prop]);\n            });\n        }\n        keyframes = keyframes.map(styles => copyStyles(styles, false));\n        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n        return new WebAnimationsPlayer(element, keyframes, playerOptions);\n    }\n}\n/**\n * @return {?}\n */\nfunction supportsWebAnimations() {\n    return typeof getElementAnimateFn() === 'function';\n}\n/**\n * @return {?}\n */\nfunction getElementAnimateFn() {\n    return (isBrowser() && ((/** @type {?} */ (Element))).prototype['animate']) || {};\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationDriver, AnimationDriver as ɵAnimationDriver, Animation as ɵAnimation, AnimationStyleNormalizer as ɵAnimationStyleNormalizer, NoopAnimationStyleNormalizer as ɵNoopAnimationStyleNormalizer, WebAnimationsStyleNormalizer as ɵWebAnimationsStyleNormalizer, NoopAnimationDriver as ɵNoopAnimationDriver, AnimationEngine as ɵAnimationEngine, CssKeyframesDriver as ɵCssKeyframesDriver, CssKeyframesPlayer as ɵCssKeyframesPlayer, containsElement as ɵcontainsElement, invokeQuery as ɵinvokeQuery, matchesElement as ɵmatchesElement, validateStyleProperty as ɵvalidateStyleProperty, WebAnimationsDriver as ɵWebAnimationsDriver, supportsWebAnimations as ɵsupportsWebAnimations, WebAnimationsPlayer as ɵWebAnimationsPlayer, allowPreviousPlayerStylesMerge as ɵallowPreviousPlayerStylesMerge };\n//# sourceMappingURL=browser.js.map\n","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ViewEncapsulation, Injectable, RendererFactory2, Inject, NgZone, InjectionToken, NgModule } from '@angular/core';\nimport { DOCUMENT, ɵDomRendererFactory2, BrowserModule } from '@angular/platform-browser';\nimport { AnimationBuilder, sequence, AnimationFactory } from '@angular/animations';\nimport { ɵAnimationEngine, AnimationDriver, ɵAnimationStyleNormalizer, ɵsupportsWebAnimations, ɵWebAnimationsDriver, ɵCssKeyframesDriver, ɵWebAnimationsStyleNormalizer, ɵNoopAnimationDriver } from '@angular/animations/browser';\nimport { DOCUMENT as DOCUMENT$1 } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BrowserAnimationBuilder extends AnimationBuilder {\n    /**\n     * @param {?} rootRenderer\n     * @param {?} doc\n     */\n    constructor(rootRenderer, doc) {\n        super();\n        this._nextAnimationId = 0;\n        /** @type {?} */\n        const typeData = (/** @type {?} */ ({\n            id: '0',\n            encapsulation: ViewEncapsulation.None,\n            styles: [],\n            data: { animation: [] }\n        }));\n        this._renderer = (/** @type {?} */ (rootRenderer.createRenderer(doc.body, typeData)));\n    }\n    /**\n     * @param {?} animation\n     * @return {?}\n     */\n    build(animation) {\n        /** @type {?} */\n        const id = this._nextAnimationId.toString();\n        this._nextAnimationId++;\n        /** @type {?} */\n        const entry = Array.isArray(animation) ? sequence(animation) : animation;\n        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n        return new BrowserAnimationFactory(id, this._renderer);\n    }\n}\nBrowserAnimationBuilder.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nBrowserAnimationBuilder.ctorParameters = () => [\n    { type: RendererFactory2 },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nclass BrowserAnimationFactory extends AnimationFactory {\n    /**\n     * @param {?} _id\n     * @param {?} _renderer\n     */\n    constructor(_id, _renderer) {\n        super();\n        this._id = _id;\n        this._renderer = _renderer;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} options\n     * @return {?}\n     */\n    create(element, options) {\n        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n    }\n}\nclass RendererAnimationPlayer {\n    /**\n     * @param {?} id\n     * @param {?} element\n     * @param {?} options\n     * @param {?} _renderer\n     */\n    constructor(id, element, options, _renderer) {\n        this.id = id;\n        this.element = element;\n        this._renderer = _renderer;\n        this.parentPlayer = null;\n        this._started = false;\n        this.totalTime = 0;\n        this._command('create', options);\n    }\n    /**\n     * @private\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    _listen(eventName, callback) {\n        return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n    }\n    /**\n     * @private\n     * @param {?} command\n     * @param {...?} args\n     * @return {?}\n     */\n    _command(command, ...args) {\n        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDone(fn) { this._listen('done', fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onStart(fn) { this._listen('start', fn); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    onDestroy(fn) { this._listen('destroy', fn); }\n    /**\n     * @return {?}\n     */\n    init() { this._command('init'); }\n    /**\n     * @return {?}\n     */\n    hasStarted() { return this._started; }\n    /**\n     * @return {?}\n     */\n    play() {\n        this._command('play');\n        this._started = true;\n    }\n    /**\n     * @return {?}\n     */\n    pause() { this._command('pause'); }\n    /**\n     * @return {?}\n     */\n    restart() { this._command('restart'); }\n    /**\n     * @return {?}\n     */\n    finish() { this._command('finish'); }\n    /**\n     * @return {?}\n     */\n    destroy() { this._command('destroy'); }\n    /**\n     * @return {?}\n     */\n    reset() { this._command('reset'); }\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    setPosition(p) { this._command('setPosition', p); }\n    /**\n     * @return {?}\n     */\n    getPosition() { return 0; }\n}\n/**\n * @param {?} renderer\n * @param {?} element\n * @param {?} id\n * @param {?} command\n * @param {?} args\n * @return {?}\n */\nfunction issueAnimationCommand(renderer, element, id, command, args) {\n    return renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANIMATION_PREFIX = '@';\n/** @type {?} */\nconst DISABLE_ANIMATIONS_FLAG = '@.disabled';\nclass AnimationRendererFactory {\n    /**\n     * @param {?} delegate\n     * @param {?} engine\n     * @param {?} _zone\n     */\n    constructor(delegate, engine, _zone) {\n        this.delegate = delegate;\n        this.engine = engine;\n        this._zone = _zone;\n        this._currentId = 0;\n        this._microtaskId = 1;\n        this._animationCallbacksBuffer = [];\n        this._rendererCache = new Map();\n        this._cdRecurDepth = 0;\n        this.promise = Promise.resolve(0);\n        engine.onRemovalComplete = (element, delegate) => {\n            // Note: if an component element has a leave animation, and the component\n            // a host leave animation, the view engine will call `removeChild` for the parent\n            // component renderer as well as for the child component renderer.\n            // Therefore, we need to check if we already removed the element.\n            if (delegate && delegate.parentNode(element)) {\n                delegate.removeChild(element.parentNode, element);\n            }\n        };\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} type\n     * @return {?}\n     */\n    createRenderer(hostElement, type) {\n        /** @type {?} */\n        const EMPTY_NAMESPACE_ID = '';\n        // cache the delegates to find out which cached delegate can\n        // be used by which cached renderer\n        /** @type {?} */\n        const delegate = this.delegate.createRenderer(hostElement, type);\n        if (!hostElement || !type || !type.data || !type.data['animation']) {\n            /** @type {?} */\n            let renderer = this._rendererCache.get(delegate);\n            if (!renderer) {\n                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);\n                // only cache this result when the base renderer is used\n                this._rendererCache.set(delegate, renderer);\n            }\n            return renderer;\n        }\n        /** @type {?} */\n        const componentId = type.id;\n        /** @type {?} */\n        const namespaceId = type.id + '-' + this._currentId;\n        this._currentId++;\n        this.engine.register(namespaceId, hostElement);\n        /** @type {?} */\n        const animationTriggers = (/** @type {?} */ (type.data['animation']));\n        animationTriggers.forEach(trigger => this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger));\n        return new AnimationRenderer(this, namespaceId, delegate, this.engine);\n    }\n    /**\n     * @return {?}\n     */\n    begin() {\n        this._cdRecurDepth++;\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _scheduleCountTask() {\n        // always use promise to schedule microtask instead of use Zone\n        this.promise.then(() => { this._microtaskId++; });\n    }\n    /**\n     * \\@internal\n     * @param {?} count\n     * @param {?} fn\n     * @param {?} data\n     * @return {?}\n     */\n    scheduleListenerCallback(count, fn, data) {\n        if (count >= 0 && count < this._microtaskId) {\n            this._zone.run(() => fn(data));\n            return;\n        }\n        if (this._animationCallbacksBuffer.length == 0) {\n            Promise.resolve(null).then(() => {\n                this._zone.run(() => {\n                    this._animationCallbacksBuffer.forEach(tuple => {\n                        const [fn, data] = tuple;\n                        fn(data);\n                    });\n                    this._animationCallbacksBuffer = [];\n                });\n            });\n        }\n        this._animationCallbacksBuffer.push([fn, data]);\n    }\n    /**\n     * @return {?}\n     */\n    end() {\n        this._cdRecurDepth--;\n        // this is to prevent animations from running twice when an inner\n        // component does CD when a parent component instead has inserted it\n        if (this._cdRecurDepth == 0) {\n            this._zone.runOutsideAngular(() => {\n                this._scheduleCountTask();\n                this.engine.flush(this._microtaskId);\n            });\n        }\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() { return this.engine.whenRenderingDone(); }\n}\nAnimationRendererFactory.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nAnimationRendererFactory.ctorParameters = () => [\n    { type: RendererFactory2 },\n    { type: ɵAnimationEngine },\n    { type: NgZone }\n];\nclass BaseAnimationRenderer {\n    /**\n     * @param {?} namespaceId\n     * @param {?} delegate\n     * @param {?} engine\n     */\n    constructor(namespaceId, delegate, engine) {\n        this.namespaceId = namespaceId;\n        this.delegate = delegate;\n        this.engine = engine;\n        this.destroyNode = this.delegate.destroyNode ? (n) => (/** @type {?} */ (delegate.destroyNode))(n) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this.delegate.data; }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this.engine.destroy(this.namespaceId, this.delegate);\n        this.delegate.destroy();\n    }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        return this.delegate.createElement(name, namespace);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) { return this.delegate.createComment(value); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) { return this.delegate.createText(value); }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        this.delegate.appendChild(parent, newChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, false);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        this.delegate.insertBefore(parent, newChild, refChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, true);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        this.engine.onRemove(this.namespaceId, oldChild, this.delegate);\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return this.delegate.parentNode(node); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return this.delegate.nextSibling(node); }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) { this.delegate.addClass(el, name); }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) { this.delegate.removeClass(el, name); }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?=} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?=} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        this.delegate.removeStyle(el, style, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {\n            this.disableAnimations(el, !!value);\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { this.delegate.setValue(node, value); }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        return this.delegate.listen(target, eventName, callback);\n    }\n    /**\n     * @protected\n     * @param {?} element\n     * @param {?} value\n     * @return {?}\n     */\n    disableAnimations(element, value) {\n        this.engine.disableAnimations(element, value);\n    }\n}\nclass AnimationRenderer extends BaseAnimationRenderer {\n    /**\n     * @param {?} factory\n     * @param {?} namespaceId\n     * @param {?} delegate\n     * @param {?} engine\n     */\n    constructor(factory, namespaceId, delegate, engine) {\n        super(namespaceId, delegate, engine);\n        this.factory = factory;\n        this.namespaceId = namespaceId;\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX) {\n            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {\n                value = value === undefined ? true : !!value;\n                this.disableAnimations(el, (/** @type {?} */ (value)));\n            }\n            else {\n                this.engine.process(this.namespaceId, el, name.substr(1), value);\n            }\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        if (eventName.charAt(0) == ANIMATION_PREFIX) {\n            /** @type {?} */\n            const element = resolveElementFromTarget(target);\n            /** @type {?} */\n            let name = eventName.substr(1);\n            /** @type {?} */\n            let phase = '';\n            // @listener.phase is for trigger animation callbacks\n            // @@listener is for animation builder callbacks\n            if (name.charAt(0) != ANIMATION_PREFIX) {\n                [name, phase] = parseTriggerCallbackName(name);\n            }\n            return this.engine.listen(this.namespaceId, element, name, phase, event => {\n                /** @type {?} */\n                const countId = ((/** @type {?} */ (event)))['_data'] || -1;\n                this.factory.scheduleListenerCallback(countId, callback, event);\n            });\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction resolveElementFromTarget(target) {\n    switch (target) {\n        case 'body':\n            return document.body;\n        case 'document':\n            return document;\n        case 'window':\n            return window;\n        default:\n            return target;\n    }\n}\n/**\n * @param {?} triggerName\n * @return {?}\n */\nfunction parseTriggerCallbackName(triggerName) {\n    /** @type {?} */\n    const dotIndex = triggerName.indexOf('.');\n    /** @type {?} */\n    const trigger = triggerName.substring(0, dotIndex);\n    /** @type {?} */\n    const phase = triggerName.substr(dotIndex + 1);\n    return [trigger, phase];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InjectableAnimationEngine extends ɵAnimationEngine {\n    /**\n     * @param {?} doc\n     * @param {?} driver\n     * @param {?} normalizer\n     */\n    constructor(doc, driver, normalizer) {\n        super(doc.body, driver, normalizer);\n    }\n}\nInjectableAnimationEngine.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nInjectableAnimationEngine.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] },\n    { type: AnimationDriver },\n    { type: ɵAnimationStyleNormalizer }\n];\n/**\n * @return {?}\n */\nfunction instantiateSupportedAnimationDriver() {\n    return ɵsupportsWebAnimations() ? new ɵWebAnimationsDriver() : new ɵCssKeyframesDriver();\n}\n/**\n * @return {?}\n */\nfunction instantiateDefaultStyleNormalizer() {\n    return new ɵWebAnimationsStyleNormalizer();\n}\n/**\n * @param {?} renderer\n * @param {?} engine\n * @param {?} zone\n * @return {?}\n */\nfunction instantiateRendererFactory(renderer, engine, zone) {\n    return new AnimationRendererFactory(renderer, engine, zone);\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');\n/** @type {?} */\nconst SHARED_ANIMATION_PROVIDERS = [\n    { provide: AnimationBuilder, useClass: BrowserAnimationBuilder },\n    { provide: ɵAnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },\n    { provide: ɵAnimationEngine, useClass: InjectableAnimationEngine }, {\n        provide: RendererFactory2,\n        useFactory: instantiateRendererFactory,\n        deps: [ɵDomRendererFactory2, ɵAnimationEngine, NgZone]\n    }\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n * @type {?}\n */\nconst BROWSER_ANIMATIONS_PROVIDERS = [\n    { provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver },\n    { provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations' }, ...SHARED_ANIMATION_PROVIDERS\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n * @type {?}\n */\nconst BROWSER_NOOP_ANIMATIONS_PROVIDERS = [\n    { provide: AnimationDriver, useClass: ɵNoopAnimationDriver },\n    { provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations' }, ...SHARED_ANIMATION_PROVIDERS\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)\n * for use with animations. See [Animations](guide/animations).\n * \\@publicApi\n */\nclass BrowserAnimationsModule {\n}\nBrowserAnimationsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [BrowserModule],\n                providers: BROWSER_ANIMATIONS_PROVIDERS,\n            },] }\n];\n/**\n * A null player that must be imported to allow disabling of animations.\n * \\@publicApi\n */\nclass NoopAnimationsModule {\n}\nNoopAnimationsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [BrowserModule],\n                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseAnimationRenderer as ɵangular_packages_platform_browser_animations_animations_f, BROWSER_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_d, BROWSER_NOOP_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_e, instantiateDefaultStyleNormalizer as ɵangular_packages_platform_browser_animations_animations_b, instantiateRendererFactory as ɵangular_packages_platform_browser_animations_animations_c, instantiateSupportedAnimationDriver as ɵangular_packages_platform_browser_animations_animations_a, BrowserAnimationsModule, NoopAnimationsModule, ANIMATION_MODULE_TYPE, BrowserAnimationBuilder as ɵBrowserAnimationBuilder, BrowserAnimationFactory as ɵBrowserAnimationFactory, AnimationRenderer as ɵAnimationRenderer, AnimationRendererFactory as ɵAnimationRendererFactory, InjectableAnimationEngine as ɵInjectableAnimationEngine };\n//# sourceMappingURL=animations.js.map\n","import { ErrorHandler, Injectable, Injector } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { AppApi } from '../api/app.api';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppErrorHandler implements ErrorHandler {\r\n  constructor(private injector: Injector) {}\r\n\r\n  handleError(error: Error | HttpErrorResponse) {\r\n    const appApi = this.injector.get(AppApi);\r\n    console.log('There was an ERROR:', error);\r\n    appApi.notifyError(error);\r\n  }\r\n}\r\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\nexport const NEVER = new Observable(noop);\nexport function never() {\n    return NEVER;\n}\n//# sourceMappingURL=never.js.map","/**\n * @license Angular v7.2.7\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { isPlatformBrowser } from '@angular/common';\nimport { Injectable, InjectionToken, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule, ApplicationRef } from '@angular/core';\nimport { map, filter, switchMap, publish, take, tap } from 'rxjs/operators';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n/**\n * @param {?} message\n * @return {?}\n */\nfunction errorObservable(message) {\n    return defer(() => throwError(new Error(message)));\n}\n/**\n * \\@publicApi\n */\nclass NgswCommChannel {\n    /**\n     * @param {?} serviceWorker\n     */\n    constructor(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            /** @type {?} */\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n            /** @type {?} */\n            const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n            /** @type {?} */\n            const currentController = defer(() => of(serviceWorker.controller));\n            /** @type {?} */\n            const controllerWithChanges = concat(currentController, controllerChanges);\n            this.worker = controllerWithChanges.pipe(filter(c => !!c));\n            this.registration = (/** @type {?} */ ((this.worker.pipe(switchMap(() => serviceWorker.getRegistration())))));\n            /** @type {?} */\n            const rawEvents = fromEvent(serviceWorker, 'message');\n            /** @type {?} */\n            const rawEventPayload = rawEvents.pipe(map(event => event.data));\n            /** @type {?} */\n            const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n            /** @type {?} */\n            const events = (/** @type {?} */ (eventsUnconnected.pipe(publish())));\n            events.connect();\n            this.events = events;\n        }\n    }\n    /**\n     * @param {?} action\n     * @param {?} payload\n     * @return {?}\n     */\n    postMessage(action, payload) {\n        return this.worker\n            .pipe(take(1), tap((sw) => {\n            sw.postMessage(Object.assign({ action }, payload));\n        }))\n            .toPromise()\n            .then(() => undefined);\n    }\n    /**\n     * @param {?} type\n     * @param {?} payload\n     * @param {?} nonce\n     * @return {?}\n     */\n    postMessageWithStatus(type, payload, nonce) {\n        /** @type {?} */\n        const waitForStatus = this.waitForStatus(nonce);\n        /** @type {?} */\n        const postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then(() => undefined);\n    }\n    /**\n     * @return {?}\n     */\n    generateNonce() { return Math.round(Math.random() * 10000000); }\n    /**\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    eventsOfType(type) {\n        /** @type {?} */\n        const filterFn = (event) => event.type === type;\n        return this.events.pipe(filter(filterFn));\n    }\n    /**\n     * @template T\n     * @param {?} type\n     * @return {?}\n     */\n    nextEventOfType(type) {\n        return this.eventsOfType(type).pipe(take(1));\n    }\n    /**\n     * @param {?} nonce\n     * @return {?}\n     */\n    waitForStatus(nonce) {\n        return this.eventsOfType('STATUS')\n            .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error((/** @type {?} */ (event.error)));\n        }))\n            .toPromise();\n    }\n    /**\n     * @return {?}\n     */\n    get isEnabled() { return !!this.serviceWorker; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * \\@publicApi\n */\nclass SwPush {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new Subject();\n        if (!sw.isEnabled) {\n            this.messages = NEVER;\n            this.notificationClicks = NEVER;\n            this.subscription = NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n        this.notificationClicks =\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message) => message.data));\n        this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n        /** @type {?} */\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     * @return {?}\n     */\n    get isEnabled() { return this.sw.isEnabled; }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    requestSubscription(options) {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const pushOptions = { userVisibleOnly: true };\n        /** @type {?} */\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        /** @type {?} */\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\n            .toPromise()\n            .then(sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    unsubscribe() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const doUnsubscribe = (sub) => {\n            if (sub === null) {\n                throw new Error('Not subscribed to push notifications.');\n            }\n            return sub.unsubscribe().then(success => {\n                if (!success) {\n                    throw new Error('Unsubscribe failed!');\n                }\n                this.subscriptionChanges.next(null);\n            });\n        };\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    /**\n     * @private\n     * @param {?} input\n     * @return {?}\n     */\n    decodeBase64(input) { return atob(input); }\n}\nSwPush.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSwPush.ctorParameters = () => [\n    { type: NgswCommChannel }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * \\@publicApi\n */\nclass SwUpdate {\n    /**\n     * @param {?} sw\n     */\n    constructor(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.available = NEVER;\n            this.activated = NEVER;\n            return;\n        }\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     * @return {?}\n     */\n    get isEnabled() { return this.sw.isEnabled; }\n    /**\n     * @return {?}\n     */\n    checkForUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce }, statusNonce);\n    }\n    /**\n     * @return {?}\n     */\n    activateUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        /** @type {?} */\n        const statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce }, statusNonce);\n    }\n}\nSwUpdate.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSwUpdate.ctorParameters = () => [\n    { type: NgswCommChannel }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass RegistrationOptions {\n}\n/** @type {?} */\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\n/**\n * @param {?} injector\n * @param {?} script\n * @param {?} options\n * @param {?} platformId\n * @return {?}\n */\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    /** @type {?} */\n    const initializer = () => {\n        /** @type {?} */\n        const app = injector.get(ApplicationRef);\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        /** @type {?} */\n        const whenStable = app.isStable.pipe(filter((stable) => !!stable), take(1)).toPromise();\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        // Don't return the Promise, as that will block the application until the SW is registered, and\n        // cause a crash if the SW registration fails.\n        whenStable.then(() => navigator.serviceWorker.register(script, { scope: options.scope }));\n    };\n    return initializer;\n}\n/**\n * @param {?} opts\n * @param {?} platformId\n * @return {?}\n */\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * \\@publicApi\n */\nclass ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     * @param {?} script\n     * @param {?=} opts\n     * @return {?}\n     */\n    static register(script, opts = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: RegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [RegistrationOptions, PLATFORM_ID]\n                },\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [Injector, SCRIPT, RegistrationOptions, PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nServiceWorkerModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [SwPush, SwUpdate],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgswCommChannel as ɵangular_packages_service_worker_service_worker_a, RegistrationOptions as ɵangular_packages_service_worker_service_worker_b, SCRIPT as ɵangular_packages_service_worker_service_worker_c, ngswAppInitializer as ɵangular_packages_service_worker_service_worker_d, ngswCommChannelFactory as ɵangular_packages_service_worker_service_worker_e, ServiceWorkerModule, SwPush, SwUpdate };\n//# sourceMappingURL=service-worker.js.map\n","import { Subject } from '../Subject';\nimport { multicast } from './multicast';\nexport function publish(selector) {\n    return selector ?\n        multicast(() => new Subject(), selector) :\n        multicast(new Subject());\n}\n//# sourceMappingURL=publish.js.map","import { RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { ActionReducerMap, Store } from '@ngrx/store';\r\n// import { routerReducer, RouterReducerState } from '@ngrx/router-store';\r\n\r\n// reducers\r\nimport { IAppPlayer, player, ActionTypes } from './app-player';\r\nimport { INowPlaylist, nowPlaylist } from './now-playlist';\r\nimport { IUserProfile, user, UserProfileActions } from './user-profile';\r\nimport { IPlayerSearch, search, PlayerSearchActions } from './player-search';\r\nimport { IAppCore, appCore } from './app-core';\r\n\r\n// The top level Echoes Player application interface\r\n// each reducer is reponsible for manipulating a certain state\r\nexport interface EchoesState {\r\n  player: IAppPlayer;\r\n  nowPlaylist: INowPlaylist;\r\n  user: IUserProfile;\r\n  search: IPlayerSearch;\r\n  appCore: IAppCore;\r\n  // routerReducer: RouterReducerState;\r\n}\r\n\r\nexport let EchoesReducers: ActionReducerMap<EchoesState> = {\r\n  player,\r\n  nowPlaylist,\r\n  user,\r\n  search,\r\n  appCore\r\n  // routerReducer\r\n};\r\n\r\nexport let EchoesActions = [\r\n  ActionTypes,\r\n  UserProfileActions,\r\n  PlayerSearchActions\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { Store, StoreModule, ActionReducer, MetaReducer } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { localStorageSync } from 'ngrx-store-localstorage';\r\n// import { StoreRouterConnectingModule, RouterStateSerializer } from '@ngrx/router-store';\r\n\r\nimport { environment } from '@env/environment';\r\nimport { EchoesState, EchoesReducers, EchoesActions } from './reducers';\r\nimport { NavigationSerializer } from './router-store';\r\n\r\n// import { storeFreeze } from 'ngrx-store-freeze';\r\n\r\nexport { EchoesState } from './reducers';\r\n\r\nexport function localStorageSyncReducer(\r\n  reducer: ActionReducer<any>\r\n): ActionReducer<any> {\r\n  return localStorageSync({\r\n    keys: Object.keys(EchoesReducers),\r\n    rehydrate: true\r\n  })(reducer);\r\n}\r\nconst metaReducers: MetaReducer<any, any>[] = [localStorageSyncReducer];\r\nconst optionalImports = [];\r\nif (!environment.production) {\r\n  // Note that you must instrument after importing StoreModule\r\n  optionalImports.push(StoreDevtoolsModule.instrument({ maxAge: 25 }));\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    StoreModule.forRoot(EchoesReducers, { metaReducers }),\r\n    // StoreRouterConnectingModule,\r\n    ...optionalImports\r\n  ],\r\n  declarations: [],\r\n  exports: [],\r\n  providers: [\r\n    ...EchoesActions\r\n    // { provide: RouterStateSerializer, useClass: NavigationSerializer }\r\n  ]\r\n})\r\nexport class CoreStoreModule {}\r\n","import { NowPlaylistService } from '@core/services';\r\nimport { Store } from '@ngrx/store';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { Injectable } from '@angular/core';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { toPayload } from '@utils/data.utils';\r\n\r\nimport { of, Observable, defer } from 'rxjs';\r\nimport {\r\n  map,\r\n  switchMap,\r\n  tap,\r\n  withLatestFrom,\r\n  catchError\r\n} from 'rxjs/operators';\r\n\r\nimport * as AppPlayer from '@store/app-player';\r\nimport { YoutubePlayerService } from '@core/services/youtube-player.service';\r\nimport { YoutubeVideosInfo } from '@core/services/youtube-videos-info.service';\r\n\r\n@Injectable()\r\nexport class AppPlayerEffects {\r\n  constructor(\r\n    public actions$: Actions,\r\n    public store: Store<EchoesState>,\r\n    public youtubePlayerService: YoutubePlayerService,\r\n    public youtubeVideosInfo: YoutubeVideosInfo\r\n  ) {}\r\n\r\n  @Effect() init$ = defer(() => of(new AppPlayer.ResetFullScreen()));\r\n\r\n  @Effect()\r\n  playVideo$ = this.actions$.pipe(\r\n    ofType(AppPlayer.ActionTypes.PLAY),\r\n    map(toPayload),\r\n    switchMap(media =>\r\n      of(this.youtubePlayerService.playVideo(media)).pipe(\r\n        map((video: any) => new AppPlayer.PlayStarted(video))\r\n      )\r\n    )\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  pauseVideo$ = this.actions$.pipe(\r\n    ofType(AppPlayer.ActionTypes.PAUSE),\r\n    tap(() => this.youtubePlayerService.pause())\r\n  );\r\n\r\n  @Effect()\r\n  loadAndPlay$ = this.actions$.pipe(\r\n    ofType(AppPlayer.ActionTypes.LOAD_AND_PLAY),\r\n    map(toPayload),\r\n    switchMap((media: any) =>\r\n      this.youtubeVideosInfo\r\n        .fetchVideoData(media.id || media.id.videoId)\r\n        .pipe(map((video: any) => new AppPlayer.PlayVideo(video)))\r\n    ),\r\n    catchError(() => of({ type: 'LOAD_AND_PLAY_ERROR' }))\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  toggleFullscreen$ = this.actions$.pipe(\r\n    ofType(AppPlayer.ActionTypes.FULLSCREEN),\r\n    withLatestFrom(this.store.select(AppPlayer.getPlayerFullscreen)),\r\n    tap((states: [any, { on; height; width }]) =>\r\n      this.youtubePlayerService.setSize(states[1].height, states[1].width)\r\n    )\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  setupPlayer$ = this.actions$.pipe(\r\n    ofType(AppPlayer.ActionTypes.SETUP_PLAYER),\r\n    map(toPayload),\r\n    tap(player => this.youtubePlayerService.setupPlayer(player))\r\n  );\r\n\r\n  @Effect()\r\n  playerStateChange$ = this.actions$.pipe(\r\n    ofType(AppPlayer.ActionTypes.PLAYER_STATE_CHANGE),\r\n    map(toPayload),\r\n    map((data: YT.PlayerState) => new AppPlayer.UpdateState(data))\r\n  );\r\n}\r\n","import { of, defer } from 'rxjs';\r\nimport { map, switchMap, tap, catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { UserProfileActions, GoogleBasicProfile } from '@store/user-profile';\r\nimport * as UserActions from '@store/user-profile';\r\nimport { toPayload } from '@utils/data.utils';\r\n\r\nimport { UserProfile } from '@core/services/user-profile.service';\r\nimport { Authorization } from '@core/services/authorization.service';\r\n\r\n@Injectable()\r\nexport class UserProfileEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private userProfileActions: UserProfileActions,\r\n    private userProfile: UserProfile,\r\n    private auth: Authorization\r\n  ) { }\r\n\r\n  @Effect()\r\n  checkUserAuth$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.CHECK_USER_AUTH),\r\n    switchMap(() => this.auth.loadAuth()),\r\n    map(\r\n      (googleUser: gapi.auth2.GoogleUser) =>\r\n        new UserActions.UserSigninSuccess(googleUser)\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  updateToken$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.UPDATE_TOKEN),\r\n    map(toPayload),\r\n    map((token: string) => (this.auth.accessToken = token)),\r\n    switchMap(token =>\r\n      this.userProfile.getPlaylists(true).pipe(\r\n        map(response => this.userProfileActions.updateData(response)),\r\n        catchError((error: Error) => {\r\n          console.log(`error in fetching user's playlists ${error}`);\r\n          return of(new UserActions.UserPlaylistsFetchError(error));\r\n        })\r\n      )\r\n    ),\r\n  );\r\n\r\n  @Effect()\r\n  addUserPlaylists$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.UPDATE),\r\n    map(toPayload),\r\n    map((data: any) => this.userProfileActions.addPlaylists(data.items))\r\n  );\r\n\r\n  @Effect()\r\n  updateNextPageToken$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.UPDATE),\r\n    map(toPayload),\r\n    map(\r\n      ({ nextPageToken }: any) =>\r\n        nextPageToken\r\n          ? this.userProfileActions.updatePageToken(nextPageToken)\r\n          : this.userProfileActions.userProfileCompleted()\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  getMorePlaylists$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.UPDATE_NEXT_PAGE_TOKEN),\r\n    map(toPayload),\r\n    tap((pageToken: string) => this.userProfile.updatePageToken(pageToken)),\r\n    switchMap((pageToken: string) => this.userProfile.getPlaylists(false)),\r\n    map(response => this.userProfileActions.updateData(response))\r\n  );\r\n\r\n  @Effect()\r\n  userProfileRecieved$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_PROFILE_RECIEVED),\r\n    map(toPayload),\r\n    map(profile => this.userProfile.toUserJson(profile)),\r\n    map((profile: GoogleBasicProfile) =>\r\n      this.userProfileActions.updateUserProfile(profile)\r\n    )\r\n  );\r\n\r\n  // SIGN IN/OUT EFFECTS\r\n  @Effect()\r\n  userSignin$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_SIGNIN),\r\n    map(() => new UserActions.UserSigninStart())\r\n  );\r\n\r\n  @Effect()\r\n  userSigninStart$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_SIGNIN_START),\r\n    switchMap(() =>\r\n      this.auth\r\n        .signIn()\r\n        .pipe(catchError(error => this.auth.handleFailedLogin(error)))\r\n    ),\r\n    map((response: any) => new UserActions.UserSigninSuccess(response))\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  userSigninSuccess$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_SIGNIN_SUCCESS),\r\n    tap((response: any) => this.auth.setAuthTimer(response))\r\n  );\r\n\r\n  @Effect()\r\n  updateTokenAfterSigninSuccess$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_SIGNIN_SUCCESS),\r\n    map(toPayload),\r\n    map((googleUser: gapi.auth2.GoogleUser) =>\r\n      this.userProfileActions.updateToken(this.auth.extractToken(googleUser))\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  updateProfileAfterSigninSuccess$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_SIGNIN_SUCCESS),\r\n    map(toPayload),\r\n    map((googleUser: gapi.auth2.GoogleUser) =>\r\n      this.userProfileActions.userProfileRecieved(googleUser.getBasicProfile())\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  userSignout$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_SIGNOUT),\r\n    switchMap(() => this.auth.signOut()),\r\n    map(() => new UserActions.UserSignoutSuccess())\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  userSignoutSuccess$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_SIGNOUT_SUCCESS),\r\n    tap(() => this.auth.disposeAutoSignIn())\r\n  );\r\n}\r\n","import { YoutubeVideosInfo } from '@core/services';\r\nimport { Store } from '@ngrx/store';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { of } from 'rxjs';\r\n\r\nimport {\r\n  map,\r\n  switchMap,\r\n  filter,\r\n  withLatestFrom,\r\n  catchError,\r\n  mergeMap\r\n} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport * as fromPlayerSearch from '@store/player-search';\r\nimport { toPayload } from '@utils/data.utils';\r\n\r\nimport { YoutubeSearch } from '@core/services/youtube.search';\r\n\r\n@Injectable()\r\nexport class PlayerSearchEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private store: Store<EchoesState>,\r\n    private playerSearchActions: fromPlayerSearch.PlayerSearchActions,\r\n    private youtubeSearch: YoutubeSearch,\r\n    private youtubeVideosInfo: YoutubeVideosInfo\r\n  ) {}\r\n\r\n  @Effect()\r\n  searchQuery$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.SEARCH_NEW_QUERY),\r\n    map(toPayload),\r\n    withLatestFrom(this.store),\r\n    map((latest: any[]) => latest[1]),\r\n    switchMap((store: EchoesState) =>\r\n      this.youtubeSearch\r\n        .resetPageToken()\r\n        .searchFor(\r\n          store.search.searchType,\r\n          store.search.query,\r\n          store.search.queryParams\r\n        )\r\n        .pipe(\r\n          map(youtubeResponse =>\r\n            this.playerSearchActions.searchResultsReturned(youtubeResponse)\r\n          ),\r\n          catchError(err => of(this.playerSearchActions.errorInSearch(err)))\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  resetVideos$ = this.actions$.pipe(\r\n    ofType(\r\n      fromPlayerSearch.PlayerSearchActions.SEARCH_NEW_QUERY,\r\n      fromPlayerSearch.PlayerSearchActions.PLAYLISTS_SEARCH_START.action\r\n    ),\r\n    map(() => this.playerSearchActions.resetResults())\r\n  );\r\n\r\n  @Effect()\r\n  searchResultsReturned$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.SEARCH_RESULTS_RETURNED),\r\n    map(toPayload),\r\n    withLatestFrom(this.store.select(fromPlayerSearch.getSearchType)),\r\n    map((states: [any[], string]) => {\r\n      if (states[1] === fromPlayerSearch.CSearchTypes.VIDEO) {\r\n        return fromPlayerSearch.PlayerSearchActions.ADD_METADATA_TO_VIDEOS.creator(\r\n          states[0]\r\n        );\r\n      }\r\n      return fromPlayerSearch.PlayerSearchActions.ADD_PLAYLISTS_TO_RESULTS.creator(\r\n        states[0]\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  addPlaylistsToResults$ = this.actions$.pipe(\r\n    ofType(\r\n      fromPlayerSearch.PlayerSearchActions.ADD_PLAYLISTS_TO_RESULTS.action\r\n    ),\r\n    map(toPayload),\r\n    map(result => fromPlayerSearch.AddResultsAction.creator(result.items))\r\n  );\r\n\r\n  @Effect()\r\n  addMetadataToVideos$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.ADD_METADATA_TO_VIDEOS.action),\r\n    map(toPayload),\r\n    map((medias: { items: GoogleApiYouTubeSearchResource[] }) =>\r\n      medias.items.map(media => media.id.videoId).join(',')\r\n    ),\r\n    mergeMap((mediaIds: string) =>\r\n      this.youtubeVideosInfo\r\n        .fetchVideosData(mediaIds)\r\n        .pipe(\r\n          map((videos: any) =>\r\n            fromPlayerSearch.AddResultsAction.creator(videos)\r\n          )\r\n        )\r\n    )\r\n  );\r\n\r\n  @Effect()\r\n  searchMoreForQuery$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.SEARCH_MORE_FOR_QUERY),\r\n    map(toPayload),\r\n    withLatestFrom(this.store),\r\n    map((latest: any[]) => latest[1]),\r\n    filter((store: EchoesState) => !store.search.isSearching),\r\n    mergeMap((store: EchoesState) => {\r\n      this.youtubeSearch.searchMore(store.search.pageToken.next);\r\n      return this.youtubeSearch\r\n        .searchFor(\r\n          store.search.searchType,\r\n          store.search.query,\r\n          store.search.queryParams\r\n        )\r\n        .pipe(\r\n          map(youtubeResponse =>\r\n            this.playerSearchActions.searchResultsReturned(youtubeResponse)\r\n          )\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  searchMoreSearchStarted$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.SEARCH_MORE_FOR_QUERY),\r\n    map(toPayload),\r\n    withLatestFrom(this.store.select(fromPlayerSearch.getIsSearching)),\r\n    filter((states: [any, boolean]) => !states[1]),\r\n    map(() => this.playerSearchActions.searchStarted())\r\n  );\r\n\r\n  @Effect()\r\n  updatePreset$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.UPDATE_QUERY_PARAM),\r\n    map(() => new fromPlayerSearch.SearchCurrentQuery())\r\n  );\r\n\r\n  @Effect()\r\n  resetVideosAfterParamUpdate$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.UPDATE_QUERY_PARAM),\r\n    map(() => this.playerSearchActions.resetResults())\r\n  );\r\n\r\n  @Effect()\r\n  resetPageToken$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.RESET_PAGE_TOKEN),\r\n    map(toPayload),\r\n    mergeMap(() => of(this.youtubeSearch.resetPageToken())),\r\n    map(() => ({ type: 'PAGE_RESET_DONE' }))\r\n  );\r\n\r\n  @Effect()\r\n  searchCurrentQuery$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.SEARCH_CURRENT_QUERY),\r\n    map(toPayload),\r\n    withLatestFrom(this.store.select(fromPlayerSearch.getQuery)),\r\n    map((latest: any[]) => latest[1]),\r\n    map((query: string) => this.playerSearchActions.searchNewQuery(query))\r\n  );\r\n\r\n  // Playlists SEARCH EFFECTS\r\n  @Effect()\r\n  playlistsSearchStart$ = this.actions$.pipe(\r\n    ofType(fromPlayerSearch.PlayerSearchActions.PLAYLISTS_SEARCH_START.action),\r\n    withLatestFrom(this.store),\r\n    map((latest: any[]) => latest[1]),\r\n    switchMap((store: EchoesState) =>\r\n      this.youtubeSearch\r\n        .searchForPlaylist(store.search.query, store.search.queryParams)\r\n        .pipe(\r\n          map((youtubeResponse: any) =>\r\n            fromPlayerSearch.AddResultsAction.creator(youtubeResponse.items)\r\n          ),\r\n          catchError(err => of(this.playerSearchActions.errorInSearch(err)))\r\n        )\r\n    )\r\n  );\r\n}\r\n","import { Store } from '@ngrx/store';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { Injectable } from '@angular/core';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\n\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport * as fromAppCore from '@store/app-core';\r\nimport { VersionCheckerService } from '@core/services/version-checker.service';\r\n\r\n@Injectable()\r\nexport class AppCoreEffects {\r\n  constructor(\r\n    public actions$: Actions,\r\n    public store: Store<EchoesState>,\r\n    public versionCheckerService: VersionCheckerService\r\n  ) {}\r\n\r\n  @Effect({ dispatch: false })\r\n  updateAppVersion$ = this.actions$.pipe(\r\n    ofType(fromAppCore.ActionTypes.APP_UPDATE_VERSION),\r\n    map(() => this.versionCheckerService.updateVersion())\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  checkForNewAppVersion$ = this.actions$.pipe(\r\n    ofType(fromAppCore.ActionTypes.APP_CHECK_VERSION),\r\n    map(() => this.versionCheckerService.checkForVersion())\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport * as fromRouterActions from '@store/router-store';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class RouterEffects {\r\n  @Effect({ dispatch: false })\r\n  navigate$ = this.actions$.pipe(\r\n    ofType(fromRouterActions.GO),\r\n    map((action: fromRouterActions.Go) => action.payload),\r\n    tap(({ path, query: queryParams, extras }) =>\r\n      this.router.navigate(path, { queryParams, ...extras })\r\n    )\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateBack$ = this.actions$.pipe(\r\n    ofType(fromRouterActions.BACK),\r\n    tap(() => this.location.back())\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  navigateForward$ = this.actions$.pipe(\r\n    ofType(fromRouterActions.FORWARD),\r\n    tap(() => this.location.forward())\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private router: Router,\r\n    private location: Location\r\n  ) {}\r\n}\r\n","import { Store } from '@ngrx/store';\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Effect, Actions, ofType } from '@ngrx/effects';\r\nimport { UserProfileActions } from '@store/user-profile';\r\nimport * as PlayerSearch from '@store/player-search';\r\nimport { ActionTypes } from '@store/app-player';\r\nimport { AnalyticsService } from '@core/services/analytics.service';\r\nimport { EchoesState } from '@store/reducers';\r\nimport { toPayload } from '@utils/data.utils';\r\nimport { tap, map, switchMap, withLatestFrom } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AnalyticsEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private store: Store<EchoesState>,\r\n    private userProfileActions: UserProfileActions,\r\n    private analytics: AnalyticsService\r\n  ) {}\r\n\r\n  @Effect({ dispatch: false })\r\n  trackToken$ = this.actions$.pipe(\r\n    ofType(UserProfileActions.USER_PROFILE_RECIEVED),\r\n    map(toPayload),\r\n    tap(() => this.analytics.trackSignin())\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  trackSearch$ = this.actions$.pipe(\r\n    ofType(\r\n      PlayerSearch.PlayerSearchActions.SEARCH_NEW_QUERY,\r\n      PlayerSearch.PlayerSearchActions.SEARCH_MORE_FOR_QUERY\r\n    ),\r\n    map(toPayload),\r\n    withLatestFrom(this.store.select(PlayerSearch.getSearchType)),\r\n    tap((states: any[]) => this.analytics.trackSearch(states[1].presets))\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  trackPlay$ = this.actions$.pipe(\r\n    ofType(ActionTypes.PLAY_STARTED),\r\n    map(toPayload),\r\n    tap(() => this.analytics.trackVideoPlay())\r\n  );\r\n}\r\n","import { NgModule, Optional, SkipSelf, ErrorHandler } from '@angular/core';\r\nimport { throwIfAlreadyLoaded } from './module-imports.guards';\r\n\r\nimport { CoreStoreModule } from './store';\r\nimport { AppEffectsModules } from './effects';\r\n\r\nimport { APP_SERVICES } from './services';\r\nimport { APP_RESOLVERS } from './resolvers';\r\nimport { APP_APIS } from './api';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AppHttpInterceptor } from './services/app-http-interceptor';\r\n\r\n@NgModule({\r\n  imports: [CoreStoreModule, AppEffectsModules],\r\n  declarations: [],\r\n  exports: [CoreStoreModule],\r\n  providers: [\r\n    ...APP_SERVICES,\r\n    ...APP_RESOLVERS,\r\n    ...APP_APIS,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AppHttpInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CoreModule {\r\n  // constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\r\n  //   throwIfAlreadyLoaded(parentModule, 'CoreModule');\r\n  // }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { AppPlayerComponent } from './app-player.component';\r\nimport { MediaInfoComponent } from './media-info';\r\nimport { PlayerControlsComponent } from './player-controls/player-controls.component';\r\nimport { PlayerResizerComponent } from './player-resizer/player-resizer.component';\r\nimport { ImageBlurComponent } from './image-blur';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    AppPlayerComponent,\r\n    MediaInfoComponent,\r\n    PlayerControlsComponent,\r\n    PlayerResizerComponent,\r\n    ImageBlurComponent\r\n  ],\r\n  exports: [\r\n    AppPlayerComponent\r\n  ]\r\n})\r\nexport class AppPlayerModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { AppBrandComponent } from './app-brand.component';\r\n\r\n@NgModule({\r\n  imports: [SharedModule],\r\n  exports: [AppBrandComponent],\r\n  declarations: [AppBrandComponent],\r\n  providers: [],\r\n})\r\nexport class AppBrandModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { AppNavigatorComponent } from './app-navigator.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    RouterModule\r\n  ],\r\n  declarations: [\r\n    AppNavigatorComponent\r\n  ],\r\n  exports: [\r\n    AppNavigatorComponent\r\n  ],\r\n  providers: []\r\n})\r\nexport class AppNavigatorModule { }\r\n\r\n// export * from './navigator.component';\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { NowPlayingComponent } from './now-playing.component';\r\nimport { NowPlaylistComponent, NowPlaylistTrackComponent } from './now-playlist';\r\nimport { NowPlaylistFilterComponent } from './now-playlist-filter';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    NowPlayingComponent,\r\n    NowPlaylistComponent,\r\n    NowPlaylistTrackComponent,\r\n    NowPlaylistFilterComponent\r\n  ],\r\n  exports: [\r\n    NowPlayingComponent\r\n  ]\r\n})\r\nexport class NowPlayingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { AppSidebarComponent } from './app-sidebar.component';\r\nimport { AppBrandModule } from '../app-brand';\r\nimport { AppNavigatorModule } from '../app-navigator';\r\nimport { NowPlayingModule } from '../now-playing';\r\n\r\nimport { AppSidebarProxy } from './app-sidebar.proxy';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    AppBrandModule,\r\n    AppNavigatorModule,\r\n    NowPlayingModule\r\n  ],\r\n  exports: [AppSidebarComponent],\r\n  declarations: [AppSidebarComponent],\r\n  providers: [AppSidebarProxy],\r\n})\r\nexport class AppSidebarModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\nimport { AppErrorHandlerComponent } from './app-error-handler.component';\r\nimport { AppErrorHandlerProxy } from './app-error-handler.proxy';\r\n\r\n@NgModule({\r\n  declarations: [AppErrorHandlerComponent],\r\n  imports: [SharedModule],\r\n  exports: [AppErrorHandlerComponent],\r\n  providers: [AppErrorHandlerProxy]\r\n})\r\nexport class AppErrorHandlerModule {}\r\n","import { ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\n\r\nimport { AppSearchComponent } from './app-search.component';\r\nimport { AppNavbarModule } from '../app-navbar';\r\nimport { YoutubeVideosComponent } from './youtube-videos';\r\nimport { YoutubePlaylistsComponent } from './youtube-playlists';\r\nimport { PlayerSearchComponent } from './player-search';\r\nimport { SearchNavigatorComponent } from './search-navigator';\r\nimport { routing } from './app-search.routing';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, AppNavbarModule, ReactiveFormsModule, routing],\r\n  declarations: [\r\n    AppSearchComponent,\r\n    YoutubeVideosComponent,\r\n    YoutubePlaylistsComponent,\r\n    PlayerSearchComponent,\r\n    SearchNavigatorComponent\r\n  ],\r\n  exports: [AppSearchComponent],\r\n  providers: []\r\n})\r\nexport class AppSearchModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest\r\n} from '@angular/common/http';\r\nimport { AppErrorHandler } from './error-handler';\r\nimport { Observable, EMPTY } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ErrorMessages } from '../store/app-core';\r\n\r\n@Injectable()\r\nexport class AppHttpInterceptor implements HttpInterceptor {\r\n  constructor(private errorHandler: AppErrorHandler) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const onLine = navigator.onLine;\r\n    if (!onLine) {\r\n      this.handleError(ErrorMessages.OFFLINE);\r\n      return EMPTY;\r\n    }\r\n    return next.handle(req).pipe(\r\n      tap(\r\n        event => {},\r\n        err => {\r\n          this.handleError(\r\n            `${ErrorMessages.RESPONSE_ERROR}, More Details: ${err.message}`\r\n          );\r\n          if (err.status === 404) {\r\n          }\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  handleError(message: string) {\r\n    this.errorHandler.handleError({\r\n      message\r\n    } as Error);\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function withLatestFrom(...args) {\n    return (source) => {\n        let project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        const observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nclass WithLatestFromOperator {\n    constructor(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    }\n}\nclass WithLatestFromSubscriber extends OuterSubscriber {\n    constructor(destination, observables, project) {\n        super(destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        const len = observables.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (let i = 0; i < len; i++) {\n            let observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        const toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            const found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    }\n    notifyComplete() {\n    }\n    _next(value) {\n        if (this.toRespond.length === 0) {\n            const args = [value, ...this.values];\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    }\n    _tryProject(args) {\n        let result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=withLatestFrom.js.map"],"sourceRoot":""}
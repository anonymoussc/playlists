{"version":3,"sources":["webpack:///./src/app/containers/user/index.ts","webpack:///./src/app/containers/user/user.component.ts","webpack:///./src/app/containers/user/user.component.ts.UserComponent.html","webpack:///./src/app/containers/user/user-player.service.ts","webpack:///./src/app/containers/user/playlists/playlists.component.ts","webpack:///./src/app/containers/user/playlists/playlists.component.ts.PlaylistsComponent.html","webpack:///./src/app/containers/user/user.guard.ts"],"names":["UserModule","user_component_UserComponent","[object Object]","appApi","store","this","playlists$","select","user_profile_selectors","currentPlaylist$","isSignedIn$","signinUser","_l","core","_v","en","$event","ad","_co","component","icon_directive_ngfactory","icon_directive","name","_ck","app_navbar_component_ngfactory","app_navbar_component","authorization_service","app_api","header","headerIcon","View_UserComponent_1","common","ngIf","router","transform","user_player_service_UserPlayerService","nowPlaylistService","userProfile","playlist","fetchPlaylistItems","id","subscribe","items","dispatch","now_playlist","updateIndexByMedia","app_player","media","PlaylistsComponent","userPlayerService","state","user","playlists","playSelectedPlaylist","queuePlaylist","youtube_playlist_ngfactory","youtube_playlist","link","play","queue","context","$implicit","View_PlaylistsComponent_1","ngForOf","AuthGuard","authorization","route","url","checkLogin","canActivate","isSignIn","navigate"],"mappings":"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","file":"0.f2f2ae0b0290535a733f.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '@shared/index';\r\nimport { AppNavbarModule } from '../app-navbar';\r\n\r\nimport { PlaylistViewModule } from '../playlist-view'\r\n\r\nimport { UserComponent } from './user.component';\r\nimport { PlaylistsComponent } from './playlists';\r\n// import { PlaylistViewComponent, PlaylistResolver, PlaylistVideosResolver } from '@shared/components/playlist-view';\r\n\r\nimport { AuthGuard } from './user.guard';\r\nimport { UserPlayerService } from './user-player.service';\r\nimport { routing } from './user.routing';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    AppNavbarModule,\r\n    PlaylistViewModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    UserComponent,\r\n    PlaylistsComponent\r\n  ],\r\n  exports: [\r\n    UserComponent\r\n  ],\r\n  providers: [\r\n    AuthGuard,\r\n    UserPlayerService,\r\n    // PlaylistResolver,\r\n    // PlaylistVideosResolver\r\n  ]\r\n})\r\nexport class UserModule { }\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { EchoesState } from '@core/store';\r\n\r\nimport * as UserProfile from '@core/store/user-profile/user-profile.selectors';\r\nimport { AppApi } from '@api/app.api';\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./user.scss'],\r\n  template: `\r\n  <article>\r\n    <app-navbar\r\n      [header]=\"'My Profile - My Playlists'\"\r\n      [headerIcon]=\"'heart-o'\"\r\n    ></app-navbar>\r\n    <p *ngIf=\"!(isSignedIn$ | async)\" class=\"well lead\">\r\n      To view your playlists in youtube, you need to sign in.\r\n      <button class=\"btn btn-lg btn-primary\"\r\n        (click)=\"signInUser()\">\r\n        <icon name=\"google\"></icon> Sign In\r\n      </button>\r\n    </p>\r\n    <router-outlet></router-outlet>\r\n  </article>\r\n  `\r\n})\r\nexport class UserComponent implements OnInit {\r\n  playlists$ = this.store.select(UserProfile.getUserPlaylists);\r\n  currentPlaylist$ = this.store.select(UserProfile.getUserViewPlaylist);\r\n  isSignedIn$ = this.store.select(UserProfile.getIsUserSignedIn);\r\n\r\n  constructor(private appApi: AppApi, public store: Store<EchoesState>) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  signInUser() {\r\n    this.appApi.signinUser();\r\n  }\r\n}\r\n","\n  <article>\n    <app-navbar\n      [header]=\"'My Profile - My Playlists'\"\n      [headerIcon]=\"'heart-o'\"\n    ></app-navbar>\n    <p *ngIf=\"!(isSignedIn$ | async)\" class=\"well lead\">\n      To view your playlists in youtube, you need to sign in.\n      <button class=\"btn btn-lg btn-primary\"\n        (click)=\"signInUser()\">\n        <icon name=\"google\"></icon> Sign In\n      </button>\n    </p>\n    <router-outlet></router-outlet>\n  </article>\n  ","import { Store } from '@ngrx/store';\r\nimport { Injectable } from '@angular/core';\r\nimport { YoutubePlayerService, NowPlaylistService, UserProfile } from '@core/services';\r\nimport { EchoesState } from '@core/store';\r\nimport * as NowPlaylist from '@core/store/now-playlist';\r\nimport * as AppPlayer from '@core/store/app-player';\r\n\r\n@Injectable()\r\nexport class UserPlayerService {\r\n  constructor(\r\n    private nowPlaylistService: NowPlaylistService,\r\n    private userProfile: UserProfile,\r\n    private store: Store<EchoesState>\r\n  ) { }\r\n\r\n  playSelectedPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.userProfile\r\n      .fetchPlaylistItems(playlist.id, '')\r\n      .subscribe((items: GoogleApiYouTubeVideoResource[]) => {\r\n        this.store.dispatch(new NowPlaylist.QueueVideos(items));\r\n        this.nowPlaylistService.updateIndexByMedia(items[0].id);\r\n        this.store.dispatch(new AppPlayer.LoadAndPlay(items[0]));\r\n      });\r\n  }\r\n\r\n  queuePlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.userProfile\r\n      .fetchPlaylistItems(playlist.id, '')\r\n      .subscribe((items: GoogleApiYouTubeVideoResource[]) => {\r\n        this.store.dispatch(new NowPlaylist.QueueVideos(items));\r\n        return items;\r\n      });\r\n  }\r\n\r\n  queueVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.store.dispatch(new NowPlaylist.QueueVideo(media));\r\n  }\r\n\r\n  playVideo(media: GoogleApiYouTubeVideoResource) {\r\n    this.store.dispatch(new AppPlayer.LoadAndPlay(media));\r\n    this.store.dispatch(new NowPlaylist.QueueVideo(media));\r\n    this.store.dispatch(new NowPlaylist.SelectVideo(media));\r\n  }\r\n}\r\n","import { UserPlayerService } from '../user-player.service';\r\nimport { EchoesState } from '@core/store';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'playlists',\r\n  template: `\r\n  <section class=\"videos-list\">\r\n    <div class=\"list-unstyled ux-maker youtube-items-container clearfix\">\r\n      <youtube-playlist\r\n        *ngFor=\"let playlist of playlists$ | async\"\r\n        [media]=\"playlist\"\r\n        link=\"/user/\"\r\n        (play)=\"playSelectedPlaylist(playlist)\"\r\n        (queue)=\"queueSelectedPlaylist(playlist)\">\r\n      </youtube-playlist>\r\n    </div>\r\n  </section>\r\n  `\r\n})\r\nexport class PlaylistsComponent implements OnInit {\r\n  playlists$ = this.store.select(state => state.user.playlists);\r\n\r\n  constructor(\r\n    private store: Store<EchoesState>,\r\n    private userPlayerService: UserPlayerService\r\n  ) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  playSelectedPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.userPlayerService.playSelectedPlaylist(playlist);\r\n  }\r\n\r\n  queueSelectedPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\r\n    this.userPlayerService.queuePlaylist(playlist);\r\n  }\r\n}\r\n","\n  <section class=\"videos-list\">\n    <div class=\"list-unstyled ux-maker youtube-items-container clearfix\">\n      <youtube-playlist\n        *ngFor=\"let playlist of playlists$ | async\"\n        [media]=\"playlist\"\n        link=\"/user/\"\n        (play)=\"playSelectedPlaylist(playlist)\"\n        (queue)=\"queueSelectedPlaylist(playlist)\">\n      </youtube-playlist>\n    </div>\n  </section>\n  ","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { Authorization } from '@core/services';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate, CanActivateChild {\r\n  constructor(private authorization: Authorization, private router: Router) { }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    // console.log('AuthGuard#canActivate called', { state });\r\n    const url: string = state.url;\r\n    return this.checkLogin(url);\r\n  }\r\n\r\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    return this.canActivate(route, state);\r\n  }\r\n\r\n  checkLogin(url: string): boolean {\r\n    if (this.authorization.isSignIn()) { return true; }\r\n\r\n    // Store the attempted URL for redirecting\r\n    // this.authService.redirectUrl = url;\r\n\r\n    // Navigate to the login page with extras\r\n    this.router.navigate(['/user']);\r\n    return false;\r\n  }\r\n}\r\n"],"sourceRoot":""}